<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android 音频基础知识</title>
    <url>/2018/10/26/android-audio-base/</url>
    <content><![CDATA[<p>关于音频技术是一门庞大且很专业的学术，这里不会阐述该知识的底层原理知识（比如：声音的原理，音波的正弦平面波合成等等），主要介绍音频相关的一些基本的知识概念，以及在实际开发过程中需要掌握关键API等。</p>
<h2 id="声音"><a class="header-anchor" href="#声音"></a>声音</h2>
<p>“声音是振动产生的<code>声波</code>，通过<code>介质</code>（<code>气体</code>，<code>固体</code>，<code>液体</code>）传播并能被人或动物<code>听觉器官</code>所感知的<code>波动</code>现象”。声音的频率一般以<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUI1JUFCJUU1JTg1JUI5">赫兹<i class="fa fa-external-link-alt"></i></span>表示，记为<code>Hz</code>，指每秒周期性震动的次数</p>
<span id="more"></span>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1541400788/blog/trasound_range_diagram.png" alt="trasound_range_diagram"></p>
<blockquote>
<p>图片来自<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JUEzJUIwJUU5JTlGJUIz">Wikipedia<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<ul>
<li>红：次声波（由火山爆发、龙卷风、雷暴、台风等许多灾害性事件发生前都会产生出次声波，人们就可以利用这种前兆来预报灾害事件的发生）</li>
<li>蓝：可听声波（20~20000Hz）</li>
<li>绿：超声波（广泛应用于工业、军事、医疗等行业。在工业上，常用超声波来清洗精密零件，原理是利用超声波在清洗液中产生震荡波，使清洗液产生瞬间的小气泡，从而冲洗零件的每个角落）</li>
</ul>
<h2 id="音频开发应用场景"><a class="header-anchor" href="#音频开发应用场景"></a>音频开发应用场景</h2>
<ul>
<li>音频播放器，录音机</li>
<li>语音电话</li>
<li>音视频监控</li>
<li>音视频直播</li>
<li>音视频编辑/处理软件</li>
<li>蓝牙耳机/音响等</li>
</ul>
<h2 id="音频开发具体内容"><a class="header-anchor" href="#音频开发具体内容"></a>音频开发具体内容</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaW5jb2Rlci5vcmcvMjAxOC8xMC8yNy9hbmRyb2lkLWF1ZGlvLw==">音频采集/播放<i class="fa fa-external-link-alt"></i></span></li>
<li>音频算法处理（去噪，静音检测，回声消除，音效处理，功放/增强，混音/分离，等等）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaW5jb2Rlci5vcmcvMjAxOC8xMS8wNy9hbmRyb2lkLWF1ZGlvLWNvbnZlcnQv">音频的编解码和格式转换<i class="fa fa-external-link-alt"></i></span></li>
<li>音频传输协议的开发（<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJDJTlBJUU4JUFGJTlEJUU1JThGJTkxJUU4JUI1JUI3JUU1JThEJThGJUU4JUFFJUFF">SIP<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JTk3JThEJUU3JTg5JTk5JUU4JUE2JThGJUU3JUFGJTg0IyVFOCU5NyU4RCVFNyU4OSU5OSVFNyVBQiU4QiVFOSVBQiU5NCVFOCU4MSVCMiVFOSU5RiVCMyVFOCVBOCU4QSVFNSU4MiVCMyVFOCVCQyVCOCVFOCVBNiU4RiVFNyVBRiU4NCVFRiVCQyU4OEEyRFAlRUYlQkMlODk=">A2DP<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JTk3JThEJUU3JTg5JTk5JUU4JUE2JThGJUU3JUFGJTg0IyVFOSU5RiVCMyVFOSVBMiU5MSVFRiVCQyU4RiVFOCVBNyU4NiVFOSVBMiU5MSVFOCVCRiU5QyVFNyVBOCU4QiVFNiU4RSVBNyVFNSU4OCVCNiVFOSU4NSU4RCVFNyVCRCVBRSVFNiU5NiU4NyVFNCVCQiVCNiVFRiVCQyU4OEFWUkNQJUVGJUJDJTg5">AVRCP<i class="fa fa-external-link-alt"></i></span>，等等）
<ul>
<li>SIP（Session Initiation Protocol：会话发起协议）：一个由IETF MMUSIC工作组开发的协议，作为标准被提议用于建立，修改和终止包括视频，语音，即时通信，在线游戏和虚拟现实等多种多媒体元素在内的交互式用户会话</li>
<li>A2DP（Advance Audio Distribution Profile：蓝牙立体声音频传输规范）：规定了使用蓝牙异步传输信道方式，传输高质量音乐文件数据的协议堆栈软件和使用方法，基于该协议就能通过以蓝牙方式传输高质量的立体声音乐</li>
<li>AVRCP（Audio Video Remote Control Profile：音频／视频远程控制配置文件）：用于提供控制 TV、Hi-Fi 设备等的标准接口。此配置文件用于许可单个远程控制设备。</li>
</ul>
</li>
</ul>
<h2 id="音频基础知识"><a class="header-anchor" href="#音频基础知识"></a>音频基础知识</h2>
<p>声音经过麦克风采集后，得到是模拟信号，接着我们需要用程序将采集得到模拟型号，进行转换得到数字信号，这样我们才可以存储，交换等</p>
<blockquote>
<p>关于声音信息得到模拟信号的转换，我们一般是无需关心，设备的麦克风这些都已经帮我们转换好了，我们需要关心的是从麦克风得到的模拟信号，如何去转换为数字信号，最终保存为音频文件</p>
</blockquote>
<h3 id="模拟信号转数字信号"><a class="header-anchor" href="#模拟信号转数字信号"></a>模拟信号转数字信号</h3>
<p>模拟信号一般通过<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JTg0JTg4JUU4JUExJTlEJUU3JUI3JUE4JUU3JUEyJUJDJUU4JUFBJUJGJUU4JUFFJThB">PCM（Pulse-code modulation：脉冲编码调制）<i class="fa fa-external-link-alt"></i></span>方法转换为数字信号</p>
<h4 id="转换步骤"><a class="header-anchor" href="#转换步骤"></a>转换步骤</h4>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JThGJTk2JUU2JUE4JUEz">采样<i class="fa fa-external-link-alt"></i></span>：将一段时间内的连续信号转为离散信号
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUJGJTlFJUU3JUJCJUFEJUU0JUJGJUExJUU1JThGJUI3">模拟信号<i class="fa fa-external-link-alt"></i></span>本身是一种连续信号，它在一定的时间范围内可以有无限多个不同的取值</li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUE2JUJCJUU2JTk1JUEzJUU0JUJGJUExJUU1JThGJUI3">数值信号<i class="fa fa-external-link-alt"></i></span>指在取值上是离散的，不连续的信号</li>
</ul>
</li>
<li>量化：值采样得到后的数据，我们用多少位的二进制数字来表示声音的振幅</li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUFBJTlFJUU5JTlGJUIzJUU3JUI3JUE4JUU3JUEyJUJD">编码<i class="fa fa-external-link-alt"></i></span>：将采样量化后的数据按照一定的格式进行记录</li>
</ol>
<h4 id="PCM"><a class="header-anchor" href="#PCM"></a>PCM</h4>
<p>音频编码最多只能做到无限接近，至少目前的技术只能这样，相对自然界的信号，任何数字音频编码方式都是有损，因为无法完全还原。在计算机应用中，能够达到最高保真的就是PCM编码，因此PCM约定俗成了无损编码（PCM代表了数字音频中最佳的保真水平，并不意味着PCM就能够确保信号绝对保真，PCM也只能做到最大程度的无限接近）</p>
<p>经过采集和量化后的声音信号已经是数字形式了，但是为了便于计算机的存储，处理，传输，还必须按照一定的要求进行数据<code>压缩</code>和<code>编码</code></p>
<h5 id="压缩"><a class="header-anchor" href="#压缩"></a>压缩</h5>
<p>一种音频文件格式可以支持多种编码，例如AVI文件格式，但多数的音频文件仅支持一种音频编码</p>
<p>主要的音频文件格式：</p>
<ul>
<li>无损格式，例如：<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvV0FW">WAV<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvRkxBQw==">FLAC<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvTW9ua2V5JTI3c19BdWRpbw==">APE<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvQXBwbGVfTG9zc2xlc3M=">ALAC<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvV2F2UGFjaw==">WavPack(WV)<i class="fa fa-external-link-alt"></i></span></li>
<li>有损格式，例如：<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvTVAz">MP3<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JTgwJUIyJUU5JTlBJThFJUU5JTlGJUIzJUU4JUE4JThBJUU3JUI3JUE4JUU3JUEyJUJD">AAC<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvVm9yYmlz">Ogg Vorbis<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvT3B1c18lMjglRTklOUYlQjMlRTklQTIlOTElRTYlQTAlQkMlRTUlQkMlOEYlMjk=">Opus<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h5 id="编码"><a class="header-anchor" href="#编码"></a>编码</h5>
<p>根据编码方式的不同，音频编码技术分为三种</p>
<ul>
<li>波形编码：音质质量高，编码速率也很高。脉冲编码调变(PCM)、自适应增量调制( ADM )、Adaptive( ADPCM )等都属于该类编码器。</li>
<li>参数编码：音质质量低，编码速率也很低</li>
<li>混合编码：音质和速率介于波形编码，参数编码之间</li>
</ul>
<blockquote>
<p>为什么音频需要编码</p>
</blockquote>
<ol>
<li>PCM所量化得到的数据是原始无损的数据，文件很大，不利于传播，存储等</li>
<li>如果都是未压缩的文件，那么基本无法做到差异化即部分需要知识产权保护的组织或机构等</li>
</ol>
<h2 id="音频开发中重要参数"><a class="header-anchor" href="#音频开发中重要参数"></a>音频开发中重要参数</h2>
<h3 id="采样率（samplerate）"><a class="header-anchor" href="#采样率（samplerate）"></a><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JTg3JTg3JUU2JUEwJUI3JUU3JThFJTg3">采样率（samplerate）<i class="fa fa-external-link-alt"></i></span></h3>
<p>指每秒从连续信号中提取并组成离散信号的采样个数，也就是1S内，对模拟信号进行多少次采样；采样频率越高，说明采样点之间越密集，记录这段音频所用的数据量就越大，因此音质也就越好</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIyMDI3NzIy">为什么通用的采样率是44.1kHz？<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="量化精度（位宽）"><a class="header-anchor" href="#量化精度（位宽）"></a>量化精度（位宽）</h3>
<p>用二进位来表示每一个采样值，也称为量化位数，声音信号的量化位数一般是4，6，8，12或16 bits.</p>
<p>这个数值的数据类型大小可以是：4bit，8bit，16bit，32bit等等，位数越多，表示的就越精细，声音的质量也就越好，当然文件大小也会成倍增大</p>
<h3 id="声道数（channels）"><a class="header-anchor" href="#声道数（channels）"></a>声道数（channels）</h3>
<p>由于音频的采集和播放是可以叠加的，因此，可以同时从多个音频源采集声音，并分别输出到不同的扬声器，故声道数一般表示声音录制时的音源数量或回放时相应的扬声器数量</p>
<ul>
<li>单声道（Mono）：1</li>
<li>双声道（Stereo）：2</li>
</ul>
<h3 id="比特率"><a class="header-anchor" href="#比特率"></a>比特率</h3>
<p>比特率是音频文件每秒占据的字节数（比特数）</p>
<p>比特率规定适用“比特每秒”（<code>bit/s</code>或<code>bps</code>）为单位，其中<code>ps</code>指的是<code>/s</code>，即每秒。</p>
<p>通常我们在音乐播放软件中看到的音乐质量『标准(128kbit/s)，较高(198kbit/s)，极高(320kbit/s)』表述的即比特率</p>
<h3 id="音频帧（frame）"><a class="header-anchor" href="#音频帧（frame）"></a>音频帧（frame）</h3>
<p>视频每一帧就是一张图像，而音频数据是流式，本身没有明确的一帧帧的概念，在实际的应用中，为了音频算法处理/传输的方便，一般约定俗称2.5ms~60ms为单位的数据量为一帧音频。</p>
<h3 id="理论音频的大小"><a class="header-anchor" href="#理论音频的大小"></a>理论音频的大小</h3>
<p>假设某通道的音频信号是采样率为8kHz，位宽为16bit，20ms一帧，双通道，则一帧音频数据的大小为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 一帧音频的大小</span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">8000</span> x 16bit x <span class="number">0.</span>02s  x <span class="number">2</span> = <span class="number">5120</span> bit = <span class="number">640</span> <span class="type">byte</span>;</span><br></pre></td></tr></table></figure>
<h2 id="音频处理开源项目"><a class="header-anchor" href="#音频处理开源项目"></a>音频处理开源项目</h2>
<h3 id="VoIP相关"><a class="header-anchor" href="#VoIP相关"></a>VoIP相关</h3>
<p>基于IP的语音传输（英语：Voice over Internet Protocol，缩写为VoIP）是一种语音通话技术，经由网际协议（IP）来达成语音通话与多媒体会议，也就是经由互联网来进行通信。其他非正式的名称有IP电话（IP telephony）、互联网电话（Internet telephony）、宽带电话（broadband telephony）以及宽带电话服务（broadband phone service）。</p>
<ul>
<li>imsdroid</li>
<li>sipdroid</li>
<li>csipsimple</li>
<li>linphone</li>
<li>WebRTC</li>
</ul>
<h3 id="算法相关"><a class="header-anchor" href="#算法相关"></a>算法相关</h3>
<ul>
<li>ffmpeg</li>
<li>speex</li>
</ul>
<h3 id="其他"><a class="header-anchor" href="#其他"></a>其他</h3>
<p>MP3编码库</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvbGFtZQ==">Lame<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="Android提供相关API"><a class="header-anchor" href="#Android提供相关API"></a>Android提供相关API</h2>
<ul>
<li>音频采集：MediaRecoder，AudioRecord</li>
<li>音频播放：SoundPool，MediaPlayer，AudioTrack</li>
<li>音频编解码：MediaCodec</li>
<li>NDK API：OpenSL ES</li>
</ul>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUFBJTlFJUU5JTlGJUIzJUU3JUI3JUE4JUU3JUEyJUJD">语音编码<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JTgwJUIyJUU5JTlBJThFJUU5JTlGJUIzJUU4JUE4JThBJUU3JUI3JUE4JUU3JUEyJUJD">高级音频编码 ● AAC<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly95cS5hbGl5dW4uY29tL2FydGljbGVzLzYyODEwOQ==">音频技术可以延展众多应用场景<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>media</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 音频录制与播放</title>
    <url>/2018/10/27/android-audio/</url>
    <content><![CDATA[<p>上一篇主要介绍了音频相关的一些基础知识，本篇主要介绍在Android系统中如何进行音频的录制，播放</p>
<h2 id="音频录制"><a class="header-anchor" href="#音频录制"></a>音频录制</h2>
<p>Android SDK中提供了<code>AudioRecord</code>，<code>MediaRecorder</code>两个API经行音频的录制，具体的优缺点等如下：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvbWVkaWEvQXVkaW9SZWNvcmQ=">AudioRecord<i class="fa fa-external-link-alt"></i></span> 『added in API level 3』(基于字节流录音)：<br>
优点：可以实现语音的实时处理，进行边录边播，对音频的实时处理。<br>
缺点：输出的是PCM的语音数据，如果保存成音频文件是不能被播放器播放的。要用到这个去进行处理。<br>
适用场景：需要实时处理分析的录音场景等，如：会说话的汤姆猫『<span class="exturl" data-url="aHR0cHM6Ly9pdHVuZXMuYXBwbGUuY29tL2NuL2FwcC8lRTQlQkMlOUElRTglQUYlQjQlRTglQUYlOUQlRTclOUElODQlRTYlQjElQTQlRTUlQTclODYlRTclOEMlQUIvaWQzNzcxOTQ2ODg/bXQ9OA==">AppStore<i class="fa fa-external-link-alt"></i></span> | <span class="exturl" data-url="aHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPWNvbS5vdXRmaXQ3LnRhbGtpbmd0b20maGw9emg=">GooglePlay<i class="fa fa-external-link-alt"></i></span>』</li>
</ul>
<span id="more"></span>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvbWVkaWEvTWVkaWFSZWNvcmRlcg==">MediaRecorder<i class="fa fa-external-link-alt"></i></span> 『added in API level 1』(基于文件音视频录制)：<br>
优点：封装度很高，操作简单，无需处理中间录制过程；录制的音频文件是经过压缩的，需要设置编码器；录制的音频文件可以使用系统自带的播放器播放<br>
缺点：无法实现实时处理音频，输出的音频格式少。<br>
适用场景：录制过程需要实时处理的场景等</li>
</ul>
<h2 id="音频播放"><a class="header-anchor" href="#音频播放"></a>音频播放</h2>
<ul>
<li>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvbWVkaWEvQXVkaW9UcmFjaw==">AudioTrack<i class="fa fa-external-link-alt"></i></span>『added in API level 3』：<br>
AudioTrack 则更接近底层，提供了非常强大的控制能力，支持低延迟播放，适合流媒体和VoIP语音电话等场景</p>
</li>
<li>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvbWVkaWEvU291bmRQb29s">SoundPool<i class="fa fa-external-link-alt"></i></span> 『added in API level 1』：<br>
优点：主要用于播放一些较短的声音片段，支持从程序的资源或文件系统加载；CPU的资源占用量低、反应延迟小，并且可以加载多个音频到<code>SoundPool</code>中，通过资源ID来管理<br>
缺点：SoundPool加载资源，最大只能申请 <strong>1MB</strong> 的内存控件，因此只能用来播放一些很短的声音片段<br>
适用场景：播放短，反应要求高的音频</p>
</li>
<li>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvbWVkaWEvTWVkaWFQbGF5ZXI=">MediaPlayer<i class="fa fa-external-link-alt"></i></span> 『added in API level 1』(基于字节流音视频播放)：<br>
优点：支持本地，网络音频资源的播放<br>
缺点：资源占用量较高、加载延迟时间较长；不支持多个音频同时播放等<br>
适用场景：播放长音频</p>
</li>
</ul>
<blockquote>
<p>Google官方给出了<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvdG9waWNzL21lZGlhL21lZGlhLWZvcm1hdHMjYXVkaW8tZm9ybWF0cw==">兼容支持<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="AudioRecord"><a class="header-anchor" href="#AudioRecord"></a>AudioRecord</h2>
<h3 id="录制流程"><a class="header-anchor" href="#录制流程"></a>录制流程</h3>
<ol>
<li>构造一个<code>AudioRecord</code>对象，其中需要的最小音频缓存<code>buffer</code>大小可以通过<code>getMinBufferSize()</code>方法得到，如果<code>buffer</code>容量过小，将导致对象构造失败</li>
<li>初始化一个<code>buffer</code>，该<code>buffer</code> 大于等于<code>AudioRecord</code>对象用于写音频数据的<code>buffer</code>大小</li>
<li>开始录音</li>
<li>创建一个数据流，一边从<code>AudioRecord</code>中读取音频数据到初始化的<code>buffer</code>，一边将<code>buffer</code>中的数据导入数据流</li>
<li>关闭数据流</li>
<li>停止录音</li>
</ol>
<h3 id="参数配置"><a class="header-anchor" href="#参数配置"></a>参数配置</h3>
<ul>
<li>audioSource ：音频采集的输入源
<ul>
<li>DEFAULT（默认）</li>
<li>VOICE_RECOGNITION（用于语音识别，等同于DEFAULT）</li>
<li>MIC（由手机麦克风输入）</li>
<li>VOICE_COMMUNICATION（用于VoIP应用）</li>
</ul>
</li>
<li>sampleRateInHz：采样率<br>
目前44100Hz是唯一可以保证兼容所有Android手机的采样率</li>
<li>channelConfig：通道数的配置
<ul>
<li>CHANNEL_IN_MONO：单通道</li>
<li>CHANNEL_IN_STEREO：双通道</li>
</ul>
</li>
<li>audioFormat：数据位宽
<ul>
<li>ENCODING_PCM_8BIT：8bit</li>
<li>ENCODING_PCM_16BIT：16bit</li>
</ul>
</li>
<li>bufferSizeInBytes：AudioRecord 内部的音频缓冲区的大小，该缓冲区的值不能低于一帧“音频帧”（Frame）的大小</li>
</ul>
<h3 id="示例代码"><a class="header-anchor" href="#示例代码"></a>示例代码</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AudioCapturer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;AudioCapturer&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_SOURCE</span> <span class="operator">=</span> MediaRecorder.AudioSource.MIC;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_SAMPLE_RATE</span> <span class="operator">=</span> <span class="number">44100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CHANNEL_CONFIG</span> <span class="operator">=</span> AudioFormat.CHANNEL_IN_MONO;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_AUDIO_FORMAT</span> <span class="operator">=</span> AudioFormat.ENCODING_PCM_16BIT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AudioRecord mAudioRecord;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mMinBufferSize</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread mCaptureThread; </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">mIsCaptureStarted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">mIsLoopExit</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OnAudioFrameCapturedListener mAudioFrameCapturedListener;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OnAudioFrameCapturedListener</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAudioFrameCaptured</span><span class="params">(<span class="type">byte</span>[] audioData)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCaptureStarted</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mIsCaptureStarted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOnAudioFrameCapturedListener</span><span class="params">(OnAudioFrameCapturedListener listener)</span> &#123;</span><br><span class="line">        mAudioFrameCapturedListener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startCapture</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startCapture(DEFAULT_SOURCE, DEFAULT_SAMPLE_RATE, DEFAULT_CHANNEL_CONFIG,</span><br><span class="line">            DEFAULT_AUDIO_FORMAT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startCapture</span><span class="params">(<span class="type">int</span> audioSource, <span class="type">int</span> sampleRateInHz, <span class="type">int</span> channelConfig, <span class="type">int</span> audioFormat)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mIsCaptureStarted) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Capture already started !&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        mMinBufferSize = AudioRecord.getMinBufferSize(sampleRateInHz,channelConfig,audioFormat);</span><br><span class="line">        <span class="keyword">if</span> (mMinBufferSize == AudioRecord.ERROR_BAD_VALUE) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Invalid parameter !&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.d(TAG , <span class="string">&quot;getMinBufferSize = &quot;</span>+mMinBufferSize+<span class="string">&quot; bytes !&quot;</span>);</span><br><span class="line"></span><br><span class="line">        mAudioRecord = <span class="keyword">new</span> <span class="title class_">AudioRecord</span>(audioSource,sampleRateInHz,channelConfig,audioFormat,mMinBufferSize);</span><br><span class="line">        <span class="keyword">if</span> (mAudioRecord.getState() == AudioRecord.STATE_UNINITIALIZED) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;AudioRecord initialize fail !&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mAudioRecord.startRecording();</span><br><span class="line"></span><br><span class="line">        mIsLoopExit = <span class="literal">false</span>;</span><br><span class="line">        mCaptureThread = <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">AudioCaptureRunnable</span>());</span><br><span class="line">        mCaptureThread.start();</span><br><span class="line"></span><br><span class="line">        mIsCaptureStarted = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Start audio capture success !&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stopCapture</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!mIsCaptureStarted) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mIsLoopExit = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mCaptureThread.interrupt();</span><br><span class="line">            mCaptureThread.join(<span class="number">1000</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mAudioRecord.getRecordingState() == AudioRecord.RECORDSTATE_RECORDING) &#123;</span><br><span class="line">            mAudioRecord.stop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mAudioRecord.release();</span><br><span class="line"></span><br><span class="line">        mIsCaptureStarted = <span class="literal">false</span>;</span><br><span class="line">        mAudioFrameCapturedListener = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Stop audio capture success !&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">AudioCaptureRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!mIsLoopExit) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[mMinBufferSize];</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> mAudioRecord.read(buffer, <span class="number">0</span>, mMinBufferSize);</span><br><span class="line">                <span class="keyword">if</span> (ret == AudioRecord.ERROR_INVALID_OPERATION) &#123;</span><br><span class="line">                    Log.e(TAG , <span class="string">&quot;Error ERROR_INVALID_OPERATION&quot;</span>);</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ret == AudioRecord.ERROR_BAD_VALUE) &#123;</span><br><span class="line">                    Log.e(TAG , <span class="string">&quot;Error ERROR_BAD_VALUE&quot;</span>);</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">else</span> &#123; </span><br><span class="line">                    <span class="keyword">if</span> (mAudioFrameCapturedListener != <span class="literal">null</span>) &#123;</span><br><span class="line">                        mAudioFrameCapturedListener.onAudioFrameCaptured(buffer);</span><br><span class="line">                    &#125;   </span><br><span class="line">                    Log.d(TAG , <span class="string">&quot;OK, Captured &quot;</span>+ret+<span class="string">&quot; bytes !&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AudioTrack"><a class="header-anchor" href="#AudioTrack"></a>AudioTrack</h2>
<h3 id="播放流程"><a class="header-anchor" href="#播放流程"></a>播放流程</h3>
<ol>
<li>配置参数，初始化内部的音频播放缓冲区到，如果<code>buffer</code>容量过小，将导致对象构造失败</li>
<li>开始播放</li>
<li>需要一个线程，不断地向 AudioTrack 的缓冲区<code>写入</code>音频数据，注意，这个过程一定要及时，否则就会出现<code>underrun</code>的错误，该错误在音频开发中比较常见，意味着应用层没有及时地“送入”音频数据，导致内部的音频播放缓冲区为空</li>
<li>停止播放，释放资源</li>
</ol>
<h3 id="参数配置-v2"><a class="header-anchor" href="#参数配置-v2"></a>参数配置</h3>
<ul>
<li>streamType：当前应用使用的哪一种音频管理策略<br>
当系统有多个进程需要播放音频时，这个管理策略会决定最终的展现效果
<ul>
<li>STREAM_VOCIE_CALL：电话声音</li>
<li>STREAM_SYSTEM：系统声音</li>
<li>STREAM_RING：铃声</li>
<li>STREAM_MUSCI：音乐声</li>
<li>STREAM_ALARM：警告声</li>
<li>STREAM_NOTIFICATION：通知声</li>
</ul>
</li>
<li>sampleRateInHz：采样率<br>
采样率的取值范围必须在 4000Hz～192000Hz 之间</li>
<li>channelConfig：通道数的配置
<ul>
<li>CHANNEL_IN_MONO：单通道</li>
<li>CHANNEL_IN_STEREO：双通道</li>
</ul>
</li>
<li>audioFormat：数据位宽
<ul>
<li>ENCODING_PCM_8BIT：8bit</li>
<li>ENCODING_PCM_16BIT：16bit</li>
</ul>
</li>
<li>bufferSizeInBytes：配置的是 AudioTrack 内部的音频缓冲区的大小，该缓冲区的值不能低于一帧“音频帧”（Frame）的大小</li>
<li>mode：AudioTrack 播放模式
<ul>
<li>MODE_STATIC<br>
static：一次性将所有的数据都写入播放缓冲区，简单高效，通常用于播放铃声、系统提醒的音频片段</li>
<li>MODE_STREAM<br>
streaming：按照一定的时间间隔不间断地写入音频数据，理论上它可用于任何音频播放的场景</li>
</ul>
</li>
</ul>
<h3 id="示例代码-v2"><a class="header-anchor" href="#示例代码-v2"></a>示例代码</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AudioPlayer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;AudioPlayer&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_STREAM_TYPE</span> <span class="operator">=</span> AudioManager.STREAM_MUSIC;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_SAMPLE_RATE</span> <span class="operator">=</span> <span class="number">44100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CHANNEL_CONFIG</span> <span class="operator">=</span> AudioFormat.CHANNEL_IN_STEREO;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_AUDIO_FORMAT</span> <span class="operator">=</span> AudioFormat.ENCODING_PCM_16BIT;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_PLAY_MODE</span> <span class="operator">=</span> AudioTrack.MODE_STREAM;</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">mIsPlayStarted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mMinBufferSize</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> AudioTrack mAudioTrack;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startPlayer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startPlayer(DEFAULT_STREAM_TYPE,DEFAULT_SAMPLE_RATE,DEFAULT_CHANNEL_CONFIG,DEFAULT_AUDIO_FORMAT);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startPlayer</span><span class="params">(<span class="type">int</span> streamType, <span class="type">int</span> sampleRateInHz, <span class="type">int</span> channelConfig, <span class="type">int</span> audioFormat)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (mIsPlayStarted) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Player already started !&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        mMinBufferSize = AudioTrack.getMinBufferSize(sampleRateInHz,channelConfig,audioFormat);</span><br><span class="line">        <span class="keyword">if</span> (mMinBufferSize == AudioTrack.ERROR_BAD_VALUE) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Invalid parameter !&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.d(TAG , <span class="string">&quot;getMinBufferSize = &quot;</span>+mMinBufferSize+<span class="string">&quot; bytes !&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        mAudioTrack = <span class="keyword">new</span> <span class="title class_">AudioTrack</span>(streamType,sampleRateInHz,</span><br><span class="line">                            channelConfig,audioFormat,mMinBufferSize,DEFAULT_PLAY_MODE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mAudioTrack.getState() == AudioTrack.STATE_UNINITIALIZED) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;AudioTrack initialize fail !&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;            </span><br><span class="line">        </span><br><span class="line">        mIsPlayStarted = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Start audio player success !&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinBufferSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mMinBufferSize;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stopPlayer</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!mIsPlayStarted) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (mAudioTrack.getPlayState() == AudioTrack.PLAYSTATE_PLAYING) &#123;</span><br><span class="line">            mAudioTrack.stop();                        </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        mAudioTrack.release();</span><br><span class="line">        mIsPlayStarted = <span class="literal">false</span>;</span><br><span class="line">           </span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Stop audio player success !&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">play</span><span class="params">(<span class="type">byte</span>[] audioData, <span class="type">int</span> offsetInBytes, <span class="type">int</span> sizeInBytes)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!mIsPlayStarted) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Player not started !&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (sizeInBytes &lt; mMinBufferSize) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;audio data is not enough !&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (mAudioTrack.write(audioData,offsetInBytes,sizeInBytes) != sizeInBytes) &#123;                </span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Could not write all the samples to the audio device !&quot;</span>);</span><br><span class="line">        &#125;                                   </span><br><span class="line">                                                   </span><br><span class="line">        mAudioTrack.play();</span><br><span class="line">        </span><br><span class="line">        Log.d(TAG , <span class="string">&quot;OK, Played &quot;</span>+sizeInBytes+<span class="string">&quot; bytes !&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="MediaRecorder"><a class="header-anchor" href="#MediaRecorder"></a>MediaRecorder</h2>
<p><img src="https://developer.android.google.cn/images/mediarecorder_state_diagram.gif" alt="mediarecorder"></p>
<p>如上所示表述整个MediaRecorder的整个生命过程，可以看出初始化之后，在任意的状态下调用<code>reset()</code>方法均可以回到MediaRecorder刚刚初始化完成的状态</p>
<h2 id="MediaPlayer"><a class="header-anchor" href="#MediaPlayer"></a>MediaPlayer</h2>
<p><img src="https://developer.android.google.cn/images/mediaplayer_state_diagram.gif" alt="mediaplayer"></p>
<h3 id="MediaPlayer-工作流程"><a class="header-anchor" href="#MediaPlayer-工作流程"></a>MediaPlayer 工作流程</h3>
<ol>
<li>创建一个MediaPlayer对象</li>
<li>调用setDataSource()方法，设置音频文件的路径</li>
<li>接着调用prepare()方法，使MediaPlayer进入的准备状态</li>
<li>调用start()方法，开始播放音频『pause()方法表示：暂停播放』</li>
</ol>
<h3 id="MediaPlayer常用的控制方法"><a class="header-anchor" href="#MediaPlayer常用的控制方法"></a>MediaPlayer常用的控制方法</h3>
<table>
<thead>
<tr>
<th>方法名</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>setDataSource()</td>
<td>设置要播放的音频文件的位置</td>
</tr>
<tr>
<td>prepare()</td>
<td>在开始播放之前调用这个方法完成准备工作</td>
</tr>
<tr>
<td>start()</td>
<td>开始或继续播放音频</td>
</tr>
<tr>
<td>pause()</td>
<td>暂停播放音频</td>
</tr>
<tr>
<td>reset()</td>
<td>将MediaPlayer对象重置到刚刚创建的状态</td>
</tr>
<tr>
<td>seekTo()</td>
<td>从指定位置开始播放音频</td>
</tr>
<tr>
<td>stop()</td>
<td>停止播放音频。调用这个方法后的MediaPlayer对象无法再播放音频</td>
</tr>
<tr>
<td>release()</td>
<td>释放掉与MediaPlayer对象相关的资源</td>
</tr>
<tr>
<td>isPlaying()</td>
<td>判断当前MediaPlayer是否正在播放音频</td>
</tr>
<tr>
<td>getDuration()</td>
<td>获取站如的音频文件的时长</td>
</tr>
</tbody>
</table>
<h3 id="注意事项"><a class="header-anchor" href="#注意事项"></a>注意事项</h3>
<ol>
<li>在使用<code>star()</code>播放流媒体之前，需要装载流媒体资源。这里最好使用<code>prepareAsync()</code>异步的方式装载流媒体资源，在使用<code>prepareAsync()</code>异步加载时，为避免还没有装载完就调用了<code>start()</code>而保存，需要绑定<code>MediaPlayer.setOnPreparedListener()</code>事件，它将在异步装在完成后回调<br>
原因：流媒体资源的装载是会消耗系统资源，在一些硬件不理想的设备上，如果使用<code>prepare()</code>同步的方式装载资源，可能会造成UI界面卡顿，其次避免装载超时而引发<code>ANR</code>等问题</li>
<li>使用完MediaPlayer需要回收资源。MediaPlayer时很消耗系统资源的，所以在使用完MediaPlayer，及时主动回收资源</li>
<li>对于单曲循环之类的操作，除了使用<code>setLooping()</code>方法设置之外，还可以为MediaPlayer注册回调函数，<code>MediaPlayer.setOnCompletionListener()</code>，它会在MediaPlayer播放完被回调</li>
<li>由于无法确保播放的流媒体是完整（中间有错误），我们需要处理这个错误，否则会影响用户体验。可以在MediaPlayer中注册<code>setOnErrorListener()</code>错误回调，一般重新播放或者播放下一个流媒体</li>
</ol>
<h2 id="跨平台"><a class="header-anchor" href="#跨平台"></a>跨平台</h2>
<p>关于音频编解码在各平台上的情况如下<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1541055152/blog/android-audio.png" alt="wiki-ecode"></p>
<p>从上图可知，<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JTgwJUIyJUU5JTlBJThFJUU5JTlGJUIzJUU4JUE4JThBJUU3JUI3JUE4JUU3JUEyJUJD">AAC<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvRkxBQw==">FLAC<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvTVAz">MP3<i class="fa fa-external-link-alt"></i></span>三种编码是全平台支持的音频编码方式（或音频压缩方式），注意编码方式并不是文件格式即文件的扩展名</p>
<ul>
<li>AAC 主要扩展名
<ul>
<li><code>.aac</code></li>
<li><code>.mp4</code></li>
<li><code>.m4a</code></li>
</ul>
</li>
<li>FLAC 扩展名
<ul>
<li><code>.flac</code></li>
</ul>
</li>
<li>MP3 扩展名
<ul>
<li><code>.mp3</code></li>
</ul>
</li>
</ul>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<ul>
<li>音频的录制，Android SDK提供了两套音频采集的API，分别是：<code>MediaRecorder</code>和<code>AudioRecord</code>，前者是一个更加上层一点的API，它可以直接把手机麦克风录入的音频数据进行编码压缩（如：<code>AMR</code>,<code>OGG</code>等）并存储成文件，而后者则更接近底层，能够更加自由灵活的控制，可以得到原始的一帧帧<code>PCM</code>音频数据</li>
<li>如果要简单的进行音频的采集，录制成音频文件，则推荐适用<code>MediaRecorder</code>，而如果需要对音频做进一步的算法处理，或者采用第三方的编码库进行压缩、以及网络传输等应用，则建议适用<code>AudioRecord</code></li>
<li><code>MediaRecorder</code>底层的实现也是调用了<code>AudioRecord</code>与<code>Android Framework</code> 层的<code>AudioFlinger</code>进行交互</li>
</ul>
<blockquote>
<p>关于音视频相关的资料参差不齐，目前尚未有大量相关专门的书籍来介绍该领域的图书或者易懂视频，很多情况需要根据所处应用场景灵活应变。<br>
推荐刚刚发行的一本关于音频方面的图书<span class="exturl" data-url="aHR0cHM6Ly9pdGVtLmpkLmNvbS8zNTAyNzA2MjM5Ni5odG1s">《Android音视频开发》<i class="fa fa-external-link-alt"></i></span><br>
推荐国内比较专业音视频方面相关的介绍<span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGVpeGlhb2h1YTEwMjA=">《雷霄骅的专栏》<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JTlGJUIzJUU5JUEyJTkxJUU3JUJDJTk2JUU3JUEwJTgxJUU2JUEwJUJDJUU1JUJDJThGJUU3JTlBJTg0JUU2JUFGJTk0JUU4JUJFJTgz">音频编码格式的比较<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8yNjkxNTQzMw==">第一行代码<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5pc2NsYWIub3JnLmNuL2FyY2hpdmVzLzIwMTQvMTIvMjk0Ni5odG1s">Android MediaRecorder架构详解<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZXNhbXBsZXMvYW5kcm9pZC1NZWRpYVJlY29yZGVy">参考代码<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JThFJTkyJUU3JTg5JTg4JUU1JUJDJTk1JUU2JTkzJThF">浏览器引擎<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vemljaGkvcC81MTE2NzY0Lmh0bWw=">主流浏览器内核介绍<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly94NS50ZW5jZW50LmNvbS90YnMvcHJvZHVjdC90YnMuaHRtbA==">腾讯X5内核介绍<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9yZW5odWkvcC83NDUyNTcyLmh0bWw=">Android 音视频开发学习思路<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>media</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 定位知多少（一）</title>
    <url>/2019/05/26/android-location1/</url>
    <content><![CDATA[<p>手机行业持续不断发展，为我们生活带了很多便利，在我们生活中到处都存在它的痕迹，它不仅是一个工具而且还是有温度的组手，协助你解决生活中的各种问题，渐渐成为了人们不可或缺的“器官”。它为什么就能进化成人类的一部分呢？其中一个重要的功能就是定位，看似单一的功能却渗透了我们各种场景，比如：定位，导航，这种基础的功能，还基于定位社交聊天，运动轨迹画像，出行等等，解决了人与人，人与物，物与物之间在位置上的问题。那么我本节就来聊一聊定位相关的一些知识，以及手机是如何在 Android 系统中是如何进行定位的</p>
<span id="more"></span>
<p>在 Android 系统中，定位主要分为两类：</p>
<ul>
<li>硬件定位（GPS 定位，北斗定位 ……）</li>
<li>网络定位
<ul>
<li>基站定位</li>
<li>WiFi 定位</li>
</ul>
</li>
</ul>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vdHJhaW5pbmcvbG9jYXRpb24/aGw9emhfY24=">用户位置<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Location</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 定位知多少（二）</title>
    <url>/2019/05/26/android-location2/</url>
    <content><![CDATA[<p>本篇主要讲解定位策略</p>
<span id="more"></span>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Location</tag>
      </tags>
  </entry>
  <entry>
    <title>Android XML字符串</title>
    <url>/2019/10/27/android-string/</url>
    <content><![CDATA[<p>Android在开发过程中，一些特殊字符时无法直接在 <code>strings.xml</code> 文件中写，需要用对应的转义字符代替或者在特殊符号（比如：<code>´</code>，<code>&quot;</code> 等待）前添加 <code>\</code> ，比如一个 <code>TextView</code> 控件中，需要动态替换其中的一些数据，再比如需要调整 <code>TextView</code> 字体的一些HTML样式（比如：粗体，斜体，下划线等），虽然这些都可以用 <code>TextView</code> 去修改，但更简单的方法是设置string提供的属性即可</p>
<span id="more"></span>
<h2 id="特殊字符"><a class="header-anchor" href="#特殊字符"></a>特殊字符</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    无法直接使用I&#x27;m developer</span></span><br><span class="line"><span class="comment">    &lt;string name=&quot;name_introduce&quot;&gt;I&#x27;m developer&lt;/string&gt; </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 解决方法一 转义字符代替 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;name_introduce&quot;</span>&gt;</span>I<span class="symbol">&amp;#039;</span>m developer<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 解决方法二 使用 \  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;name_introduces&quot;</span>&gt;</span>I\&#x27;m developer<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="动态替换或拼接"><a class="header-anchor" href="#动态替换或拼接"></a>动态替换或拼接</h2>
<ul>
<li><code>%n$ms</code>：代表输出的是字符串，n代表是第几个参数，设置m的值可以在输出之前放置空格</li>
<li><code>%n$md</code>：代表输出的是整数，n代表是第几个参数，设置m的值可以在输出之前放置空格</li>
<li><code>%n$mf</code>：代表输出的是浮点数，n代表第几个参数，m在浮点类型之前放置几个空格</li>
</ul>
<h3 id="XML配置"><a class="header-anchor" href="#XML配置"></a>XML配置</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    %1$s 第一个参数，对应Jerry</span></span><br><span class="line"><span class="comment">    %2$d 第二个参数，对应36</span></span><br><span class="line"><span class="comment">    %3$4.2f 第三个参数，对应 195.1255 ，但保留两位小数，实际显示195.13</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;welcome_messages&quot;</span>&gt;</span>Hello, %1$s, You have %2$d new messages. total cost %3$4.2f<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Java设置"><a class="header-anchor" href="#Java设置"></a>Java设置</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mTextConent = (TextView) findViewById(R.id.tv_String);</span><br><span class="line">mTextConent.setText(String.format(getString(R.string.welcome_messages), <span class="string">&quot;Jerry&quot;</span>, <span class="number">36</span>, <span class="number">195.1255</span>));</span><br></pre></td></tr></table></figure>
<h2 id="HTML标记"><a class="header-anchor" href="#HTML标记"></a>HTML标记</h2>
<ul>
<li><code>&lt;b&gt;</code> 表示 <strong>粗体</strong> 文本。</li>
<li><code>&lt;i&gt;</code> 表示 <em>斜体</em> 文本。</li>
<li><code>&lt;u&gt;</code> 表示 <u>下划线</u> 文本。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;welcome&quot;</span>&gt;</span>Welcome to <span class="tag">&lt;<span class="name">b</span>&gt;</span>Android<span class="tag">&lt;/<span class="name">b</span>&gt;</span>!<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;android&quot;</span>&gt;</span>Welcome to <span class="tag">&lt;<span class="name">i</span>&gt;</span>Android<span class="tag">&lt;/<span class="name">i</span>&gt;</span>!<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>Welcome to <span class="tag">&lt;<span class="name">u</span>&gt;</span>Android<span class="tag">&lt;/<span class="name">u</span>&gt;</span>!<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="ASCII对照表"><a class="header-anchor" href="#ASCII对照表"></a>ASCII对照表</h2>
<table>
<thead>
<tr>
<th>ASCII码</th>
<th>符号</th>
<th>ASCII码</th>
<th>符号</th>
<th>ASCII码</th>
<th>符号</th>
<th>ASCII码</th>
<th>符号</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&amp;#064;</code></td>
<td>@</td>
<td><code>&amp;#058;</code></td>
<td>:</td>
<td><code>&amp;#160;</code></td>
<td>空格</td>
<td><code>&amp;#032;</code></td>
<td>空格</td>
</tr>
<tr>
<td><code>&amp;#033;</code></td>
<td>!</td>
<td><code>&amp;#034;</code></td>
<td>&quot;</td>
<td><code>&amp;#035;</code></td>
<td>#</td>
<td><code>&amp;#036;</code></td>
<td>$</td>
</tr>
<tr>
<td><code>&amp;#037;</code></td>
<td>%</td>
<td><code>&amp;#038;</code></td>
<td>&amp;</td>
<td><code>&amp;#039;</code></td>
<td>´</td>
<td><code>&amp;#040;</code></td>
<td>(</td>
</tr>
<tr>
<td><code>&amp;#042; </code></td>
<td>*</td>
<td><code>&amp;#043;</code></td>
<td>+</td>
<td><code>&amp;#044;</code></td>
<td>,</td>
<td><code>&amp;#041;</code></td>
<td>)</td>
</tr>
<tr>
<td><code>&amp;#045;</code></td>
<td>-</td>
<td><code>&amp;#046;</code></td>
<td>.</td>
<td><code>&amp;#047;</code></td>
<td>/</td>
<td><code>&amp;#058;</code></td>
<td>:</td>
</tr>
<tr>
<td><code>&amp;#059;</code></td>
<td>;</td>
<td><code>&amp;#060;</code></td>
<td>&lt;</td>
<td><code>&amp;#061;</code></td>
<td>=</td>
<td><code>&amp;#062;</code></td>
<td>&gt;</td>
</tr>
<tr>
<td><code>&amp;#063;</code></td>
<td>?</td>
<td><code>&amp;#064;</code></td>
<td>@</td>
<td><code>&amp;#091;</code></td>
<td>[</td>
<td><code>&amp;#092;</code></td>
<td>&gt;</td>
</tr>
<tr>
<td><code>&amp;#093;</code></td>
<td>]</td>
<td><code>&amp;#094;</code></td>
<td>^</td>
<td><code>&amp;#095;</code></td>
<td>_</td>
<td><code>&amp;#096;</code></td>
<td>`</td>
</tr>
<tr>
<td><code>&amp;#123;</code></td>
<td>{</td>
<td><code>&amp;#124; </code></td>
<td>|</td>
<td><code>&amp;#125;</code></td>
<td>}</td>
<td><code>&amp;#126;</code></td>
<td>~</td>
</tr>
<tr>
<td><code>&amp;#160;</code></td>
<td>（空格,在xml首字符中不会被忽略）</td>
<td><code>&amp;#161;</code></td>
<td>¡</td>
<td><code>&amp;#162;</code></td>
<td>¢</td>
<td><code>&amp;#163;</code></td>
<td>£</td>
</tr>
<tr>
<td><code>&amp;#164;</code></td>
<td>¤</td>
<td><code>&amp;#165;</code></td>
<td>¥</td>
<td><code>&amp;#166;</code></td>
<td>¦</td>
<td><code>&amp;#167;</code></td>
<td>§</td>
</tr>
<tr>
<td><code>&amp;#168;</code></td>
<td>¨</td>
<td><code>&amp;#169;</code></td>
<td>©</td>
<td><code>&amp;#170;</code></td>
<td>ª</td>
<td><code>&amp;#171;</code></td>
<td>«</td>
</tr>
<tr>
<td><code>&amp;#172;</code></td>
<td>¬</td>
<td><code>&amp;#173;</code></td>
<td>-­</td>
<td><code>&amp;#174;</code></td>
<td>®</td>
<td><code>&amp;#175;</code></td>
<td>¯</td>
</tr>
<tr>
<td><code>&amp;#176;</code></td>
<td>°</td>
<td><code>&amp;#177;</code></td>
<td>±</td>
<td><code>&amp;#178;</code></td>
<td>²</td>
<td><code>&amp;#179;</code></td>
<td>³</td>
</tr>
<tr>
<td><code>&amp;#180;</code></td>
<td>´</td>
<td><code>&amp;#181;</code></td>
<td>µ</td>
<td><code>&amp;#182;</code></td>
<td>¶</td>
<td><code>&amp;#183;</code></td>
<td>•</td>
</tr>
<tr>
<td><code>&amp;#184;</code></td>
<td>¸</td>
<td><code>&amp;#185;</code></td>
<td>¹</td>
<td><code>&amp;#186;</code></td>
<td>º</td>
<td><code>&amp;#187;</code></td>
<td>»</td>
</tr>
<tr>
<td><code>&amp;#188;</code></td>
<td>¼</td>
<td><code>&amp;#189;</code></td>
<td>½</td>
<td><code>&amp;#190;</code></td>
<td>¾</td>
<td><code>&amp;#191;</code></td>
<td>¿</td>
</tr>
<tr>
<td><code>&amp;#192;</code></td>
<td>À</td>
<td><code>&amp;#193;</code></td>
<td>Á</td>
<td><code>&amp;#194;</code></td>
<td>Â</td>
<td><code>&amp;#195;</code></td>
<td>Ã</td>
</tr>
<tr>
<td><code>&amp;#196;</code></td>
<td>Ä</td>
<td><code>&amp;#197;</code></td>
<td>Å</td>
<td><code>&amp;#198;</code></td>
<td>Æ</td>
<td><code>&amp;#199;</code></td>
<td>Ç</td>
</tr>
<tr>
<td><code>&amp;#200;</code></td>
<td>È</td>
<td><code>&amp;#201;</code></td>
<td>É</td>
<td><code>&amp;#202;</code></td>
<td>Ê</td>
<td><code>&amp;#203;</code></td>
<td>Ë</td>
</tr>
<tr>
<td><code>&amp;#204;</code></td>
<td>Ì</td>
<td><code>&amp;#205;</code></td>
<td>Í</td>
<td><code>&amp;#206;</code></td>
<td>Î</td>
<td><code>&amp;#207;</code></td>
<td>Ï</td>
</tr>
<tr>
<td><code>&amp;#208;</code></td>
<td>Ð</td>
<td><code>&amp;#209;</code></td>
<td>Ñ</td>
<td><code>&amp;#210;</code></td>
<td>Ò</td>
<td><code>&amp;#211;</code></td>
<td>Ó</td>
</tr>
<tr>
<td><code>&amp;#212;</code></td>
<td>Ô</td>
<td><code>&amp;#213;</code></td>
<td>Õ</td>
<td><code>&amp;#214;</code></td>
<td>Ö</td>
<td><code>&amp;#215;</code></td>
<td>×</td>
</tr>
<tr>
<td><code>&amp;#216;</code></td>
<td>Ø</td>
<td><code>&amp;#217;</code></td>
<td>Ù</td>
<td><code>&amp;#218;</code></td>
<td>Ú</td>
<td><code>&amp;#219;</code></td>
<td>Û</td>
</tr>
<tr>
<td><code>&amp;#220;</code></td>
<td>Ü</td>
<td><code>&amp;#221;</code></td>
<td>Ý</td>
<td><code>&amp;#222;</code></td>
<td>Þ</td>
<td><code>&amp;#223;</code></td>
<td>ß</td>
</tr>
<tr>
<td><code>&amp;#224;</code></td>
<td>à</td>
<td><code>&amp;#225;</code></td>
<td>á</td>
<td><code>&amp;#226;</code></td>
<td>â</td>
<td><code>&amp;#227;</code></td>
<td>ã</td>
</tr>
<tr>
<td><code>&amp;#228;</code></td>
<td>ä</td>
<td><code>&amp;#229;</code></td>
<td>å</td>
<td><code>&amp;#230;</code></td>
<td>æ</td>
<td><code>&amp;#231;</code></td>
<td>ç</td>
</tr>
<tr>
<td><code>&amp;#232;</code></td>
<td>è</td>
<td><code>&amp;#233;</code></td>
<td>é</td>
<td><code>&amp;#234;</code></td>
<td>ê</td>
<td><code>&amp;#235;</code></td>
<td>ë</td>
</tr>
<tr>
<td><code>&amp;#236;</code></td>
<td>ì</td>
<td><code>&amp;#237;</code></td>
<td>í</td>
<td><code>&amp;#238;</code></td>
<td>î</td>
<td><code>&amp;#239;</code></td>
<td>ï</td>
</tr>
<tr>
<td><code>&amp;#240;</code></td>
<td>ð</td>
<td><code>&amp;#241;</code></td>
<td>ñ</td>
<td><code>&amp;#242;</code></td>
<td>ò</td>
<td><code>&amp;#243;</code></td>
<td>ó</td>
</tr>
<tr>
<td><code>&amp;#244;</code></td>
<td>ô</td>
<td><code>&amp;#245;</code></td>
<td>õ</td>
<td><code>&amp;#246;</code></td>
<td>ö</td>
<td><code>&amp;#247;</code></td>
<td>÷</td>
</tr>
<tr>
<td><code>&amp;#248;</code></td>
<td>ø</td>
<td><code>&amp;#249;</code></td>
<td>ù</td>
<td><code>&amp;#250;</code></td>
<td>ú</td>
<td><code>&amp;#251;</code></td>
<td>û</td>
</tr>
<tr>
<td><code>&amp;#252;</code></td>
<td>ü</td>
<td><code>&amp;#253;</code></td>
<td>ý</td>
<td><code>&amp;#254;</code></td>
<td>þ</td>
<td><code>&amp;#255;</code></td>
<td>ÿ</td>
</tr>
<tr>
<td><code>&amp;#256;</code></td>
<td>Ā</td>
<td><code>&amp;#257;</code></td>
<td>ā</td>
<td><code>&amp;#258;</code></td>
<td>Ă</td>
<td><code>&amp;#259;</code></td>
<td>ă</td>
</tr>
<tr>
<td><code>&amp;#260;</code></td>
<td>Ą</td>
<td><code>&amp;#261;</code></td>
<td>ą</td>
<td><code>&amp;#262;</code></td>
<td>Ć</td>
<td><code>&amp;#263;</code></td>
<td>ć</td>
</tr>
<tr>
<td><code>&amp;#264;</code></td>
<td>Ĉ</td>
<td><code>&amp;#265;</code></td>
<td>ĉ</td>
<td><code>&amp;#266;</code></td>
<td>Ċ</td>
<td><code>&amp;#267;</code></td>
<td>ċ</td>
</tr>
<tr>
<td><code>&amp;#268;</code></td>
<td>Č</td>
<td><code>&amp;#269;</code></td>
<td>č</td>
<td><code>&amp;#270;</code></td>
<td>Ď</td>
<td><code>&amp;#271;</code></td>
<td>ď</td>
</tr>
<tr>
<td><code>&amp;#272;</code></td>
<td>Đ</td>
<td><code>&amp;#273;</code></td>
<td>đ</td>
<td><code>&amp;#274;</code></td>
<td>Ē</td>
<td><code>&amp;#275;</code></td>
<td>ē</td>
</tr>
<tr>
<td><code>&amp;#276;</code></td>
<td>Ĕ</td>
<td><code>&amp;#277;</code></td>
<td>ĕ</td>
<td><code>&amp;#278;</code></td>
<td>Ė</td>
<td><code>&amp;#279;</code></td>
<td>ė</td>
</tr>
<tr>
<td><code>&amp;#280;</code></td>
<td>Ę</td>
<td><code>&amp;#281;</code></td>
<td>ę</td>
<td><code>&amp;#282;</code></td>
<td>Ě</td>
<td><code>&amp;#283;</code></td>
<td>ě</td>
</tr>
<tr>
<td><code>&amp;#284;</code></td>
<td>Ĝ</td>
<td><code>&amp;#285;</code></td>
<td>ĝ</td>
<td><code>&amp;#286;</code></td>
<td>Ğ</td>
<td><code>&amp;#287;</code></td>
<td>ğ</td>
</tr>
<tr>
<td><code>&amp;#288;</code></td>
<td>Ġ</td>
<td><code>&amp;#289;</code></td>
<td>ġ</td>
<td><code>&amp;#290;</code></td>
<td>Ģ</td>
<td><code>&amp;#291;</code></td>
<td>ģ</td>
</tr>
<tr>
<td><code>&amp;#292;</code></td>
<td>Ĥ</td>
<td><code>&amp;#293;</code></td>
<td>ĥ</td>
<td><code>&amp;#294;</code></td>
<td>Ħ</td>
<td><code>&amp;#295;</code></td>
<td>ħ</td>
</tr>
<tr>
<td><code>&amp;#296;</code></td>
<td>Ĩ</td>
<td><code>&amp;#297;</code></td>
<td>ĩ</td>
<td><code>&amp;#298;</code></td>
<td>Ī</td>
<td><code>&amp;#299;</code></td>
<td>ī</td>
</tr>
<tr>
<td><code>&amp;#300;</code></td>
<td>Ĭ</td>
<td><code>&amp;#301;</code></td>
<td>ĭ</td>
<td><code>&amp;#302;</code></td>
<td>Į</td>
<td><code>&amp;#303;</code></td>
<td>į</td>
</tr>
<tr>
<td><code>&amp;#304;</code></td>
<td>İ</td>
<td><code>&amp;#305;</code></td>
<td>ı</td>
<td><code>&amp;#306;</code></td>
<td>Ĳ</td>
<td><code>&amp;#307;</code></td>
<td>ĳ</td>
</tr>
<tr>
<td><code>&amp;#308;</code></td>
<td>Ĵ</td>
<td><code>&amp;#309;</code></td>
<td>ĵ</td>
<td><code>&amp;#310;</code></td>
<td>Ķ</td>
<td><code>&amp;#311;</code></td>
<td>ķ</td>
</tr>
<tr>
<td><code>&amp;#312;</code></td>
<td>ĸ</td>
<td><code>&amp;#313;</code></td>
<td>Ĺ</td>
<td><code>&amp;#314;</code></td>
<td>ĺ</td>
<td><code>&amp;#315;</code></td>
<td>Ļ</td>
</tr>
<tr>
<td><code>&amp;#316;</code></td>
<td>ļ</td>
<td><code>&amp;#317;</code></td>
<td>Ľ</td>
<td><code>&amp;#318;</code></td>
<td>ľ</td>
<td><code>&amp;#319;</code></td>
<td>Ŀ</td>
</tr>
<tr>
<td><code>&amp;#320;</code></td>
<td>ŀ</td>
<td><code>&amp;#321;</code></td>
<td>Ł</td>
<td><code>&amp;#322;</code></td>
<td>ł</td>
<td><code>&amp;#323;</code></td>
<td>Ń</td>
</tr>
<tr>
<td><code>&amp;#324;</code></td>
<td>ń</td>
<td><code>&amp;#325;</code></td>
<td>Ņ</td>
<td><code>&amp;#326;</code></td>
<td>ņ</td>
<td><code>&amp;#327;</code></td>
<td>Ň</td>
</tr>
<tr>
<td><code>&amp;#328;</code></td>
<td>ň</td>
<td><code>&amp;#329;</code></td>
<td>ŉ</td>
<td><code>&amp;#330;</code></td>
<td>Ŋ</td>
<td><code>&amp;#331;</code></td>
<td>ŋ</td>
</tr>
<tr>
<td><code>&amp;#332;</code></td>
<td>Ō</td>
<td><code>&amp;#333;</code></td>
<td>ō</td>
<td><code>&amp;#334;</code></td>
<td>Ŏ</td>
<td><code>&amp;#335;</code></td>
<td>ŏ</td>
</tr>
<tr>
<td><code>&amp;#336;</code></td>
<td>Ő</td>
<td><code>&amp;#337;</code></td>
<td>ő</td>
<td><code>&amp;#338;</code></td>
<td>Œ</td>
<td><code>&amp;#339;</code></td>
<td>œ</td>
</tr>
<tr>
<td><code>&amp;#340;</code></td>
<td>Ŕ</td>
<td><code>&amp;#341;</code></td>
<td>ŕ</td>
<td><code>&amp;#342;</code></td>
<td>Ŗ</td>
<td><code>&amp;#343;</code></td>
<td>ŗ</td>
</tr>
<tr>
<td><code>&amp;#344;</code></td>
<td>Ř</td>
<td><code>&amp;#345;</code></td>
<td>ř</td>
<td><code>&amp;#346;</code></td>
<td>Ś</td>
<td><code>&amp;#347;</code></td>
<td>ś</td>
</tr>
<tr>
<td><code>&amp;#348;</code></td>
<td>Ŝ</td>
<td><code>&amp;#349;</code></td>
<td>ŝ</td>
<td><code>&amp;#350;</code></td>
<td>Ş</td>
<td><code>&amp;#351;</code></td>
<td>ş</td>
</tr>
<tr>
<td><code>&amp;#352;</code></td>
<td>Š</td>
<td><code>&amp;#353;</code></td>
<td>š</td>
<td><code>&amp;#354;</code></td>
<td>Ţ</td>
<td><code>&amp;#355;</code></td>
<td>ţ</td>
</tr>
<tr>
<td><code>&amp;#356;</code></td>
<td>Ť</td>
<td><code>&amp;#357;</code></td>
<td>ť</td>
<td><code>&amp;#358;</code></td>
<td>Ŧ</td>
<td><code>&amp;#359;</code></td>
<td>ŧ</td>
</tr>
<tr>
<td><code>&amp;#360;</code></td>
<td>Ũ</td>
<td><code>&amp;#361;</code></td>
<td>ũ</td>
<td><code>&amp;#362;</code></td>
<td>Ū</td>
<td><code>&amp;#363;</code></td>
<td>ū</td>
</tr>
<tr>
<td><code>&amp;#364;</code></td>
<td>Ŭ</td>
<td><code>&amp;#365;</code></td>
<td>ŭ</td>
<td><code>&amp;#366;</code></td>
<td>Ů</td>
<td><code>&amp;#367;</code></td>
<td>ů</td>
</tr>
<tr>
<td><code>&amp;#368;</code></td>
<td>Ű</td>
<td><code>&amp;#369;</code></td>
<td>ű</td>
<td><code>&amp;#370;</code></td>
<td>Ų</td>
<td><code>&amp;#371;</code></td>
<td>ų</td>
</tr>
<tr>
<td><code>&amp;#372;</code></td>
<td>Ŵ</td>
<td><code>&amp;#373;</code></td>
<td>ŵ</td>
<td><code>&amp;#374;</code></td>
<td>Ŷ</td>
<td><code>&amp;#375;</code></td>
<td>ŷ</td>
</tr>
<tr>
<td><code>&amp;#376;</code></td>
<td>Ÿ</td>
<td><code>&amp;#377;</code></td>
<td>Ź</td>
<td><code>&amp;#378;</code></td>
<td>ź</td>
<td><code>&amp;#379;</code></td>
<td>Ż</td>
</tr>
<tr>
<td><code>&amp;#380;</code></td>
<td>ż</td>
<td><code>&amp;#381;</code></td>
<td>Ž</td>
<td><code>&amp;#382;</code></td>
<td>ž</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvdG9waWNzL3Jlc291cmNlcy9zdHJpbmctcmVzb3VyY2U/aGw9emgtY24=">字符串资源<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Util</tag>
      </tags>
  </entry>
  <entry>
    <title>BigDecimal</title>
    <url>/2019/10/20/bigdecimal/</url>
    <content><![CDATA[<p>float 和 double 同样也是可以表示浮点数，为啥在对于要求精确的进度计算时，尤其是关于币值相关，都采用 BigDecimal 类型来处理？</p>
<ol>
<li>float 和 double 类型的主要设计目标是为了科学计算和工程计算。他们执行二进制浮点运算，这是为了在广域数值范围上提供较为精确的 <strong>快速近似</strong> 计算而精心设计的。然而，它们<font color=red>没有提供完全精确</font>的结果，所以不应该用于要求精确结果的场合。——《Effective Java》</li>
<li>float 精度 7 位，double 精度 16 位</li>
</ol>
<span id="more"></span>
<p>综上所述，对于精确计算时，就不能采用 float 和 double 来计算了，而是 <font color=red>正确的使用 BigDecimal</font> 时，结果才是精确的，为什么会这么说，那就跟着我一块来深入了解 BigDecimal，我们查看<code>java.math</code>路径下，除了 BigDecimal 还有 BigInteger ，因此，我们先去了解 BigInteger</p>
<h2 id="BigInteger"><a class="header-anchor" href="#BigInteger"></a>BigInteger</h2>
<p>Java 中，由 CPU 原生提供的整形最大范围是 64 位<code>long</code>类型整数。使用<code>long</code>类型整数可以直接通过 CPU 指令进行计算，速度非常快。如果使用的整数范围超过了<code>long</code>类型的范围怎么办？这时就只能用软件来模拟一个大整数。BigInteger表示不可变的任意精度的整数（继承<code>Number</code>）。BigInteger 内部用一个 <code>int[]</code> 数组来模拟一个非常大的整数</p>
<h3 id="构造方法"><a class="header-anchor" href="#构造方法"></a>构造方法</h3>
<ul>
<li>BigInteger(byte[] val)：将包含 BigInteger 的二进制补码表示形式的 byte 数组转换为 BigInteger</li>
<li>BigInteger(int signum, byte[] magnitude)：将 BigInteger 的符号-数量表示形式转换为 BigInteger。</li>
<li>BigInteger(int bitLength, int certainty, Random rnd)：构造一个随机生成的正 BigInteger，它可能是一个具有指定 bitLength 的素数</li>
<li>BigInteger(int numBits, Random rnd)：构造一个随机生成的 BigInteger，它是在 0 到 (2numBits - 1)（包括）范围内均匀分布的值</li>
<li><font color=red>BigInteger(String val)</font>：将 BigInteger 的十进制字符串表示形式转换为 BigInteger，常用构造方法</li>
<li>BigInteger(String val, int radix)：将指定基数的 BigInteger 的字符串表示形式转换为 BigInteger</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">bi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;1234567890&quot;</span>);</span><br><span class="line"><span class="comment">// 计算出 bi⁵ = 2867971860299718107233761438093672048294900000</span></span><br><span class="line">System.out.println(bi.pow(<span class="number">5</span>)); </span><br></pre></td></tr></table></figure>
<h3 id="常用运算方法"><a class="header-anchor" href="#常用运算方法"></a>常用运算方法</h3>
<p>对于加减乘除等运算，BigInteger 提供了对应的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;1234567890&quot;</span>);</span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;9876543210&quot;</span>);</span><br><span class="line"><span class="comment">// a+b = 11111111100</span></span><br><span class="line">System.out.println(<span class="string">&quot;a+b = &quot;</span> + a.add(b));</span><br><span class="line"><span class="comment">// a-b = -8641975320</span></span><br><span class="line">System.out.println(<span class="string">&quot;a-b = &quot;</span> + a.subtract(b));</span><br><span class="line"><span class="comment">// a*b = 12193263111263526900</span></span><br><span class="line">System.out.println(<span class="string">&quot;a*b = &quot;</span> + a.multiply(b));</span><br><span class="line"><span class="comment">// a/b = 0</span></span><br><span class="line">System.out.println(<span class="string">&quot;a/b = &quot;</span> + a.divide(b));</span><br></pre></td></tr></table></figure>
<h3 id="转换"><a class="header-anchor" href="#转换"></a>转换</h3>
<p>和 <code>long</code> 类型整数运算比，<code>BigInteger</code>不会有范围限制，但缺点是速度比较慢。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;123456789000&quot;</span>);</span><br><span class="line"><span class="comment">// 123456789000</span></span><br><span class="line">System.out.println(i.longValue()); </span><br><span class="line"><span class="comment">// java.lang.ArithmeticException: BigInteger out of long range</span></span><br><span class="line">System.out.println(i.multiply(i).longValueExact()); </span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用 <code>longValueExact()</code> 方法时，如果超出了 <code>long</code> 类型的范围，会抛出 <code>ArithmeticException</code></p>
</blockquote>
<p><code>BigInteger</code> 和 <code>Integer</code> 、 <code>Long</code> 一样，也是不可变类，并且也继承自 <code>Number</code> 类。因为 <code>Number</code> 定义了转换为基本类型的几个方法：</p>
<ul>
<li>转换为<code>byte</code>：<code>byteValue()</code></li>
<li>转换为<code>short</code>：<code>shortValue()</code></li>
<li>转换为<code>int</code>：<code>intValue()</code></li>
<li>转换为<code>long</code>：<code>longValue()</code></li>
<li>转换为<code>float</code>：<code>floatValue()</code></li>
<li>转换为<code>double</code>：<code>doubleValue()</code></li>
</ul>
<p>通过上述方法，可以把 <code>BigInteger</code> 转换为基本类型。如果 <code>BigInteger</code> 表示的范围超过了基本类型，转换时将丢失高位信息，即结果不一定准确；因此，如果需要 <font color=red>准确的转换成基本类型</font>，可以使用 <code>intValueExact()</code>、<code>longValueExact()</code> 等方法，在转换时如果超出范围，将直接抛出 <code>ArithmeticException</code>异常</p>
<h2 id="BigDecimal"><a class="header-anchor" href="#BigDecimal"></a>BigDecimal</h2>
<p><code>BigDecimal</code> 与 <code>BigInteger</code>类似，<code>BigDecimal</code> 表示一个<font color=red>任意大小且精度完全准确</font>的浮点数。BigDecimal 是由任意精度的整数非标度值（unscaled value）和 32 位的整数标度（scale）组成，通常用于币值的计算。</p>
<h3 id="构造方法-v2"><a class="header-anchor" href="#构造方法-v2"></a>构造方法</h3>
<p>BigDecimal 拥有16 个构造方法，常用如下三种</p>
<ul>
<li>BigDecimal BigDecimal(double d); // 不允许使用，精度不能保证</li>
<li>BigDecimal BigDecimal(String s); // 常用，推荐使用</li>
<li>static BigDecimal valueOf(double d); // 常用，推荐使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">bigDecimal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">2</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">bString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;2.3&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">bDouble</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">2.3</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">bDouble1</span> <span class="operator">=</span> BigDecimal.valueOf(<span class="number">2.3</span>);</span><br><span class="line"><span class="comment">// 输出：bigDecimal = 2</span></span><br><span class="line">System.out.println(<span class="string">&quot;bigDecimal = &quot;</span> + bigDecimal);</span><br><span class="line"><span class="comment">// 输出：bString = 2.3</span></span><br><span class="line">System.out.println(<span class="string">&quot;bString = &quot;</span> + bString);</span><br><span class="line"><span class="comment">// 输出：bDouble = 2.29999999999999982236431605997495353221893310546875</span></span><br><span class="line">System.out.println(<span class="string">&quot;bDouble = &quot;</span> + bDouble);</span><br><span class="line"><span class="comment">// 输出：bDouble1 = 2.3</span></span><br><span class="line">System.out.println(<span class="string">&quot;bDouble1 = &quot;</span> + bDouble1);</span><br></pre></td></tr></table></figure>
<ul>
<li>参数类型为 double 的构造方法的结果有一定的不可预知性；</li>
<li>参数类型为 String 的构造方法的结果是<font color=red>完全可预知</font>的，因此我们在编写时尽量都用 String 的构造方法</li>
<li>当 double 必须用作 BigDecimal 的源时可以用 BigDecimal 的静态方法 value()</li>
</ul>
<h3 id="常用方法"><a class="header-anchor" href="#常用方法"></a>常用方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1234567890.56789&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;9876543210.01234&quot;</span>);</span><br><span class="line"><span class="comment">// a+b = 11111111100.58023</span></span><br><span class="line">System.out.println(<span class="string">&quot;a+b = &quot;</span> + a.add(b));</span><br><span class="line"><span class="comment">// a-b = -8641975319.44445</span></span><br><span class="line">System.out.println(<span class="string">&quot;a-b = &quot;</span> + a.subtract(b));</span><br><span class="line"><span class="comment">// a*b = 12193263116887551591.2965077626</span></span><br><span class="line">System.out.println(<span class="string">&quot;a*b = &quot;</span> + a.multiply(b));</span><br><span class="line"><span class="comment">// 报错：ArithmeticException，因为除不尽</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;a/b = &quot; + a.divide(b));</span></span><br><span class="line"><span class="comment">// 保留10位小数并四舍五入</span></span><br><span class="line">System.out.println(<span class="string">&quot;a/b = &quot;</span> + a.divide(b, <span class="number">10</span>, RoundingMode.HALF_UP));</span><br></pre></td></tr></table></figure>
<h3 id="转换-v2"><a class="header-anchor" href="#转换-v2"></a>转换</h3>
<p>与<code>BigInteger</code>相同</p>
<h3 id="舍入模式"><a class="header-anchor" href="#舍入模式"></a>舍入模式</h3>
<ul>
<li>ROUND_CEILING：向 <strong>正无限大方向舍入</strong> 的舍入模式。如果结果为正，则舍入行为类似于 RoundingMode.UP；如果结果为负，则舍入行为类似于 RoundingMode.DOWN  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">5.5</span>  =&gt;  <span class="number">6</span> </span><br><span class="line"><span class="number">1.1</span>  =&gt;  <span class="number">2</span></span><br><span class="line">-<span class="number">1.0</span>  =&gt;  -<span class="number">1</span> </span><br><span class="line">-<span class="number">2.5</span>  =&gt;  -<span class="number">2</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;5.5&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.1&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;-1.0&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;-2.5&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;ROUND_CEILING模式：&quot;</span> + a1.setScale(<span class="number">0</span>, RoundingMode.CEILING));</span><br><span class="line">System.out.println(<span class="string">&quot;ROUND_CEILING模式：&quot;</span> + a2.setScale(<span class="number">0</span>, RoundingMode.CEILING));</span><br><span class="line">System.out.println(<span class="string">&quot;ROUND_CEILING模式：&quot;</span> + a3.setScale(<span class="number">0</span>, RoundingMode.CEILING));</span><br><span class="line">System.out.println(<span class="string">&quot;ROUND_CEILING模式：&quot;</span> + a4.setScale(<span class="number">0</span>, RoundingMode.CEILING));</span><br></pre></td></tr></table></figure>
</li>
<li>RoundingMode.DOWN：向 <strong>零方向舍入</strong> 的舍入模式。从不对舍弃部分前面的数字加 1（即截尾）。注意，此舍入模式始终不会增加计算值的绝对值  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">5.5</span>  =&gt;  <span class="number">5</span> </span><br><span class="line"><span class="number">1.1</span>  =&gt;  <span class="number">1</span> </span><br><span class="line">-<span class="number">1.0</span>  =&gt;  -<span class="number">1</span> </span><br><span class="line">-<span class="number">2.5</span>  =&gt;  -<span class="number">2</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;5.5&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.1&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;-1.0&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;-2.5&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;DOWN模式：&quot;</span> + a1.setScale(<span class="number">0</span>, RoundingMode.DOWN));</span><br><span class="line">System.out.println(<span class="string">&quot;DOWN模式：&quot;</span> + a2.setScale(<span class="number">0</span>, RoundingMode.DOWN));</span><br><span class="line">System.out.println(<span class="string">&quot;DOWN模式：&quot;</span> + a3.setScale(<span class="number">0</span>, RoundingMode.DOWN));</span><br><span class="line">System.out.println(<span class="string">&quot;DOWN模式：&quot;</span> + a4.setScale(<span class="number">0</span>, RoundingMode.DOWN));</span><br></pre></td></tr></table></figure>
</li>
<li>RoundingMode.FLOOR（此舍入模式始终不会增加计算值）：向 <strong>负无限大方向舍入</strong> 的舍入模式。如果结果为正，则舍入行为类似于 RoundingMode.DOWN；如果结果为负，则舍入行为类似于 RoundingMode.UP  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">5.5</span>  =&gt;  <span class="number">5</span> </span><br><span class="line"><span class="number">1.1</span>  =&gt;  <span class="number">1</span></span><br><span class="line">-<span class="number">1.0</span>  =&gt;  -<span class="number">1</span> </span><br><span class="line">-<span class="number">2.5</span>  =&gt;  -<span class="number">3</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;5.5&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.1&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;-1.0&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;-2.5&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;FLOOR模式：&quot;</span> + a1.setScale(<span class="number">0</span>, RoundingMode.FLOOR));</span><br><span class="line">System.out.println(<span class="string">&quot;FLOOR模式：&quot;</span> + a2.setScale(<span class="number">0</span>, RoundingMode.FLOOR));</span><br><span class="line">System.out.println(<span class="string">&quot;FLOOR模式：&quot;</span> + a3.setScale(<span class="number">0</span>, RoundingMode.FLOOR));</span><br><span class="line">System.out.println(<span class="string">&quot;FLOOR模式：&quot;</span> + a4.setScale(<span class="number">0</span>, RoundingMode.FLOOR));</span><br></pre></td></tr></table></figure>
</li>
<li>RoundingMode.HALF_DOWN：向 <strong>最接近数字方向舍入</strong> 的舍入模式，如果与两个相邻数字的距离相等，则向 <strong>下舍入</strong> 。如果被舍弃部分 &gt; 0.5，则舍入行为同 RoundingMode.UP；否则舍入行为同 RoundingMode.DOWN  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">5.5</span>  =&gt;  <span class="number">5</span></span><br><span class="line"><span class="number">1.1</span>  =&gt;  <span class="number">1</span> </span><br><span class="line">-<span class="number">1.1</span>  =&gt;  -<span class="number">1</span></span><br><span class="line">-<span class="number">2.5</span>  =&gt;  -<span class="number">2</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;5.5&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.1&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;-1.0&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;-2.5&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;HALF_DOWN模式：&quot;</span> + a1.setScale(<span class="number">0</span>, RoundingMode.HALF_DOWN));</span><br><span class="line">System.out.println(<span class="string">&quot;HALF_DOWN模式：&quot;</span> + a2.setScale(<span class="number">0</span>, RoundingMode.HALF_DOWN));</span><br><span class="line">System.out.println(<span class="string">&quot;HALF_DOWN模式：&quot;</span> + a3.setScale(<span class="number">0</span>, RoundingMode.HALF_DOWN));</span><br><span class="line">System.out.println(<span class="string">&quot;HALF_DOWN模式：&quot;</span> + a4.setScale(<span class="number">0</span>, RoundingMode.HALF_DOWN));</span><br></pre></td></tr></table></figure>
</li>
<li>RoundingMode.HALF_EVEN：向 <strong>最接近数字方向舍入</strong> 的舍入模式，如果与两个相邻数字的距离相等，则向 <strong>相邻的偶数舍入</strong> 。如果舍弃部分左边的数字为奇数，则舍入行为同 RoundingMode.HALF_UP；如果为偶数，则舍入行为同 RoundingMode.HALF_DOWN  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">5.5</span>  =&gt;  <span class="number">6</span> </span><br><span class="line"><span class="number">1.1</span>  =&gt;  <span class="number">1</span> </span><br><span class="line">-<span class="number">1.0</span>  =&gt;  -<span class="number">1</span></span><br><span class="line">-<span class="number">2.5</span>  =&gt;  -<span class="number">2</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;5.5&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.1&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;-1.0&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;-2.5&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;HALF_EVEN模式：&quot;</span> + a1.setScale(<span class="number">0</span>, RoundingMode.HALF_EVEN));</span><br><span class="line">System.out.println(<span class="string">&quot;HALF_EVEN模式：&quot;</span> + a2.setScale(<span class="number">0</span>, RoundingMode.HALF_EVEN));</span><br><span class="line">System.out.println(<span class="string">&quot;HALF_EVEN模式：&quot;</span> + a3.setScale(<span class="number">0</span>, RoundingMode.HALF_EVEN));</span><br><span class="line">System.out.println(<span class="string">&quot;HALF_EVEN模式：&quot;</span> + a4.setScale(<span class="number">0</span>, RoundingMode.HALF_EVEN));</span><br></pre></td></tr></table></figure>
</li>
<li><font color=red>RoundingMode.HALF_UP</font>（此舍入模式就是通常学校里讲的四舍五入）：向最接近数字方向舍入的舍入模式，如果与两个相邻数字的距离相等，则向上舍入。如果被舍弃部分 &gt;= 0.5，则舍入行为同 RoundingMode.UP；否则舍入行为同 RoundingMode.DOWN  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">5.5</span>  =&gt;  <span class="number">6</span></span><br><span class="line"><span class="number">1.1</span>  =&gt;  <span class="number">1</span> </span><br><span class="line">-<span class="number">1.1</span>  =&gt;  -<span class="number">1</span> </span><br><span class="line">-<span class="number">2.5</span>  =&gt;  -<span class="number">3</span> </span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;5.5&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.1&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;-1.1&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;-2.5&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;HALF_UP模式：&quot;</span> + a1.setScale(<span class="number">0</span>, RoundingMode.HALF_UP));</span><br><span class="line">System.out.println(<span class="string">&quot;HALF_UP模式：&quot;</span> + a2.setScale(<span class="number">0</span>, RoundingMode.HALF_UP));</span><br><span class="line">System.out.println(<span class="string">&quot;HALF_UP模式：&quot;</span> + a3.setScale(<span class="number">0</span>, RoundingMode.HALF_UP));</span><br><span class="line">System.out.println(<span class="string">&quot;HALF_UP模式：&quot;</span> + a4.setScale(<span class="number">0</span>, RoundingMode.HALF_UP));</span><br></pre></td></tr></table></figure>
</li>
<li>RoundingMode.UNNECESSARY：用于断言请求的操作具有精确结果的舍入模式，因此不需要舍入。如果对生成精确结果的操作指定此舍入模式，则抛出 ArithmeticException  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.5</span>  =&gt;  抛出 ArithmeticException</span><br><span class="line"><span class="number">1.1</span>  =&gt;  抛出 ArithmeticException</span><br><span class="line"><span class="number">1.0</span>  =&gt;  <span class="number">1</span></span><br><span class="line">-<span class="number">1.1</span>  =&gt;抛出 ArithmeticException </span><br><span class="line">-<span class="number">1.6</span>  =&gt;  抛出 ArithmeticException </span><br></pre></td></tr></table></figure>
</li>
<li>RoundingMode.UP：<strong>远离零方向舍入</strong> 的舍入模式。始终对非零舍弃部分前面的数字加 1。注意，此舍入模式始终不会减少计算值的绝对值  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">5.5</span>  =&gt;  <span class="number">6</span> </span><br><span class="line"><span class="number">1.1</span>  =&gt;  <span class="number">2</span> </span><br><span class="line">-<span class="number">1.0</span>  =&gt;  -<span class="number">1</span></span><br><span class="line">-<span class="number">2.5</span>  =&gt;  -<span class="number">3</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;5.5&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.1&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;-1.0&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;-2.5&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;UP模式：&quot;</span> + a1.setScale(<span class="number">0</span>, RoundingMode.UP));</span><br><span class="line">System.out.println(<span class="string">&quot;UP模式：&quot;</span> + a2.setScale(<span class="number">0</span>, RoundingMode.UP));</span><br><span class="line">System.out.println(<span class="string">&quot;UP模式：&quot;</span> + a3.setScale(<span class="number">0</span>, RoundingMode.UP));</span><br><span class="line">System.out.println(<span class="string">&quot;UP模式：&quot;</span> + a4.setScale(<span class="number">0</span>, RoundingMode.UP));</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="格式化"><a class="header-anchor" href="#格式化"></a>格式化</h3>
<p>DecimalFormat 解析</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>位置</th>
<th>描叙</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>数字</td>
<td>阿拉伯数字，如果不存在则显示0</td>
</tr>
<tr>
<td>#</td>
<td>数字</td>
<td>阿拉伯数字，如果不存在不显示0</td>
</tr>
<tr>
<td>.</td>
<td>数字</td>
<td>小数分隔符或货币小数分隔符</td>
</tr>
<tr>
<td>,</td>
<td>数字</td>
<td>分组分隔符</td>
</tr>
<tr>
<td>E</td>
<td>数字</td>
<td>分隔科学计数法中的尾数和指数。在前缀或后缀中无需加引号</td>
</tr>
<tr>
<td>-</td>
<td>数字</td>
<td>负号</td>
</tr>
<tr>
<td>;</td>
<td>子模式边界</td>
<td>分隔正数和负数子模式</td>
</tr>
<tr>
<td>%</td>
<td>子模式边界</td>
<td>乘以 100 并显示为百分数</td>
</tr>
<tr>
<td>\u2030</td>
<td>子模式边界</td>
<td>乘以 1000 并显示为千分数</td>
</tr>
<tr>
<td>¤(\u00A4)</td>
<td>子模式边界</td>
<td>货币记号，由货币符号替换。如果两个同时出现，则用国际货币符号替换。如果出现在某个模式中，则使用货币小数分隔符，而不使用小数分隔符</td>
</tr>
<tr>
<td>’</td>
<td>子模式边界</td>
<td>用于在前缀或或后缀中为特殊字符加引号，例如 “‘#’#“将 123 格式化为 “#123”。要创建单引号本身，请连续使用两个单引号：”# o’'clock”</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 建立货币格式化引用</span></span><br><span class="line"><span class="type">NumberFormat</span> <span class="variable">currency</span> <span class="operator">=</span> NumberFormat.getCurrencyInstance(); </span><br><span class="line"><span class="comment">// 建立百分比格式化引用</span></span><br><span class="line"><span class="type">NumberFormat</span> <span class="variable">percent</span> <span class="operator">=</span> NumberFormat.getPercentInstance(); </span><br><span class="line"><span class="comment">// 百分比小数点最多3位</span></span><br><span class="line">percent.setMaximumFractionDigits(<span class="number">3</span>); </span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">loanAmount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;150.48&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">interestRate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.008&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">interest</span> <span class="operator">=</span> loanAmount.multiply(interestRate);</span><br><span class="line"><span class="comment">// 贷款金额: ￥150.48</span></span><br><span class="line">System.out.println(<span class="string">&quot;贷款金额:\t&quot;</span> + currency.format(loanAmount)); </span><br><span class="line"><span class="comment">// 利率: 0.8%</span></span><br><span class="line">System.out.println(<span class="string">&quot;利率:\t&quot;</span> + percent.format(interestRate)); </span><br><span class="line"><span class="comment">// 利息: ￥1.20</span></span><br><span class="line">System.out.println(<span class="string">&quot;利息:\t&quot;</span> + currency.format(interest)); </span><br><span class="line"></span><br><span class="line"><span class="comment">//===============================================================</span></span><br><span class="line"><span class="type">DecimalFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>();</span><br><span class="line"><span class="comment">// 格式化之前的数字</span></span><br><span class="line"><span class="type">double</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">1234.56789</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 1.定义要显示的数字的格式（这种方式会四舍五入）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">style</span> <span class="operator">=</span> <span class="string">&quot;0.0&quot;</span>;</span><br><span class="line">df.applyPattern(style);</span><br><span class="line"><span class="comment">// 1--&gt;1234.6</span></span><br><span class="line">System.out.println(<span class="string">&quot;1--&gt;&quot;</span> + df.format(data));  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.在格式后添加诸如单位等字符</span></span><br><span class="line">style = <span class="string">&quot;00000.000 kg&quot;</span>;</span><br><span class="line">df.applyPattern(style);</span><br><span class="line"><span class="comment">// 2--&gt;01234.568 kg</span></span><br><span class="line">System.out.println(<span class="string">&quot;2--&gt;&quot;</span> + df.format(data));  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.模式中的&quot;#&quot;表示如果该位存在字符，则显示字符，如果不存在，则不显示。</span></span><br><span class="line">style = <span class="string">&quot;##000.000 kg&quot;</span>;</span><br><span class="line">df.applyPattern(style);</span><br><span class="line"><span class="comment">// 3--&gt;1234.568 kg</span></span><br><span class="line">System.out.println(<span class="string">&quot;3--&gt;&quot;</span> + df.format(data));  </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 4.模式中的&quot;-&quot;表示输出为负数，要放在最前面</span></span><br><span class="line">style = <span class="string">&quot;-000.000&quot;</span>;</span><br><span class="line">df.applyPattern(style);</span><br><span class="line"><span class="comment">// 4--&gt;-1234.568</span></span><br><span class="line">System.out.println(<span class="string">&quot;4--&gt;&quot;</span> + df.format(data)); </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 5.模式中的&quot;,&quot;在数字中添加逗号，方便读数字</span></span><br><span class="line">style = <span class="string">&quot;-0,000.0#&quot;</span>;</span><br><span class="line">df.applyPattern(style);</span><br><span class="line"><span class="comment">// 5--&gt;-1,234.57</span></span><br><span class="line">System.out.println(<span class="string">&quot;5--&gt;&quot;</span> + df.format(data));  </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 6.模式中的&quot;E&quot;表示输出为指数，&quot;E&quot;之前的字符串是底数的格式，</span></span><br><span class="line"><span class="comment">// &quot;E&quot;之后的是字符串是指数的格式</span></span><br><span class="line">style = <span class="string">&quot;0.00E000&quot;</span>;</span><br><span class="line">df.applyPattern(style);</span><br><span class="line"><span class="comment">// 6--&gt;1.23E003</span></span><br><span class="line">System.out.println(<span class="string">&quot;6--&gt;&quot;</span> + df.format(data));  </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 7.模式中的&quot;%&quot;表示乘以100并显示为百分数，要放在最后。</span></span><br><span class="line">style = <span class="string">&quot;0.00%&quot;</span>;</span><br><span class="line">df.applyPattern(style);</span><br><span class="line"><span class="comment">// 7--&gt;123456.79%</span></span><br><span class="line">System.out.println(<span class="string">&quot;7--&gt;&quot;</span> + df.format(data));  </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 8.模式中的&quot;\u2030&quot;表示乘以1000并显示为千分数，要放在最后。</span></span><br><span class="line">style = <span class="string">&quot;0.00\u2030&quot;</span>;</span><br><span class="line"><span class="comment">// 在构造函数中设置数字格式</span></span><br><span class="line"><span class="type">DecimalFormat</span> <span class="variable">df1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(style);</span><br><span class="line"><span class="comment">// df.applyPattern(style);</span></span><br><span class="line"><span class="comment">// 8--&gt;1234567.89‰</span></span><br><span class="line">System.out.println(<span class="string">&quot;8--&gt;&quot;</span> + df1.format(data));  </span><br></pre></td></tr></table></figure>
<h3 id="其他"><a class="header-anchor" href="#其他"></a>其他</h3>
<h4 id="科学计数法问题"><a class="header-anchor" href="#科学计数法问题"></a>科学计数法问题</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.0000001&quot;</span>);</span><br><span class="line"><span class="comment">// 输出结果：1E-7</span></span><br><span class="line">System.out.println(b.toString());</span><br><span class="line"><span class="comment">// 输出结果：0.0000001</span></span><br><span class="line">System.out.println(b.toPlainString());</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当 BigDecimal的值 小于一定值时(测试时发现：小于等于0.0000001)时，则会被记为科学计数法。可以使用 toPlainString()方法显示原来的值</p>
</blockquote>
<h4 id="去除无效的-0"><a class="header-anchor" href="#去除无效的-0"></a>去除无效的 0</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.000000100000000&quot;</span>);</span><br><span class="line"><span class="comment">// 1E-7</span></span><br><span class="line">System.out.println(b.stripTrailingZeros().toString());</span><br><span class="line"><span class="comment">// 0.0000001</span></span><br><span class="line">System.out.println(b.stripTrailingZeros().toPlainString());</span><br></pre></td></tr></table></figure>
<blockquote>
<p>stripTrailingZeros() 方法的本质是去除掉多余的0，其返回数据类型是BigDecimal，同样的在使用时需要注意科学技术法的问题</p>
</blockquote>
<h4 id="保留小数位"><a class="header-anchor" href="#保留小数位"></a>保留小数位</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">13.154215</span>;</span><br><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="type">DecimalFormat</span> <span class="variable">df1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;0.00&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> df1.format(num);</span><br><span class="line"><span class="comment">// 13.15</span></span><br><span class="line">System.out.println(str);  </span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="comment">// #.00 表示两位小数 #.0000四位小数</span></span><br><span class="line"><span class="type">DecimalFormat</span> <span class="variable">df2</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#.00&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span>df2.format(num);</span><br><span class="line"><span class="comment">// 13.15</span></span><br><span class="line">System.out.println(str2);  </span><br><span class="line"><span class="comment">// 方式三</span></span><br><span class="line"><span class="comment">// %.2f %. 表示 小数点前任意位数   2 表示两位小数 格式后的结果为f 表示浮点型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> String.format(<span class="string">&quot;%.2f&quot;</span>, num);</span><br><span class="line"><span class="comment">// 13.15</span></span><br><span class="line">System.out.println(result);  </span><br></pre></td></tr></table></figure>
<h4 id="大小比较"><a class="header-anchor" href="#大小比较"></a>大小比较</h4>
<p>在比较两个BigDecimal的值是否相等时，要特别注意，使用 <code>equals()</code> 方法不但要求两个BigDecimal的 <strong>值相等</strong> ，还要求它们的 <strong>scale()相等</strong>，因此如果只是比较数值的大小，必须使用 <code>compareTo()</code> 方法来比较，它根据两个值的大小分别返回负数、正数和0，分别表示小于、大于和等于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;123.456&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;123.45600&quot;</span>);</span><br><span class="line"><span class="comment">// false,因为scale不同</span></span><br><span class="line">System.out.println(d1.equals(d2)); </span><br><span class="line"><span class="comment">// true,因为d2去除尾部0后scale变为2</span></span><br><span class="line">System.out.println(d1.equals(d2.stripTrailingZeros())); </span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line">System.out.println(d1.compareTo(d2)); </span><br></pre></td></tr></table></figure>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYmFpcWlhbnRhby9wLzc0NDkxNzYuaHRtbA==">Java中浮点类型的精度问题 double float<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMTI1MjU5OTU0ODM0Mzc0NC8xMjc5NzY3OTg2ODMxMzkz">廖雪峰 BigInteger<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMTI1MjU5OTU0ODM0Mzc0NC8xMjc5NzY4MDExOTk3MjE3">廖雪峰 BigDecimal<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2MueW9ueW91Y2xvdWQuY29tL2RvYy9qZGs2LWFwaS16aC9qYXZhL21hdGgvQmlnRGVjaW1hbC5odG1s">BigDecimal<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2l0LmRlZXBpbm1pbmQuY29tL2phdmEvMjAxNS8wMS8wNi9sb29raW5nLWludG8tdGhlLWphdmEtOS1tb25leS1hbmQtY3VycmVuY3ktYXBpLmh0bWw=">Java 9中新的货币API<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Util</category>
      </categories>
      <tags>
        <tag>Util</tag>
      </tags>
  </entry>
  <entry>
    <title>Charles 使用教程</title>
    <url>/2018/11/29/charles/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/incoder/image/upload/v1559463393/blog/charles.png" alt=""></p>
<p>Charles is an HTTP proxy / HTTP monitor / Reverse Proxy that enables a developer to view all of the HTTP and SSL / HTTPS traffic between their machine and the Internet. This includes requests, responses and the HTTP headers (which contain the cookies and caching information)</p>
<span id="more"></span>
<p>Charles是一个HTTP代理/ HTTP监视器/ 反向代理，使开发人员能够查看其机器和Internet之间的所有HTTP和SSL / HTTPS流量，这包括请求，响应和HTTP标头（包含cookie和缓存信息）</p>
<h2 id="Charles"><a class="header-anchor" href="#Charles"></a>Charles</h2>
<p>主要特点</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hhcmxlc3Byb3h5LmNvbS9kb2N1bWVudGF0aW9uL3Byb3h5aW5nL3NzbC1wcm94eWluZy8=">SSL代理<i class="fa fa-external-link-alt"></i></span> - 以纯文本格式查看SSL请求和响应</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hhcmxlc3Byb3h5LmNvbS9kb2N1bWVudGF0aW9uL3Byb3h5aW5nL3Rocm90dGxpbmcv">Bandwidth Throttling<i class="fa fa-external-link-alt"></i></span>模拟较慢的Internet连接，包括延迟</li>
<li>AJAX调试 - 以树或文本形式查看XML和JSON请求和响应</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hhcmxlc3Byb3h5LmNvbS9kb2N1bWVudGF0aW9uL2FkZGl0aW9uYWwvYW1mLw==">AMF<i class="fa fa-external-link-alt"></i></span> - 以树形式查看Flash Remoting / Flex Remoting消息的内容</li>
<li>重复请求以测试后端更改</li>
<li>编辑测试不同输入的请求</li>
<li>用于拦截和编辑请求或响应的断点</li>
<li>使用W3C验证器验证记录的HTML，CSS和RSS / atom响应</li>
</ul>
<blockquote>
<p>本篇文章操作均基于Charlers 4.2.8版本，及 macOS 10.14.5 版本</p>
</blockquote>
<h3 id="安装"><a class="header-anchor" href="#安装"></a>安装</h3>
<ul>
<li>Windows：略</li>
<li>macOS：略</li>
</ul>
<blockquote>
<p>下载地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hhcmxlc3Byb3h5LmNvbS9kb3dubG9hZC8=">官方Charles<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h4 id="激活"><a class="header-anchor" href="#激活"></a>激活</h4>
<p><font color=#FF0000>有能力，请支持付费支持正版~</font><br>
<font color=#FF0000>有能力，请支持付费支持正版~</font><br>
<font color=#FF0000>有能力，请支持付费支持正版~</font></p>
<p>仅供个人学习研究和交流使用，请勿用于任何商业用途。<br>
Charles ——&gt; Help ——&gt; Register Charles…</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Registered Name: https://zhile.io</span><br><span class="line">License Key: 48891cf209c6d32bf4</span><br></pre></td></tr></table></figure>
<p><span class="exturl" data-url="aHR0cHM6Ly96aGlsZS5pby8yMDE3LzA3LzA3L2NoYXJsZXMtcHJveHktdXNhZ2UtYW5kLWxpY2Vuc2UuaHRtbA==">激活密钥来自知了<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="配置"><a class="header-anchor" href="#配置"></a>配置</h3>
<p>配置流程</p>
<ol>
<li>获取操作系统网络IP地址</li>
<li>修改客户端网络IP连接</li>
<li>在操作系统及客户端上安装证书</li>
<li>设置SSL代理</li>
</ol>
<blockquote>
<p>以上配置要求，操作系统（Windows，macOS）及客户端（Android，iOS）连接在 <strong>同一WiFi网络</strong></p>
</blockquote>
<h4 id="获取系统-IP"><a class="header-anchor" href="#获取系统-IP"></a>获取系统 IP</h4>
<p>不管是是 Windows 系统还是 macOS 系统都可以通过 Charles 来获取，获取方式 <code>Help</code> ——&gt; <code>Local IP Address</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559436487/blog/charles-ip.png" alt="charles-ip"></p>
<h5 id="Windows"><a class="header-anchor" href="#Windows"></a>Windows</h5>
<p>使用命令行查看网络 IP 地址 <code>ipconfig</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559437724/blog/charles-windows-ip.png" alt="charles-windows-ip"></p>
<h5 id="macOS"><a class="header-anchor" href="#macOS"></a>macOS</h5>
<ul>
<li>使用命令行查看网络 IP 地址 <code>ifconfig en0</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559436484/blog/charles-mac-ip.png" alt="charles-mac-ip"></li>
<li>macOS系统设置查看IP 地址 <code>System Preferences</code> ——&gt; <code>Network</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559437653/blog/charles-network-ip.png" alt="charles-network-ip"></li>
</ul>
<h4 id="查看监听端口"><a class="header-anchor" href="#查看监听端口"></a>查看监听端口</h4>
<p><code>Proxy</code>——&gt; <code>Proxy settings...</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559437270/blog/charles-view-port.png" alt="charles-view-port"></p>
<h4 id="客户端设置"><a class="header-anchor" href="#客户端设置"></a>客户端设置</h4>
<p>要求手机网络与 PC 网络同链接在一个路由器网络下，这样手机的请求都将通过 PC，因此在 Charles 上可以看到手机上的网络请求。</p>
<p>手机上安装下面的步骤请看下面的详细介绍，安装完证书，Charles 将会收到提示，进行允许即可<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559465134/blog/charles-allow.png" alt="charles-allow"></p>
<h5 id="Android"><a class="header-anchor" href="#Android"></a>Android</h5>
<ul>
<li>
<p>修改网络配置选项</p>
</li>
<li>
<p>导入Charles证书，使用浏览器打开 <span class="exturl" data-url="aHR0cDovL3d3dy5jaGFybGVzcHJveHkuY29tL2dldHNzbA==">www.charlesproxy.com/getssl<i class="fa fa-external-link-alt"></i></span> 或 <a href="chls.pro/ssl">http://chls.pro/ssl</a>，下载证书，并进行安装</p>
</li>
</ul>
<h5 id="iOS"><a class="header-anchor" href="#iOS"></a>iOS</h5>
<ul>
<li>
<p>修改网络配置选项</p>
</li>
<li>
<p>导入Charles证书</p>
</li>
<li>
<p>证书授权</p>
</li>
</ul>
<h5 id="模拟器"><a class="header-anchor" href="#模拟器"></a>模拟器</h5>
<h4 id="Charles设置"><a class="header-anchor" href="#Charles设置"></a>Charles设置</h4>
<ul>
<li>Install Charles Root Certificate<br>
完成客户端的设置，我们此时再对 Charles 进行设置，首先我们先进性安装 Charles 证书，<code>Help</code> ——&gt; <code>SSL Proxying...</code> ——&gt; <code>Install Charles Root Certificate</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559464456/blog/charles-install-system.png" alt="charles-install-system"></li>
<li>添加证书<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559464726/blog/charles-add.png" alt="charles-add"></li>
<li>证书授权设置<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559463067/blog/charles-ca-settings.png" alt="charles-ca-settings"></li>
<li>SSL Proxy settings<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559463076/blog/charles-ssl-settings.png" alt="charles-ssl-settings">
<ul>
<li>Host：为需要过滤的域名地址，<code>*</code> 表示不过滤</li>
<li>Port：固定为443，<code>*</code> 表示任意端口</li>
</ul>
</li>
</ul>
<h2 id="抓包"><a class="header-anchor" href="#抓包"></a>抓包</h2>
<p>不废话，请看图<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559467975/blog/charles-overview.png" alt="charles-overview"></p>
<ul>
<li>Structure：视图将网络请求按访问的域名分类</li>
<li>Sequence：视图将网络请求按访问的时间排序</li>
</ul>
<blockquote>
<p>客户端请不要开启其他代理</p>
</blockquote>
<h2 id="进阶"><a class="header-anchor" href="#进阶"></a>进阶</h2>
<h3 id="过滤网络请求"><a class="header-anchor" href="#过滤网络请求"></a>过滤网络请求</h3>
<ul>
<li>方法一：在上面抓包的截图中，已经讲过，适用于 <strong>临时型</strong> 对请求进行过滤</li>
<li>方法二：<code>Proxy</code> ——&gt; <code>Recording settings</code> ——&gt; <code>include</code> ，适用于 <strong>经常性</strong> 请求过滤<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559470804/blog/charles-filter-often.png" alt="charles-filter-often"></li>
</ul>
<h3 id="Map-功能"><a class="header-anchor" href="#Map-功能"></a>Map 功能</h3>
<h4 id="设置本地映射"><a class="header-anchor" href="#设置本地映射"></a>设置本地映射</h4>
<p>指的是将网络请求重定向到本地的文件，适用于开发过程中，把线上的静态资源映射到本地，这样可以方便调试并及时查看效果，确定无误后再发布到线上环境<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559473299/blog/charles-map-local.png" alt="charles-map-local"></p>
<h4 id="设置远程映射"><a class="header-anchor" href="#设置远程映射"></a>设置远程映射</h4>
<p>指的是将网络请求重定向到另一个网络请求地址，适用于开发过程中，需要将请求重定向到其他的服务上<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559473845/blog/charles-map-remote.png" alt="charles-map-remote"></p>
<h3 id="重复发送网络请求"><a class="header-anchor" href="#重复发送网络请求"></a>重复发送网络请求</h3>
<p>可以更加需要重复一次或多次的请求，对于多次的请求可用于服务器的压力测试<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559475397/blog/charles-repeat.png" alt="charles-repeat"></p>
<h2 id="常见问题"><a class="header-anchor" href="#常见问题"></a>常见问题</h2>
<ol>
<li>Charles无法抓取到客户端网络请求
<ul>
<li>查看你的客户端网络设置，是否正确</li>
<li>查看你的客户端和 Charles 是否是处于同一网络环境</li>
</ul>
</li>
<li>Charles 无法抓取 Https 网络请求
<ul>
<li>查看你的客户端和 Charles 是否安装证书，并设置终是允许</li>
</ul>
</li>
<li>网络请求及网络响应信息中文乱码</li>
<li>如果需要抓本地应用（即拦截电脑上的应用接口），请确保你<font color=#FF0000>未开启</font>翻墙代理软件</li>
</ol>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hhcmxlc3Byb3h5LmNvbS9kb2N1bWVudGF0aW9u">Charles Document<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5neGlhbmdfMTEwMi9hcnRpY2xlL2RldGFpbHMvNzc4NTU1NDg=">Charles抓包的安装，使用说明以及常见问题解决<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mZGQ3YzY4MTkyOWM=">抓包工具Charles的使用心得<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9lYzBhMzhkOWE4Y2Y=">Charles抓包https<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>DevTool</category>
      </categories>
      <tags>
        <tag>Charles</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Cloud Platform for VPN</title>
    <url>/2018/11/07/cloud-gcp/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/incoder/image/upload/v1541559310/blog/cloud-gcp.png" alt="cloud-gcp"></p>
<p>随着云产品的普及推广，各路国际大场也是纷纷推出了相关云产品的试用，其中具有代表性的<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5nb29nbGUuY29t">Google Cloud<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbQ==">Amazon<i class="fa fa-external-link-alt"></i></span>，本篇主要讲解Googel Cloud产品的试用，并搭建SSR服务</p>
<span id="more"></span>
<p>Google Cloud 特点</p>
<ul>
<li>可使用所有Cloud Platform产品</li>
<li>免费获得$300赠金</li>
<li>免费使用结束后不会自动收费</li>
</ul>
<h2 id="准备"><a class="header-anchor" href="#准备"></a>准备</h2>
<ul>
<li>Google Email</li>
<li>visa 信用卡（需要$1进行认证，认传完成后返还$1）</li>
</ul>
<blockquote>
<p>因为Google本身在大陆是无法正常访问的，因此需要先<strong>自备梯子</strong>，可以先使用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dldGxhbnRlcm4vbGFudGVybg==">Lantern<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="GCP"><a class="header-anchor" href="#GCP"></a>GCP</h2>
<h3 id="申请Google-Cloud-Platform"><a class="header-anchor" href="#申请Google-Cloud-Platform"></a>申请Google Cloud Platform</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2ZyZWU=">官网申请<i class="fa fa-external-link-alt"></i></span>：<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2ZyZWU=">https://cloud.google.com/free<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1542540776/blog/gcp-register1.png" alt="gcp-register1"></p>
<ul>
<li>国家地区：<code>中国</code></li>
<li>服务条款：<code>同意</code></li>
<li>动态邮件：可选，根据自身需要勾选</li>
</ul>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1542540935/blog/gcp-register2.png" alt="gcp-register2"></p>
<p>根据需要填写一些信息，由于我的Google账号已是开发者账号，一些信息都是完善的，所以Google直接关联了信息，因此也不会再扣除$1，如果你是新账号，详细步骤可参考附录</p>
<h2 id="VM创建"><a class="header-anchor" href="#VM创建"></a>VM创建</h2>
<p>在创建VM之前，我们先进行<span class="exturl" data-url="aHR0cHM6Ly9jb25zb2xlLmNsb3VkLmdvb2dsZS5jb20vbmV0d29ya2luZy9maXJld2FsbHMvbGlzdA==">网络防火墙修改<i class="fa fa-external-link-alt"></i></span>，避免后续的麻烦</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1574522003/blog/gcp-firewall-settings.png" alt="gcp-firewall-settings"><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1542545777/blog/gcp-create-firewall.png" alt="gcp-create-firewall"><br>
规则设置如下：<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1542546500/blog/gcp-firewall-rule.png" alt="gcp-firewall-rule"></p>
<ul>
<li>名称：自己命名一个用于区分其它得规则</li>
<li>来源IP地址范围：<code>0.0.0.0/0</code>，这个不要写错<br>
其它按照图上设置即可</li>
</ul>
<h3 id="创建VM实例"><a class="header-anchor" href="#创建VM实例"></a>创建VM实例</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1542546431/blog/gcp-create-vm.png" alt="gcp-create-vm"><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1542546640/blog/gcp-create-vm-init.png" alt="gcp-create-vm-init"><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1542546774/blog/gcp-create-vm-course.png" alt="gcp-create-vm-course"></p>
<ul>
<li>名称：自己写一个即可</li>
<li>地区：建议选亚洲，别人推荐<code>asia-east1-c</code>，<strong>台湾彰化县</strong>实测延迟低，我这里选择了香港</li>
<li>机器类型：选微型（1个共享vCPU）</li>
<li>启动磁盘：推荐CentOS 7，当然也可以其它，选择自己熟悉的系统即可<br>
其中关于网络的设置如下：<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1542547144/blog/gcp-create-vm-network.png" alt="gcp-create-vm-network"></li>
<li>名称：任意输入即可（小写字母开头，不能为大写字母）</li>
</ul>
<p>设置完成后，创建VM实例</p>
<h2 id="连接VM"><a class="header-anchor" href="#连接VM"></a>连接VM</h2>
<p>当然，你可以使用浏览器打开连接VM<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1542547502/blog/gcp-link-vm-chrome.png" alt="gcp-link-vm-chrome"></p>
<p>经过实际操作，你会发现，在浏览器中操作延迟很高，因此我们就采用其它客户端去连接刚刚创建的这台服务器，下面分别以 <span class="exturl" data-url="aHR0cHM6Ly93d3cubmV0c2FyYW5nLmNvbS9wcm9kdWN0cy94c2hfb3ZlcnZpZXcuaHRtbA==">Xshell（Windows）<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRlcm0yLmNvbQ==">iTerm（macOS）<i class="fa fa-external-link-alt"></i></span>来演示如何与 GCP 建立连接</p>
<h3 id="使用Xshell"><a class="header-anchor" href="#使用Xshell"></a>使用Xshell</h3>
<h4 id="密钥生成"><a class="header-anchor" href="#密钥生成"></a>密钥生成</h4>
<ol>
<li>新建用户密钥生成向导<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1542547944/blog/gcp-link-vm-xshell1.png" alt="gcp-link-vm-xshell1"></li>
<li>密钥类型长度设置<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1542548236/blog/gcp-link-vm-xshell2.png" alt="gcp-link-vm-xshell2"></li>
<li>生成密钥<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1542548733/blog/gcp-link-vm-xshell3.png" alt="gcp-link-vm-xshell3"></li>
<li>设置密钥名称及密码<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1542548796/blog/gcp-link-vm-xshell4.png" alt="gcp-link-vm-xshell4"></li>
<li>保存密钥<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1542548832/blog/gcp-link-vm-xshell5.png" alt="gcp-link-vm-xshell5"></li>
</ol>
<h4 id="GCP添加密钥"><a class="header-anchor" href="#GCP添加密钥"></a>GCP添加密钥</h4>
<ul>
<li>元数据<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1542549326/blog/gcp-link-vm-settings.png" alt="gcp-link-vm-settings"></li>
<li>SSH<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1542549369/blog/gcp-link-vm-ssh.png" alt="gcp-link-vm-ssh"></li>
<li>SSH密钥添加<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1542549960/blog/gcp-link-vm-create-ssh.png" alt="gcp-link-vm-create-ssh"></li>
</ul>
<h4 id="Xshell-连接服务"><a class="header-anchor" href="#Xshell-连接服务"></a>Xshell 连接服务</h4>
<ul>
<li>配置连接的服务器地址<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1542554061/blog/gcp-link-vm-ssh-ip.png" alt="gcp-link-vm-ssh-ip"></li>
<li>配置连接服务器的密钥<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1542554117/blog/gcp-link-vm-ssh-login.png" alt="gcp-link-vm-ssh-login"></li>
</ul>
<h3 id="使用-iTerm"><a class="header-anchor" href="#使用-iTerm"></a>使用 iTerm</h3>
<ol>
<li>添加公钥到 SSH 管理</li>
<li>使用 SSH 命令进行连接</li>
</ol>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1574527300/blog/gcp-item2-ssh.png" alt="gcp-item2-ssh"></p>
<blockquote>
<p>如果你本地没有已有秘钥，或者你需要生产一对 RSA 新秘钥，可参考<a href="https://incoder.org/2019/01/10/mac-question/">MacBook Pro 疑难杂症</a>文章的 <strong>免密登录服务器</strong> 的前半部分内容</p>
</blockquote>
<h2 id="准备工作"><a class="header-anchor" href="#准备工作"></a>准备工作</h2>
<h3 id="内核升级"><a class="header-anchor" href="#内核升级"></a>内核升级</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到root用户</span></span><br><span class="line">sudo -i</span><br><span class="line"><span class="comment"># 安装wget</span></span><br><span class="line">yum install -y wget</span><br><span class="line"><span class="comment"># 安装bbr</span></span><br><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class="line"><span class="comment"># 给bbr.sh文件设置权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x bbr.sh</span><br><span class="line"><span class="comment"># 启动bbr.sh脚本</span></span><br><span class="line">./bbr.sh</span><br></pre></td></tr></table></figure>
<p>执行<code>./bbr.sh</code>安装过程如下<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1574528726/blog/gcp-centos-bbr.png" alt="gcp-centos-bbr"></p>
<p>执行完成后，会提示，输入<code>y</code>并<code>回车</code>后重启，这时需要等待几分钟</p>
<p>重启完成后，重新连接服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到root用户</span></span><br><span class="line">sudo -i</span><br><span class="line"><span class="comment"># 查看内核（版本大于4.13或以上版本，就表示OK）</span></span><br><span class="line"><span class="built_in">uname</span> -r</span><br></pre></td></tr></table></figure>
<h3 id="选择安装服务"><a class="header-anchor" href="#选择安装服务"></a>选择安装服务</h3>
<p>对于 SSR 和 v2ray <strong>都</strong>可以提供不可描述的服务，由于v2ray 功能更加强大，并且更加隐蔽，不易被发现，因此<font color=red>极力推荐使用 v2ray </font>方式</p>
<h2 id="SSR"><a class="header-anchor" href="#SSR"></a>SSR</h2>
<p>通过以上的配置，我们可以使用Xshell进行SSR工具的安装，安装SSR工具前，需要先升级系统内核，按照如下执行命令</p>
<h3 id="安装SSR"><a class="header-anchor" href="#安装SSR"></a>安装SSR</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到root用户</span></span><br><span class="line">sudo -i</span><br><span class="line"><span class="comment"># wget设置</span></span><br><span class="line">wget --no-check-certificate -O shadowsocks-all.sh</span><br><span class="line"><span class="comment"># 下载安装SSR</span></span><br><span class="line">https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line"><span class="built_in">chmod</span> +x shadowsocks-all.sh</span><br><span class="line"><span class="comment"># 执行SSR运行脚本</span></span><br><span class="line">./shadowsocks-all.sh 2&gt;&amp;1 | <span class="built_in">tee</span> shadowsocks-all.log</span><br></pre></td></tr></table></figure>
<p>安装过程步骤如下：</p>
<ul>
<li>选择版本：推荐ShadowsocksR，输入<code>2</code></li>
<li>设置密码</li>
<li>设置端口</li>
<li>选择加密方式，这里选择chacha20，输入<code>12</code></li>
<li>选择协议，这里选择auth_sha1_v4，输入<code>3</code></li>
<li>选择混淆方式，这里选择http_simple，输入<code>2</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1542556264/blog/gcp-link-vm-ssh-install.png" alt="gcp-link-vm-ssh-install"></li>
</ul>
<p>等待安装完成，提示如下：<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1542556345/blog/gcp-link-vm-ssh-finish.png" alt="gcp-link-vm-ssh-finish"></p>
<p>根据安装完成后提示的信息配置你的SSR客户端即可</p>
<h3 id="span-id-修改SSR配置-修改-SSR-配置-span"><a class="header-anchor" href="#span-id-修改SSR配置-修改-SSR-配置-span"></a><span id = "修改SSR配置">修改 SSR 配置</span></h3>
<p>在实际过程中，我们安装完成后，可能根据实际环境，需要修改配置，那么我们该怎么去修改呢，直接看下面命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shadowsocks-r 默认路径是 /etc/shadowsocks-r</span></span><br><span class="line">vim /etc/shadowsocks-r/config.json</span><br><span class="line"><span class="comment"># 安装实际需要，更改后保存配置，然后重启shadowsocks-r 服务</span></span><br><span class="line">/etc/init.d/shadowsocks-r restart</span><br><span class="line"><span class="comment"># 记得更新你客户端相关的配置</span></span><br></pre></td></tr></table></figure>
<h3 id="卸载-SSR"><a class="header-anchor" href="#卸载-SSR"></a>卸载 SSR</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到root用户</span></span><br><span class="line">sudo -i</span><br><span class="line"><span class="comment"># 进入脚本目录（可省略）</span></span><br><span class="line"><span class="built_in">cd</span> /home/&lt;user-name&gt;/</span><br><span class="line"><span class="comment"># 使用 help 查看指令（可省略）</span></span><br><span class="line">./shadowsocks-all.sh -<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 执行卸载</span></span><br><span class="line">./shadowsocks-all.sh uninstall</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当你不知道该应用拥有什么命令时，多用 help 来获取相关的指令</p>
</blockquote>
<h3 id="SSR-常用命令"><a class="header-anchor" href="#SSR-常用命令"></a>SSR 常用命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动SSR</span></span><br><span class="line">/etc/init.d/shadowsocks-r start</span><br><span class="line"><span class="comment"># 退出SSR</span></span><br><span class="line">/etc/init.d/shadowsocks-r stop</span><br><span class="line"><span class="comment"># 重启SSR</span></span><br><span class="line">/etc/init.d/shadowsocks-r restart</span><br><span class="line"><span class="comment"># SSR状态</span></span><br><span class="line">/etc/init.d/shadowsocks-r status</span><br><span class="line"><span class="comment"># 卸载SSR，默认目录 /home/&lt;user-name&gt;/</span></span><br><span class="line">./shadowsocks-all.sh uninstall</span><br></pre></td></tr></table></figure>
<h2 id="span-id-v2ray-v2ray-span"><a class="header-anchor" href="#span-id-v2ray-v2ray-span"></a><span id = "v2ray">v2ray</span></h2>
<h3 id="时间校准"><a class="header-anchor" href="#时间校准"></a>时间校准</h3>
<p>对于 v2ray，它的验证方式包含时间，就算是配置没有任何问题，如果时间不正确，也无法连接 v2ray 服务器的，服务器会认为你这是不合法的请求。所以系统时间一定要正确，只要保证时间误差在90秒之内就没问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 VPS 时间</span></span><br><span class="line"><span class="built_in">date</span> -R</span><br><span class="line"><span class="comment"># +0000表示时区</span></span><br><span class="line">Sat, 23 Nov 2019 17:21:50 +0000</span><br><span class="line"><span class="comment"># 将系统服务时间设置成本地时间</span></span><br><span class="line"><span class="built_in">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"><span class="comment"># 检查服务器系统时间是否和本地时间一样</span></span><br><span class="line"><span class="built_in">date</span> -R</span><br></pre></td></tr></table></figure>
<h3 id="安装-v2ray"><a class="header-anchor" href="#安装-v2ray"></a>安装 v2ray</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装脚本</span></span><br><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br><span class="line"><span class="comment"># 安装完成，v2ray 并不会自动运行，因此需要手动启动服务</span></span><br><span class="line">sudo systemctl start v2ray</span><br><span class="line"><span class="comment"># 查看 v2ray 运行状态</span></span><br><span class="line">service v2ray status</span><br></pre></td></tr></table></figure>
<p>基本文件安装路径地址</p>
<ul>
<li>/usr/bin/v2ray/v2ray：V2Ray 程序；</li>
<li>/usr/bin/v2ray/v2ctl：V2Ray 工具；</li>
<li>/etc/v2ray/config.json：配置文件；</li>
<li>/usr/bin/v2ray/geoip.dat：IP 数据文件</li>
<li>/usr/bin/v2ray/geosite.dat：域名数据文件</li>
</ul>
<p>安装过程截图如下<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1574530585/blog/gcp-v2ray-install.png" alt="gcp-v2ray-install"></p>
<h3 id="配置修改"><a class="header-anchor" href="#配置修改"></a>配置修改</h3>
<h3 id="客户端连接"><a class="header-anchor" href="#客户端连接"></a>客户端连接</h3>
<h2 id="问题排查"><a class="header-anchor" href="#问题排查"></a>问题排查</h2>
<p>每到敏感时期，一大批服务都会被封，这次我的服务也不理外，这里就讲一讲我是如何排除问题。</p>
<blockquote>
<p>所处环境说明：<br>
0. VPS 上安装的 SSR 服务</p>
<ol>
<li>可以使用 SSH 工具（比如：Xshell）可以连接 VPS 机器</li>
<li>在 VPS 中 <code>ping google.com</code> 是可以的</li>
<li>连接 VPS 的客户端，无法正常访问国外网站</li>
</ol>
</blockquote>
<p>出现以上情况，大概率是当前的 SSR 服务端口被封了，可以通过以下方式来验证</p>
<ol>
<li>
<p>使用国内站长工具端口扫描检查下 VPS 的端口是否可以正常访问，地址：<span class="exturl" data-url="aHR0cDovL3Rvb2wuY2hpbmF6LmNvbS9wb3J0Lw==">http://tool.chinaz.com/port<i class="fa fa-external-link-alt"></i></span></p>
<ul>
<li>如果提示<strong>关闭</strong>，说明国内无法访问该 VPS 对应的端口服务</li>
<li>如果提示<strong>开启</strong>，说明访问正常</li>
</ul>
</li>
<li>
<p>使用用国外端口扫描网站进行检查你的 VPS 服务是否可以正常访问，地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cueW91Z2V0c2lnbmFsLmNvbS90b29scy9vcGVuLXBvcnRzLw==">https://www.yougetsignal.com/tools/open-ports<i class="fa fa-external-link-alt"></i></span></p>
<ul>
<li>如果检查结果为<strong>open</strong>，说明国外可以正常访问你的 VPS 对应端口的服务</li>
<li>如果检查结果为<strong>close</strong>，说明国外无法访问</li>
</ul>
</li>
</ol>
<p>经过上面的两部，可以快速定位到问题，如果你检查出来的结果一样，则可以更改 VPS 上的 SSR 服务端口，重新启动 SSR 服务即可，在上面已经讲到了如何<a href="#%E4%BF%AE%E6%94%B9SSR%E9%85%8D%E7%BD%AE">修改 SSR 配置</a>，切记一起连<strong>加密方式</strong>，<br>
<strong>协议</strong>，<strong>混淆方式</strong>这些配置一并改掉，然后重启 SSR 服务，并修改连接 SSR 服务的<strong>客户端配置</strong>，其实这只是一个暂时的解决方法，我们可以使用更加隐蔽的 <a href="#v2ray"><font color=red>v2ray</font></a> 服务</p>
<h2 id="其它"><a class="header-anchor" href="#其它"></a>其它</h2>
<ul>
<li>查询余额<br>
进入结算概览页面: <span class="exturl" data-url="aHR0cHM6Ly9jb25zb2xlLmNsb3VkLmdvb2dsZS5jb20vYmlsbGluZy8=">https://console.cloud.google.com/billing/<i class="fa fa-external-link-alt"></i></span></li>
<li>扣费计算<br>
主机：$5/月.<br>
流量：谷歌云服务器出口大陆流量1T以内价格约为0.23$/1G.<br>
每个月可用流量：$300-$5*12=$240/12/0.23 ≈ 86G</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWVkaWFmaXJlLmNvbS9mb2xkZXIvYnRrZGJ4N2o5bHI5OC9TaGFkb3dzb2Nrc18lRTclOUIlQjglRTUlODUlQjMlRTUlQUUlQTIlRTYlODglQjclRTclQUIlQUYjbXlmaWxlcw==">SSR客户端<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cud21zb2hvLmNvbS9nb29nbGUtY2xvdWQtcGxhdGZvcm0tc3NyLWJici10dXRvcmlhbA==">Google Cloud Platform免费申请&amp;一键搭建SSR &amp; BBR加速教程<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVsdHIuY29tL3R1dG9yaWFscy92cHMvMjMwMy5odG1s">Google Cloud使用VM虚拟机详细操作指南<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cud21zb2hvLmNvbS9ob3ctdG8tdXNlLXNoYWRvd3NvY2tzcg==">ShadowsocksR客户端 各种隐藏使用技巧说明<i class="fa fa-external-link-alt"></i></span></li>
<li>v2ray社区：<s><span class="exturl" data-url="aHR0cHM6Ly93d3cudjJyYXkuY29t">https://www.v2ray.com<i class="fa fa-external-link-alt"></i></span>已被墙</s>，<span class="exturl" data-url="aHR0cHM6Ly93d3cudjJmbHkub3Jn">https://www.v2fly.org<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FsdmluOTk5OS9uZXctcGFjL3dpa2kvJUU4JTg3JUFBJUU1JUJCJUJBdjJyYXklRTYlOUMlOEQlRTUlOEElQTElRTUlOTklQTglRTYlOTUlOTklRTclQTglOEI=">自建v2ray服务器教程<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FsdmluOTk5OS9uZXctcGFjL3dpa2kvdjJyYXklRTUlOTAlODQlRTUlQjklQjMlRTUlOEYlQjAlRTUlOUIlQkUlRTYlOTYlODclRTQlQkQlQkYlRTclOTQlQTglRTYlOTUlOTklRTclQTglOEI=">v2ray各平台图文使用教程<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Google</category>
      </categories>
      <tags>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>该死的 Base64，我惹你了？</title>
    <url>/2020/11/27/damn-base64/</url>
    <content><![CDATA[<p>在上一个项目中，由于客观原因，双方进行数据交换，用到对媒体文件（图片）进行了 Base64 编码处理，将编码后的数据存入了数据库，使用方再从数据库中取出数据进行解码恢复成图片，在实际处理中，这是<strong>最不推荐</strong>的做法。正确有效的做法是将资源文件存入到 OSS 系统中，数据库中记录文件的地址即可。但由于项目历史原因，无法使用 OSS 来处理，虽然说技术本质不难，编码存入，解码查看而已。但由于对方没有告知具体的编码方式，询问了好几次才最终给到对应的编码方式，浪费了大量的时间去沟通和试错，得不偿失</p>
<span id="more"></span>
<p>对于 Base64 ，开发者或多或少都有听过，严格意义上讲 Base64 不是加密方式，它只是一种编码方式，本篇文章就来详细的聊一聊 Base64 这个熟悉又陌生的朋友</p>
<h2 id="什么是-Base64"><a class="header-anchor" href="#什么是-Base64"></a>什么是 Base64</h2>
<h2 id="Base64-的原理"><a class="header-anchor" href="#Base64-的原理"></a>Base64 的原理</h2>
<h2 id="常见的-Base64"><a class="header-anchor" href="#常见的-Base64"></a>常见的 Base64</h2>
<h2 id="解决实际问题"><a class="header-anchor" href="#解决实际问题"></a>解决实际问题</h2>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kOTg0NGJmN2RiNmQ=">密码学 | 庐山真面！你认为 Base64 是加密算法吗？<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY2hlbnhpYm9iby9wLzE0MTA5MDY2Lmh0bWw=">什么是Base64？<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGliaW4tMS9wLzYxNjU0ODUuaHRtbA==">Base64编码原理分析<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9lOTUyNzhlZDk4YjQ=">Base64编码<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9iNmFmMzAxNzdjMGE=">Base64算法不一致可能会导致的坑<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Exp</tag>
      </tags>
  </entry>
  <entry>
    <title>系统间数据同步</title>
    <url>/2020/07/21/data-sync/</url>
    <content><![CDATA[<p>对于不同系统之间的数据同步，业界通常有四种方式来进行数据交互，本篇文章就来聊一聊这四种数据交互方式</p>
<span id="more"></span>
<h2 id="共享文件"><a class="header-anchor" href="#共享文件"></a>共享文件</h2>
<ul>
<li>共享目录：可以是同台机器内的硬盘目录或者是挂载一个共享存储。在系统之间同步数据是非常简单，对共享存储中的文件读写就可以了</li>
<li>FTP 或者对象存储：不同系统间的批量文件往往用此方式实现，比如银行的批量回盘文件。数据量比较大的情况下大多采用此种方式，这种方式缺点就是不能实时，做个通知接口做到准实时性</li>
<li>zookeeper：zk 是基于文件的，可以同步简单数据，大数据量不太合适</li>
</ul>
<h2 id="接口"><a class="header-anchor" href="#接口"></a>接口</h2>
<p>接口可以实时进行数据的交互</p>
<ul>
<li>HTTP 接口：这种接口是使用最多的，SpringCloud 所支持的，也是多个已购系统间采用的同步方式。使用方式，可以推送或拉取</li>
<li>RPC 方式：微服务的新起，诞生了很多 RPC 框架，也可以说是 RPC 框架促进了微服务的进步。比较流行的 RPC 框架有 Dubbo，gRPC，Thrift 等</li>
</ul>
<h2 id="消息队列"><a class="header-anchor" href="#消息队列"></a>消息队列</h2>
<p>常用的 MQ 消息队列，在收集日志或者多个系统间准实时同步，优点是系统间解耦，削峰，易扩展等特点</p>
<h2 id="数据库"><a class="header-anchor" href="#数据库"></a>数据库</h2>
<p>同步结构化的数据可以采用数据库的形式，比如一个做批量的服务专门计算或统计业务数据，统计结果写入一个库，业务系统需要的时候直接从这个库读取即可</p>
<p>数据库同步的方式我理解大多数的单向少数几个系统间的同步。也可以多个系统间使用，比如用数据库的方式生成唯一 ID，多个系统共享使用</p>
]]></content>
      <categories>
        <category>Sync</category>
      </categories>
      <tags>
        <tag>Sync</tag>
      </tags>
  </entry>
  <entry>
    <title>发布 jar 到 Maven中央仓库</title>
    <url>/2019/07/21/deploy-maven/</url>
    <content><![CDATA[<h2 id="背景"><a class="header-anchor" href="#背景"></a>背景</h2>
<p>和朋友一起维护的开源组织（我就是打个辅助，逃~），其中有一个系列的项目，这些项目统一通过 base 项目的 pom 文件管理这个系列项目依赖的第三方 jar，其他一些辅助项目（如：tools）项目主要是一些常用工具方法的封装，为了能让我们在不同机器，不同地点能够无缝切换，更重要的让使用的伙伴能以最简便的方式运行（避免不必要的配置），我们需要把通用的东西托管起来，那么就需要将这些配置依赖或辅助 jar 托管到 Maven中央仓库，话不多说，就跟着我的步骤来看看如何将 jar 发布到 Maven中央仓库</p>
<span id="more"></span>
<h2 id="准备"><a class="header-anchor" href="#准备"></a>准备</h2>
<ul>
<li>Sonatype 账号</li>
<li>GPG</li>
<li>需要发布的项目</li>
</ul>
<blockquote>
<p>这里以 Mac 系统演示</p>
</blockquote>
<h2 id="Sonatype"><a class="header-anchor" href="#Sonatype"></a>Sonatype</h2>
<h3 id="账号注册"><a class="header-anchor" href="#账号注册"></a>账号注册</h3>
<p>Sonatype 账号注册地址：<span class="exturl" data-url="aHR0cHM6Ly9pc3N1ZXMuc29uYXR5cGUub3JnL3NlY3VyZS9TaWdudXAhZGVmYXVsdC5qc3Bh">https://issues.sonatype.org/secure/Signup!default.jspa<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>记录好你的账号和密码，后续会用到</p>
</blockquote>
<h3 id="创建-issue"><a class="header-anchor" href="#创建-issue"></a>创建 issue</h3>
<p>创建 issue 地址：<span class="exturl" data-url="aHR0cHM6Ly9pc3N1ZXMuc29uYXR5cGUub3JnL3NlY3VyZS9DcmVhdGVJc3N1ZS5qc3BhP2lzc3VldHlwZT0yMSZwaWQ9MTAxMzQ=">https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134<i class="fa fa-external-link-alt"></i></span></p>
<p>填写信息时，只填写必填项即可</p>
<ol>
<li><code>Summary</code>：简单的项目介绍，填写一下</li>
<li><code>Group Id</code>：项目ID，用来定位应用 jar 的坐标，可参考<span class="exturl" data-url="aHR0cHM6Ly9jZW50cmFsLnNvbmF0eXBlLm9yZy9wYWdlcy9jaG9vc2luZy15b3VyLWNvb3JkaW5hdGVzLmh0bWw=">官方说明<i class="fa fa-external-link-alt"></i></span></li>
<li><code>Project URL</code>：项目主页地址</li>
<li><code>SCM url</code>：Git仓库地址</li>
</ol>
<blockquote>
<p>注意：</p>
</blockquote>
<ul>
<li>Group Id
<ul>
<li>无自己的域名：可以使用 Github，比如我的 GitHub 用户名是 BladeCode（也可以用你的组织名，如这里：twodragonlake），那么这里的Group Id应该填写 com.github.BladeCode，也可以使用 io.github.BladeCode</li>
<li>有自己的域名：按照要求添加一条 TXT 的 DNS 解析，用来验证你的 <code>Group Id</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1563762211/blog/ossrh-domain.png" alt="ossrh-domain"></li>
</ul>
</li>
<li>可参考：<span class="exturl" data-url="aHR0cHM6Ly9pc3N1ZXMuc29uYXR5cGUub3JnL2Jyb3dzZS9PU1NSSC00NTU5Nw==">OSSRH-45597<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="验证-Group-Id"><a class="header-anchor" href="#验证-Group-Id"></a>验证 Group Id</h3>
<p>根据你是否有自己的域名，有不同的方式来验证，上面的创建 issue 的注意中已经说明了，这里不啰嗦了，直接看下图<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1563705782/blog/ossrh-ticket.png" alt="ossrh-ticket"></p>
<h2 id="GPG"><a class="header-anchor" href="#GPG"></a>GPG</h2>
<ul>
<li>Windows：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ3BnNHdpbi5vcmcvZG93bmxvYWQuaHRtbA==">Gpg4win<i class="fa fa-external-link-alt"></i></span></li>
<li>macOS：gpg</li>
</ul>
<h3 id="安装"><a class="header-anchor" href="#安装"></a>安装</h3>
<p>macOS 为例</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install gpg</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">gpg --version</span><br></pre></td></tr></table></figure>
<h3 id="生成秘钥对"><a class="header-anchor" href="#生成秘钥对"></a>生成秘钥对</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gpg --gen-key</span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1563706827/blog/ossrh-gpg-key.png" alt="ossrh-gpg-key"></p>
<p>这里用于生成秘钥的用户名和邮箱，可以和你的 <code>Sonatype</code> 账号不一样，记录<code>密码</code>，在部署时需要用到</p>
<h3 id="上传秘钥"><a class="header-anchor" href="#上传秘钥"></a>上传秘钥</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上传秘钥，最好带上端口号</span></span><br><span class="line">gpg --keyserver hkp://pool.sks-keyservers.net:11371 --send-keys &lt;密钥ID&gt;</span><br><span class="line"><span class="comment"># 验证秘钥，最好带上端口号</span></span><br><span class="line">gpg --keyserver hkp://pool.sks-keyservers.net:11371 --recv-keys &lt;密钥ID&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1563707069/blog/ossrh-gpg-send.png" alt="ossrh-gpg-send"></p>
<p>上传到其他服务器，命令同上，更换地址即可</p>
<ul>
<li>hkp://keyserver.ubuntu.com:11371</li>
<li>hkp://keys.gnupg.net:11371</li>
</ul>
<p>如果你忘记了你刚刚生成的秘钥，可以使用下面的命令来查看本地生成的所有秘钥</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gpg --list-keys</span><br></pre></td></tr></table></figure>
<h2 id="配置"><a class="header-anchor" href="#配置"></a>配置</h2>
<h3 id="maven-配置"><a class="header-anchor" href="#maven-配置"></a>maven 配置</h3>
<ul>
<li>查看路径<br>
macOS 可以使用 IDEA 查看 maven 的路径，<code>/usr/local/Cellar/maven/3.6.0/libexec/conf</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1563707961/blog/ossrh-maven-local.png" alt="ossrh-maven-local"></li>
<li>修改 <code>settings.xml</code> 文件<br>
在 <code>&lt;servers&gt;</code> 标签内，添加如下配置  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>你注册的Sonatype账号<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="pom-配置"><a class="header-anchor" href="#pom-配置"></a>pom 配置</h3>
<p>配置你需要上传项目的 <code>pom</code> 文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonatype.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>oss-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>tdl-base<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>TwoDragonLake base pom<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/TwoDragonLake/tdl-base<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Apache License, Version 2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里配置 gpg 生成秘钥时的用户名和邮箱 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Jerry xu<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span>&gt;</span>incoder.xu@gmail.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 更改成你的项目信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag</span>&gt;</span>master<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/TwoDragonLake/tdl-base.git<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connection</span>&gt;</span>scm:git:https://github.com/TwoDragonLake/tdl-base.git<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span>scm:git:https://github.com/TwoDragonLake/tdl-base.git<span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这个id有用的，用于发布命令 mvn clean deploy -P release（这个参数） -Dmaven.test.skip=true --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Source --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Javadoc --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- Skip javadoc error --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- &lt;configuration&gt;</span></span><br><span class="line"><span class="comment">                        &lt;failOnError&gt;false&lt;/failOnError&gt;</span></span><br><span class="line"><span class="comment">                        &lt;doclint&gt;none&lt;/doclint&gt;</span></span><br><span class="line"><span class="comment">                    &lt;/configuration&gt; --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Gpg Signature --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-gpg-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>sign<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这个也是必须要的 以下两个&lt;id&gt;代码块中的id要与 setting.xml中的id一致 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/service/local/staging/deploy/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="编译并部署"><a class="header-anchor" href="#编译并部署"></a>编译并部署</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mvn clean deploy -P release -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>然后在命令行的弹出中输入使用 gpg 命令生成秘钥时输入的密码，如果在命令行中没有弹框提示，那么可以在终端中输入<code>export GPG_TTY=$(tty)</code>命令，再次执行部署命令，部署完成参考下图提示<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1563725146/blog/ossrh-deploy.png" alt="ossrh-deploy"></p>
<h2 id="发布"><a class="header-anchor" href="#发布"></a>发布</h2>
<h3 id="编译构建验签"><a class="header-anchor" href="#编译构建验签"></a>编译构建验签</h3>
<p>部署成功后，使用<code>Sonatype</code>登录 <span class="exturl" data-url="aHR0cHM6Ly9vc3Muc29uYXR5cGUub3JnLyNzdGFnaW5nUmVwb3NpdG9yaWVz">https://oss.sonatype.org<i class="fa fa-external-link-alt"></i></span>网站，进行发布，在<code>Build Promotion</code>中选择<code>Staging Repositories</code>，然后选择对应你的<code>groud id</code>的<code>Repository</code>，进行 close，这里的<code>Close</code>其实就是进行自动构建，进行验证<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1563725940/blog/ossrh-close.png" alt="ossrh-close"></p>
<p>参看是自动化运行过程否有错误，正确如下截图没有错误提示，如果有错误提示，就按照提示内容进行处理<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1563726108/blog/ossrh-build.png" alt="ossrh-build"></p>
<h3 id="发布-v2"><a class="header-anchor" href="#发布-v2"></a>发布</h3>
<p>构建成功无错误，后就可以发布了，其实发布和部署是一样的操作，只不过部署是进行<code>Close</code>，而发布是<code>Release</code>操作，此时会提示你发布成功后会删除<code>Staging Repositories</code> 的 <code>Repository</code> 记录<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1563726307/blog/ossrh-release.png" alt="ossrh-release"></p>
<h3 id="查看"><a class="header-anchor" href="#查看"></a>查看</h3>
<p>打开你的<span class="exturl" data-url="aHR0cHM6Ly9pc3N1ZXMuc29uYXR5cGUub3JnL2Jyb3dzZS9PU1NSSC00NTU5Nw==">https://issues.sonatype.org<i class="fa fa-external-link-alt"></i></span>，登录并查看，你的 issues 下，提示你，已经发布成功，稍后可以在<span class="exturl" data-url="aHR0cHM6Ly9zZWFyY2gubWF2ZW4ub3Jn">https://search.maven.org<i class="fa fa-external-link-alt"></i></span>中搜索到<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1563726729/blog/ossrh-deploy-success.png" alt="ossrh-deploy-success"></p>
<p>搜索结果，可以查看到我们发布的包<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1563726893/blog/ossrh-search.png" alt="ossrh-search"></p>
<h2 id="异常"><a class="header-anchor" href="#异常"></a>异常</h2>
<h3 id="IDEA-中-not-found"><a class="header-anchor" href="#IDEA-中-not-found"></a>IDEA 中 not found</h3>
<p>项目中引入的 jar，IDEA 中提示无法找到包，可以打开 IDEA 的 Preferences 中进行同步<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1563727259/blog/ossrh-idea-update.png" alt="ossrh-idea-update"></p>
<h3 id="本地编译错误"><a class="header-anchor" href="#本地编译错误"></a>本地编译错误</h3>
<ul>
<li>无提示框提示输入密码<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1563727360/blog/ossrh-local-build-comfrim.png" alt="ossrh-local-build-comfrim"><br>
解决方法：<code>export GPG_TTY=$(tty)</code> 命令，重新编译</li>
<li>无法连接sonatype<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1563727678/blog/ossrh-local-sonatype.png" alt="ossrh-local-sonatype"><br>
解决方法：查看<code>settings.xml</code>文件中 <code>&lt;server&gt;</code>标签中配置的 <code>id</code> 是否与项目<code>pom</code>文件的<code>&lt;distributionManagement&gt;</code> 标签下的 <code>id</code> 是否一致</li>
</ul>
<h3 id="sonatype-构建错误"><a class="header-anchor" href="#sonatype-构建错误"></a>sonatype 构建错误</h3>
<p>查看构建过程中错误提示，我这里是应为无法验证签名，因此我将提示中的服务器地址，全部都再发布<code>gpg</code>的秘钥，注意地址开头是 <code>hkp</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1563728038/blog/ossrh-build-error.png" alt="ossrh-build-error"></p>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<h3 id="官方"><a class="header-anchor" href="#官方"></a>官方</h3>
<ul>
<li><span class="exturl" data-url="aHR0cDovL2NlbnRyYWwuc29uYXR5cGUub3JnL3BhZ2VzL29zc3JoLWd1aWRlLmh0bWw=">OSSRH Guide<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jZW50cmFsLnNvbmF0eXBlLm9yZy9wYWdlcy9hcGFjaGUtbWF2ZW4uaHRtbA==">发布要求、规范<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2NlbnRyYWwuc29uYXR5cGUub3JnL3BhZ2VzL3dvcmtpbmctd2l0aC1wZ3Atc2lnbmF0dXJlcy5odG1s">PGP签名使用<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2NlbnRyYWwuc29uYXR5cGUub3JnL3BhZ2VzL3Byb2R1Y2Vycy5odG1s">发布项目文档<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="其他"><a class="header-anchor" href="#其他"></a>其他</h3>
<ul>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5yOWl0LmNvbS8yMDE5MDcwMS9tYXZlbi1hcnRpZmFjdC1kZXBsb3kuaHRtbA==">发布 Maven 构件到中央仓库<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zaWxsb3kubWUvMjAxOC8wNi8xOS8lRTUlOEYlOTElRTUlQjglODMlRTYlOUUlODQlRTQlQkIlQjYlRTUlODglQjBNYXZlbiVFNCVCOCVBRCVFNSVBNCVBRSVFNCVCQiU5MyVFNSVCQSU5My8=">发布构件到Maven中央仓库<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8xYmQzNmVkYWI0ZWU=">如何发布Jar包到Maven Central Repository<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Deploy</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA 之 SpringBoot 应用部署</title>
    <url>/2019/11/19/deploy-springboot/</url>
    <content><![CDATA[<p>服务端由原来 <strong>混合式</strong>（Java+JSP）的方式演进成专注于提供服务 API（<strong>前后端分离</strong>）的方式，开发的明确分工，使的各自开发人员在各自领域的垂直技能的加强，以满足业务的快速迭代，因此也就在这两个方式中，项目的构建方式也有了一定的变化，混合模式中常编译为 war 包，而在前后端分离模式中常编译为 jar 包，这两种文件格式虽然都是一种压缩文件的格式，但实质还是有一些区别，那首先让我们来了解这两种文件它们之间的区别</p>
<span id="more"></span>
<p>jar 文件与 war 文件的区别</p>
<ol>
<li>war 文件常应用在 <strong>混合式</strong> 的项目中，war 文件包含Java 相关的项目文件、部署文件，还包含一些前端页面等引用的相关资源文件；jar 文件常应用在 <strong>前后端分离</strong> 的项目中，jar 文件主要包含Java 相关的项目文件、部署文件</li>
<li>war 文件中不包含 Tomcat相关文件，必须运行在 Tomcat 容器中；jar 文件中内置了 Tomcat 文件，可直接运行</li>
<li>war 文件通常使用 SSM 架构；jar 文件通常使用 SpringBoot/SpringCloud 架构</li>
<li>无论是 jar 还是 war 都能够使用嵌套容器，java -jar来独立运行</li>
<li><strong>只有 war</strong> 才能部署到外部容器中；SpringBoot支持多种模板引擎，但JSP 只能在 war 中使用</li>
</ol>
<h2 id="准备"><a class="header-anchor" href="#准备"></a>准备</h2>
<ul>
<li>System：macOS</li>
<li>Java：JDK 1.8+</li>
<li>编辑器：IDEA</li>
<li>包管理：maven/gradle</li>
<li>服务器连接：iTerm2</li>
<li>项目示例：
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Jvb3RDbHVzdGVyL3JjLWNsdXN0ZXItc3ByaW5nYm9vdA==">rc-cluster-springboot<i class="fa fa-external-link-alt"></i></span>，这是一个 gradle 管理的 SpringBoot 项目</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Jvb3RDbHVzdGVyL3JjLXNzbS90cmVlL2V4YW1wbGU=">rc-ssm<i class="fa fa-external-link-alt"></i></span>，这是一个 maven 管理的 SSM 项目</li>
</ul>
</li>
</ul>
<blockquote>
<p>Windows 连接服务器工具可使用 <span class="exturl" data-url="aHR0cHM6Ly93d3cubmV0c2FyYW5nLmNvbS96aC94c2hlbGw=">Xshell<i class="fa fa-external-link-alt"></i></span> 等代替</p>
</blockquote>
<h2 id="编译"><a class="header-anchor" href="#编译"></a>编译</h2>
<h3 id="编译-war"><a class="header-anchor" href="#编译-war"></a>编译 war</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml 文件中要指明构建文件的类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># clean依赖并编译成 package，也可以执行 mvn clean package -DskipTests</span></span><br><span class="line">mvn clean package -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1574837752/blog/deploy-maven-war.png" alt="deploy-maven-war"></p>
<h3 id="编译-jar（SpringBoot）"><a class="header-anchor" href="#编译-jar（SpringBoot）"></a>编译 jar（SpringBoot）</h3>
<h4 id="maven"><a class="header-anchor" href="#maven"></a>maven</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml 文件中要指明构建文件的类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="GUI-操作"><a class="header-anchor" href="#GUI-操作"></a>GUI 操作</h5>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1585097721/blog/deploy-maven-jar.png" alt="deploy-maven-jar"></p>
<h5 id="命令行-操作"><a class="header-anchor" href="#命令行-操作"></a>命令行 操作</h5>
<p>定位到需要构建的模块下，执行如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># clean依赖并编译成 package，也可以执行 mvn clean package -DskipTests</span></span><br><span class="line">mvn clean package -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1585097855/blog/maven-package-jar.png" alt="maven-package-jar"></p>
<h4 id="gradle"><a class="header-anchor" href="#gradle"></a>gradle</h4>
<h5 id="GUI-操作-v2"><a class="header-anchor" href="#GUI-操作-v2"></a>GUI 操作</h5>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1585097492/blog/deploy-gradle.png" alt="deploy-gradle"></p>
<h5 id="命令行-操作-v2"><a class="header-anchor" href="#命令行-操作-v2"></a>命令行 操作</h5>
<p>在需要编译的项目路径下，这里编译子模块springboot-start，前提需要在系统的环境变量中配置好 gradle，macOS 可参考<a href="https://incoder.org/2018/11/10/mac-init/#Gradle%E9%85%8D%E7%BD%AE">MacBook Pro 初始化</a>文章</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># linux or macOS</span></span><br><span class="line">gradle build</span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">./gradle build</span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1574959663/blog/deploy-gradle-build-success.png" alt="deploy-gradle-build"></p>
<h2 id="部署"><a class="header-anchor" href="#部署"></a>部署</h2>
<p>部署步骤：</p>
<ol>
<li>备份服务器对应服务，并停止服务运行（如果是第一次部署该服务，可省略）</li>
<li>上传应用 jar/war 文件</li>
<li>启动上传应用</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拷贝本地文件到指定服务器的指定目录</span></span><br><span class="line"><span class="comment"># root：服务器用户名</span></span><br><span class="line"><span class="comment"># ip：服务器地址</span></span><br><span class="line"><span class="comment"># :/data/app：拷贝文件到服务器的/data/app 路径下</span></span><br><span class="line">scp ~/Desktop/start-1.0-SNAPSHOT.jar root@ip:/data/app</span><br></pre></td></tr></table></figure>
<h3 id="部署-war"><a class="header-anchor" href="#部署-war"></a>部署 war</h3>
<blockquote>
<p>由于 war 包并没有内置 Tomcat 等运行的容器，因此需要你的服务器已经安装了 Tomcat 等服务</p>
</blockquote>
<h3 id="部署-jar"><a class="header-anchor" href="#部署-jar"></a>部署 jar</h3>
<h4 id="iTerm2-部署"><a class="header-anchor" href="#iTerm2-部署"></a>iTerm2 部署</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ssh 连接到服务器后，启动应用，如果有需要请先停止已在运行的程序</span></span><br><span class="line"><span class="comment"># 查看程序的进程</span></span><br><span class="line">ps -ef|grep <span class="string">&#x27;java -jar&#x27;</span></span><br><span class="line"><span class="comment"># UID      PID  PPID  C STIME TTY        TIME CMD</span></span><br><span class="line"><span class="comment"># root    6760  7103  0 19:59 pts/3  00:00:00 java -jar /data/app/start-1.0-SNAPSHOT.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 终止程序进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># nohup：后台运行程序，也就说当控制台终止，并不会停止启动的服务</span></span><br><span class="line"><span class="comment"># spring.log：当前目录下输出日志记录的文件名</span></span><br><span class="line"><span class="built_in">nohup</span> java -jar start-1.0-SNAPSHOT.jar &gt; spring.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 滚动查看日志输出</span></span><br><span class="line"><span class="built_in">tail</span> -f spring.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不需要查看输入出的日志，运行如下脚本</span></span><br><span class="line"><span class="built_in">nohup</span> java -jar start-1.0-SNAPSHOT.jar &amp;</span><br></pre></td></tr></table></figure>
<p>tail 命令</p>
<ul>
<li>命令格式：tail[必要参数][选择参数][文件]</li>
<li>功能描述：用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理；查看日志文</li>
<li>示例：tail -f spring.log</li>
<li>命令参数
<ul>
<li>-f 循环读取</li>
<li>-q 不显示处理信息</li>
<li>-v 显示详细的处理信息</li>
<li>-c&lt;数目&gt; 显示的字节数</li>
<li>-n&lt;行数&gt; 显示行数</li>
<li>–pid=PID 与-f合用,表示在进程ID,PID死掉之后结束.</li>
<li>-q, –quiet, –silent 从不输出给出文件名的首部</li>
<li>-s, –sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒</li>
</ul>
</li>
</ul>
<h4 id="Alibaba-Cloud-Toolkit"><a class="header-anchor" href="#Alibaba-Cloud-Toolkit"></a>Alibaba Cloud Toolkit</h4>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1585098223/blog/alibaba-cloud-toolkit.png" alt="alibaba-cloud-toolkit"></p>
<p>视频教程：<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC52aWRlby50YW9iYW8uY29tL3BsYXkvdS82NTA0ODA1OTgvcC8xL2UvNi90LzEvMjE2ODg5MDU4OTYxLm1wNA==">https://cloud.video.taobao.com/play/u/650480598/p/1/e/6/t/1/216889058961.mp4<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="Jenkins"><a class="header-anchor" href="#Jenkins"></a>Jenkins</h4>
<p>关于 Jenkins 的部署，会单独出一篇相关的部署介绍，以及 Jenkins 的相关知识介绍，请移步<a href="">使用 Jenkins 项目部署</a></p>
<h2 id="问题"><a class="header-anchor" href="#问题"></a>问题</h2>
<h3 id="gradle-编译失败"><a class="header-anchor" href="#gradle-编译失败"></a>gradle 编译失败</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1574960394/blog/deploy-gradle-build-error.png" alt="deploy-gradle-build-error"></p>
<p>原因：这里的提示<code>spring-boot-2.1.6.RELEASE.jar</code>文件无法正常下载<br>
解决办法：切换你的网络，或者修改 gradle 仓库镜像地址</p>
<h3 id="缓存文件未下载完全"><a class="header-anchor" href="#缓存文件未下载完全"></a>缓存文件未下载完全</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1574961213/blog/deploy-gradle-build-error2.png" alt=""></p>
<p>原因：文件未下载完全，编译时使用了缓存文件<br>
解决办法：删除<code>~/.gradle/caches/modules-2/files-2.1</code>路径下无法编译通过的包，这里是<code>spring-boot-gradle-plugin</code></p>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGl4dWVkdWFuLmNvbS9wb3N0cy8xNDRhNjlmOS5odG1s">SpringBoot入门系列(四)—Spring Boot 项目打包运行<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>Deploy</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 之 SpringBoot 项目部署</title>
    <url>/2019/01/10/docker-init/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Deploy</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Fiddler 初体验</title>
    <url>/2018/10/25/fiddler/</url>
    <content><![CDATA[<p>在开发的路上，有时候面对一些应用，我们可能回去分析研究它的实现以及数据交互等，在没有官方没有公开的Api提供时，我们会用到一项实用的技术，抓包，所谓的抓包，指的是截取网络传输发送与接收的数据包。其中在Windows平台上使用比较广泛的要数<span class="exturl" data-url="aHR0cHM6Ly93d3cudGVsZXJpay5jb20vZmlkZGxlcg==">Fiddler<i class="fa fa-external-link-alt"></i></span></p>
<p>本节主要讲解Fiddler的相关配置及简单使用</p>
<span id="more"></span>
<h2 id="资源"><a class="header-anchor" href="#资源"></a>资源</h2>
<ul>
<li>Windows 10</li>
<li>Fiddler</li>
</ul>
<h2 id="配置"><a class="header-anchor" href="#配置"></a>配置</h2>
<p>需要使手机连接WiFi和电脑WiFi是使用同一个网络</p>
<h3 id="Fiddler-初始化"><a class="header-anchor" href="#Fiddler-初始化"></a>Fiddler 初始化</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1540742306/blog/fiddler-config.png" alt="fiddler-config"></p>
<blockquote>
<p>默认端口：8888</p>
</blockquote>
<h3 id="网络地址"><a class="header-anchor" href="#网络地址"></a>网络地址</h3>
<p>获取电脑所连接的网络IP地址<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1540742723/blog/fiddler-ip.png" alt="fiddler-ip"><br>
这里获取的IP地址，将用于手机连接网络的代理</p>
<h3 id="手机配置"><a class="header-anchor" href="#手机配置"></a>手机配置</h3>
<p>关于手机相关的配置操作，步骤已经通过下面的视频展现。</p>
<ol>
<li>连接与电脑相同的WiFi</li>
<li>修改网络代理</li>
<li>手动模式，并设置电脑端获取的IP地址及Fiddler默认端口号8888</li>
<li>网络连接刷新</li>
<li>获取并下载安装Fiddler证书</li>
</ol>
<h2 id="其它"><a class="header-anchor" href="#其它"></a>其它</h2>
<p>通过以上操作，现在可以在电脑端Fiddler工具中，拦截获取经过的所有网络信息。而我们一般是查看或者是分析某一款应用的数据信息，这样在查看起来就比较费力，那么我们就借助Fiddler提供的过滤功能<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1540743106/blog/fiddler-filter.png" alt="fiddler-filter"></p>
<p>选择过滤方式中</p>
<ol>
<li>第一项有三个选项，不做更改：<br>
“No zone filter”;<br>
“Show Only Intranet Hosts”;<br>
“Show Only Internet Hosts”</li>
<li>第二个选项是只监控以下网址，如只监控百度，在下面的输入框里填上 <span class="exturl" data-url="aHR0cDovL3d3dy5iYWlkdS5jb20=">www.baidu.com<i class="fa fa-external-link-alt"></i></span><br>
“No Host Filter”：不设置hosts过滤<br>
“Hide The Following Hosts”：隐藏过滤到的域名<br>
“Show Only The Following Hosts”：只显示过滤到的域名<br>
“Flag The Following Hosts”：标记过滤到的域名</li>
<li>文本框内输入需要过滤的域名，多个域名使用”;“分号分割。</li>
</ol>
<blockquote>
<p>fiddler默认会检查http头中设置的host，强制显示http地址中域名。</p>
</blockquote>
]]></content>
      <categories>
        <category>DevTool</category>
      </categories>
      <tags>
        <tag>Fiddler</tag>
      </tags>
  </entry>
  <entry>
    <title>Flowable（一）初识</title>
    <url>/2019/09/25/flowable1/</url>
    <content><![CDATA[<p>Flowable是一个使用Java编写的轻量级业务流程引擎。Flowable流程引擎可用于部署BPMN 2.0流程定义（用于定义流程的行业XML标准）， 创建这些流程定义的流程实例，进行查询，访问运行中或历史的流程实例与相关数据等，众所周知，Flowable是Activit的一个分叉，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmZsb3dhYmxlLm9yZy8yMDE2LzEwLzEzL2Zsb3dhYmxlLTUtMjItMC1yZWxlYXNlLw==">Flowable的第一个版本（5.22.0）是基于Activit（5.21.0）<i class="fa fa-external-link-alt"></i></span>，关于为什么Flowable会从Activit分叉，感兴趣可以查看Flowable官方的文章<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmZsb3dhYmxlLm9yZy8yMDE2LzEwLzEyL2Zsb3dhYmxlLWFuZC1hY3Rpdml0aS13aGF0LXRoZS1mb3JrLw==">Flowable and Activiti: What the Fork?!<i class="fa fa-external-link-alt"></i></span>，这里不在赘述这些内容</p>
<span id="more"></span>
<p>从<span class="exturl" data-url="aHR0cHM6Ly93d3cuZmxvd2FibGUub3JnL2RvY3VtZW50YXRpb24uaHRtbA==">Flowable官方文档<i class="fa fa-external-link-alt"></i></span>介绍，可知Flowable遵循<span class="exturl" data-url="aHR0cHM6Ly93d3cuZmxvd2FibGUub3JnL2RvY3MvdXNlcmd1aWRlL2luZGV4Lmh0bWw=">BPMN<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly93d3cuZmxvd2FibGUub3JnL2RvY3MvdXNlcmd1aWRlLWNtbW4vaW5kZXguaHRtbA==">CMMN<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly93d3cuZmxvd2FibGUub3JnL2RvY3MvdXNlcmd1aWRlLWRtbi9pbmRleC5odG1s">DMN<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly93d3cuZmxvd2FibGUub3JnL2RvY3MvdXNlcmd1aWRlLWZvcm0vaW5kZXguaHRtbA==">From<i class="fa fa-external-link-alt"></i></span>设计指导</p>
<ul>
<li>BPMN（Business Process Model and Notation）：用于流程管理</li>
<li>CMMN（Case Management Model and Notation）：用于案例管理</li>
<li>DMN（Decision Model and Notation）：用于决策规则</li>
<li>Form：用于表单和任务表单管理</li>
</ul>
<h2 id="Flowable-直运行"><a class="header-anchor" href="#Flowable-直运行"></a>Flowable 直运行</h2>
<blockquote>
<p>这里所说的&quot;<strong>直运行</strong>&quot;，是指不需要写任何代码，仅需要改动相关的配置就可以运行起Flowable应用程序</p>
</blockquote>
<p>准备工作</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZmxvd2FibGUub3JnL2Rvd25sb2Fkcy5odG1s">Flowable v6.4.2<i class="fa fa-external-link-alt"></i></span></li>
<li>MySQL8+</li>
<li>JDK &amp; Tomcat 环境</li>
</ul>
<blockquote>
<p>MySQL8+ ，JDK，Tomcat环境代建可参考<a href="https://incoder.org/2018/07/23/linux-mysql/">Linux 之 MySQL</a>，<a href="https://incoder.org/2018/05/15/linux-build/">Linux 常用应用安装</a>，<a href="https://incoder.org/2019/09/25/windows-devtool/">Windows 之 常用应用安装</a></p>
</blockquote>
<p>已下操作均在Windows上，macOS上相差不大，操作流程基本一致</p>
<h3 id="war部署"><a class="header-anchor" href="#war部署"></a>war部署</h3>
<ol>
<li>解压flowable.zip文件<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1569565014/blog/flowable-zip.png" alt="flowable-zip"></li>
<li>拷贝需要启动的war到安装的Tomcat的<code>webapps</code>路径下<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1569554378/blog/flowable-tomact.png" alt="flowable-tomact"></li>
<li>命令行中执行<code>startup.bat</code>命令，或执行Tomcat的<code>bin</code>路径下，启动<code>startup.bat</code>文件<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1569554648/blog/flowable-startup.png" alt="flowable-startup"></li>
<li>第一次启动，Tomcat控制台应该会出错，因为<code>flowable-admin.war</code>数据库配置默认使用H2数据库，我们需要修改数据库配置连接等信息<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1569555241/blog/flowable-mysql-config.png" alt="flowable-mysql-config">
<blockquote>
<ul>
<li>文件地址：<code>&lt;your tomcat path&gt;/webapps/flowable-admin/WEB-INF/classes</code>路径，<code>flowable-default.properties</code>文件及<code>application-dev.properties</code>文件</li>
<li>MySQL中需要一个名为 <strong>flowable</strong> 的数据库，没有请创建一个<code>CREATE DATABASE flowable</code></li>
<li>由于我使用的是 MySQL8 ，Tomcat 中不包含此驱动 jar 包，因此需要手动下载<span class="exturl" data-url="aHR0cDovL2Z0cC5qYWlzdC5hYy5qcC9wdWIvbXlzcWwvRG93bmxvYWRzL0Nvbm5lY3Rvci1KLw==">mysql-connector-java-8.x.x(和你数据库匹配版本).zip<i class="fa fa-external-link-alt"></i></span>文件进行解压，拷贝<code>mysql-connector-java-8.x.x.jar</code>文件到 <code>&lt;your tomcat path&gt;/lib</code>路径下</li>
</ul>
</blockquote>
</li>
<li>重新在命令行中执行<code>startup.bat</code>命令，或执行Tomcat的<code>bin</code>路径下，启动<code>startup.bat</code>文件</li>
<li>正常情况到此等待服务器启动完成，如果不能正常启动，请查看Tomcat控制台是否有错误，按照提示解决错误，直到Tomcat不再有错误提示即可</li>
</ol>
<h3 id="使用"><a class="header-anchor" href="#使用"></a>使用</h3>
<ol>
<li>访问<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL2Zsb3dhYmxlLWlkbQ==">http://localhost:8080/flowable-idm<i class="fa fa-external-link-alt"></i></span>，默认账号：admin，默认密码：test<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1569563245/blog/flowable-admin.png" alt="flowable-admin"></li>
<li>访问<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL2Zsb3dhYmxlLWFkbWlu">http://localhost:8080/flowable-admin<i class="fa fa-external-link-alt"></i></span>，后台管理</li>
<li>访问<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL2Zsb3dhYmxlLW1vZGVsZXI=">http://localhost:8080/flowable-modeler<i class="fa fa-external-link-alt"></i></span>，流程定义管理</li>
<li>访问<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL2Zsb3dhYmxlLXRhc2s=">http://localhost:8080/flowable-task<i class="fa fa-external-link-alt"></i></span>，用户任务管理</li>
<li>访问<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL2Zsb3dhYmxlLXJlc3QvZG9jcw==">http://localhost:8080/flowable-rest/docs<i class="fa fa-external-link-alt"></i></span>，流程引擎对外提供的API接口</li>
</ol>
<h2 id="Flowable-集成运行"><a class="header-anchor" href="#Flowable-集成运行"></a>Flowable 集成运行</h2>
<blockquote>
<p>这里所说的&quot;<strong>集成运行</strong>&quot;，是指通过Flowable官方提供的jar文件，集成到我们的项目中运行的方式</p>
</blockquote>
<h2 id="Flowable-使用"><a class="header-anchor" href="#Flowable-使用"></a>Flowable 使用</h2>
<h2 id="其他"><a class="header-anchor" href="#其他"></a>其他</h2>
<h3 id="如何切换中文"><a class="header-anchor" href="#如何切换中文"></a>如何切换中文</h3>
<p>Flowable中已包含中文语言，会根据操作系统语言，自动显示对应语言</p>
<h3 id="startup-bat异常"><a class="header-anchor" href="#startup-bat异常"></a>startup.bat异常</h3>
<p>查看控制它异常，例如当前flowable启动默认端口8080，被占用<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1569556130/blog/flowable-aleady-bind.png" alt="flowable-aleady-bind"></p>
<p>解决方法：查找占用端口进程<code>netstat -ano|findstr 端口号</code>，并kill它<code>taskkill -PID 进程号 -F</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1569556500/blog/flowable-kill-task.png" alt="flowable-kill-task"></p>
]]></content>
      <categories>
        <category>Flowable</category>
      </categories>
      <tags>
        <tag>Flowable</tag>
      </tags>
  </entry>
  <entry>
    <title>Flowable（二）Modeler-UI 集成</title>
    <url>/2019/10/24/flowable2/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>Flowable</category>
      </categories>
      <tags>
        <tag>Flowable</tag>
      </tags>
  </entry>
  <entry>
    <title>Flowable（三）流程图绘制异常问题</title>
    <url>/2020/07/01/flowable3/</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9teS5vc2NoaW5hLm5ldC91LzM3NTkzNTcvYmxvZy80MjgxMTEw">HttpMediaTypeNotAcceptableException<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFlbGR1bmcuY29tL3NwcmluZy1odHRwbWVkaWF0eXBlbm90YWNjZXB0YWJsZQ==">HttpMediaTypeNotAcceptableException in Spring MVC<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Flowable</category>
      </categories>
      <tags>
        <tag>Flowable</tag>
      </tags>
  </entry>
  <entry>
    <title>Flowable（四）流程相关知识点</title>
    <url>/2020/07/21/flowable4/</url>
    <content><![CDATA[<h2 id="流程部署"><a class="header-anchor" href="#流程部署"></a>流程部署</h2>
<p>流程部署涉及到的表有 <code>act_re_deployment</code>， <code>act_re_procdef</code>,<code>act_ge_bytearry</code>,<code>act_ge_property</code></p>
<ul>
<li>act_re_deployment（部署对象表）：存放流程定义的显示名和部署时间，每部署一次增加一条记录</li>
<li>act_re_procdef（流程定义表）：存放流程定义的属性信息，部署每个新的流程都会在这张表中添加一条记录，当流程定义的 key 相同时，使用的是版本升级</li>
<li>act_ge_bytearry（资源文件表）：存放流程定义相关的部署信息，即流程定义文档的存放处。每部署一次会增加两条记录，一条是关于 bpmn 规则文件，一条是生成的流程图片（如果部署时只指定了 bpmn 一个文件，flowable 会在部署时解析 bpmn 文件内容自动生成流程图）。两个文件都是以二进制形式存储在数据库中</li>
<li>act_ge_property：主键生成策略表</li>
</ul>
<span id="more"></span>
<h2 id="流程定义"><a class="header-anchor" href="#流程定义"></a>流程定义</h2>
<h3 id="流程定义-v2"><a class="header-anchor" href="#流程定义-v2"></a>流程定义</h3>
<p>流程的一系列规则定义</p>
<h3 id="流程实例"><a class="header-anchor" href="#流程实例"></a>流程实例</h3>
<p>代表流程定义的执行实例，例如：员工 A 请假一天，他就必须发出一个请假流程实例申请</p>
<p>一个流程实例表示了所有的运行节点，我们可以利用这个对象来了解当前流程实例的进度等信息。流程实例就表示一个流程从开始到结束的最大流程分支，即一个流程中流程实例只有一个。流程实例通常也叫做执行实例的根节点，流程实例和流程定义为一对多的关系</p>
<p>执行实例（ProcessInstance Extends Execution），启动流程的时候会首先创建流程实例，然后创建执行实例；流程运转中永远执行的是自己对应的执行实例；当所有的执行实例按照规则执行完毕后，则实例随之结束；flowable 用这个对象去描述流程执行的每一个节点；流程按照流程定义的规则执行一次的过程，就可以表示执行对象 Execution。一个流程中，执行对象可以存着多个，但是实例只能有一个</p>
<h2 id="节点"><a class="header-anchor" href="#节点"></a>节点</h2>
<h3 id="开始节点"><a class="header-anchor" href="#开始节点"></a>开始节点</h3>
<p>开始节点代表一个规则的开始。在一个规则文件中，开始节点只能是一个，不能是多个。如果是多个则部署的时候会报错。子流程及引用流程也是如此。开始节点只能是一个。启动流程的时候，从开始节点让流程实例运行</p>
<h3 id="结束节点"><a class="header-anchor" href="#结束节点"></a>结束节点</h3>
<p>结束节点代表一个规则的结束。在一个规则文件中，结束节点可以是多个。如果实例运转到结束节点的时候，则表示当前的执行实例要结束，则流程也将随之结束</p>
]]></content>
      <categories>
        <category>Flowable</category>
      </categories>
      <tags>
        <tag>Flowable</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter（一）之环境搭建</title>
    <url>/2018/12/16/flutter-init/</url>
    <content><![CDATA[<p>这两年随着前端的高速发展，大前端的趋势下，Native移动应用开发市场在一定程度上被前端瓜分，加之硬件的快速迭代，性能已不存在明显的短板，<span class="exturl" data-url="aHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZl">React Native<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvaW5kZXguaHRtbA==">Vue<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9hbmd1bGFyLmlvLw==">Angular<i class="fa fa-external-link-alt"></i></span>等等这些Web框架，对移动端也有了较大的提升，毕竟这样的开发效率会直线上升，并且大大减少了成本。技术的革新真的好快，如果不去学习，很快就会被淘汰</p>
<p>那就直接进入正题，<span class="exturl" data-url="aHR0cHM6Ly9mbHV0dGVyLmlvLw==">flutter<i class="fa fa-external-link-alt"></i></span>是一站式跨平台解决方案，一次开发，适配整个移动平台，并且是由Google进行主导开发，开源的一个项目，现如今已经迭代到1.0版本</p>
<p>本篇文章主要记录在macOS系统上搭建flutter开发环境的过程</p>
<span id="more"></span>
<h2 id="准备"><a class="header-anchor" href="#准备"></a>准备</h2>
<ul>
<li>Android Studio开发环境（JDK，AndroidSDK，Gradle等等，这里不再赘述）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9mbHV0dGVyLmlvL2RvY3MvZ2V0LXN0YXJ0ZWQvaW5zdGFsbA==">flutter SDK<i class="fa fa-external-link-alt"></i></span></li>
<li>Android Studio Plugin --&gt; Flutter</li>
</ul>
<h2 id="步骤"><a class="header-anchor" href="#步骤"></a>步骤</h2>
<ol>
<li>
<p>解压下载的flutter SDK，并配置环境变量，例如这里配置在<code>.bash_profile</code>文件中</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开 .bash_profile文件</span></span><br><span class="line">vim .bash_profile</span><br><span class="line"><span class="comment"># .bash_profile文件中加入flutter sdk路径并保存</span></span><br><span class="line"><span class="built_in">export</span> FLUTTER_HOME=/Users/blade/Documents/DevTools/flutter</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$FLUTTER_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># 重新加载.bash_profile文件</span></span><br><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>检查环境变量是否配置正确，如果有相关命令说明，表示已配置好环境变量</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flutter -h</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>检查开发环境，第一次执行，应该提示如下图所示说明</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1544994568/blog/flutter-doctor.png" alt="flutter-doctor"><br>
其实不难，看出我们需要安装一下其他辅助工具等</p>
</li>
<li>
<p>解决问题，按照如下命令，一步步执行，大概得1个小时左右（取决于你的网络情况）</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 允许协议（android-licenses</span></span><br><span class="line">flutter doctor --android-licenses</span><br><span class="line"><span class="comment"># 安装libimobiledevice</span></span><br><span class="line">brew install --HEAD libimobiledevice</span><br><span class="line"><span class="comment"># 安装ideviceinstaller</span></span><br><span class="line">brew install ideviceinstaller</span><br><span class="line"><span class="comment"># 安装ios-deploy</span></span><br><span class="line">brew install ios-deploy</span><br><span class="line"><span class="comment"># 安装cocoapods</span></span><br><span class="line">brew install cocoapods</span><br><span class="line"><span class="comment"># cocoapods 初始化，这一步比较耗时，需要下载文件大致547M，需要耐心等待</span></span><br><span class="line">pod setup</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>以上步骤都正常运行后，再次检查环境，如下图所示结果，表示已完成flutter环境搭建</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1544994676/blog/flutter-finish.png" alt="flutter-finish"></p>
</li>
</ol>
<h2 id="辅助"><a class="header-anchor" href="#辅助"></a>辅助</h2>
<p>如果你不习惯或者不想使用Android Studio来开发Flutter，那么使用<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20=">VS Code<i class="fa fa-external-link-alt"></i></span>是最佳推荐的文本编辑器，只需要在VS Code中安装<span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWRhcnQtY29kZS5mbHV0dGVy">Flutter<i class="fa fa-external-link-alt"></i></span>插件即可，它已包含所需的<span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWRhcnQtY29kZS5kYXJ0LWNvZGU=">Dart<i class="fa fa-external-link-alt"></i></span>语法插件</p>
<p>关于程序的运行，那么模拟器当然少不了，这里介绍下macOS上如何启动Android 模拟器</p>
<ul>
<li>首先AndroidSDK的环境变量配置少不了</li>
<li>配置emulator  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ANDROID_HOME=/Users/blade/Library/Android/sdk</span><br><span class="line"><span class="built_in">export</span> FLUTTER_HOME=/Users/blade/Documents/DevTools/flutter</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ANDROID_HOME</span>/emulator:<span class="variable">$ANDROID_HOME</span>/tools:<span class="variable">$ANDROID_HOME</span>/platform-tools:<span class="variable">$FLUTTER_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
</li>
<li>启动  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看已创建模拟器清单</span></span><br><span class="line">emulator -list-avds</span><br><span class="line"><span class="comment"># 选择需要启动的模拟器，avd_name：表示从上面列表获取到的模拟器名称</span></span><br><span class="line">emulator -avd [avd_name]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<div class="note warning"><p>注意：</p>
<ul>
<li>不推荐使用<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2VueW1vdGlvbi5jb20v">Genymotion<i class="fa fa-external-link-alt"></i></span>，flutter的运行在此模拟器上有各种灵异bug</li>
<li>PANIC: Missing emulator engine program for ‘x86’ CPU.解决方式：创建一个x64的模拟器</li>
</ul>
</div>
<h2 id="问题"><a class="header-anchor" href="#问题"></a>问题</h2>
<h3 id="libusbmuxd-version-error-during-flutter-install"><a class="header-anchor" href="#libusbmuxd-version-error-during-flutter-install"></a>libusbmuxd version error during flutter install</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew uninstall --ignore-dependencies libimobiledevice</span><br><span class="line">brew uninstall --ignore-dependencies usbmuxd</span><br><span class="line">brew install --HEAD usbmuxd</span><br><span class="line">brew <span class="built_in">unlink</span> usbmuxd</span><br><span class="line">brew <span class="built_in">link</span> usbmuxd</span><br><span class="line">brew install --HEAD libimobiledevice</span><br></pre></td></tr></table></figure>
<h3 id="Unbrewed-header-files-were-found-in-usr-local-include"><a class="header-anchor" href="#Unbrewed-header-files-were-found-in-usr-local-include"></a>Unbrewed header files were found in /usr/local/include</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1544994898/blog/flutter-node.png" alt="flutter-node"></p>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9mbHV0dGVyLmlvL2RvY3M=">flutter docs<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2pzcGFuZy5jb20vcG9zdC9mbHV0dGVyMS5odG1sI3RvYy01ODY=">Flutter免费视频第一季-环境搭建<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC82Mzc3OTZlOWMwZWE=">flutter安装记录过程<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9mbHV0dGVyY2hpbmEuY2x1Yi9zZXR1cC1tYWNvcy8jJUU4JUFFJUJFJUU3JUJEJUFFJUU2JTgyJUE4JUU3JTlBJTg0YW5kcm9pZCVFOCVBRSVCRSVFNSVBNCU4Nw==">macOS上搭建Flutter开发环境<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vc3R1ZGlvL2J1aWxkL2J1aWxkaW5nLWNtZGxpbmU/aGw9emgtY24=">官方命令行构建您的应用<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>评论不自由，赞美无意义</title>
    <url>/2021/03/05/freedom-pact/</url>
    <content><![CDATA[<p>就像文章标题所述。每到三，五月这个时间，网络变得异常脆弱。各种“奇怪”的网站访问起来很费劲。对于一个技术人员，这些问题可以解决，但是每次都需要花费一定的时间和精力来应对这些，而且随着 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9HV0Y=">GFW<i class="fa fa-external-link-alt"></i></span> 的不断升级和加强，应对的策略和技术也是在不断的迭代，前前后后已经出现了多种技术，本篇就以这个契机，梳理截止到 2021-03-05 所了解到关于 “代理” 相关的知识。现在主流的科学上网技术有 VPN、SS、SSR、V2Ray、Trojan、Trojan-Go，小众的 WireGuard、Brook、Snell 和 NaiveProxy 等</p>
<span id="more"></span>
<div class="note info"><p>本篇文章大量使用了 <span class="exturl" data-url="aHR0cHM6Ly9peWlkZW5nLm5ldC9hYm91dC9teWhvbWUuaHRtbA==">一灯不是和尚<i class="fa fa-external-link-alt"></i></span> 作者发布 《<span class="exturl" data-url="aHR0cHM6Ly9peWlkZW5nLm5ldC9ibGFjay10ZWNobm9sb2d5L2NnZncvdnBuLXNzLXNzci12MnJheS10cm9qYW4td2lyZWd1YXJkLWJ5cGFzcy1nZncuaHRtbA==">科学上网工具哪个好？<i class="fa fa-external-link-alt"></i></span> 》文章中的内容，在此感谢作者对各技术的汇总以及经验总结，本篇文章是在原文章的基础上进行的扩展补充</p>
</div>
<h2 id="VPN"><a class="header-anchor" href="#VPN"></a>VPN</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JTk5JTlCJUU2JTkzJUFDJUU3JUE3JTgxJUU0JUJBJUJBJUU3JUI2JUIyJUU4JUI3JUFG">虚拟专用网络<i class="fa fa-external-link-alt"></i></span>（Virtual Private Network，缩写：VPN）是常用于连接中，大型企业或团体间私人网络的通讯方法。它利用隧道协议（Tunneling Protocol）来达到发送端认证，消息保密与准确性等功能。</p>
<p>VPN 只是一个统称，它有多种具体实现。比如：</p>
<ul>
<li>PPTP（点对点隧道协议：Point to Point Tunneling Protocol）;</li>
<li>L2TP（第二层隧道协议：Layer Two Tunneling Protocol）;</li>
<li>IPsec（互联网安全协议：Internet Protocol Security）;</li>
<li>SSL VPN;</li>
<li>WireGuard;</li>
<li>OpenVPN;</li>
<li>IKEv2（因特网密钥交换：Internet Key Exchange） 等</li>
</ul>
<p>其中 WireGuard 是最新的协议实现（在 2020 年，WireGuard 协议已被添加到 Linux 和 Android 内核中，从而为 VPN 提供商所采用。默认情况下，WireGuard 使用 Curve25519 进行秘钥交换，并使用 ChaCha20 进行加密，但还具有客户端和服务器之间预共享对称秘钥的功能）</p>
<h3 id="WireGuard"><a class="header-anchor" href="#WireGuard"></a>WireGuard</h3>
<h2 id="SS"><a class="header-anchor" href="#SS"></a>SS</h2>
<p>SS 是 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tz">Shadowsocks<i class="fa fa-external-link-alt"></i></span> 的缩写，中文名为影梭，为了避免关键词过滤，网友喜欢将 Shadowsocks 称为 “酸酸”，是一种基于 Socks5 代理方式的加密传输协议，也可以指定实现这个协议的各种开发包。Shadowsocks 是由 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nsb3d3aW5keQ==">Clowwindy<i class="fa fa-external-link-alt"></i></span> 为了自己使用谷歌查资料而编写；Shadowsocks 分为服务端和客户端，在使用之前，需要先将服务器端程序部署到服务器上面，然后通过客户端连接并创建本地代理。后来，他觉得这个东西非常好用，速度也很快，于是将源码提交到了 GitHub。由于其优秀的使用体验，Shadowsocks 被广泛传播，导致作者被某部门请去 “喝茶”。迫于压力 Clowwindy 于 2015-08-22 宣布停止维护此项目，并移除其个人页面所存储的源代码，而且保证永不再参与维护更新</p>
<p>虽然 Clowwindy 被迫放弃了 Shadowsocks，但开源界没有放弃，各路大神依旧在为 Shadowsocks 添砖加瓦，这就是开源的力量，倒下一个 Clowwindy，会有千千万万个 “Clowwindy” 站出来</p>
<h2 id="SSR"><a class="header-anchor" href="#SSR"></a>SSR</h2>
<p>SSR 是 ShadowsocksR 的缩写，网名爱称 “酸酸乳”，是在 Shadowsocks 的作者被请去喝茶之后，网名为 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JyZWFrd2ExMQ==">breakwa11<i class="fa fa-external-link-alt"></i></span> 的用户发起的 Shadowsocks 的一个分支版本，它在 Shadowsocks 的基础上增加了一些数据混淆方式，修复了部分安全问题并提高了 QoS 优先级。由于 ShadowsocksR 在协议和混淆方面做了改进，更加不容易被 GFW 检测到，而且兼容原 Shadowsocks，并为新项目命名为 Shadowsocks-R，一开始部分代码由社区人员进行更新。由于不完全开源，也导致后来使用 SS 和 SSR 的用户分为两个阵营，互相撕逼，直到开发者 breakwa11 被人肉出来。breakwa11 最终决定删除 Shadowsocks-R 项目的所有代码，并解散了所有相关群组</p>
<h3 id="事件始末澄清"><a class="header-anchor" href="#事件始末澄清"></a>事件始末澄清</h3>
<p>ShadowsocksR 的作者一开始曾有过违反 GPL 协议，在发布二进制文件时不开放源码的争议。不过后来 Shadowsocks-R 项目由 breakwa11 采用了与 Shadowsocks 相同的 GPL、Apache、MIT 等多重自由软件许可协议</p>
<ul>
<li>2017-07-19，ShadowsocksR 作者 breakwa11 在 Telegram 频道 ShadowsocksR news 里转发了深圳市启动 SS 协议检测的消息并被大量用户转发，在电报（TG）圈引发恐慌。</li>
<li>2017-07-24，breakwa11 遭到自称 “<span class="exturl" data-url="aHR0cDovL0VTVS5UVg==">ESU.TV<i class="fa fa-external-link-alt"></i></span>” 的不明省份人士人身攻击，对方宣传如果不停止开发并阻止用户讨论此事件将发布更多包含个人隐私的资料，随后 breakwa11 表示遭到对方人肉搜索并公开个人资料。为防止对方继续伤害无关人士，breakwa11 删除了 GitHub 上的所有代码、解散相关交流群组，并停止 ShadowsocksR 项目</li>
</ul>
<p>从本质上来说，Shadowsocks 与 ShadowsocksR 的基本原理相同，都是基于 Socks5 的代理工具，只在本地客户端和服务器对数据包加解密，然后使用 Socks5 协议转发加密的数据包，而不用在乎使用什么协议，所以 Socks5 代理比其他应用层代理速度要快的多</p>
<h3 id="Socks5"><a class="header-anchor" href="#Socks5"></a>Socks5</h3>
<p>这里顺带科普一下 Socks5，Socks5 代理的原理是把你的网络数据请求先发送到你的代理服务器，然后由代理服务器转发给目标；如果目标有反馈发送到代理服务器，那么代理服务器会将数据包直接传回到你的本地网络，整个过程只需要数据的二次传输，并没有额外的处理。</p>
<blockquote>
<p>示例：现在呢在深圳，你的代理服务器在香港，如果你想要访问 Google，那么你首先需要把数据请求通过本地 Socks5 代理客户端发给在你在香港的服务器上的 Socks5 代理服务端，然后你在香港的服务器将数据请求发送给 Google，再把 Google 反馈的结果传到你香港的代理服务器，然后通过 Socks5 服务端回传到本地的 Socks5 客户端，这样就可以绕开 GFW 的检测而实现科学上网</p>
</blockquote>
<p>显而易见，Socks5 代理的所有数据走的任然是公网，而且在公网传输过程中，没有对数据进行任何加密和混淆，这跟 VPN 在公网建立虚拟专用通道传输过程中，对数据高强度加密的方式完全不同。Shadowsocks 和 ShadowsocksR 只在客户端和服务器端对数据做了简单加密和认证，主要功能是流量转发，过强才是主要目的。虽然 ShadowsocksR 已经停止更新很久了，而 Shadowsocks 仍处于社区人员的更新和维护之中，不断修复漏洞并增加新功能，所以现在 Shadowsocks 比 ShadowsocksR 更强大</p>
<h3 id="提醒"><a class="header-anchor" href="#提醒"></a>提醒</h3>
<p>不要迷信 SSR 一定比 SS 强，也包括现在的 V2Ray，Trojan，甚至是 WireGuard 等，因为增加混淆意味着损失速度，混淆加密越是强悍，那么其速度和稳定性损失就越大，另外 SSR 至今已被研究透了，而且长时间没有更新维护，其流量特征是可以被 GFW 精准识别，所以用 SSR 和 SS 没有本质区别，由于 SS 一直更新维护，反而更稳定。</p>
<h2 id="V2Ray"><a class="header-anchor" href="#V2Ray"></a>V2Ray</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly92MmZseS5vcmc=">V2Ray<i class="fa fa-external-link-alt"></i></span> 是在 Shadowsocks 被封杀后，为表示抗议而开发，属于后起之秀，功能更加强大，为抗 GFW 封锁而生。V2Ray 现在已经是 Project V 项目的核心工具。而 Project V 是一个平台，其中也包括支持 Shadowsocks 协议。由于 V2Ray 早于 Project V 项目，且名声更大，我们习惯称 Project V 项目为 V2Ray，所以我们平常所说的 V2Ray 其实就是 Project V 这个平台，也就是一个工具集。其中，只有 VMess 协议是 V2Ray 社区原创的专属加密通讯协议</p>
<p>V2Ray 目前支持一下协议（截止 2019-12）</p>
<ul>
<li>Blackhole: 中文名称“黑洞”，是一个出站数据协议，它会阻碍所有的数据的出站，配合路由（Routing）一起使用，可以访问被封杀的网站</li>
<li>DNS: 是一个出站协议，主要用于拦截和转发 DNS 查询。此出站协议只能接收 DNS 流量（包含基于 UDP 和 TCP 协议的查询），其它类型的流量会导致错误。在处理 DNS 查询时，此出站协议会将 IP 查询（即 A 和 AAAA）转发给内置的 DNS 服务器。其它类型的查询流量将被转发至原本的目标地址，DNS 出站协议在 V2Ray 4.15 中引入</li>
<li>Dokodemo-door: 中文名称“任意门”，是一个入站数据协议，它可以监听一个本地端口，并把所有进入此端口的数据发送到指定服务器的一个端口，从而达到端口映射的效果</li>
<li>Freedom: 是一个出站协议，可以用来向任意网络发起（正常的）TCP 或 UDP 数据</li>
<li>HTTP: 超文本传输协议，是传统的代理协议</li>
<li>Socks: 标准的 Socks 协议实现，兼容 <span class="exturl" data-url="aHR0cDovL2Z0cC5pY20uZWR1LnBsL3BhY2thZ2VzL3NvY2tzL3NvY2tzNC9TT0NLUzQucHJvdG9jb2w=">Socks 4<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cDovL2Z0cC5pY20uZWR1LnBsL3BhY2thZ2VzL3NvY2tzL3NvY2tzNC9TT0NLUzRBLnByb3RvY29s">Socks 4a<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cDovL3d3dy5zb2Nrcy5uZWMuY29t">Socks 5<i class="fa fa-external-link-alt"></i></span>『🙃目前无法正常访问』，也属于是一种传统的代理协议</li>
<li>VMess: 是 V2Ray 专用的加密传输协议，它分为入站和出站两部分，通常作为 V2Ray 客户端和服务器之间的桥梁。因为增加了混淆和加密，据说比 Shadowsocks 更安全。VMess 依赖于系统时间，请确保使用 V2Ray 的系统 UTC 时间误差在 90 秒之内，与时区无关。在 Linux 系统中可以安装 ntp 服务来自动同步系统时间</li>
<li>Shadowsocks: 包含入站，出站两部分协议，兼容大部分其它版本的实现。最早被个人开发的科学上网梯子协议，但 V2Ray 目前不支持 ShadowsocksR</li>
<li><span class="exturl" data-url="aHR0cHM6Ly90cm9qYW4tZ2Z3LmdpdGh1Yi5pby90cm9qYW4vcHJvdG9jb2w=">Trojan<i class="fa fa-external-link-alt"></i></span>: 特洛伊木马服务器如何对有效的特洛伊木马协议和其他协议（可能是 HTTPS 或任何其他探针）做出反应</li>
<li>VLESS: 是一个无状态的轻量传输协议，它分为入站和出站两部分，可以作为 V2Ray 客户端和服务器之间的桥梁，与 VMess 不同，VLESS 不依赖与系统时间，认证方式同样为 UUID，但不需要 alterId</li>
<li>Loopback: 是一个出站协议，可使出站连接被重新路由，最低支持版本 v4.36.0+</li>
</ul>
<p>截止到 2021-05，V2Ray 可选的传输层配置有：TCP、mKCP，WebSocket、HTTP/2，DomainSocket、QUIC、gRPC。其中 mKCP、QUIC 和 TCP 用于优化网络质量；WebSocket 用于伪装；HTTP/2 和 DomainSocket 用于传输以及 TLS 加密</p>
<p>V2Ray 不仅可以在传输层配置 TLS 使用 HTTP 和 Socks 变成 HTTPS 和 Socks over TLS 协议，也可以使用 MTProto、Shadowsocks 和 VMess 通过传输层配置 TLS 加密伪装成 TLS 流量。所以，VMess 配置是 TLS 加密的最常见的做法，但没人会对 Shadowsocks 使用 TLS 加密，因为完全没有意义</p>
<h3 id="客户端"><a class="header-anchor" href="#客户端"></a>客户端</h3>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly92Mnh0bHMub3JnL3YycmF5JWU1JWFlJWEyJWU2JTg4JWI3JWU3JWFiJWFmLw==">V2Ray 客户端<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="Xray-与-XTLS"><a class="header-anchor" href="#Xray-与-XTLS"></a>Xray 与 XTLS</h2>
<p>Xray 与 V2Ray 完全类同，Xray 是 Project X 项目的核心模块。因为 Xray 和 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1hUTFMv">XTLS 黑科技<i class="fa fa-external-link-alt"></i></span> 的作者 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Jwcng=">rpfx<i class="fa fa-external-link-alt"></i></span> 曾是 V2fly 社区的重要成员，所以 Xray 直接 fork 全部 V2Ray 的功能，然后进行性能优化，并增加了新的功能，使 Xray 在功能上成为了 V2Ray 的超集，且完全兼容 V2Ray。</p>
<p>简而言之，Xray 是 V2Ray 的项目分支，Xray 是 V2Ray 的超集，就跟 Trojan-Go 和 Trojan-GFW 的关系类似，而且 Xray 性能更好，速度更快，更新迭代也更频繁。</p>
<blockquote>
<p>由于 V2Ray-core 4.33.0 版本起，删除了 XTLS 黑科技，但任然支持 VLESS，所以是否原生支持 XTLS 是 Xray 和 V2Ray 最大的区别之一</p>
</blockquote>
<h2 id="Trojan-与-Trojan-Go"><a class="header-anchor" href="#Trojan-与-Trojan-Go"></a>Trojan 与 Trojan-Go</h2>
<p>Trojan 原特指特洛伊木马，是一种计算机病毒程序。但是，我们今天所说的 Trojan 是一种新型的科学上网技术，全称为 Trojan-GFW，是目前最成功的科学上网伪装技术之一。你可以认为 Trojan 是 V2Ray 的 “WS + TLS” 模式的精简版，速度比 V2Ray 更快，伪装比 V2Ray 更逼真，更难以备 GFW 识别</p>
<p>Trojan 工作原理：Trojan 通过监听 443 端口，模仿互联网上最常见的 HTTPS 协议，把合法的 Trojan 数据伪装成正常的 HTTPS 通信，并真正地完整完成 TLS 握手，以诱骗 GFW 认为它就是 HTTPS，从而不被识别。Trojan 处理来自外界的 HTTPS 请求，如果是合法的，那么为该请求提供服务，否则将该流量交给 Caddy、Nginx 等 Web 服务器，由 Caddy、Nginx 等为其提供网页访问服务。基于整个交互过程，这样能让你的 VPS 更像一个正常的 Web 服务器，因为 Trojan 的所有行为均为 Caddy、Nginx 等 Web 服务器一致，并没有引入额外特征，从而达到难以识别的效果</p>
<p>Trojan-Go 是 Trojan-GFW 的分支项目，对 Trojan 进行性能优化，并增加不少新特性，Trojan-Go 性能和功能均有大幅度的提升，而且支持分流和 CDN</p>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<p>通过上述，以及其他信息来源对这些技术有了一定的基本认识，从以下的几个方面来进行总结</p>
<h3 id="原理不同"><a class="header-anchor" href="#原理不同"></a>原理不同</h3>
<p>VPN：强调对公网传输过程中数据的加解密<br>
SS/SSR/V2Ray/Xray/Traojan：专注于在客户端和服务器间加密，公网传输过程中特征没有 VPN 明显</p>
<h3 id="目的不同"><a class="header-anchor" href="#目的不同"></a>目的不同</h3>
<p>VPN：是走在公网中自建的虚拟专用通道，使用强大的加解密算法，为数据传输安全性、私密性而生，被广泛应用于企业、高校、科研部门等远程数据传输领域<br>
SS/SSR/V2Ray/Xray/Trojan/Trojan-Go：是为了数据能够安全通过 GFW 而生，更强调的是对数据的混淆和伪装，加解密只是为了更好的隐藏数据特征而顺利通过 GFW 的检测</p>
<h3 id="项目诞生的大致顺序"><a class="header-anchor" href="#项目诞生的大致顺序"></a>项目诞生的大致顺序</h3>
<p>VPN &gt; SS &gt; SSR/V2Ray/WireGuard &gt; Trojan/Trojan-Go &gt; Xray</p>
<h2 id="致每一个追求真理的人"><a class="header-anchor" href="#致每一个追求真理的人"></a>致每一个追求真理的人</h2>
<p>凡事都有两面性，看如何去看待。其实我一直认为，有墙确实是一件好事，毕竟祖国互联网发展也不过 20 多年，在一定程度上过滤掉了一些没有自我认知，自我思考盲目跟风，觉得国外的月亮圆，国外什么都好的一群人；保障了在互联网开始萌芽的本土企业（毕竟国外的产品和技术都已经发展了好几轮，从解决问题的能力，使用的用户体验（不含本地化）等等方面都是完全甩开本地企业的服务）发展，提供给企业和网民一起成长的安全环境，在这一点上 GFW 功不可没。但作为一个技术从业人员来说，其中大部分的技术理念思想，技术平台等纯技术领域相关的东西来说不是那么友好，常常伴随着由于网络原因而造成的各种乱七八糟的问题，对于暂无本土相关替代服务支持时，在一定程度上阻碍了国内相关技术的发展进度和创新。</p>
<p>真如前面所述，凡事都有两面性。对于未知的事物，人类本能的会产生恐惧，因为它不可控，而互联网正真不可控的不是技术而是人，人是复杂的个体，一个技术的好坏不是它本身，而是使用的人在做什么样的事，而做的事在一定的环境下它是有好坏之分的。因此我在这里对自我约束，仅为获取相关学习的知识，不参与散布谣言、政治相关等言论，踏踏实实搞技术</p>
<blockquote>
<p>希望未来的有一天，国内技术人员的输出是全球技术的风向标</p>
</blockquote>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9jbi9jbG91ZC9mcmVlLw==">试用 Always Free 云服务<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGFuaWFvLm9yZy82NTM3Lmh0bWw=">申请 Oracle Cloud 永久免费服务<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNTI3MzYzNzI=">2021年申请永久免费甲骨文云 Oracle Cloud 并创建实例最全攻略<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZXJsaW5ibG9nLnh5ei93aWtpcGFnZWd1aWRlLmh0bWw=">多种科学上网指导教程汇总<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly92Mnh0bHMub3Jn">V2ray XTLS黑科技<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Agent</category>
      </categories>
      <tags>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title>专治各种网络不服</title>
    <url>/2020/02/27/fuck-gfw/</url>
    <content><![CDATA[<p>众所周知国内的开发已经由原来的“致敬”到现在软件生态领域的“引领”（目前来说还未到真正引领）世界技术发展，但是一个问题始终还是未能有所突破，作为中国的开发者每次在面对新的技术在环境搭建就劝退了一众人，很多开发所依赖的项目资源都来自国外服务，而由于中国的特殊，对很多国外服务的限制，让你在开始的第一阶段总是碰的鼻青脸肿，把大量的时间浪费在环境搭建的等待上，虽然现在很多开源组织或者一线大厂提供了相应的镜像服务方便国内的开发者，但很多都还需要我们自行去更改或者解决这些问题，本篇文章就是我的开发之路上的各种网络问题的解决办法</p>
<span id="more"></span>
<h2 id="Gradle"><a class="header-anchor" href="#Gradle"></a>Gradle</h2>
<p>Gradle 作为新一代的包管理工具，早期作为 Android 项目的御用包管理，渐渐的越来越多的服务端项目也开始在使用 Gradle 来进行管理，至于 Gradle 和 Maven 的对比，我这里不做评论，请移步 Gradle 官方网站对两个包管理的比较 <span class="exturl" data-url="aHR0cHM6Ly9ncmFkbGUub3JnL21hdmVuLXZzLWdyYWRsZS8=">Gradle vs Maven Comparison<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>Gradle 镜像地址：<span class="exturl" data-url="aHR0cHM6Ly9zZXJ2aWNlcy5ncmFkbGUub3JnL2Rpc3RyaWJ1dGlvbnM=">https://services.gradle.org/distributions<i class="fa fa-external-link-alt"></i></span><br>
Gradle 腾讯镜像：<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLmNsb3VkLnRlbmNlbnQuY29tL2dyYWRsZQ==">https://mirrors.cloud.tencent.com/gradle<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="单项目配置"><a class="header-anchor" href="#单项目配置"></a>单项目配置</h3>
<h4 id="Android-项目"><a class="header-anchor" href="#Android-项目"></a>Android 项目</h4>
<p>在 Android 项目中主要有下面这些配置文件</p>
<ul>
<li>build.gradle
<ul>
<li>项目级别：在项目根目录，定义项目中所有模块共用的 Gradle 代码库和依赖项</li>
<li>模块级别：在模块根目录，用于为其所在的特定模块配置构建设置，可以通过配置这些构建设置提供自定义打包选项（如额外的构建类型和产品变种），以及替换 main/ 应用清单或顶层 build.gradle 文件中的设置</li>
</ul>
</li>
<li>settings.gradle：项目的根目录下，用于指示 Gradle 在构建应用时应将哪些模块包含在内</li>
<li>xxxxx.gradle：模块配置文件，可将冗长的配置信息分块进行配置，比如依赖的版本统一管理等</li>
</ul>
<blockquote>
<p>更详细的介绍请查看 Android 官方说明 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vc3R1ZGlvL2J1aWxk">配置构建<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>项目的依赖仓库镜像配置，在项目级别的 build.gradle 文件中，如下进行镜像的指定示例</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        <span class="comment">// 添加或修改这里指向的镜像仓库地址，默认使用，https://maven.google.com/</span></span><br><span class="line">        google()</span><br><span class="line">        <span class="comment">// 如果需要指定 google 的镜像地址，可注释掉上面的 google()默认配置，使用下面的显示指定配置</span></span><br><span class="line">        <span class="comment">// google&#123;</span></span><br><span class="line">        <span class="comment">//     url &#x27;https://maven.aliyun.com/repository/google&#x27;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123; </span><br><span class="line">            <span class="comment">// 比如修改这里的镜像指向地址</span></span><br><span class="line">            <span class="comment">// url &#x27;https://jitpack.io&#x27; </span></span><br><span class="line">            url <span class="string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.android.tools.build:gradle:3.5.3&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        <span class="comment">// 添加或修改这里指向的镜像仓库地址，默认使用，https://maven.google.com/</span></span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123; </span><br><span class="line">            <span class="comment">// 比如修改这里的镜像指向地址</span></span><br><span class="line">            <span class="comment">// url &#x27;https://jitpack.io&#x27; </span></span><br><span class="line">            url <span class="string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(<span class="attr">type:</span> Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>我们所依赖的 jar 文件，阿里云镜像中不一定都有，所以我们需要根据具体的项目实际情况调整</p>
</blockquote>
<h4 id="SpringBoot-项目"><a class="header-anchor" href="#SpringBoot-项目"></a>SpringBoot 项目</h4>
<p>在 SpringBoot 项目中主要有下面这些配置文件</p>
<ul>
<li>build.gradle：主要配置文件，关于项目的依赖关系主要在该文件中配置</li>
<li>settings.gradle：项目信息文件，项目的一些可在这里配置，比如项目名称、子项目信息</li>
<li>xxxxx.gradle：模块配置文件，可将冗长的配置信息分块进行配置，比如依赖的版本统一管理等</li>
</ul>
<p>如下，build.gradle 配置信息</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;org.springframework.boot&#x27;</span> version <span class="string">&#x27;2.1.6.RELEASE&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;io.spring.dependency-management&#x27;</span> version <span class="string">&#x27;1.0.8.RELEASE&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group = <span class="string">&#x27;org.incoder&#x27;</span></span><br><span class="line">version = <span class="string">&#x27;0.0.1-SNAPSHOT&#x27;</span></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    <span class="comment">// 显式指定仓库访问地址，以下两个地址推荐阿里云镜像，按顺序执行</span></span><br><span class="line">   maven &#123;</span><br><span class="line">       <span class="comment">// 指向 阿里云 镜像仓库</span></span><br><span class="line">       url <span class="string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//    maven &#123;</span></span><br><span class="line"><span class="comment">//        // 指向 spring 官方仓库</span></span><br><span class="line"><span class="comment">//        url &#x27;http://repo.spring.io/release&#x27;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-aop&#x27;</span></span><br><span class="line">    compileOnly <span class="string">&#x27;org.projectlombok:lombok&#x27;</span></span><br><span class="line">    annotationProcessor <span class="string">&#x27;org.projectlombok:lombok&#x27;</span></span><br><span class="line">    testImplementation(<span class="string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span>) &#123;</span><br><span class="line">        exclude <span class="attr">group:</span> <span class="string">&#x27;org.junit.vintage&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;junit-vintage-engine&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于 SpringBoot 项目，不管是全局镜像配置还是单项目的镜像配置，可能存在 SpringBoot 依赖的插件依赖无法下载，通常表现为卡在 <code>Gradle: Download org.springframework.boot.gradle.plugin-xxxx.pom</code> 这里，那则需要也配置插件镜像，在 settings.gradle 文件<font color=red><strong>最上面</strong></font>加入如下配置</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pluginManagement &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">&quot;https://maven.aliyun.com/repository/gradle-plugin&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="全局配置"><a class="header-anchor" href="#全局配置"></a>全局配置</h3>
<p>在当前系统 <code>$&#123;USER_HOME&#125;/.gradle/</code> 目录下创建 <code>init.gradle</code> 文件，将 Maven 和 Jcenter 仓库都指向阿里云镜像仓库</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">`<span class="comment">// 如果你的 springboot plugin 下载也很慢，也可以全局设置插件下载地址`</span></span><br><span class="line">pluginManagement &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">&quot;https://maven.aliyun.com/repository/gradle-plugin&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 项目依赖第三方包下载地址替换</span></span><br><span class="line">allprojects&#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> ALIYUN_CENTRAL_URL = <span class="string">&#x27;https://maven.aliyun.com/repository/central/&#x27;</span></span><br><span class="line">        <span class="keyword">def</span> ALIYUN_JCENTER_PUBLIC_URL = <span class="string">&#x27;https://maven.aliyun.com/repository/public/&#x27;</span></span><br><span class="line">        <span class="keyword">def</span> ALIYUN_GOOGLE_URL = <span class="string">&#x27;https://maven.aliyun.com/repository/google/&#x27;</span></span><br><span class="line">        <span class="keyword">def</span> ALIYUN_GRADLE_PLUGIN_URL = <span class="string">&#x27;https://maven.aliyun.com/repository/gradle-plugin/&#x27;</span></span><br><span class="line">        <span class="keyword">def</span> ALIYUN_SPRING_URL = <span class="string">&#x27;https://maven.aliyun.com/repository/spring/&#x27;</span></span><br><span class="line">        <span class="keyword">def</span> ALIYUN_SPRING_PLUGIN_URL = <span class="string">&#x27;https://maven.aliyun.com/repository/spring-plugin/&#x27;</span></span><br><span class="line">        <span class="keyword">def</span> ALIYUN_GRAILS_CORE_URL = <span class="string">&#x27;https://maven.aliyun.com/repository/grails-core/&#x27;</span></span><br><span class="line">        <span class="keyword">def</span> ALIYUN_APACHE_SNAPSHOTS_URL = <span class="string">&#x27;https://maven.aliyun.com/repository/apache-snapshots/&#x27;</span></span><br><span class="line"></span><br><span class="line">        all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">            <span class="keyword">if</span>(repo <span class="keyword">instanceof</span> MavenArtifactRepository)&#123;</span><br><span class="line">                <span class="keyword">def</span> url = repo.url.toString()</span><br><span class="line">                <span class="comment">// central</span></span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://repo1.maven.org/maven2/&#x27;</span>)) &#123;</span><br><span class="line">                    project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_CENTRAL_URL.&quot;</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// jcenter</span></span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://jcenter.bintray.com/&#x27;</span>) || url.startsWith(<span class="string">&#x27;http://jcenter.bintray.com/&#x27;</span>)) &#123;</span><br><span class="line">                    project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_JCENTER_PUBLIC_URL.&quot;</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// google</span></span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://maven.google.com/&#x27;</span>)) &#123;</span><br><span class="line">                    project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_GOOGLE_URL.&quot;</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// gradle-plugin</span></span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://plugins.gradle.org/m2/&#x27;</span>)) &#123;</span><br><span class="line">                    project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_GRADLE_PLUGIN_URL.&quot;</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// spring</span></span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://repo.spring.io/libs-milestone/&#x27;</span>)) &#123;</span><br><span class="line">                    project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_SPRING_URL.&quot;</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// spring-plugin</span></span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;http://repo.spring.io/plugins-release/&#x27;</span>) || url.startsWith(<span class="string">&#x27;https://repo.spring.io/plugins-release/&#x27;</span>)) &#123;</span><br><span class="line">                    project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_SPRING_PLUGIN_URL.&quot;</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// grails-core</span></span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://repo.grails.org/grails/core/&#x27;</span>)) &#123;</span><br><span class="line">                    project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_GRAILS_CORE_URL.&quot;</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// apache snapshots</span></span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://repository.apache.org/snapshots/&#x27;</span>)) &#123;</span><br><span class="line">                    project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_APACHE_SNAPSHOTS_URL.&quot;</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        maven &#123; url ALIYUN_CENTRAL_URL &#125;</span><br><span class="line">        maven &#123; url ALIYUN_JCENTER_PUBLIC_URL &#125;</span><br><span class="line">        maven &#123; url ALIYUN_GOOGLE_URL &#125;</span><br><span class="line">        maven &#123; url ALIYUN_GRADLE_PLUGIN_URL &#125;</span><br><span class="line">        maven &#123; url ALIYUN_SPRING_URL &#125;</span><br><span class="line">        maven &#123; url ALIYUN_SPRING_PLUGIN_URL &#125;</span><br><span class="line">        maven &#123; url ALIYUN_GRAILS_CORE_URL &#125;</span><br><span class="line">        maven &#123; url ALIYUN_APACHE_SNAPSHOTS_URL &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Maven"><a class="header-anchor" href="#Maven"></a>Maven</h2>
<h3 id="单项目配置-v2"><a class="header-anchor" href="#单项目配置-v2"></a>单项目配置</h3>
<p>项目配置文件<code>pom.xml</code>文件中配置镜像地址，<project>标签下添加<repositories>标签配置阿里云镜像</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="全局配置-v2"><a class="header-anchor" href="#全局配置-v2"></a>全局配置</h3>
<p>Maven 默认配置文件地址，<code>Users/&lt;PC_USER_NAME&gt;/.m2</code>目录下，如果没有，则新建一个<code>settings.xml</code>文件，进行镜像的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云central仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云public仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云Google仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/google/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云gradle-plugin仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/gradle-plugin/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云Spring仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云spring-plugin仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring-plugin/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云grails-core插件仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/grails-core/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云Apache仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/apache-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">proxies</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfiles</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>具体的配置教程，可参考<span class="exturl" data-url="aHR0cHM6Ly9tYXZlbi5hbGl5dW4uY29tL212bi9ndWlkZQ==">阿里云云效 maven<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="Homebrew"><a class="header-anchor" href="#Homebrew"></a>Homebrew</h2>
<p>Homebrew是 macOS 系统的一款开源的包管理器</p>
<h3 id="修改镜像"><a class="header-anchor" href="#修改镜像"></a>修改镜像</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># macOS 系统修改 homebrew 镜像地址为清华镜像</span></span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git</span><br><span class="line"><span class="comment"># 『可选』 如果之前有安装过 font 相关，则更改 font 相关的镜像地址，否则会提示 cask-fonts 不存在</span></span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask-fonts)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-fonts.git</span><br><span class="line"><span class="comment"># 『可选』 如果之前有安装过 drivers 相关，则更改 drivers 相关的镜像地址，否则会提示 cask-drivers 不存在</span></span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask-drivers)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-drivers.git</span><br><span class="line"><span class="comment"># 更换后测试工作是否正常</span></span><br><span class="line">brew update</span><br><span class="line"><span class="comment"># 替换Homebrew Bottles源（以下方式二选一即可）</span></span><br><span class="line"><span class="comment"># 1. bash用户</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="comment"># 2. zsh用户</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<h3 id="恢复镜像"><a class="header-anchor" href="#恢复镜像"></a>恢复镜像</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># macOS 系统恢复 homebrew 原镜像地址</span></span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/brew.git</span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/homebrew-cask.git</span><br><span class="line"><span class="comment"># 『可选』 如果之前有安装过 font 相关，则更改 font 相关的镜像地址，否则会提示 cask-fonts 不存在</span></span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask-fonts)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/homebrew-cask-fonts.git</span><br><span class="line"><span class="comment"># 『可选』 如果之前有安装过 drivers 相关，则更改 drivers 相关的镜像地址，否则会提示 cask-drivers 不存在</span></span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask-drivers)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/homebrew-cask-drivers.git</span><br><span class="line"><span class="comment"># 更换后测试工作是否正常</span></span><br><span class="line">brew update</span><br><span class="line"><span class="comment"># 取消 Homebrew Bottles源设置（以下方式二选一）</span></span><br><span class="line"><span class="comment"># 1. bash用户，取消 HOMEBREW_BOTTLE_DOMAIN 设置</span></span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="comment"># 2. zsh用户，取消 HOMEBREW_BOTTLE_DOMAIN 设置</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其他镜像：<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnVzdGMuZWR1LmNuLw==">中科大<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="Github"><a class="header-anchor" href="#Github"></a>Github</h2>
<h3 id="资源文件无法加载"><a class="header-anchor" href="#资源文件无法加载"></a>资源文件无法加载</h3>
<p>GitHub 上各种图片都无法加载，不仅仅是头像，包括各个仓库中的图片也是。开始以为是科学上网的问题，又或者是图片本身失效，可是验证下来都是无关的，经过一番折腾查找，原来是 DNS 被污染导致</p>
<p>解决方法：通过查看头像等文件的访问地址，了解到这些地址的域名都是 <code>githubusercontent.com</code>，然后通过<span class="exturl" data-url="aHR0cHM6Ly93d3cuaXBhZGRyZXNzLmNvbQ==">IP 地址查询<i class="fa fa-external-link-alt"></i></span>可以找到其对应的 IP 地址，并将其相关二级域名一起配置到 Hosts 文件中</p>
<p>host 路径</p>
<ul>
<li>macOS：/etc/</li>
<li>Windows：C:\Windows\System32\drivers\etc</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Github start</span></span><br><span class="line">140.82.114.3      github.com</span><br><span class="line">140.82.112.4      gist.github.com</span><br><span class="line"></span><br><span class="line">185.199.108.153    assets-cdn.github.com</span><br><span class="line">185.199.109.153    assets-cdn.github.com</span><br><span class="line">185.199.110.153    assets-cdn.github.com</span><br><span class="line">185.199.111.153    assets-cdn.github.com</span><br><span class="line"><span class="comment"># *.githubusercontent.com   raw|gist|cloud|camo|avatars0-9|avatars</span></span><br><span class="line">199.232.96.133     raw.githubusercontent.com</span><br><span class="line">199.232.96.133     gist.githubusercontent.com</span><br><span class="line">199.232.96.133     cloud.githubusercontent.com</span><br><span class="line">199.232.96.133     camo.githubusercontent.com</span><br><span class="line">199.232.96.133     avatars0.githubusercontent.com</span><br><span class="line">199.232.96.133     avatars1.githubusercontent.com</span><br><span class="line">199.232.96.133     avatars2.githubusercontent.com</span><br><span class="line">199.232.96.133     avatars3.githubusercontent.com</span><br><span class="line">199.232.96.133     avatars4.githubusercontent.com</span><br><span class="line">199.232.96.133     avatars5.githubusercontent.com</span><br><span class="line">199.232.96.133     avatars6.githubusercontent.com</span><br><span class="line">199.232.96.133     avatars7.githubusercontent.com</span><br><span class="line">199.232.96.133     avatars8.githubusercontent.com</span><br><span class="line">199.232.96.133     avatars.githubusercontent.com</span><br></pre></td></tr></table></figure>
<h3 id="git-clone-慢的想砸电脑"><a class="header-anchor" href="#git-clone-慢的想砸电脑"></a>git clone 慢的想砸电脑</h3>
<h4 id="方式一：设置代理"><a class="header-anchor" href="#方式一：设置代理"></a>方式一：设置代理</h4>
<p>这个无解，只能在<font color=red>开启代理的前提下</font>，也给终端设置代理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只对 github.com，这里的 port 端口，需要你本地HTTP代理的端口来设置</span></span><br><span class="line">git config --global http.https://github.com.proxy socks5://127.0.0.1:port</span><br><span class="line"><span class="comment"># 取消代理</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.https://github.com.proxy</span><br></pre></td></tr></table></figure>
<h4 id="方式二：Gitee-中转"><a class="header-anchor" href="#方式二：Gitee-中转"></a>方式二：Gitee 中转</h4>
<p>另一种方式，适用于你需要获取 GitHub 源码做相关的其他操作时，可以借助于 Gitee 来作为中转</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1585097262/blog/improt-github-to-gitee.png" alt="improt-github-to-gitee"></p>
<p>可以参考大佬的手把手教你</p>
<iframe src="//player.bilibili.com/player.html?aid=94251133&bvid=BV1aE411p7Cd&cid=160907040&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<h4 id="方式三：cnpmjs镜像中转"><a class="header-anchor" href="#方式三：cnpmjs镜像中转"></a>方式三：cnpmjs镜像中转</h4>
<p>在你需要 clone 的仓库地址中，添加 <code>.cnpmjs.org</code> 在 <code>github.com</code> 的后面</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1595934447/blog/github-cnpmjs.png" alt="github-cnpmjs"></p>
<h4 id="方法四：jsdelivr-免费-CDN-加速"><a class="header-anchor" href="#方法四：jsdelivr-免费-CDN-加速"></a>方法四：jsdelivr 免费 CDN 加速</h4>
<p>适用于下载单个文件</p>
<iframe src="//player.bilibili.com/player.html?aid=371171067&bvid=BV13Z4y1p75s&cid=205661842&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<h2 id="yum"><a class="header-anchor" href="#yum"></a>yum</h2>
<p>yum 源配置文件路径：/etc/yum.repo s.d/</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看配置，Centos-xx.repo 类型的文件即为源</span></span><br><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d &amp;&amp; <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 备份源，创建 centos.back 文件夹，并将 *.repo 类型文件剪切到 centos.back 文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> centos.back &amp;&amp; <span class="built_in">mv</span> *.repo centos.back</span><br><span class="line"><span class="comment"># 下载安装国内源文件，分别下载了阿里和 163 的源文件</span></span><br><span class="line">wget http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">wget http://mirrors.163.com/.help/CentOS7-Base-163.repo</span><br><span class="line"><span class="comment"># 清空缓存</span></span><br><span class="line">yum clean all</span><br><span class="line"><span class="comment"># 生成缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<h2 id="docker"><a class="header-anchor" href="#docker"></a>docker</h2>
<p>docker 镜像源默认是使用的 docker hub(<span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbQ==">https://hub.docker.com<i class="fa fa-external-link-alt"></i></span>) 的源，为加快效率，我们通常也将镜像源切换到国内镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 docker 源配置文件</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 内容如下，分别是 docker 中国官方镜像，163，中国科学技术大学</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;https://registry.docker-cn.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://ustc-edu-cn.mirror.aliyuncs.com&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 保存 daemon.json 文件修改，并退出</span></span><br><span class="line">:wq</span><br><span class="line"><span class="comment"># 重启 daemon 服务</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="comment"># 重启 docker 服务</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9taXJyb3IudHVuYS50c2luZ2h1YS5lZHUuY24vaGVscC9ob21lYnJldy8=">Homebrew/Linuxbrew 镜像使用帮助<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmFsaXl1bi5jb20vZG9jdW1lbnRfZGV0YWlsLzEwMjUxMi5odG1sP3NwbT1hMmM0MC5hbGl5dW5fbWF2ZW5fcmVwby4wLjAuMzYxODMwNTRuY3VDcjQ=">阿里云公共代理库配置指南<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>DevTool</category>
      </categories>
      <tags>
        <tag>Exp</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Developer Days 2019</title>
    <url>/2019/09/12/gdd-2019/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/incoder/image/upload/v1568675354/blog/google-developer-days.jpg" alt=""></p>
<p>连续三年申请参加 Google Developer Days，今年终于中签了，而且和好友<span class="exturl" data-url="aHR0cHM6Ly9jZWFzZXIud2FuZw==">大蛇丸<i class="fa fa-external-link-alt"></i></span>及公司同事同时中签（可能是我们都使用了忍术）。嗯，终于离404公司又进了一步，哈哈哈~<br>
废话不啰嗦了，这篇文章就唠唠参加 GDD 的前前后后。</p>
<span id="more"></span>
<p>众所周知每年 Google 会在 5 月份上旬在美国举行 Google 1/O (全球开发者大会)大会，在大会上无例外的推出新版本的 Android 系统（虽然只是 bate版本，今年 Android 取消了过去使用甜品命名的方式，而直接采用阿拉伯数字命名）等等软硬件上的技术探索和研究成果，给 Android 领域确立风向标。</p>
<p>而在中国，大概每年 9 月份会在中国上海举办 Google Developer Days，今年是第 4 年，可见 Google 对中国市场的重视。</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ldmVudHMuZ29vZ2xlLmNuL2ludGwvemgtQ04vZGV2ZWxvcGVyZGF5czIwMTkv">2019<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNuL2ludGwvemgtQ04vZXZlbnRzL2RldmVsb3BlcmRheXMyMDE4Lw==">2018<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNuL2ludGwvemgtQ04vZXZlbnRzL2RldmVsb3BlcmRheXMyMDE3Y2hpbmEv">2017<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNuL2ludGwvemgtQ04vZXZlbnRzL2RldmVsb3BlcmRheTIwMTYv">2016<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="申请"><a class="header-anchor" href="#申请"></a>申请</h2>
<p>由于 GDD 是不收取门票的，因此会对申请用户进行筛选，这个就要看运气了，可以通过以下的渠道获取信息，进行申请</p>
<ul>
<li>微信公众号<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1568547420/blog/google-developers.gif" alt=""></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93ZWliby5jb20vR29vZ2xlRGV2ZWxvcGVycw==">微博 Google开发者<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL29yZy9nb29nbGUtZ3UtZ2U=">知乎 谷歌开发者<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jaGluYWdkZy5vcmc=">社区 GDG<i class="fa fa-external-link-alt"></i></span></li>
<li>其他渠道</li>
</ul>
<p>申请时需要填写一些资料，如实填写即可，剩下就是静待消息，如果审核通过，会发送邮件/短信通知你，不同的同学接收到的时间可能不同，具体的截止时间，以官方通知为准，没有通过的可查看官方合作的直播平台进行直播观看</p>
<blockquote>
<p>众所周知，参加大会的基本是清一色的男同学，因此今年 Google 还专门有为女同学们提供了 1000 名的直通车，具体请移步<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvU1dNeTJwdWk3ajJSTVpDY0E0YlM1QQ==">官方公众号<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="参加"><a class="header-anchor" href="#参加"></a>参加</h2>
<p>筛选通过后，那就是自己安排好自己的工作或者是学习，因为大会时间不一定是周末，以及安排好你的行程和住宿（两天的午餐都是由 GDD 提供）。我在杭州，因此就搭乘动车当天早上抵达上海虹桥，换乘地铁抵达目的地（上海世博中心）。由于支付宝并不支持上海地铁，因此需要提前下载一款 &quot;Metro 大都会&quot;应用</p>
<h2 id="感受"><a class="header-anchor" href="#感受"></a>感受</h2>
<p>满满当当两天下来，收货不少，这一届可以通过官方日程看出，重点是 Flutter 以及 TensorFlow 相关，大部分内容都是偏大前端这个领域，不管是相关应用场景的尝试还是一些技术细节和技术的巧妙实现，都能看得出 Google 在技术领域的话语权，其中有两个技术探索以及一场《挖掘事业发展潜力 - 开拓自己的道路》课堂，各位老师对职业发展讲解让我印象深刻</p>
<ul>
<li>与 AR 相结合的 AR 导航（与滴滴合作），解决室内定位问题</li>
<li>与艺术（音乐）结合，让技术有了温度，通过深度学习</li>
<li>开拓自己的道路
<ul>
<li>对自己的专业技能需要达到融会贯通</li>
<li>要主动的心态去工作，有企业家的精神</li>
<li>enjoy 的方式去对待自己所做的决定</li>
<li>只有自己了解自己，才能将自己的推向更高的舞台</li>
</ul>
</li>
</ul>
<p>另外通过现场感受，可以看到活动的现场屏幕边框元素是<span class="exturl" data-url="aHR0cHM6Ly9tYXRlcmlhbC5pbw==">Material Desing<i class="fa fa-external-link-alt"></i></span>中的，三角，圆，矩形，线条，和现场灯光融为一体，每一个视频动画都看得出他们在背后的付出，每一段音乐都那么的契合场景，这是我参加众多线下交流会，在现场感受最深的一次</p>
<h2 id="其他"><a class="header-anchor" href="#其他"></a>其他</h2>
<p>我们来看一看来自官方的活动精彩瞬间</p>
<iframe src="//player.bilibili.com/player.html?aid=68175984&cid=118168091&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<h3 id="如何提高中签率"><a class="header-anchor" href="#如何提高中签率"></a>如何提高中签率</h3>
<p>在知识星球中，看到有人分享</p>
<p>“简单说下对筛选的看法吧，报名的问卷非常的简单，都是一些有没有使用谷歌服务的选项。作为主办方，怎么样才能快速高效的在这之中找到自己想要的人呢？</p>
<p>这其实就是如何帮助谷歌建立你的<strong>用户画像</strong>，如果谷歌能找到更多的有利的信息，那么成功报名的机率自然会高。</p>
<p>那如何做到这点呢？其实很简单，提供使用谷歌服务频率最高最深的邮箱，因为谷歌可以很方便的获取到想要的信息！”</p>
<h3 id="如何回顾"><a class="header-anchor" href="#如何回顾"></a>如何回顾</h3>
<p>错过了现场参与，和视频直播，还能不能观看，答案是当然可以，官方会对直播视频进行剪辑，发布到<span class="exturl" data-url="aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vNjQxNjk0NTgv">bilibili<i class="fa fa-external-link-alt"></i></span>视频网站，你可以关注<span class="exturl" data-url="aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vNjQxNjk0NTg=">Google中国<i class="fa fa-external-link-alt"></i></span> 官方账号方便你第一时间活动更新动态，截止目前为止已发布，随后发布的我会及时更新</p>
<ul>
<li>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2Njc5NDY1Mjc=">谷歌开发者大会开幕主旨演讲<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li>
<p>移动端</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2NjgwNTgwOTY=">Android 开发最新技术概览<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2NjgwNjEzMjg=">Android 10 和隐私保护：使您的应用顺应变更<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2NjgwNjYxNTI=">Android 无障碍：服务所有人<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2NjgwNTg2Njk=">利用 Kotlin 进行 Android 开发<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2NjgwNTkwODc=">如何组装你的 Jetpack<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9iaWxpYmlsaS5jb20vdmlkZW8vYXY2ODA0Njc2MA==">CameraX：面向开发者的摄像头支持库<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2Njc5MDc3MzU=">移动Web技术拓展无限商机<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2Njc5MDU4NjY=">AdMob 广告政策和工具<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2Njc4NTQyODQ=">用谷歌的新数据技术挖掘 App 变现潜力<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2NjgwNDg2MzE=">ConstraintLayout + MotionLayout：打造丰富界面并为其制作动画效果<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2NjgwNDk0OTI=">Material Theming：利用 Material 组件以极具表现力的方式构建主题背景<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2NjgwNTAzMDE=">利用 Material Design 设计深色主题背景<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
<li>
<p>机器学习</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2NjgwNTcwNzc=">机器学习简介<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2Njc5MDMyMDI=">机器学习赋能智慧营销，成就商业新增长<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2NjgwNTEyMDE=">利用基准化分析和剖析功能提升应用性能<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Google</category>
      </categories>
      <tags>
        <tag>GDD</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 多账号</title>
    <url>/2018/10/06/git-account/</url>
    <content><![CDATA[<p>以前，git的账号只用来在Github上操作，随着积累Git管理的项目不仅仅只来自Github，还有一些其它Git项目托管的平台，例如：<span class="exturl" data-url="aHR0cHM6Ly9iaXRidWNrZXQub3Jn">Bitbucket<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9jb2RpbmcubmV0">Coding<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20=">Gitee<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9naXRsYWIuY29t">Gitlib<i class="fa fa-external-link-alt"></i></span>，以及公司内Git仓库</p>
<p>不同的托管平台有着不同的Git账号，无法用一个账号来管理其它的仓库，而且由于不同的托管平台账号不同，因此需要添加不同账号的公钥，这样我们再能在对应平台用对应的账号进行操作</p>
<span id="more"></span>
<h2 id="环境"><a class="header-anchor" href="#环境"></a>环境</h2>
<ul>
<li>Windows 10 x64</li>
<li>Git version 2.16.0</li>
</ul>
<blockquote>
<p>这里Git的安装不在赘述</p>
</blockquote>
<h2 id="生成对应账号的密钥"><a class="header-anchor" href="#生成对应账号的密钥"></a>生成对应账号的密钥</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到`your_pc_name/.ssh`,</span></span><br><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line"><span class="comment"># Jerry.x@outlook.com 是我的Github的邮箱，这里需要替换成自己的邮箱</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;Jerry.x@outlook.com&quot;</span></span><br><span class="line"><span class="comment"># 命名文件名称或指定文件存放路径等</span></span><br><span class="line"><span class="comment"># 其它可以回车键进行确认，进行下一步</span></span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1538887180/blog/git-account.png" alt="git-account"></p>
<blockquote>
<p>完成后，将会生成<code>id_rsa_company.pub</code>（存放公钥）与<code>id_rsa_company</code>（存放私钥）两个文件</p>
</blockquote>
<h2 id="添加公钥到托管平台"><a class="header-anchor" href="#添加公钥到托管平台"></a>添加公钥到托管平台</h2>
<ul>
<li>在<code>.ssh</code>路径下，用文本编辑器打开<code>id_rsa_company.pub</code>文件，复制内容</li>
<li>在托管平台上添加ssh public key<br>
以下以GitHub添加为例，其它平台类似<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1538887180/blog/git-add-key.png" alt="git-add-key"></li>
</ul>
<h2 id="添加配置文件"><a class="header-anchor" href="#添加配置文件"></a>添加配置文件</h2>
<p>在<code>.ssh</code>路径下，创建<code>config</code>文件，无文件后缀名，如下示例</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置github.com</span></span><br><span class="line">Host github.com                 </span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile C:\\Users\\Jerry\\.ssh\\id_rsa</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User BladeCode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 company.domain.com</span></span><br><span class="line">Host company.domain.com</span><br><span class="line">    HostName company.domain.com</span><br><span class="line">    IdentityFile C:\\Users\\Jerry\\.ssh\\id_rsa_company</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User Jerry xu</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Host</code>：的名字可以取为自己喜欢的名字</li>
<li><code>HostName</code>：这个是真实的域名地址<br>
例如：https://<font color=red><span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20=">github.com<i class="fa fa-external-link-alt"></i></span></font>/BladeCode/BladeCode.github.io.git，红色标注字段</li>
<li><code>IdentityFile</code>：这里是id_rsa的地址</li>
<li><code>PreferredAuthentications</code>：配置登录时用什么权限认证<br>
可设为publickey，password publickey，keyboard-interactive等</li>
<li><code>User</code>：配置使用用户名</li>
</ul>
<h2 id="测试"><a class="header-anchor" href="#测试"></a>测试</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1538887180/blog/git-test.png" alt="git-test"></p>
<blockquote>
<p>git@<font color=red><span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20=">github.com<i class="fa fa-external-link-alt"></i></span></font>，github.com就是上一步中<code>config</code>文件中配置的<code>HostName</code>字段内容</p>
</blockquote>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git account</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令</title>
    <url>/2018/10/07/git-bash/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/incoder/image/upload/v1586250215/blog/git.png" alt=""></p>
<span id="more"></span>
<p>记录 Git 日常操作常用命令</p>
<h2 id="git-config"><a class="header-anchor" href="#git-config"></a>git config</h2>
<p>Git级别：system(系统所有用户) &lt; global(当前用户) &lt; local(当前仓库)</p>
<ul>
<li>
<p>查看配置信息</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看对应 Git 级别（--local；--global；--system）的配置信息</span><br><span class="line">git config --list --local</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>新增或修改</p>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global user.name xxxxx</span><br><span class="line">git config --global user.email xxx@xxxx.com</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>删除用户配置信息</p>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果当前只有一个用户，就不用加入xxxx</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> user.name xxxx</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="git-init"><a class="header-anchor" href="#git-init"></a>git init</h2>
<ol>
<li>把已有项目代码纳入 Git 管理 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入项目根路径</span></span><br><span class="line"><span class="built_in">cd</span> project_dir</span><br><span class="line"><span class="comment"># 进行项目 Git 初始化</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure>
</li>
<li>新建项目直接使用 Git 管理 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前路径下创建项目并使用 Git 初始化项目</span></span><br><span class="line">git init project_name</span><br><span class="line"><span class="comment"># 进入项目根路径</span></span><br><span class="line"><span class="built_in">cd</span> project_name</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="git-clone"><a class="header-anchor" href="#git-clone"></a>git clone</h2>
<ul>
<li>clone  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> url</span><br></pre></td></tr></table></figure>
</li>
<li>clone 指定分支  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b branch_name url</span><br></pre></td></tr></table></figure>
</li>
<li>clone 指定tag  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># clone </span></span><br><span class="line">git <span class="built_in">clone</span> url</span><br><span class="line"><span class="comment"># checkout tag</span></span><br><span class="line">git checkout tag_name</span><br></pre></td></tr></table></figure>
</li>
<li>clone 指定commit  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看git commit 历史的</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"><span class="comment"># 指定 commit SHA</span></span><br><span class="line">git <span class="built_in">clone</span> commit_sha_value</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="git-commit"><a class="header-anchor" href="#git-commit"></a>git commit</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;注释&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>-a</code> 指定标签名，<code>-m</code> 指定说明文字</p>
</blockquote>
<h2 id="git-branch"><a class="header-anchor" href="#git-branch"></a>git branch</h2>
<ul>
<li>创建分支  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建分支</span></span><br><span class="line">git branch branch_name</span><br><span class="line"><span class="comment"># 创建并切换到新分支</span></span><br><span class="line">git checkout -b branch_name</span><br></pre></td></tr></table></figure>
</li>
<li>切换分支  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout branch_name</span><br></pre></td></tr></table></figure>
</li>
<li>删除分支  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除本地分支</span></span><br><span class="line">git branch -d branch_name</span><br><span class="line"><span class="comment"># 删除远程指定分支</span></span><br><span class="line">git push origin --delete branch_name</span><br></pre></td></tr></table></figure>
</li>
<li>重命名分支  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -m old_branch_name new_branch_name</span><br></pre></td></tr></table></figure>
</li>
<li>查看分支  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看本地所有分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 查看远程所有分支</span></span><br><span class="line">git branch -r</span><br><span class="line"><span class="comment"># 查看本地和远程所有分支</span></span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="git-tag"><a class="header-anchor" href="#git-tag"></a>git tag</h2>
<ul>
<li>新增 tag  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag -a tag_name -m <span class="string">&quot;注释&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li>查看 tag  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看指定 tag 信息</span></span><br><span class="line">git show tagname</span><br><span class="line"><span class="comment"># 查看所有 tag</span></span><br><span class="line">git tag -l</span><br></pre></td></tr></table></figure>
</li>
<li>删除 tag  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">git tag -d tag_name</span><br><span class="line"><span class="comment"># 删除远程指定tag</span></span><br><span class="line">git push origin --delete tag tag_name</span><br></pre></td></tr></table></figure>
</li>
<li>推送 tag 到远程  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># push 单个 tag</span></span><br><span class="line">git push origin tag_name</span><br><span class="line"><span class="comment"># push 所有 tag</span></span><br><span class="line">git push [origin] --tags</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="git-mv"><a class="header-anchor" href="#git-mv"></a>git mv</h2>
<ul>
<li>重命名文件  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">mv</span> old_file_name new_file_name</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="git-log"><a class="header-anchor" href="#git-log"></a>git log</h2>
<ul>
<li>查看仓库 commit 历史日志  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下面参数可任意组合</span></span><br><span class="line">git <span class="built_in">log</span> --oneline(简洁查看) --all(所有分支) -n4(最近 4 次记录) --graph(图形化展示)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="git-help"><a class="header-anchor" href="#git-help"></a>git help</h2>
<p>更多命令<br>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git --<span class="built_in">help</span></span><br></pre></td></tr></table></figure></p>
<h2 id="git-other"><a class="header-anchor" href="#git-other"></a>git other</h2>
<ul>
<li>查看当前项目远程仓库地址  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
</li>
<li>修改仓库地址  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一：直接修改</span></span><br><span class="line">git remote set-url origin [url]</span><br><span class="line"><span class="comment"># 方式二：先删后加</span></span><br><span class="line">git remote <span class="built_in">rm</span> origin</span><br><span class="line">git remote add origin [url]</span><br><span class="line"><span class="comment"># 方式三：直接修改config文件</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2Nz">Git Docs<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git bash</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 子仓库管理</title>
    <url>/2018/05/17/git-sub/</url>
    <content><![CDATA[<p>在使用 NexT 作为 Hexo 博客的主题时，不能 <strong>友好</strong> 的支持其主题的更新，以及 <strong>多设备</strong> 之间的主题同步。</p>
<p>按照官方提供的导入主题操作指引</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>发现commit并push到GitHub的远程服务器上，发现 <code>themes/next</code> 路径下并不能打开和查看该路径下的文件，原因是NexT是当前项目的一个子仓库(项目)，在 Github 上对于之仓库项目的引用，推荐使用 <code>git subtree</code> 命令来进行对子仓库的管理，不推荐直接拷贝需要子仓库的代码到自己的项目中</p>
<span id="more"></span>
<p>原因是我是使用 Travis CI 来部署自己的项目，具体的<a href="https://incoder.org/2018/05/02/hexo-iterative">构建脚本和介绍</a>请看，下面分别使用 <code>git submodule</code>、<code>git subtree</code> 的方式进行 NexT 主题的管理</p>
<h2 id="git-submodule-与-git-subtree"><a class="header-anchor" href="#git-submodule-与-git-subtree"></a>git submodule 与 git subtree</h2>
<div class="note primary"><p><code>git submodule</code>、<code>git subtree</code>都可以实现一个仓库作为其他仓库的子仓库的管理</p>
</div>
<ul>
<li><code>git submodule</code>：是 Git 官方以前的推荐方案</li>
<li><code>git subtree</code>：Git <span class="exturl" data-url="aHR0cHM6Ly9sd24ubmV0L0FydGljbGVzLzIzNTEwOQ==">1.5.2<i class="fa fa-external-link-alt"></i></span> 开始，Git 新增并推荐使用这个功能来管理子项目</li>
<li><code>git subtree</code>与<code>git submodule</code>不同，它不增加任何像 <code>.gitmodule</code> 这样的新的元数据文件</li>
<li><code>git subtree</code>对于项目中的其他成员透明，意味着可以不知道 <code>git subtree</code> 的存在</li>
</ul>
<h2 id="git-submodule-常用操作"><a class="header-anchor" href="#git-submodule-常用操作"></a>git submodule 常用操作</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YyL0dpdC0lRTUlQjclQTUlRTUlODUlQjctJUU1JUFEJTkwJUU2JUE4JUExJUU1JTlEJTk3">Git Submodule<i class="fa fa-external-link-alt"></i></span>功能官方操作指引</p>
<h3 id="add-一个submodule"><a class="header-anchor" href="#add-一个submodule"></a>add 一个submodule</h3>
<ol>
<li>
<p>Fork Repository<br>
<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0">hexo-theme-next<i class="fa fa-external-link-alt"></i></span>项目右上角 <code>Fork</code> 按钮即可</p>
</li>
<li>
<p>Clone Repository</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:RootCluster/hexo-theme-test.git</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Add Submodule</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入项目</span></span><br><span class="line"><span class="built_in">cd</span> hexo-theme-test </span><br><span class="line"><span class="comment"># 注册 next 项目是一个submodule，并把数据拷贝到 `themes/next` 路径</span></span><br><span class="line">git submodule add git@github.com:RootCluster/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>status</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前 submodule 已被注册并指向了某个 commit</span></span><br><span class="line">git submodule status</span><br><span class="line">1f5643061ec5257269673bd6159403c24015c53d themes/next (v6.3.0)</span><br><span class="line"><span class="comment"># 查看在父仓库中有哪些变化被注册</span></span><br><span class="line">git status</span><br><span class="line">On branch submodule</span><br><span class="line">Changes to be committed:</span><br><span class="line">(use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">      new file:   .gitmodules</span><br><span class="line">      new file:   themes/next</span><br></pre></td></tr></table></figure>
<blockquote>
<p>有2个文件被修改过：<code>.gitmodules</code>,<code>themes/next</code>，当在父仓库时，Git 不会跟踪 submodule 中的文件，Git 只把它当成一个单一的文件</p>
</blockquote>
<ul>
<li><code>.gitmodules</code>:存有 submodule 的信息</li>
<li><code>themes/next</code>:submodule 它自己</li>
</ul>
</li>
<li>
<p>commint</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推送到远程 submodule 分支</span></span><br><span class="line">git commit -am <span class="string">&quot;add next submodule&quot;</span></span><br><span class="line">[submodule a5a612b] add next submodule</span><br><span class="line">2 files changed, 4 insertions(+)</span><br><span class="line">create mode 100644 .gitmodules</span><br><span class="line">create mode 160000 themes/next</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>push</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin submodule</span><br><span class="line">Counting objects: 4, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (4/4), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (4/4), 451 bytes | 451.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 4 (delta 1), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (1/1), completed with 1 <span class="built_in">local</span> object.</span><br><span class="line">To github.com:RootCluster/hexo-themes-test.git</span><br><span class="line">  71879a8..a5a612b  submodule -&gt; submodule</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>查看 Github 上的仓库，发现父仓库里有一个指向 submodule 的链接，表示你已经成功添加了一个 submodule</p>
<h3 id="clone-带-submodule-的项目"><a class="header-anchor" href="#clone-带-submodule-的项目"></a>clone 带 submodule 的项目</h3>
<p>新路径下，clone 项目，submodule 分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># clone 项目</span></span><br><span class="line">git <span class="built_in">clone</span> -b submodule git@github.com:RootCluster/hexo-themes-test.git</span><br><span class="line"><span class="comment"># 进入项目路径</span></span><br><span class="line"><span class="built_in">cd</span> hexo-themes-test/</span><br><span class="line"><span class="comment"># 项目注册 submodule</span></span><br><span class="line">git submodule init</span><br><span class="line"><span class="comment"># clone submodule 代码</span></span><br><span class="line">git submodule update</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="update-带-submodule-的项目"><a class="header-anchor" href="#update-带-submodule-的项目"></a>update 带 submodule 的项目</h3>
<p>只要在 submodule 路径下，所有的常规Git操作，如 <code>push</code>, <code>pull</code>, <code>reset</code>, <code>status</code> 等，都可以正常工作，如果要保证 submodule 和远程仓库保存同步，在 submodule 路径下运行 <code>git pull</code></p>
<ul>
<li>如果你得到一个错误信息, 说你不在任何分支之上, 只要运行 <code>git checkout master</code> 就可修复</li>
<li>如果你在 <code>pull</code> 后 <code>submodule</code> 有一些更新, 父仓库会告诉你有一些变动需要 <code>commit</code> 了, <code>submodule</code>自身指向一个指定的 <code>commit</code>, 并且如果这个 <code>commit</code> 改变了, 父仓库会得知这个改变. 如果你的 <code>submodule</code> 需要在一个指定 <code>commit</code> 上工作, 可用 <code>git reset</code> 来设置</li>
</ul>
<p>例如：我需要把NexT的版本改变到上一个 Tag 6.2.0 (目前是6.3.0)</p>
<blockquote>
<p>git reset --hard (commit hash)</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入项目路径</span></span><br><span class="line"><span class="built_in">cd</span> hexo-themes-test/</span><br><span class="line"><span class="comment"># 重新指向 submodule 关联的 commit 记录</span></span><br><span class="line">git reset --hard 206d463</span><br><span class="line"><span class="comment"># 回到父目录</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># commit 本次的修改</span></span><br><span class="line">git commit -am <span class="string">&quot;set next version to 6.2.0&quot;</span></span><br></pre></td></tr></table></figure>
<div class="note info"><p>推送到远程仓库后，<code>submodule</code> 会和指定的<code>commit</code> 关联起来。如果你和别人一起工作在同一个项目，别人也可以在<code>submodule</code>下<code>pull</code>并且<code>commit</code>，因此改变了<code>submodule</code>的<code>commit</code>指向，这个问题，可以通过<code>git reset</code> 来解决</p>
</div>
<h3 id="remove-项目中的-submodule"><a class="header-anchor" href="#remove-项目中的-submodule"></a>remove 项目中的 submodule</h3>
<ul>
<li>项目的根目录下(不是 submodule 的目录)，编辑 .gitmodules 文件，删除submodule配置<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[submodule <span class="string">&quot;themes/next&quot;</span>]</span><br><span class="line">    path = themes/next</span><br><span class="line">    url = https://github.com/RootCluster/hexo-theme-next.git</span><br></pre></td></tr></table></figure>
</li>
<li>项目根目录下，编辑 <code>.git</code> 文件夹下 <code>config</code> 文件，删除 submodule 配置<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[submodule <span class="string">&quot;themes/next&quot;</span>]</span><br><span class="line">    url = https://github.com/RootCluster/hexo-theme-next.git</span><br></pre></td></tr></table></figure>
</li>
<li>清除 submodule 缓存<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached themes/next</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="git-subtree-常用操作-重点"><a class="header-anchor" href="#git-subtree-常用操作-重点"></a>git subtree 常用操作(重点)</h2>
<h3 id="add一个subtree"><a class="header-anchor" href="#add一个subtree"></a>add一个subtree</h3>
<ul>
<li>
<p>在父仓库中新增子仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加子仓库</span></span><br><span class="line">git subtree add --prefix=themes/next https://github.com/RootCluster/hexo-theme-next.git master --squash</span><br><span class="line">git fetch https://github.com/RootCluster/hexo-theme-next.git master</span><br><span class="line">warning: no common commits</span><br><span class="line">remote: Counting objects: 3407, <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3407 (delta 0), reused 0 (delta 0), pack-reused 3406</span><br><span class="line">Receiving objects: 100% (3407/3407), 1.21 MiB | 36.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (2192/2192), <span class="keyword">done</span>.</span><br><span class="line">From https://github.com/RootCluster/hexo-theme-next</span><br><span class="line">* branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Added <span class="built_in">dir</span> <span class="string">&#x27;themes/next&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>--squash</code>参数表示不拉取历史信息，而只生成一条 commit 信息</p>
</blockquote>
</li>
<li>
<p>查看项目状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看项目状态</span></span><br><span class="line">git status</span><br><span class="line">On branch subtree</span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/subtree&#x27;</span> by 2 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>推送更改到远程仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin subtree</span><br><span class="line">Counting objects: 381, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (334/334), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (381/381), 650.26 KiB | 34.22 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 381 (delta 23), reused 225 (delta 19)</span><br><span class="line">remote: Resolving deltas: 100% (23/23), completed with 1 <span class="built_in">local</span> object.</span><br><span class="line">To https://github.com/RootCluster/hexo-themes-test.git</span><br><span class="line">  8ed2e2e..405af42  subtree -&gt; subtree</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="pull-子仓库更新"><a class="header-anchor" href="#pull-子仓库更新"></a>pull 子仓库更新</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新子仓库</span></span><br><span class="line">git subtree pull --prefix=themes/next https://github.com/RootCluster/hexo-theme-next.git master --squash</span><br><span class="line">From https://github.com/RootCluster/hexo-theme-next</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Subtree is already at commit 1f5643061ec5257269673bd6159403c24015c53d.</span><br></pre></td></tr></table></figure>
<h3 id="push-子仓库修改"><a class="header-anchor" href="#push-子仓库修改"></a>push 子仓库修改</h3>
<p>在引用子仓库的项目中修改了子仓库的相关代码，推送修改到源仓库</p>
<ul>
<li>commit 修改记录</li>
<li>push 到源仓库<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推送子仓库修改到源仓库master分支</span></span><br><span class="line">git subtree push --prefix=themes/next https://github.com/RootCluster/hexo-theme-next.git master</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="subtree-常用命令"><a class="header-anchor" href="#subtree-常用命令"></a>subtree 常用命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git subtree add   --prefix=&lt;prefix&gt; &lt;commit&gt;</span><br><span class="line">git subtree add   --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree pull  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree push  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree merge --prefix=&lt;prefix&gt; &lt;commit&gt;</span><br><span class="line">git subtree <span class="built_in">split</span> --prefix=&lt;prefix&gt; [OPTIONS] [&lt;commit&gt;]</span><br></pre></td></tr></table></figure>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cDovL2xpbmxleHVzLmNvbS9naXQtc3VibW9kdWxlLXVzYWdl">如何使用 Git Submodule<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kNDJkMzMwYmZlYWQ=">git subtree教程<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git subtree</tag>
        <tag>git submodule</tag>
      </tags>
  </entry>
  <entry>
    <title>.gitignore 基础知识</title>
    <url>/2018/04/13/gitignore/</url>
    <content><![CDATA[<p>.gitignore顾名思义是Git中用来管理所需要忽略或者说不用纳入版本控制文件</p>
<h2 id="基本配置语法"><a class="header-anchor" href="#基本配置语法"></a>基本配置语法</h2>
<ol>
<li>“#“：表示注释</li>
<li>“/“：表示目录</li>
<li>“*“：表示通配符，用来通配多个字符</li>
<li>“?“：表示通配单个字符</li>
<li>“[]“：表示包含单个字符的匹配列表</li>
<li>“!“：表示不忽略匹配到的文件或者目录</li>
</ol>
<span id="more"></span>
<blockquote>
<p>注意：Git对.gitignore配置文件是从上往下进行规则匹配，这也意味如果：前（limit）&gt;后（limit），则后面的规则不会被执行</p>
</blockquote>
<h2 id="全局与局部"><a class="header-anchor" href="#全局与局部"></a>全局与局部</h2>
<p>.gitignore分为： <strong>全局</strong> ignore，<strong>局部</strong> ignore</p>
<h3 id="全局ignore设置"><a class="header-anchor" href="#全局ignore设置"></a>全局ignore设置</h3>
<ul>
<li>在用户账户文件夹（C:\Users&lt;‘YourName’&gt;）路径下新建一个命名为<code>.gitignore_global</code>的文件</li>
<li>使用Git Bash(需要切换路径到C:\Users&lt;‘YourName’&gt;)或者Git CMD命令行工具输入：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.excludesfile ~/.gitignore_global</span><br></pre></td></tr></table></figure>
</li>
<li>此时全局ignore已经设置完成，你只需要修改<code>.gitignore_global</code>文件内需要忽略的文件类型就可以全局控制忽略不需要纳入版本控制的文件或文件夹</li>
<li>不难发现，其实是往 <code>.gitconfig</code>中加入如下内容来指名Git忽略不纳入版本控制的文件，当然如果你不想用命令行完成全局设置，你也可以直接在<code>.gitconfig</code>文件中加入<code>[core] excludesfile= ~/.gitignore_global</code>内容即可</li>
</ul>
<h3 id="局部ignore设置"><a class="header-anchor" href="#局部ignore设置"></a>局部ignore设置</h3>
<ul>
<li>只需要在Git控制版本控制项目的根目录中加入.gitignore文件，在.gitignore文件中写明忽略不纳入版本控制的文件即可</li>
</ul>
<h2 id="参考示例"><a class="header-anchor" href="#参考示例"></a>参考示例</h2>
<blockquote>
<p>你可以查看参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9naXRpZ25vcmU=">Github<i class="fa fa-external-link-alt"></i></span>官方所写好的示例</p>
</blockquote>
<h2 id="插件-ignore"><a class="header-anchor" href="#插件-ignore"></a>插件.ignore</h2>
<p>支持Android Studio，JetBrains系列<br>
安装方法</p>
<ul>
<li><code>Settings</code> &gt; <code>Plugs</code> &gt; <code>Browse repositories</code> &gt; <code>.ignore</code> &gt; <code>Install plugin</code></li>
<li>里面有已经写好的模板，只需适当修改</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>ignore</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab 应用搭建</title>
    <url>/2018/04/24/gitlab1/</url>
    <content><![CDATA[<p>我司团队之前一直使用SVN来进行代码托管，主要问题</p>
<ol>
<li>每次来个新人都需要找对应的<span class="exturl" data-url="aHR0cHM6Ly90b3J0b2lzZXN2bi5uZXQvaW5kZXguemguaHRtbA==">SVN<i class="fa fa-external-link-alt"></i></span>管理员进行授权分配指定的仓库操作权限，有时候需要多个项目切换，还得再次提出进行仓库的指定</li>
<li>SVN都是以中文命名，这其实没啥，但是在<span class="exturl" data-url="aHR0cHM6Ly9lY2xpcHNlLm9yZw==">eclipse<i class="fa fa-external-link-alt"></i></span> 以及<span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9pZGVhLz9mcm9tTWVudQ==">IDEA<i class="fa fa-external-link-alt"></i></span> ，<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL3hjb2Rl">Xcode<i class="fa fa-external-link-alt"></i></span>等开发工具，链接地址都会把中文字进行编码，造成路径非常的长，强迫症的我这怎么忍得了</li>
<li>产品相关的，设计相关的啥也都放在SVN里面，搞得SVN里面鱼龙混杂</li>
</ol>
<span id="more"></span>
<p>因此在我提出及建议下，部门经理同意了对代码的管理进行隔离方便有效的对代码的授权监管，并同时制定代码的相关规范和服务的自动化部署等，提高团队的开发效率和代码质量。</p>
<p>本节主要介绍Gitlab的环境搭建和基础的功能配置</p>
<p>目的：</p>
<ol>
<li>搭建Gitlab服务</li>
<li>和公司AD域账号关联，用域账号直接登录Gitlab</li>
<li>挂载Gitlab 仓库到指定存储位置</li>
</ol>
<h2 id="Gitlab安装"><a class="header-anchor" href="#Gitlab安装"></a>Gitlab安装</h2>
<h3 id="环境"><a class="header-anchor" href="#环境"></a>环境</h3>
<ul>
<li>OS：CentOS 7</li>
<li>Gitlab：<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2dpdGxhYi1jZS95dW0vZWw3L2dpdGxhYi1jZS0xMC42LjQtY2UuMC5lbDcueDg2XzY0LnJwbQ==">Gitlab CE 10.6.4<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<blockquote>
<p>Gitlab 版本</p>
</blockquote>
<ul>
<li>Gitlab Community Edition (CE)：社区版，免费，用户自行托管，通过社区提供技术支持</li>
<li>Gitlab Enterprise Edition (EE)：企业版，付费，用户自行托管，提供附加的功能以及技术支持</li>
<li><span class="exturl" data-url="aHR0cDovL0dpdGxhYi5jb20=">Gitlab.com<i class="fa fa-external-link-alt"></i></span>：免费的SaaS服务，可以创建共有以及私有的版本库，可以购买额外的技术支持</li>
<li><span class="exturl" data-url="aHR0cDovL0dpdEhvc3QuaW8=">GitHost.io<i class="fa fa-external-link-alt"></i></span>：由Gitlab提供的用户私有的独享服务</li>
</ul>
<h3 id="Gitlab部署"><a class="header-anchor" href="#Gitlab部署"></a>Gitlab部署</h3>
<ol>
<li>
<p>系统防火墙中打开HTTP和SSH访问</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sshd</span><br><span class="line">sudo systemctl start sshd</span><br><span class="line"></span><br><span class="line">sudo firewall-cmd --permanent --add-service=http</span><br><span class="line">sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装Postfix发送通知邮件。如果您想使用其他解决方案发送电子邮件，请跳过此步骤并在安装GitLab后配置外部SMTP服务器</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install postfix</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> postfix</span><br><span class="line">sudo systemctl start postfix</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>添加GitLab软件包存储库</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -LJO https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装软件包</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -i gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<p>完成安装如下日志显示：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">     *.                  *.</span><br><span class="line">    ***                 ***</span><br><span class="line">   *****               *****</span><br><span class="line">  .******             *******</span><br><span class="line">  ********            ********</span><br><span class="line"> ,,,,,,,,,***********,,,,,,,,,</span><br><span class="line">,,,,,,,,,,,*********,,,,,,,,,,,</span><br><span class="line">.,,,,,,,,,,,*******,,,,,,,,,,,,</span><br><span class="line">    ,,,,,,,,,*****,,,,,,,,,.</span><br><span class="line">       ,,,,,,,****,,,,,,</span><br><span class="line">          .,,,***,,,,</span><br><span class="line">              ,*,.</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   _______ __  __          __</span><br><span class="line">  / ____(_) /_/ /   ____ _/ /_</span><br><span class="line"> / / __/ / __/ /   / __ \`/ __ \</span><br><span class="line">/ /_/ / / /_/ /___/ /_/ / /_/ /</span><br><span class="line">\____/_/\__/_____/\__,_/_.___/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>编译配置文件</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/gitlab/bin</span><br><span class="line">./gitlab-ctr reconfigure</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动服务</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gitlab-ctl start</span><br></pre></td></tr></table></figure>
<blockquote></blockquote>
<ul>
<li>成功启动服务，默认路径访问：<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MA==">http://localhost:80<i class="fa fa-external-link-alt"></i></span></li>
<li>默认安装位置 <code>/opt/gitlab/</code></li>
<li>配置文件默认路径 <code>/etc/gitlab/gitlab.rb</code></li>
<li>默认账号：root，密码：5iveL!fe</li>
</ul>
</li>
</ol>
<h2 id="常用配置项修改"><a class="header-anchor" href="#常用配置项修改"></a>常用配置项修改</h2>
<p>以下配置项的修改，完成后<strong>均需要重新编译</strong>文件（配置文件默认路径 <code>/etc/gitlab/gitlab.rb</code>），默认，<strong>并重启Gitlab</strong>服务</p>
<h3 id="访问地址"><a class="header-anchor" href="#访问地址"></a>访问地址</h3>
<p>修改<code>external_url</code>为Gitlab对应机器IP所配置的域名<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517587/blog/gitpages-gitlab-url.png" alt="gitlab-url"></p>
<h3 id="LDAP启用"><a class="header-anchor" href="#LDAP启用"></a>LDAP启用</h3>
<p>修改<code>host</code>,<code>port</code>,<code>bind_dn</code>,<code>password</code>,<code>base</code>参数即可<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517612/blog/gitpages-gitlab-ldap.png" alt="gitlab-ladp"></p>
<p>各参数解释：</p>
<ul>
<li><code>host</code> 和 <code>port</code> 是 LDAP 服务的主机地址及端口</li>
<li><code>bind_d</code>n 和 <code>password</code> 是一个管理 LDAP 的 dn 及密码</li>
<li><code>base</code> 表示 LDAP 将以该 dn 为 节点，向下查找用户</li>
<li><code>user_filter</code> 表示以某种过滤条件筛选用户</li>
<li><code>attributes</code> 表示 GitLab 中的字段与 LDAP 中哪些字段可以相互对应，比如可以用 LDAP 中的 uid 来作为 GitLab 用户名</li>
</ul>
<p>编译重启后，查看登录是否已经显示LDAP登录入口</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1525517639/blog/gitpages-gitlab-ldap-login.png" alt="gitlab-ldap-login"></p>
<p>为了安全我们需要关闭 GitLab 自己的注册功能，这样新用户只能通过 LDAP 认证的方式进行登陆。</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1525517671/blog/gitpages-gitlab-sign-up.png" alt="gitlab-sign-up"></p>
<h3 id="存储仓库修改"><a class="header-anchor" href="#存储仓库修改"></a>存储仓库修改</h3>
<p>默认仓库存储位置：<code>/var/opt/gitlab/git-data/repositories/</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517697/blog/gitpages-gitlab-dirs.png" alt="gitlab-dirs"></p>
<h3 id="Gitlab日志"><a class="header-anchor" href="#Gitlab日志"></a>Gitlab日志</h3>
<p>默认日志位置： <code>/var/log/gitlab</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/gitlab/bin</span><br><span class="line">gitlab-ctl <span class="built_in">tail</span> -f nginx/gitlab_access.log</span><br></pre></td></tr></table></figure>
<p>或者在Gitlab服务的系统设置中查看<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517725/blog/gitpages-gitlab-logs.png" alt="gitlab-logs"></p>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9hYm91dC5naXRsYWIuY29tL2luc3RhbGxhdGlvbg==">官方安装教程<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGxhYi5jb20uY24vb21uaWJ1cy9zZXR0aW5ncy9SRUFETUUuaHRtbA==">官方配置文件<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle（一）基础</title>
    <url>/2020/12/10/gradle1/</url>
    <content><![CDATA[<p>GitHub 上 Gralde 是这样描述，“Adaptable, fast automation for all”（让一切都能<code>快速</code>的<code>自动化</code>）<br>
Gradle是一个构建工具，专注于构建自动化和对多语言开发的支持。对于在任何平台上的构建，测试，发布和部署，Gralde 提供了一种灵活的模型，可以支持从编译和打包代码到发布网站的整个生命周期。Gralde 旨在支持跨多种语言和平台的构建自动化，包括 Java，Scala，Android，Kotlin，C/C++ 和 Groovy，并于开发工具和包括 Eclipse，IntelliJ 和 Jenkins 的持续集成服务器紧密集成</p>
<span id="more"></span>
<ul>
<li>Gradle official：<span class="exturl" data-url="aHR0cHM6Ly9ncmFkbGUub3Jn">https://gradle.org<i class="fa fa-external-link-alt"></i></span></li>
<li>Gradle docs：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdyYWRsZS5vcmc=">https://docs.gradle.org<i class="fa fa-external-link-alt"></i></span></li>
<li>Gradle plugins：<span class="exturl" data-url="aHR0cHM6Ly9wbHVnaW5zLmdyYWRsZS5vcmc=">https://plugins.gradle.org<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="Gradle-特点"><a class="header-anchor" href="#Gradle-特点"></a>Gradle 特点</h2>
<ol>
<li>Gradle 基于 JVM 的构建工具</li>
<li>兼容支持 Maven，Ant 等</li>
<li>支持基于 Groovy 的构建脚本</li>
<li>编译构建执行效率更高</li>
<li>支持多种语言等</li>
<li>易于迁移</li>
</ol>
<h2 id="Gradle-安装配置"><a class="header-anchor" href="#Gradle-安装配置"></a>Gradle 安装配置</h2>
<ul>
<li>Gradle 官方：<span class="exturl" data-url="aHR0cHM6Ly9zZXJ2aWNlcy5ncmFkbGUub3JnL2Rpc3RyaWJ1dGlvbnMv">https://services.gradle.org/distributions/<i class="fa fa-external-link-alt"></i></span></li>
<li>Tencent 镜像：<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLmNsb3VkLnRlbmNlbnQuY29tL2dyYWRsZS8=">https://mirrors.cloud.tencent.com/gradle/<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<blockquote>
<p>Tencent Gradle 镜像同步有一定的延迟，需要注意</p>
</blockquote>
<h3 id="下载"><a class="header-anchor" href="#下载"></a>下载</h3>
<p>下载需要的版本即可，推荐最新版，这里以最新稳定版 6.7.1 为例，每个正式版本包含如下文件，我们选择 <code>xxx-bin.zip</code>（二进制版，只包含了二进制文件（可执行文件），没有文档和源代码） 或 <code>xxx-all.zip</code>（完整版，包含了各种二进制文件，源代码文件，和离线的文档）的文件即可，进行手动安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gradle-6.7.1</span><br><span class="line">    ├── gradle-6.7.1-wrapper.jar.sha256     <span class="comment"># wrapper.jar hash 校验文件 </span></span><br><span class="line">    ├── gradle-6.7.1-docs.zip               <span class="comment"># gradle 文档压缩文件</span></span><br><span class="line">    ├── gradle-6.7.1-docs.zip.sha256        <span class="comment"># gradle 文档 hash 校验文件</span></span><br><span class="line">    ├── gradle-6.7.1-src.zip                <span class="comment"># gradle 源码版，只包含了 Gradle 源代码，不能用来编译你的工程</span></span><br><span class="line">    ├── gradle-6.7.1-src.zip.sha256         <span class="comment"># gradle 源码版 hash 校验文件</span></span><br><span class="line">    ├── gradle-6.7.1-bin.zip                <span class="comment"># gradle 核心压缩文件</span></span><br><span class="line">    ├── gradle-6.7.1-bin.zip.sha256         <span class="comment"># gradle 核心 hash 校验文件</span></span><br><span class="line">    ├── gradle-6.7.1-all.zip                <span class="comment"># gradle 全部资源压缩文件</span></span><br><span class="line">    └── gradle-6.7.1-all.zip.sha256         <span class="comment"># gradle 全部资源 hash 校验文件</span></span><br></pre></td></tr></table></figure>
<p>当然如果你使用的 macOS 系统，且也已经安装了 <code>homebrew</code> 包管理工具，那么同样你也可以使用 brew 命令来安装 Gradle，那么你将不需要再去手动配置 Gradle 的环境，它的安装默认路径在 <code>/usr/local/bin/gradle</code>，安装完成后你就可以使用 gradle 的相关命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gradle 安装</span></span><br><span class="line">brew install gradle</span><br><span class="line"><span class="comment"># gradle 升级</span></span><br><span class="line">brew upgrade gradle</span><br><span class="line"><span class="comment"># 检查是否安装成功</span></span><br><span class="line">gradle -v</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a class="header-anchor" href="#配置"></a>配置</h3>
<p>手动下载解压的文件进行安装，则需要配置 Gradle 的环境，这样方便我们在任何地方都可以调用 Gradle 的命令，对于 macOS 上手动安装配置 Gradle 环境的操作，可以参考 <a href="https://incoder.org/2018/11/10/mac-init/#Gradle%E9%85%8D%E7%BD%AE">MacBook Pro 初始化</a> 这篇文章 Gradle 配置</p>
<p>对于 Windows 系统，按照如下步骤进行添加环境变量，我这里 Windows 上为了和项目中 Gradle 版本有所区分，配置的是 6.7 版本<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1608634993/blog/gradle-home.png" alt=""><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1608634993/blog/gradle-path.png" alt=""><br>
配置完成后，老规矩我们需要验证下我们的配置是否生效，在命令行中输入 <code>gradle  -v</code> 命令，查看有 Gradle 相关的版本信息提示，我们的配置就已成功<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1608634993/blog/gradlew-or-gradle.png" alt=""></p>
<h4 id="GRADLE-HOME"><a class="header-anchor" href="#GRADLE-HOME"></a>GRADLE_HOME</h4>
<p>GRADLE_HOME 这个环境变量，它主要是我们手动配置指定 GRADLE 使用的命令环境</p>
<h4 id="GRADLE-USER-HOME"><a class="header-anchor" href="#GRADLE-USER-HOME"></a>GRADLE_USER_HOME</h4>
<p>GRADLE_USER_HOME 指配置 Gradle 的安装下载的路径。默认 <code>/Users/&lt;PC NAME&gt;/.gradle</code> 路径，如果你在系统环境中设置了 GRADLE_USER_HOME 的环境变量，那么下载的路径就变成了你自定义设置的路径</p>
<h2 id="Gradle-基础"><a class="header-anchor" href="#Gradle-基础"></a>Gradle 基础</h2>
<p>刚刚在上面我们配置时，使用了 <code>gradlew</code> 命令，那这个又是啥呢，这里简单解释下，gradlew 是 gradle wrapper 的简写，对于 Gradle 构建的项目，用于解决 Gradle 安装，部署以及统一项目的 Gradle 的构建版本等一系列问题。</p>
<p>Gradle 有两个基本的概念：project 和 task，Gradle 里面的所有东西基于这两个概念</p>
<ul>
<li>project：通常指一个项目</li>
<li>task：指构建过程中的任务</li>
</ul>
<p>一次构建可以有 1 到 n 个 project，而每个 project 有 1 到 n 个 task</p>
<h2 id="Gradle-项目"><a class="header-anchor" href="#Gradle-项目"></a>Gradle 项目</h2>
<p>Android 项目工程一开始就默认使用 Gradle 来构建，在 Android 领域里使用花样也是比较多，更好体现了 Gradle 的灵活性，对于后端 Spring 系列项目，现在也是越来越多的开始使用 Gradle 来构建了，在 <span class="exturl" data-url="aHR0cHM6Ly9zcHJpbmcuaW8vYmxvZy8yMDIwLzA2LzA4L21pZ3JhdGluZy1zcHJpbmctYm9vdC1zLWJ1aWxkLXRvLWdyYWRsZQ==">Spring Boot 2.3.0.M1<i class="fa fa-external-link-alt"></i></span> 版本官方已开始在生产环境开始使用 Gradle 代替 Maven 进行构建，测试，发布项目。这从侧面也印证了 Gradle 对于复杂庞大的系统更加友好和<strong>高效</strong>。</p>
<p>对于使用 Gradle 构建的 Android 项目也好，Java 项目也好，还是 SpringBoot 项目也罢，它们都有共同的特点。在结构上有下面的相同点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">project</span><br><span class="line">    ├── ……</span><br><span class="line">    ├── .gradle/                            <span class="comment"># 项目使用 gradle 编译生成的临时文件存放位置</span></span><br><span class="line">    ├── gradle/wrapper</span><br><span class="line">    │    │── gradle-wrapper.jar             <span class="comment"># gradlew 核心执行文件</span></span><br><span class="line">    │    └── gradle-wrapper.properties      <span class="comment"># gradle 运行环境配置文件</span></span><br><span class="line">    ├── build.gradle                        <span class="comment"># 项目依赖配置，脚本配置文件</span></span><br><span class="line">    ├── gradlew                             <span class="comment"># Linux or macOS 下可执行脚本</span></span><br><span class="line">    ├── gradlew.bat                         <span class="comment"># Windows 下可执行脚本</span></span><br><span class="line">    ├── settings.gradle                     <span class="comment"># 配置构建应用时应将哪些模块包含在内</span></span><br><span class="line">    └── ……</span><br></pre></td></tr></table></figure>
<h3 id="gradle-wrapper-properties"><a class="header-anchor" href="#gradle-wrapper-properties"></a>gradle-wrapper.properties</h3>
<ul>
<li>gradle-wrapper.jar 文件是项目中执行 gradlew 相关命令的具体实现，感兴趣的可以查看其中的具体源码实现</li>
<li>gradle-wrapper.properties 是 Gradle 项目版本管理的核心
<ul>
<li>distributionBase=GRADLE_USER_HOME：指定了 wrapper 保存下载的 Gradle 的<code>主路径</code></li>
<li>distributionPath=wrapper/dists：指定了 wrapper 保存下载的 Gradle 的<code>子路径</code></li>
<li>zipStoreBase=GRADLE_USER_HOME：指定了 wrapper 保存下载 gradle-6.7.1-bin.zip 文件的<code>主路径</code></li>
<li>zipStorePath=wrapper/dists：指定了 gradle-6.7.1-bin.zip 文件的<code>子路径</code></li>
<li>distributionUrl=https://services.gradle.org/distributions/gradle-6.7.1-bin.zip：gradle 文件下载的源地址</li>
</ul>
</li>
</ul>
<div class="note info"><p>distributionBase 和 zipStoreBase 有两种取值</p>
<ul>
<li>GRADLE_USER_HOME：默认使用方式，表示用户目录，默认路径 <code>/Users/&lt;PC NAME&gt;/.gradle</code></li>
<li>PROJECT：表示工程的当前目录，不常用</li>
</ul>
</div>
<p>对应 Gradle 的下载及解压目录这里还需要注意下</p>
<div class="note danger"><p>Gradle 的存放地址，比如：~/.gradle/wrapper/dists/gradle-6.7.1-bin/<code>bwlcbys1h7rz3272sye1xwiv6</code> 这里一个看起来无规则的文件夹，我们的 gradle 下载及解压必须放在这个文件夹内，而这个看似无规则的文件夹，实质是根据 distributionUrl 路径字符串计算 md5 值得来的</p>
</div>
<h3 id="build-gradle-及-settings-gradle"><a class="header-anchor" href="#build-gradle-及-settings-gradle"></a>build.gradle 及 settings.gradle</h3>
<p>对于<code>build.gradle</code> 及 <code>settings.gradle</code> 文件在 Android 应用和 SpringBoot 应用是不一样，因此关于他两介绍请移步 <a href="https://incoder.org/2020/12/15/gradle2">Gradle（二）Android</a>，<a href="">Gradle（三）SpringBoot</a> 文章进行查看</p>
<h2 id="Gradle-依赖"><a class="header-anchor" href="#Gradle-依赖"></a>Gradle 依赖</h2>
<p>用于声明依赖关系的配置</p>
<table>
<thead>
<tr>
<th style="text-align:center">配置名称</th>
<th style="text-align:center">角色</th>
<th style="text-align:center">是否可消费</th>
<th style="text-align:center">是否可分解</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>api</code></td>
<td style="text-align:center">声明API依赖项</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">在这里，您可以声明依赖关系，这些依赖关系会在编译时和运行时以可传递方式导出到使用者</td>
</tr>
<tr>
<td style="text-align:center"><code>implementation</code></td>
<td style="text-align:center">声明实现依赖性</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">在这里，您可以声明纯属内部的依赖关系，而不是要向使用方公开（在运行时仍向使用方公开）</td>
</tr>
<tr>
<td style="text-align:center"><code>compileOnly</code></td>
<td style="text-align:center">声明仅编译依赖项</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">在这里可以声明在编译时需要的依赖项，而在运行时则不需要。这通常包括在运行时找到时会被阴影化的依赖项</td>
</tr>
<tr>
<td style="text-align:center">compileOnlyApi</td>
<td style="text-align:center">声明仅编译API依赖项</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">在这里，您可以声明模块和使用者在编译时需要的依赖项，而在运行时则不需要。这通常包括在运行时找到时会被阴影化的依赖项</td>
</tr>
<tr>
<td style="text-align:center"><code>runtimeOnly</code></td>
<td style="text-align:center">声明运行时依赖项</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">在这里可以声明仅在运行时才需要的依赖关系，而在编译时则不需要</td>
</tr>
<tr>
<td style="text-align:center">testImplementation</td>
<td style="text-align:center">测试依赖</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">在这里声明用于编译测试的依赖项</td>
</tr>
<tr>
<td style="text-align:center">testCompileOnly</td>
<td style="text-align:center">声明测试仅编译依赖项</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">在这里声明仅在测试编译时需要的依赖项，而不应泄漏到运行时。这通常包括在运行时找到时会被阴影化的依赖项</td>
</tr>
<tr>
<td style="text-align:center">testRuntimeOnly</td>
<td style="text-align:center">声明测试运行时依赖项</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">在这里可以声明仅在测试运行时才需要的依赖项，而在测试编译时则不需要</td>
</tr>
</tbody>
</table>
<p>核心需要掌握的是 <code>api</code>，<code>implementation</code>，<code>compileOnly</code>，<code>runtimeOnly</code> 这4种依赖方式</p>
<blockquote>
<p>对于你可能看到依赖方式，compile（api），provided（compileOnly），apk（runtimeOnly） 这些方式是比较旧的依赖方式，在 gradle plugin 3.0 开始已废弃，请使用新的依赖方式</p>
</blockquote>
<h3 id="本地依赖"><a class="header-anchor" href="#本地依赖"></a>本地依赖</h3>
<h4 id="本地依赖-module-lib"><a class="header-anchor" href="#本地依赖-module-lib"></a>本地依赖 module lib</h4>
<p>通过这种方式依赖的弊端是每次都需要构建 module，但 module 比较多时构建非常耗时，建议控制 module 的依赖数量，避免构建耗时</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module 需要在项目根目录下的 settings.gradle 中通过 include 引入</span></span><br><span class="line">implementation project(<span class="string">&#x27;:libname&#x27;</span>)  </span><br></pre></td></tr></table></figure>
<h4 id="本地二进制-lib-依赖"><a class="header-anchor" href="#本地二进制-lib-依赖"></a>本地二进制 lib 依赖</h4>
<p>本地的 jar 或者 aar 需要放在 module 的 libs 文件夹下，通过这种方式依赖</p>
<h5 id="依赖-jar"><a class="header-anchor" href="#依赖-jar"></a>依赖 jar</h5>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：可以一次性依赖 libs 下的所有 jar</span></span><br><span class="line">implementation fileTree(<span class="attr">dir:</span> <span class="string">&#x27;libs&#x27;</span>, <span class="attr">include:</span> [<span class="string">&#x27;*.jar&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：可以指定依赖一个或几个 jar</span></span><br><span class="line">implementation files(<span class="string">&#x27;libs/xxxx1.jar&#x27;</span>, <span class="string">&#x27;libs/xxxx2.jar&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h5 id="依赖-aar"><a class="header-anchor" href="#依赖-aar"></a>依赖 aar</h5>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 module 的 build.gradle 中添加目录指定</span></span><br><span class="line">repositories &#123;</span><br><span class="line">    flatDir &#123;</span><br><span class="line">        dirs <span class="string">&#x27;libs&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 dependencies 中加入对 aar 的引入</span></span><br><span class="line"><span class="comment">// 方式一：可以一次性依赖 libs 下所有的 aar</span></span><br><span class="line">implementation fileTree(<span class="attr">dir:</span> <span class="string">&#x27;libs&#x27;</span>, <span class="attr">include:</span> [<span class="string">&#x27;*.aar&#x27;</span>])</span><br><span class="line"><span class="comment">// 方式二：可以指定依赖某一个aar</span></span><br><span class="line">implementation files(<span class="attr">name:</span> <span class="string">&#x27;aar-lib-name&#x27;</span>, <span class="attr">ext:</span> <span class="string">&#x27;aar&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="远程二进制-lib-依赖"><a class="header-anchor" href="#远程二进制-lib-依赖"></a>远程二进制 lib 依赖</h3>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 依赖明确的版本，标明 group、name 和 version</span></span><br><span class="line">implementation <span class="attr">group:</span> <span class="string">&#x27;org.mybatis.spring.boot&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;mybatis-spring-boot-starter&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;2.1.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用的简写方式引用</span></span><br><span class="line">implementation <span class="string">&#x27;org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.1&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="Gradle-命令"><a class="header-anchor" href="#Gradle-命令"></a>Gradle 命令</h2>
<p>在项目中推荐使用 gradlew 命令来进行执行，这样本质是使用项目所依赖的 Gradle 版本进行执行。当然如果你本地配置了 Gradle 的环境变量，你可以将 <code>gradlew</code> 命令更改成 <code>gradle</code> 来执行</p>
<ul>
<li>gradlew clean: 清除 build 文件夹</li>
<li>gradlew check: 执行 lint 检查</li>
<li>gradlew assemble: 编译并打包你的代码，但并不运行单元测试</li>
<li>gradlew build: 编译和测试你的代码，并生成一个包含所有类与资源的文件</li>
<li>gradlew dependencies: 查看所有依赖库
<ul>
<li>gradlew dependencies -configuration runtime: 查看运行时依赖库</li>
</ul>
</li>
</ul>
<div class="note warning"><p>注意：</p>
<ul>
<li>Windows：在项目根目录，使用的是 <code>gradlew</code></li>
<li>Linux or macOS：在项目的根目录，使用的是 <code>./gradlew</code></li>
</ul>
</div>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<ol>
<li>对于 Gradle 我们不需要配置 GRADLE_USER_HOME 的环境，原因是项目中已对使用 Gradle 的版本做出了统一，我们仅需要根据自身的网络需要（如果从默认地址下载很慢，则需要配置好项目依赖镜像源）做出合适的配置。而如果你需要在任何地方使用 <code>gradle</code> 相关的命令，则配置 GRADLE_HOME 即可</li>
<li>依赖方式，我们选择 implementation 方式，这样可屏蔽掉不同应用之间因为引用了同一 lib 而不同版本造成的麻烦问题等</li>
</ol>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM1NTM1MjkvYXJ0aWNsZS9kZXRhaWxzLzU1MDExNjAy">gradle-wrapper.properties中各属性的含义<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdyYWRsZS5vcmcvY3VycmVudC91c2VyZ3VpZGUvY29yZV9kZXBlbmRlbmN5X21hbmFnZW1lbnQuaHRtbA==">Dependency management in Gradle<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdyYWRsZS5vcmcvY3VycmVudC91c2VyZ3VpZGUvamF2YV9saWJyYXJ5X3BsdWdpbi5odG1sI3NlYzpqYXZhX2xpYnJhcnlfY29uZmlndXJhdGlvbnNfZ3JhcGg=">The Java Library Plugin<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdyYWRsZS5vcmcvY3VycmVudC91c2VyZ3VpZGUvZGlzdHJpYnV0aW9uX3BsdWdpbi5odG1s">The Distribution Plugin<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Gradle</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle（二）Android</title>
    <url>/2020/12/15/gradle2/</url>
    <content><![CDATA[<p>在上一篇 Gradle 的文章中，已经对 Gradle 有了一定的认识，Gradle 在 Android 有着广泛的应用，用作 Android 包依赖管理，应用构建，测试，等一些列自动化，我们本篇就来了解下在 Android 领域 Gradle 的使用。其实 Android 项目结构和之前在第一篇 Gradle 项目结构基本相同，只是在 module 级别多了的 <span class="exturl" data-url="aHR0cDovL3Byb2d1YXJkLXJ1bGVzLnBybw==">proguard-rules.pro<i class="fa fa-external-link-alt"></i></span>。对于不管是 Android 项目或是 Spring 系列项目的子 module 都会有 build.gradle 文件</p>
<span id="more"></span>
<h2 id="Project-级别"><a class="header-anchor" href="#Project-级别"></a>Project 级别</h2>
<h3 id="build-gradle"><a class="header-anchor" href="#build-gradle"></a>build.gradle</h3>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gradle 脚本执行所需依赖，分别是对应的maven库和插件</span></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 声明依赖 Android Gradle 插件版本</span></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.android.tools.build:gradle:3.5.3&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目所有 module 配置需要的依赖</span></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个 clean 任务，用于删除 build 目录的文件</span></span><br><span class="line">task clean(<span class="attr">type:</span> Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="settings-gradle"><a class="header-anchor" href="#settings-gradle"></a>settings.gradle</h3>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认指的是创建 Android 项目生成的 app 模块，也是默认的应用启动模块</span></span><br><span class="line">include <span class="string">&#x27;:app&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="Module-级别"><a class="header-anchor" href="#Module-级别"></a>Module 级别</h2>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示这是一个应用程序模块，可直接运行</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译时间</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">def</span> releaseTime() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Date().format(<span class="string">&#x27;yyyy-MM-dd&#x27;</span>, TimeZone.getTimeZone(<span class="string">&#x27;UTC&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    <span class="comment">// 编译 Android 版本</span></span><br><span class="line">    compileSdkVersion <span class="number">29</span></span><br><span class="line">    <span class="comment">// 默认配置</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        <span class="comment">// 应用 ID，手机中用于识别应用的唯一标识</span></span><br><span class="line">        applicationId <span class="string">&quot;org.incoder.android&quot;</span></span><br><span class="line">        <span class="comment">// 目标 Android 版本</span></span><br><span class="line">        targetSdkVersion <span class="number">29</span></span><br><span class="line">        <span class="comment">// 申明应用可超过 65536 的方法，可参考：https://developer.android.google.cn/studio/build/multidex?hl=zh_cn</span></span><br><span class="line">        multiDexEnabled <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 申明要使用AndroidJUnitRunner进行单元测试</span></span><br><span class="line">        testInstrumentationRunner <span class="string">&quot;android.support.test.runner.AndroidJUnitRunner&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 签名配置，相关信息放置在 gradle.properties 文件中</span></span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            storeFile file(DEBUG_STORE_FILE)</span><br><span class="line">            storePassword DEBUG_STORE_PASSWORD</span><br><span class="line">            keyAlias DEBUG_KEY_ALIAS</span><br><span class="line">            keyPassword DEBUG_KEY_PASSWORD</span><br><span class="line">        &#125;</span><br><span class="line">        release &#123;</span><br><span class="line">            storeFile file(RELEASE_STORE_FILE)</span><br><span class="line">            storePassword RELEASE_STORE_PASSWORD</span><br><span class="line">            keyAlias RELEASE_KEY_ALIAS</span><br><span class="line">            keyPassword RELEASE_KEY_PASSWORD</span><br><span class="line">            v2SigningEnabled <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            zipAlignEnabled <span class="literal">false</span></span><br><span class="line">            shrinkResources <span class="literal">false</span></span><br><span class="line">            <span class="comment">// 签名</span></span><br><span class="line"><span class="comment">//            signingConfig signingConfigs.debug</span></span><br><span class="line">            manifestPlaceholders = [</span><br><span class="line">                    <span class="comment">//JPush</span></span><br><span class="line">                    <span class="attr">JPUSH_APPKEY :</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="symbol">JPUSH_CHANNEL:</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="comment">// Pgy</span></span><br><span class="line">                    <span class="attr">PGYER_APPID  :</span> <span class="string">&quot;7907554687e4c116316feedb3820ce52&quot;</span>,</span><br><span class="line">                    <span class="comment">// Bugly</span></span><br><span class="line">                    <span class="attr">BUGLY_APPID  :</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="attr">VERSION_NAME :</span> <span class="string">&quot;0.1.0&quot;</span>,</span><br><span class="line">            ]</span><br><span class="line">            ndk &#123;</span><br><span class="line">                <span class="comment">// 设置支持的SO库架构</span></span><br><span class="line">                abiFilters <span class="string">&#x27;armeabi&#x27;</span>, <span class="string">&#x27;x86&#x27;</span>, <span class="string">&#x27;armeabi-v7a&#x27;</span>, <span class="string">&#x27;x86_64&#x27;</span>, <span class="string">&#x27;arm64-v8a&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        release &#123;</span><br><span class="line">            <span class="comment">// 混淆</span></span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            <span class="comment">// Zipalign优化</span></span><br><span class="line">            zipAlignEnabled <span class="literal">true</span></span><br><span class="line">            <span class="comment">// 移除无用的resource文件</span></span><br><span class="line">            shrinkResources <span class="literal">false</span></span><br><span class="line">            <span class="comment">// 前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">            <span class="comment">// 签名</span></span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">            <span class="comment">// AppAnalytics key</span></span><br><span class="line">            manifestPlaceholders = [</span><br><span class="line">                    <span class="comment">// JPush</span></span><br><span class="line">                    <span class="attr">JPUSH_APPKEY :</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="symbol">JPUSH_CHANNEL:</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="comment">// Pgy</span></span><br><span class="line">                    <span class="attr">PGYER_APPID  :</span> <span class="string">&quot;7907554687e4c116316feedb3820ce52&quot;</span>,</span><br><span class="line">                    <span class="comment">// Bugly</span></span><br><span class="line">                    <span class="attr">BUGLY_APPID  :</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="attr">VERSION_NAME :</span> <span class="string">&quot;0.1.0&quot;</span>,</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重命名安装包</span></span><br><span class="line">    android.applicationVariants.all &#123;</span><br><span class="line">        variant -&gt;</span><br><span class="line">            variant.outputs.all &#123;</span><br><span class="line">                output -&gt;</span><br><span class="line">                    output.outputFileName = variant.flavorName + buildType.name +</span><br><span class="line">                            <span class="string">&quot;_&quot;</span> + releaseTime() + <span class="string">&quot;.apk&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 产品变种</span></span><br><span class="line">    flavorDimensions <span class="string">&quot;minSDK&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 针对不同渠道的配置</span></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        <span class="comment">// 测试环境渠道包</span></span><br><span class="line">        dev &#123;</span><br><span class="line">            applicationId <span class="string">&#x27;org.incoder.test&#x27;</span></span><br><span class="line">            minSdkVersion <span class="number">19</span></span><br><span class="line">            <span class="comment">// 测试环境IP配置 API 接口地址</span></span><br><span class="line">            buildConfigField <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;API&#x27;</span>, <span class="string">&#x27;&quot;http://xxx.xxx.xxx.xxx:8888&quot;&#x27;</span></span><br><span class="line">            versionCode <span class="number">2020122501</span></span><br><span class="line">            versionName <span class="string">&quot;2.0&quot;</span></span><br><span class="line">            <span class="comment">// 指定产品变种</span></span><br><span class="line">            dimension <span class="string">&quot;minSDK&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 正式环境渠道包</span></span><br><span class="line">        rel &#123;</span><br><span class="line">            applicationId <span class="string">&quot;org.incoder.android&quot;</span></span><br><span class="line">            minSdkVersion <span class="number">16</span></span><br><span class="line">            <span class="comment">// 正式环境域名 API 接口地址</span></span><br><span class="line">            buildConfigField <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;API&#x27;</span>, <span class="string">&#x27;&quot;http://api.xxx.xxx/&quot;&#x27;</span></span><br><span class="line">            versionCode <span class="number">2020122501</span></span><br><span class="line">            versionName <span class="string">&quot;2.1&quot;</span></span><br><span class="line">            <span class="comment">// 指定产品变种</span></span><br><span class="line">            dimension <span class="string">&quot;minSDK&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过滤指定产品变种（渠道，构建类型）</span></span><br><span class="line"><span class="comment">//    variantFilter &#123; variant -&gt;</span></span><br><span class="line"><span class="comment">//        def names = variant.flavors*.name</span></span><br><span class="line"><span class="comment">//        def isDebug = variant.buildType.debuggable</span></span><br><span class="line"><span class="comment">//        // To check for a certain build type, use variant.buildType.name == &quot;&lt;buildType&gt;&quot;</span></span><br><span class="line"><span class="comment">//        if (names.contains(&quot;rel&quot;) &amp;&amp; isDebug) &#123;</span></span><br><span class="line"><span class="comment">//            // Gradle ignores any variants that satisfy the conditions above.</span></span><br><span class="line"><span class="comment">//            setIgnore(true)</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多渠道配置</span></span><br><span class="line">    productFlavors.all &#123;</span><br><span class="line">        flavor -&gt;</span><br><span class="line">            flavor.manifestPlaceholders = [<span class="attr">CHANNEL_VALUE:</span> name]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行lint检查，有任何的错误或者警告提示，都会终止构建</span></span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        disable <span class="string">&#x27;MissingTranslation&#x27;</span>, <span class="string">&#x27;ExtraTranslation&#x27;</span></span><br><span class="line">        <span class="comment">// abortOnError一定要设为false，这样即使有报错也不会停止打包了</span></span><br><span class="line">        abortOnError <span class="literal">false</span></span><br><span class="line">        <span class="comment">// 在打包Release版本的时候进行检测,可以打开，这样报错还会显示出来</span></span><br><span class="line">        checkReleaseBuilds <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dexOptions &#123;</span><br><span class="line">        jumboMode <span class="literal">true</span></span><br><span class="line">        javaMaxHeapSize <span class="string">&quot;4g&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打包时的配置</span></span><br><span class="line">    packagingOptions &#123;</span><br><span class="line">        exclude <span class="string">&#x27;META-INF/LICENSE&#x27;</span></span><br><span class="line">        exclude <span class="string">&#x27;META-INF/NOTICE&#x27;</span></span><br><span class="line">        exclude <span class="string">&#x27;META-INF/rxjava.properties&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    aaptOptions.cruncherEnabled = <span class="literal">false</span></span><br><span class="line">    aaptOptions.useNewCruncher = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目依赖的包</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation fileTree(<span class="attr">include:</span> [<span class="string">&#x27;*.jar&#x27;</span>], <span class="attr">dir:</span> <span class="string">&#x27;libs&#x27;</span>)</span><br><span class="line">    implementation <span class="string">&#x27;com.android.support:appcompat-v7:28.0.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.android.support:design:28.0.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.android.support:support-v4:28.0.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.android.support:support-v13:28.0.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.android.support.constraint:constraint-layout:1.1.3&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.android.support:support-vector-drawable:28.0.0&#x27;</span></span><br><span class="line">    androidTestImplementation <span class="string">&#x27;com.android.support.test:runner:1.0.2&#x27;</span></span><br><span class="line">    androidTestImplementation <span class="string">&#x27;com.android.support.test.espresso:espresso-core:3.0.2&#x27;</span></span><br><span class="line">    testImplementation <span class="string">&#x27;junit:junit:4.12&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于 module 中的 build.gradle 配置文件中的各项已在示例中加入了注释说明，其中一些配置，这里再简单的说明下</p>
<h3 id="apply-plugin"><a class="header-anchor" href="#apply-plugin"></a>apply plugin</h3>
<p>这里的 <code>apply plugin</code> 有两种模式：</p>
<ol>
<li>com.android.application：表示这是一个应用程序模块</li>
<li>com.android.library：表示这是一个库模块</li>
</ol>
<p>前者可以直接运行，后着是依附别的应用程序运行</p>
<h3 id="buildTypes"><a class="header-anchor" href="#buildTypes"></a>buildTypes</h3>
<p>这里主要是生成安装文件的配置信息，一个 debug 类型，用于指定生成测试版安装文件配置，可忽略不写；另一个是 release，用于指定生成正式版安装文件的配置。</p>
<ul>
<li>minifyEnabled：是否对代码进行混淆，默认 false</li>
<li>proguardFiles：指定混淆的规则文件，默认指定了 proguard-android.txt 文件和 <span class="exturl" data-url="aHR0cDovL3Byb2d1YXJkLXJ1bGVzLnBybw==">proguard-rules.pro<i class="fa fa-external-link-alt"></i></span> 文件。
<ul>
<li>proguard-android.txt：默认的混淆文件，里面定义了一些通用的混淆规则</li>
<li><span class="exturl" data-url="aHR0cDovL3Byb2d1YXJkLXJ1bGVzLnBybw==">proguard-rules.pro<i class="fa fa-external-link-alt"></i></span>：位于当前项目的根目录下，可以在该文件中定义一些项目特有的混淆规则</li>
</ul>
</li>
<li>buildConfigField：可用于解决不同渠道不同的服务地址，或不同渠道 LOG 打印控制等</li>
<li>debuggable：是否支持断点调试，release 默认为 false，debug 默认 true</li>
<li>jniDebuggable：是否可以调试 NDK 代码，使用 lldb 进行 C 和 C++ 代码调试，release 默认为 false</li>
<li>signingConfig：设置签名信息，通过 singingConfig.release 或 singingConfig.debug，配置相应的签名，但是添加此配置前需要先添加 singingConfig 闭包</li>
<li>renderscriptDebuggable：是否开启渲染脚本，就是一些 C 写的渲染方法，默认为 false</li>
<li>renderscriptOptimLevel：渲染等级，默认为 3</li>
<li>zipAlignEnabled：是否对 apk 包执行 zip 对齐优化，减少 zip 体积，提高运行效率，release 和 debug 都默认 true</li>
<li>pseudoLocalesEnabled：是否在 apk 中生成伪语言环境，帮助国际化，一般很少使用</li>
<li>applicationIdSuffix：和 defaultConfig 中配置一样，指在 applicationId 中添加一个后缀</li>
<li>versionNameSuffix：添加版本名称的后缀，一般使用较少</li>
</ul>
<h3 id="productFlavors"><a class="header-anchor" href="#productFlavors"></a>productFlavors</h3>
<p>这个配置主要是解决应用发布在不同应用市场，而需要对不同应用市场做一些不同配置，比如包名，应用名，以及一些统计，而需要不同渠道统计 ID 等</p>
<h3 id="packagingOptions"><a class="header-anchor" href="#packagingOptions"></a>packagingOptions</h3>
<p>packagingOptions 常见的设置项有 exclude、pickFirst、doNotStrip、merge</p>
<ol>
<li>exclude：过滤掉某些文件或者目录不添加到APK中，作用于APK，不能过滤aar和jar中的内容<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">packagingOptions &#123;</span><br><span class="line">    exclude <span class="string">&#x27;META-INF/**&#x27;</span></span><br><span class="line">    exclude <span class="string">&#x27;lib/arm64-v8a/libmediaplayer.so&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>pickFirst：匹配到多个相同文件，只提取第一个。只作用于APK，不能过滤aar和jar中的文件<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">packagingOptions &#123;</span><br><span class="line">    pickFirst <span class="string">&quot;lib/armeabi-v7a/libaaa.so&quot;</span></span><br><span class="line">    pickFirst <span class="string">&quot;lib/armeabi-v7a/libbbb.so&quot;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>doNotStrip：可以设置某些动态库不被优化压缩<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">packagingOptions&#123;</span><br><span class="line">    doNotStrip <span class="string">&quot;*/armeabi/*.so&quot;</span></span><br><span class="line">    doNotStrip <span class="string">&quot;*/armeabi-v7a/*.so&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>merge：将匹配的文件都添加到APK中，和pickFirst有些相反，会合并所有文件<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">packagingOptions &#123;</span><br><span class="line">    merge <span class="string">&#x27;**/LICENSE.txt&#x27;</span></span><br><span class="line">    merge <span class="string">&#x27;**/NOTICE.txt&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="统一版本"><a class="header-anchor" href="#统一版本"></a>统一版本</h2>
<p>应用由多个 module 构成，而不同地方引用的包，需要做到全局的统一时，可以创建一个 <code>xxx.gradle</code> 的文件（这里的 xxx，自行取一个表明含义的内容即可），然后在使用的地方时，统一调用定义的版本即可，使用步骤如下</p>
<ol>
<li>创建 <code>xxx.gradle</code> 文件（一般放在项目的根目录，和顶级 build.gradle 文件在同一层级），并添加如下内容，可根据自身需要调整 <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line"></span><br><span class="line">    android = [</span><br><span class="line">            <span class="symbol">compileSdkVersion:</span> <span class="number">29</span>,</span><br><span class="line">            <span class="symbol">buildToolsVersion:</span> <span class="string">&quot;29.0.2&quot;</span>,</span><br><span class="line">            <span class="attr">minSdkVersion    :</span> <span class="number">19</span>,</span><br><span class="line">            <span class="attr">targetSdkVersion :</span> <span class="number">29</span>,</span><br><span class="line">            <span class="attr">versionCode      :</span> <span class="number">2020010102</span>,</span><br><span class="line">            <span class="attr">versionName      :</span> <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    version = [</span><br><span class="line">            <span class="symbol">androidSupportSdkVersion:</span> <span class="string">&quot;29.0.0&quot;</span>,</span><br><span class="line">            <span class="attr">retrofitSdkVersion      :</span> <span class="string">&quot;2.6.3&quot;</span>,</span><br><span class="line">            <span class="attr">okhttpSdkVersion        :</span> <span class="string">&quot;4.3.0&quot;</span>,</span><br><span class="line">            <span class="attr">dagger2SdkVersion       :</span> <span class="string">&quot;2.22.1&quot;</span>,</span><br><span class="line">            <span class="attr">glideSdkVersion         :</span> <span class="string">&quot;4.9.0&quot;</span>,</span><br><span class="line">            <span class="attr">butterknifeSdkVersion   :</span> <span class="string">&quot;10.2.1&quot;</span>,</span><br><span class="line">            <span class="attr">rxlifecycle2SdkVersion  :</span> <span class="string">&quot;2.2.1&quot;</span>,</span><br><span class="line">            <span class="attr">espressoSdkVersion      :</span> <span class="string">&quot;3.0.2&quot;</span>,</span><br><span class="line">            <span class="attr">canarySdkVersion        :</span> <span class="string">&quot;1.5.4&quot;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Android support 与 AndroidX support 对比</span></span><br><span class="line">    <span class="comment">// https://developer.android.google.cn/jetpack/androidx/migrate</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// support 库说明</span></span><br><span class="line">    <span class="comment">// https://developer.android.com/topic/libraries/support-library/features?hl=zh-cn</span></span><br><span class="line">    dependencies = [</span><br><span class="line">            <span class="comment">// support</span></span><br><span class="line">            <span class="string">&quot;appcompat&quot;</span>                   : <span class="string">&quot;androidx.appcompat:appcompat:1.1.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;annotations&quot;</span>                 : <span class="string">&quot;androidx.annotation:annotation:1.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cardview-v7&quot;</span>                 : <span class="string">&quot;androidx.cardview:cardview:1.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;constraint-layout&quot;</span>           : <span class="string">&quot;androidx.constraintlayout:constraintlayout:1.1.3&quot;</span>,</span><br><span class="line">            <span class="string">&quot;swiperefreshlayout&quot;</span>          : <span class="string">&quot;androidx.swiperefreshlayout:swiperefreshlayout:1.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;material&quot;</span>                    : <span class="string">&quot;com.google.android.material:material:1.1.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;viewpager&quot;</span>                   : <span class="string">&quot;androidx.viewpager:viewpager:1.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;recyclerview&quot;</span>                : <span class="string">&quot;androidx.recyclerview:recyclerview:1.1.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;vectordrawable&quot;</span>              : <span class="string">&quot;androidx.vectordrawable:vectordrawable:1.1.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;support-v4&quot;</span>                  : <span class="string">&quot;androidx.legacy:legacy-support-v4:1.0.0&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// network</span></span><br><span class="line">            <span class="string">&quot;retrofit&quot;</span>                    : <span class="string">&quot;com.squareup.retrofit2:retrofit:$&#123;version[&quot;</span>retrofitSdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;retrofit-converter-gson&quot;</span>     : <span class="string">&quot;com.squareup.retrofit2:converter-gson:$&#123;version[&quot;</span>retrofitSdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;retrofit-converter-simplexml&quot;</span>: <span class="string">&quot;com.squareup.retrofit2:converter-simplexml:$&#123;version[&quot;</span>retrofitSdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;retrofit-adapter-rxjava2&quot;</span>    : <span class="string">&quot;com.squareup.retrofit2:adapter-rxjava2:$&#123;version[&quot;</span>retrofitSdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;okhttp3&quot;</span>                     : <span class="string">&quot;com.squareup.okhttp3:okhttp:$&#123;version[&quot;</span>okhttpSdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;okhttp3-logging-interceptor&quot;</span> : <span class="string">&quot;com.squareup.okhttp3:logging-interceptor:$&#123;version[&quot;</span>okhttpSdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;mockwebserver&quot;</span>               : <span class="string">&quot;com.squareup.okhttp3:mockwebserver:$&#123;version[&quot;</span>okhttpSdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;glide&quot;</span>                       : <span class="string">&quot;com.github.bumptech.glide:glide:$&#123;version[&quot;</span>glideSdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line">            <span class="comment">// （annotationProcessor）</span></span><br><span class="line">            <span class="string">&quot;glide-compiler&quot;</span>              : <span class="string">&quot;com.github.bumptech.glide:compiler:$&#123;version[&quot;</span>glideSdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;glide-loader-okhttp3&quot;</span>        : <span class="string">&quot;com.github.bumptech.glide:okhttp3-integration:$&#123;version[&quot;</span>glideSdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// view</span></span><br><span class="line">            <span class="string">&quot;butterknife&quot;</span>                 : <span class="string">&quot;com.jakewharton:butterknife:$&#123;version[&quot;</span>butterknifeSdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;butterknife-compiler&quot;</span>        : <span class="string">&quot;com.jakewharton:butterknife-compiler:$&#123;version[&quot;</span>butterknifeSdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;brvah&quot;</span>                       : <span class="string">&quot;com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.49-androidx&quot;</span>,</span><br><span class="line">            <span class="string">&quot;psid&quot;</span>                        : <span class="string">&quot;com.oushangfeng:PinnedSectionItemDecoration:1.3.2-androidx&quot;</span>,</span><br><span class="line">            <span class="string">&quot;material-dialogs&quot;</span>            : <span class="string">&quot;com.afollestad.material-dialogs:core:2.8.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;material-input&quot;</span>              : <span class="string">&quot;com.afollestad.material-dialogs:input:2.8.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;material-files&quot;</span>              : <span class="string">&quot;com.afollestad.material-dialogs:files:2.8.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;material-color&quot;</span>              : <span class="string">&quot;com.afollestad.material-dialogs:color:2.8.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;material-datetime&quot;</span>           : <span class="string">&quot;com.afollestad.material-dialogs:datetime:2.8.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;pickerview&quot;</span>                  : <span class="string">&quot;com.contrarywind:Android-PickerView:4.1.8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;photoview&quot;</span>                   : <span class="string">&quot;com.github.chrisbanes.photoview:library:2.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;lottie&quot;</span>                      : <span class="string">&quot;com.airbnb.android:lottie:3.0.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;badge-view&quot;</span>                  : <span class="string">&quot;q.rorbin:badgeview:1.1.3&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// rx2</span></span><br><span class="line">            <span class="string">&quot;rxandroid2&quot;</span>                  : <span class="string">&quot;io.reactivex.rxjava2:rxandroid:2.1.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rxjava2&quot;</span>                     : <span class="string">&quot;io.reactivex.rxjava2:rxjava:2.2.16&quot;</span>,</span><br><span class="line">            <span class="comment">// https://github.com/VictorAlbertos/RxCache</span></span><br><span class="line">            <span class="string">&quot;rxcache2&quot;</span>                    : <span class="string">&quot;com.github.VictorAlbertos.RxCache:runtime:1.8.3-2.x&quot;</span>,</span><br><span class="line">            <span class="comment">// https://github.com/tbruyelle/RxPermissions</span></span><br><span class="line">            <span class="string">&quot;rxpermissions2&quot;</span>              : <span class="string">&quot;com.github.tbruyelle:rxpermissions:0.10.2&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// tools（implementation）</span></span><br><span class="line">            <span class="string">&quot;dagger2&quot;</span>                     : <span class="string">&quot;com.google.dagger:dagger:$&#123;version[&quot;</span>dagger2SdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;dagger2-android&quot;</span>             : <span class="string">&quot;com.google.dagger:dagger-android:$&#123;version[&quot;</span>dagger2SdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;dagger2-android-support&quot;</span>     : <span class="string">&quot;com.google.dagger:dagger-android-support:$&#123;version[&quot;</span>dagger2SdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;eventbus&quot;</span>                    : <span class="string">&quot;org.greenrobot:eventbus:3.1.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;gson&quot;</span>                        : <span class="string">&quot;com.google.code.gson:gson:2.8.5&quot;</span>,</span><br><span class="line">            <span class="comment">// https://projectlombok.org/setup/android</span></span><br><span class="line">            <span class="string">&quot;lombok&quot;</span>                      : <span class="string">&quot;org.projectlombok:lombok:1.18.8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;multidex&quot;</span>                    : <span class="string">&quot;com.android.support:multidex:1.0.3&quot;</span>,</span><br><span class="line">            <span class="string">&quot;arouter-api&quot;</span>                 : <span class="string">&quot;com.alibaba:arouter-api:1.4.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;arouter-compiler&quot;</span>            : <span class="string">&quot;com.alibaba:arouter-compiler:1.2.2&quot;</span>,</span><br><span class="line">            <span class="comment">//（annotationProcessor）</span></span><br><span class="line">            <span class="string">&quot;dagger2-compiler&quot;</span>            : <span class="string">&quot;com.google.dagger:dagger-compiler:$&#123;version[&quot;</span>dagger2SdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;dagger2-android-processor&quot;</span>   : <span class="string">&quot;com.google.dagger:dagger-android-processor:$&#123;version[&quot;</span>dagger2SdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// test</span></span><br><span class="line">            <span class="string">&quot;junit&quot;</span>                       : <span class="string">&quot;junit:junit:4.12&quot;</span>,</span><br><span class="line">            <span class="string">&quot;androidJUnitRunner&quot;</span>          : <span class="string">&quot;androidx.test.runner.AndroidJUnitRunner&quot;</span>,</span><br><span class="line">            <span class="string">&quot;runner&quot;</span>                      : <span class="string">&quot;androidx.test:runner:1.1.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;espresso-core&quot;</span>               : <span class="string">&quot;androidx.test.espresso:espresso-core:3.2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;espresso-contrib&quot;</span>            : <span class="string">&quot;androidx.test.espresso:espresso-contrib:3.2.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;espresso-intents&quot;</span>            : <span class="string">&quot;androidx.test.espresso:espresso-intents:3.3.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;canary-debug&quot;</span>                : <span class="string">&quot;com.squareup.leakcanary:leakcanary-android:$&#123;version[&quot;</span>canarySdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;canary-release&quot;</span>              : <span class="string">&quot;com.squareup.leakcanary:leakcanary-android-no-op:$&#123;version[&quot;</span>canarySdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;umeng-analytics&quot;</span>             : <span class="string">&quot;com.umeng.analytics:analytics:6.0.1&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// util</span></span><br><span class="line">            <span class="comment">// https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/README-CN.md</span></span><br><span class="line">            <span class="string">&quot;utilcode&quot;</span>                    : <span class="string">&quot;com.blankj:utilcode:1.23.7&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// help</span></span><br><span class="line">            <span class="string">&quot;logger&quot;</span>                      : <span class="string">&quot;com.orhanobut:logger:2.2.0&quot;</span>,</span><br><span class="line">            <span class="comment">// https://www.pgyer.com/doc/view/new_sdk_android_guide</span></span><br><span class="line">            <span class="string">&quot;pgy&quot;</span>                         : <span class="string">&quot;com.pgyersdk:sdk:3.0.3&quot;</span>,</span><br><span class="line">            <span class="comment">// SDK 包</span></span><br><span class="line">            <span class="comment">// https://bugly.qq.com/docs/release-notes/release-android-bugly/?v=20180709165613</span></span><br><span class="line">            <span class="comment">// https://jcenter.bintray.com/com/tencent/bugly/crashreport/</span></span><br><span class="line">            <span class="string">&quot;crashreport&quot;</span>                 : <span class="string">&quot;com.tencent.bugly:crashreport:3.1.0&quot;</span>,</span><br><span class="line">            <span class="comment">// 升级 SDK 包</span></span><br><span class="line">            <span class="comment">// https://bugly.qq.com/docs/release-notes/release-android-bugly/?v=20180709165613</span></span><br><span class="line">            <span class="comment">// https://jcenter.bintray.com/com/tencent/bugly/crashreport_upgrade/</span></span><br><span class="line">            <span class="string">&quot;bugly-crash-upgrade&quot;</span>         : <span class="string">&quot;com.tencent.bugly:crashreport_upgrade:1.4.2&quot;</span>,</span><br><span class="line">            <span class="comment">// NDK 动态库</span></span><br><span class="line">            <span class="comment">// https://bugly.qq.com/docs/release-notes/release-android-ndk/?v=20180709165613</span></span><br><span class="line">            <span class="comment">// https://jcenter.bintray.com/com/tencent/bugly/nativecrashreport/</span></span><br><span class="line">            <span class="string">&quot;bugly-ndk&quot;</span>                   : <span class="string">&quot;com.tencent.bugly:nativecrashreport:3.7.1&quot;</span>,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>在顶级的 <code>build.gradle</code> 文件底部，表明添加对 <code>xxx.gradle</code> 的使用<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">from:</span> <span class="string">&quot;xxx.gradle&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li>在 module 级别的 <code>build.gradle</code> 文件中，修改哪些固定写死的依赖版本<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 之前固定的版本</span></span><br><span class="line">minSdkVersion <span class="number">19</span></span><br><span class="line"><span class="comment">// 修改通过 xxx.gradle 中定义的版本</span></span><br><span class="line">minSdkVersion rootProject.ext.android[<span class="string">&quot;minSdkVersion&quot;</span>]</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vc3R1ZGlvL3JlbGVhc2VzL2dyYWRsZS1wbHVnaW4/aGw9emhfY24=">Android Gradle 插件版本说明<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vc3R1ZGlvL2J1aWxkP2hsPXpoX2Nu">配置构建<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vc3R1ZGlvL2J1aWxkL2J1aWxkLXZhcmlhbnRzP2hsPXpoX2NuI3Byb2R1Y3QtZmxhdm9ycw==">配置构建变体<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Gradle</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle（三）SpringBoot 单工程</title>
    <url>/2020/12/16/gradle3/</url>
    <content><![CDATA[<p>在 <a href="https://incoder.org/2020/12/10/gradle1/">Gradle（一）基础</a> 的文章中，我们已经对 Gradle 有了一定的认识，本篇来看一看在后端开发中使用 Gradle 构建 SpringBoot 项目的开发。通常有两种方式来构建项目，第一种：每个功能模块即是一个代码工程，用一个 Git 仓库来管理，每个模块只负责完成一件事情；第二种：整个系统的多个模块聚合在一个代码工程里面，也就是我们常说的多模块项目，本篇先来讲一讲单工程</p>
<span id="more"></span>
<h2 id="工程选择"><a class="header-anchor" href="#工程选择"></a>工程选择</h2>
<p>对于单工程，和聚合工程的选择主要根据你所在项目团队的大小，项目分工，以及项目的复杂程度等来考虑。</p>
<p>单工程：适用于项目分工明确，项目庞大复杂，架构服务边界划分明确，配套的自动化等设施完善<br>
聚合工程：适用于项目人员不是很多，项目功能一般，需要一个人集中化管理等</p>
<h2 id="环境"><a class="header-anchor" href="#环境"></a>环境</h2>
<ul>
<li>OS：macOS 11.1</li>
<li>JDK：JDK1.8</li>
<li>Gradle：6.7.1-bin</li>
<li>IDE：IntelliJ IDEA Community 2020.3</li>
<li>SpringBoot：2.4.1</li>
</ul>
<h2 id="build-gradle"><a class="header-anchor" href="#build-gradle"></a>build.gradle</h2>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 项目使用插件，可从 https://plugins.gradle.org 库中寻找合适的插件</span></span><br><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;org.springframework.boot&#x27;</span> version <span class="string">&#x27;2.4.1&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;io.spring.dependency-management&#x27;</span> version <span class="string">&#x27;1.0.10.RELEASE&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里和 maven类似，用于项目唯一坐标</span></span><br><span class="line">group = <span class="string">&#x27;com.example&#x27;</span></span><br><span class="line">version = <span class="string">&#x27;0.0.1-SNAPSHOT&#x27;</span></span><br><span class="line"><span class="comment">// 项目兼容版本</span></span><br><span class="line">sourceCompatibility = <span class="string">&#x27;1.8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 依赖第三方jar从哪个仓库去下载</span></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目所需的第三方依赖</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter&#x27;</span></span><br><span class="line">    testImplementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试相关</span></span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个 SpringBoot 项目基本的 build.gradle 文件由 plugins，项目坐标，repositories，dependencies，test 基础内容组成。关于 plugins 使用常见有两种方式，核心的依赖，是没有版本号，它和你使用的 Gradle 关联，你无需过多关系这些核心插件的依赖版本</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 旧方式</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新方式（推荐）</span></span><br><span class="line">plubins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="settings-gradle"><a class="header-anchor" href="#settings-gradle"></a>settings.gradle</h2>
<p>用于项目模块管理，由于这个单工程，这里只有一个模块</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">rootProject.name = <span class="string">&#x27;demo&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="多环境"><a class="header-anchor" href="#多环境"></a>多环境</h2>
<p>可通过自定义 task 来出来</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// prod</span></span><br><span class="line">tasks.register(<span class="string">&quot;bootRunProd&quot;</span>) &#123;</span><br><span class="line">    group = <span class="string">&quot;application&quot;</span></span><br><span class="line">    description = <span class="string">&quot;Runs the Spring Boot application with the prod profile&quot;</span></span><br><span class="line">    doFirst &#123;</span><br><span class="line">        tasks.bootRun.configure &#123;</span><br><span class="line">            systemProperty(<span class="string">&quot;spring.profiles.active&quot;</span>, <span class="string">&quot;prod&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    finalizedBy(<span class="string">&quot;bootRun&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dev</span></span><br><span class="line">tasks.register(<span class="string">&quot;bootRunDev&quot;</span>) &#123;</span><br><span class="line">    group = <span class="string">&quot;application&quot;</span></span><br><span class="line">    description = <span class="string">&quot;Runs the Spring Boot application with the dev profile&quot;</span></span><br><span class="line">    doFirst &#123;</span><br><span class="line">        tasks.bootRun.configure &#123;</span><br><span class="line">            systemProperty(<span class="string">&quot;spring.profiles.active&quot;</span>, <span class="string">&quot;dev&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    finalizedBy(<span class="string">&quot;bootRun&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动方式</p>
<ul>
<li>
<p>方式一：图形化界面中，直接运行对应环境<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1609691501/blog/gradle-task-gui.png" alt=""></p>
</li>
<li>
<p>方式二：在命令行中，使用命令来运行对应环境，比如 <code>gradlew bootRunDev</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1609691543/blog/gradle-task-terminal.png" alt=""></p>
</li>
<li>
<p>方式三：当然你也可以在启动时指定你需要激活的环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里激活的 test 环境，把 $&#123;jar_name&#125; 参数换成对应启动的应用文件</span></span><br><span class="line">java -jar <span class="variable">$&#123;jar_name&#125;</span> --spring.profiles.active=<span class="built_in">test</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="排除依赖"><a class="header-anchor" href="#排除依赖"></a>排除依赖</h2>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">testImplementation(<span class="string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span>) &#123;</span><br><span class="line">    exclude <span class="attr">group:</span> <span class="string">&#x27;org.junit.vintage&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;junit-vintage-engine&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="打包"><a class="header-anchor" href="#打包"></a>打包</h2>
<p>打包时需要，注意我们的 SpringBoot 应用它本质上是一个 bootJar（Fatjar） 应用，因此需要将应用打成一个 bootJar（Fatjar）。而对于什么是 bootJar 和 jar 的区别，可以查看之前在 SpringBoot（二） 启动分析JarLauncher 文章中对于 <a href="https://incoder.org/2019/07/05/springboot2/#jar%E8%A7%84%E8%8C%83">jar 规范</a> 说明</p>
<p>打包方式</p>
<ul>
<li>
<p>方式一：图形化操作</p>
</li>
<li>
<p>方式二：命名执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在项目的根目录执行，Windows 使用：gradlew；Linux/macOS：./gradlew</span></span><br><span class="line"><span class="comment"># 当然如果那你已安装且配置好 gradle 的环境，你可以直接使用 gradle 代替 ./gradlew 的相关命令</span></span><br><span class="line">gradlew bootJar</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="发布"><a class="header-anchor" href="#发布"></a>发布</h2>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zvcm11bGFyb29tL2FydGljbGUvZGV0YWlscy83MDM1NDU2Mg==">SpringBoot+gradle 构建多模块项目<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poNDUyNjQ3NDU3L2FydGljbGUvZGV0YWlscy8xMDg4NDQwNzg=">IDEA 2020.2 + Gradle 6.6.1 + Spring Boot 2.3.4 创建多模块项目<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2J1aHVpZ3Vvd2FuZy9hcnRpY2xlL2RldGFpbHMvMTEwNzAwNTg1">Spring-boot 2.3.x 源码基于Gradle编译<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZGF2ZW5raW4vcC9ncmFkbGUtc3ByaW5nLWJvb3QuaHRtbA==">用 Gradle 构建 Spring Boot 项目<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaG91emhlbmcvcC8xMTAyNDg2NS5odG1s">使用 Gradle 构建 springboot 多模块项目,并混合groovy开发<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvZ3JhZGxlLXBsdWdpbi9yZWZlcmVuY2UvaHRtbHNpbmdsZS8=">Spring Boot Gradle Plugin Reference Guide<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Gradle</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>愿天堂没有病痛</title>
    <url>/2022/06/15/granddad/</url>
    <content><![CDATA[<p>仅以此篇文章记录，我对爷爷的思念，愿天堂没有病痛……</p>
<span id="more"></span>
<p>时间仿佛定格在这一天了，一向最不留情面的爷爷，在寂静的夜晚，悄悄地离开了我们。虽然对于爷爷感情并不是很深，但或多或少在我心里有不曾抹去的对与我的爱，也许只是在我看来是那么的保守和不近人情，可能这只是您独有的关爱方式罢了。</p>
<p>不经想起上一次见面，是在上一次回家（2020 年劳动节假期），去探望了您，没想到这一见面竟然是天人永隔。您的连环追命问题，迫使我是连连败退，不敢轻易登上您的大门。听爸妈说，今年您身体不好，一直住在医院，原本计划等今年十一左右回家，然后再去看看您，这成了永远无法完成的计划😭。姐姐哭着告诉我想到的事情就要去做，不要等到了失去后才后悔莫及，是呀，人总是等到失去后才懂得珍惜，我只是感觉越是长大越是难以想到同时也能做到</p>
<p>爷爷在那个时代属于中等个头，身材在我看来不胖不瘦，家里有琳琅满目各式各样稀奇古怪的东西，有手动给木头打孔的转，刨木头的刨子，标记线的墨斗还有好多好多我不知道的工具一副活脱脱的木工装备，但实际上爷爷并不是木工，只知道爷爷是有单位的人，是有文化的知识分子，在县城有单位分房子，在我印象中有三件事我记忆深刻</p>
<p>第一件，小时候去您家玩，在桌子上看到了各式各样的桥梁图纸，不知道这些桥梁都修建在哪里，然后看到了有一个白色透明很高级的三角板，当然我也见到了不一样的东西，一种被称之为 “雷管” 的炸药，这些应该都是您当年工作中经常使用的一些工具吧，在现在来看应该属于土木工程系，后来上小学，那把三角尺成了小学生涯最长的使用工具。如果有时光机，我想听一听您那时候工作故事和那些作图技巧，还想去看看那些您曾经设计或建造的桥梁道路</p>
<p>第二件，有一年过春节，爸爸给我买了枪（那个时候，男孩子过年好像都少不了这个礼物），然后到您的住的地方，您说这个样式不好，一连就在您家前门店家那里换了 3 次，我现在也记不清那是一把什么样的枪，好像记得一按斑鸠就会有音乐，在那个时候很高级的样子，如果有时光机，我想把那是我的玩具收藏进我的百宝箱里</p>
<p>第三件，那时候我小学六年级还是刚上初中吧。那一年大姑，小姑带着弟弟，妹妹从上海回到老家，然后在我们在您的台球厅玩耍，我学会了小台球的游戏规则，没人的时候我们会一起玩耍，可我重来都没有赢过一场，看来我对这项运动没有任何天赋，如果有时光机，我想和您再打一场台球</p>
<p>从我的视角来看，随着慢慢的长大到工作，相见机会越来越少，有时候一年也没有见上一面。刚开始工作后偶尔会打电话给你，到后来几乎没有再打过电话给你，因为每次电话我都是扯着嗓子在那喊，你说你才能听清我在说什么，其次本身自己是一个内向的人，话也很少，平时也没啥话可说，就这样渐渐几乎是失去了联系，每次也都是听父母的口中知道您的近况</p>
<p>虽然在我的记忆里除了这些温暖的画面，还有不少您的负面形象，可现在这些都不重要了，毕竟这些也是你生命里的一部分。我没有经历过，我没有发言权，就让这些负面的内容随风而去吧。记着一个人的好好过记住一个人的坏，身在异地他乡的我不能及时的回到你身边为你送上最后的一程，深感惭愧😮‍💨</p>
<p>爷爷您一路走好，愿天堂里没有病痛</p>
]]></content>
      <categories>
        <category>纪念</category>
      </categories>
      <tags>
        <tag>Top</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Blog 高级指南</title>
    <url>/2020/11/20/hexo-advanced/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZw==">NexT<i class="fa fa-external-link-alt"></i></span> 是 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2luZGV4Lmh0bWw=">Hexo<i class="fa fa-external-link-alt"></i></span> 非常受欢迎的博客主题，方便简洁，但却不简单的功能，你可以在提供的强大功能基础上进行扩展或者自定义，来满足你的个性化需求。本篇文章主要是对应 NexT 提供的一些高级功能的使用，作为一个持续更新的文章吧，记录自己 SX 操作，当然也是我平时在使用 NexT 时遇到的一些问题的记录。好了废话不多说了，我们直接进入正题</p>
<span id="more"></span>
<h2 id="博客升级"><a class="header-anchor" href="#博客升级"></a>博客升级</h2>
<p>每次对于 NexT 的升级或多或少都会遇到些问题，这次也不例外，首先是对于不同版本的管理，由于一些历史原因有三个组织仓库分别对应不同的版本域，升级是需要注意下，本次我是从 7.8.0 版本升级到 8.0.x 版本，以后跟随官方，每月更新 NexT</p>
<h3 id="npm-改成-yarn（可选）"><a class="header-anchor" href="#npm-改成-yarn（可选）"></a>npm 改成 yarn（可选）</h3>
<blockquote>
<p>yarn 的安装，请自行根据你的系统去安装，我这里 macOS 使用命令即可 <code>brew install yarn</code></p>
</blockquote>
<ol>
<li>删除根目录的 <code>package-lock.json</code>，并在根目录执行 <code>hexo clean &amp;&amp; rm -rf node_modules/</code></li>
<li>根目录下执行 <code>yarn install</code></li>
</ol>
<h3 id="更改-NexT-主题仓库"><a class="header-anchor" href="#更改-NexT-主题仓库"></a>更改 NexT 主题仓库</h3>
<ol>
<li>删除当前主题，在根目录下执行 <code>rm -rf themes/</code></li>
<li>安装新的主题，
<ul>
<li>方案一：在根目录下执行命令添加主题</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<ul>
<li>方案二：通过 yarn 来管理主题</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add hexo-theme-next</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="修改配置"><a class="header-anchor" href="#修改配置"></a>修改配置</h3>
<p>之前为了使主题更新不受影响，在项目的根目录 <code>source/_data</code> 路径下有一个 <code>next.yml</code> 文件来进行对 NexT 的自定义设置，那么在 8.0 版本开始，在项目根目录 <code>_config.&#123;theme&#125;.yml</code> 文件来代替之前在 <code>source/_data</code> 路径下的 <code>next.yml</code> 文件</p>
<h3 id="问题"><a class="header-anchor" href="#问题"></a>问题</h3>
<h4 id="node-trace-warnings"><a class="header-anchor" href="#node-trace-warnings"></a>node --trace-warnings</h4>
<h5 id="异常信息"><a class="header-anchor" href="#异常信息"></a>异常信息</h5>
<p>由于 NexT 需要 Hexo5.0+，在升级到 NexT 8.0.x 版本警告信息如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(node:17336) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">(node:17336) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:17336) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">(node:17336) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(node:17336) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:17336) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br></pre></td></tr></table></figure>
<h5 id="原因分析"><a class="header-anchor" href="#原因分析"></a>原因分析</h5>
<p>是由于 Hexo 项目嵌套依赖了 <code>stylus</code> 包，而对于 <code>0.54.5</code> 版本在 Node 14+ 版本存在问题，比如这里 <code>hexo-renderer-stylus</code> 包的依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">……</span><br><span class="line">│ │</span><br><span class="line">├─┬ hexo-renderer-stylus@2.0.1</span><br><span class="line">│ ├─┬ nib@1.1.2</span><br><span class="line">│ │ └─┬ stylus@0.54.5</span><br><span class="line">│ │   │ </span><br><span class="line">……</span><br></pre></td></tr></table></figure>
<h5 id="解决方法"><a class="header-anchor" href="#解决方法"></a>解决方法</h5>
<ol>
<li>可以降低你的 Node 版本到 12 版本 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew uninstall node</span><br><span class="line">brew install node@12</span><br><span class="line">brew <span class="built_in">link</span> --overwrite --force node@12</span><br></pre></td></tr></table></figure>
</li>
<li>推荐，更改替换 stylus 版本，在你的 <code>package.json</code> 文件中，添加如下配置 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;resolutions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;stylus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.54.8&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="总结"><a class="header-anchor" href="#总结"></a>总结</h5>
<p>🌀 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0eWx1cy9zdHlsdXMvcHVsbC8yNTM4">pull-2538<i class="fa fa-external-link-alt"></i></span><br>
🐞 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0eWx1cy9zdHlsdXMvaXNzdWVzLzI1MzQ=">issues-2534<i class="fa fa-external-link-alt"></i></span><br>
🛠 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaGFveWl6ZWJvLmNvbS9wb3N0cy83MTA5ODRkMC8=">solve-Accessing non-existent property<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="hexo-douban"><a class="header-anchor" href="#hexo-douban"></a>hexo-douban</h4>
<p>之前用了 hexo-douban 插件来进行对 books 和 movies 进行管理，在升级到 Node 14+版本上，当前的插件也停止工作了，异常日志如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO  0 books have been loaded in 1130 ms, because you are offline or your network is bad</span><br><span class="line">INFO  0 movies have been loaded in 1329 ms, because you are offline or your network is bad</span><br><span class="line">INFO  0 games have been loaded in 1004 ms, because you are offline or your network is bad</span><br></pre></td></tr></table></figure>
<p>作者在🐞 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL215dGhzbWFuL2hleG8tZG91YmFuL2lzc3Vlcy83Nw==">issues-2534<i class="fa fa-external-link-alt"></i></span> 做了回复，暂时没有替代方案，故在新版中，我停止了 <code>hexo-douban</code> 插件的使用，挖个坑，等自己有时间或者有人修复此问题再或者有替代插件后再重新启用</p>
<ol>
<li>移除 hexo-douban 插件 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn remove hexo-douban</span><br><span class="line"><span class="comment"># npm</span></span><br><span class="line">npm uninstall hexo-douban</span><br></pre></td></tr></table></figure>
</li>
<li>移除 <code>_config.yml</code> 配置文件中，douban 的相关的配置</li>
<li>移除 <code>_config.&#123;theme&#125;.yml</code> 配置文件中，<code>menu</code> 配置的站点入口设置</li>
</ol>
<h2 id="博客评论"><a class="header-anchor" href="#博客评论"></a>博客评论</h2>
<p>在 NexT version 8.1.0 版本，由于安全问题，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0L2lzc3Vlcy80I3Y4LjEuMCUyMCVFNyVBNyVCQiVFOSU5OSVBNCUyMFZhbGluZQ==">Valine被移除<i class="fa fa-external-link-alt"></i></span>，<s>暂时我并未迁移 Valine 的评论</s></p>
<p>博客已启用 <span class="exturl" data-url="aHR0cHM6Ly91dHRlcmFuYy5lcw==">utterances<i class="fa fa-external-link-alt"></i></span> 评论支持，配置也比较简单，如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">utterances:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">BladeCode/BladeCode.github.io</span> <span class="comment"># Github repository name</span></span><br><span class="line">  <span class="comment"># Available values: pathname | url | title | og:title</span></span><br><span class="line">  <span class="attr">issue_term:</span> <span class="string">title</span></span><br><span class="line">  <span class="comment"># Available values: github-light | github-dark | preferred-color-scheme | github-dark-orange | icy-dark | dark-blue | photon-dark | boxy-light</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">github-light</span></span><br></pre></td></tr></table></figure>
<h2 id="文章加密"><a class="header-anchor" href="#文章加密"></a>文章加密</h2>
<p>对于 NexT 的文章，有时需要进行加密访问，那么该怎么去处理呢，其实这一点在 NexT 的生态里已经有了这样的插件，我们可以直接在使用在我们的 NexT 里面，只需要简单的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># npm </span></span><br><span class="line">npm i hexo-blog-encrypt --save</span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn add hexo-blog-encrypt</span><br></pre></td></tr></table></figure>
<p>加密优先级：文章信息头 &gt; 按标签加密</p>
<h3 id="站点配置（-config-yml）"><a class="header-anchor" href="#站点配置（-config-yml）"></a>站点配置（_config.yml）</h3>
<h4 id="简单配置"><a class="header-anchor" href="#简单配置"></a>简单配置</h4>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章密码访问 hexo-blog-encrypt</span></span><br><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="更多配置"><a class="header-anchor" href="#更多配置"></a>更多配置</h4>
<p>可以对一类（标签）来进行统一的密码设置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章密码访问 hexo-blog-encrypt</span></span><br><span class="line"><span class="attr">encrypt:</span> </span><br><span class="line">  <span class="attr">abstract:</span> <span class="string">有东西被加密了,</span> <span class="string">请输入密码查看.</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">您好,</span> <span class="string">这里需要密码.</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tagNameA</span>, <span class="attr">password:</span> <span class="string">密码A</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tagNameB</span>, <span class="attr">password:</span> <span class="string">密码B</span>&#125;</span><br><span class="line">  <span class="attr">template:</span> <span class="string">&lt;div</span> <span class="string">id=&quot;hexo-blog-encrypt&quot;</span> <span class="string">data-wpm=&quot;&#123;&#123;hbeWrongPassMessage&#125;&#125;&quot;</span> <span class="string">data-whm=&quot;&#123;&#123;hbeWrongHashMessage&#125;&#125;&quot;&gt;&lt;div</span> <span class="string">class=&quot;hbe-input-container&quot;&gt;&lt;input</span> <span class="string">type=&quot;password&quot;</span> <span class="string">id=&quot;hbePass&quot;</span> <span class="string">placeholder=&quot;&#123;&#123;hbeMessage&#125;&#125;&quot;</span> <span class="string">/&gt;&lt;label&gt;&#123;&#123;hbeMessage&#125;&#125;&lt;/label&gt;&lt;div</span> <span class="string">class=&quot;bottom-line&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script</span> <span class="string">id=&quot;hbeData&quot;</span> <span class="string">type=&quot;hbeData&quot;</span> <span class="string">data-hmacdigest=&quot;&#123;&#123;hbeHmacDigest&#125;&#125;&quot;&gt;&#123;&#123;hbeEncryptedData&#125;&#125;&lt;/script&gt;&lt;/div&gt;</span></span><br><span class="line">  <span class="attr">wrong_pass_message:</span> <span class="string">抱歉,</span> <span class="string">这个密码看着不太对,</span> <span class="string">请再试试.</span></span><br><span class="line">  <span class="attr">wrong_hash_message:</span> <span class="string">抱歉,</span> <span class="string">这个文章不能被校验,</span> <span class="string">不过您还是能看看解密后的内容.</span></span><br></pre></td></tr></table></figure>
<h3 id="单文章配置"><a class="header-anchor" href="#单文章配置"></a>单文章配置</h3>
<p>在你需要加密的文章前面，根据需要添加对应的参数，这里仅是一个示例</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> 加密文章tag</span><br><span class="line">date: 2020-11-20 18:18:18</span><br><span class="line">password: helloworld</span><br><span class="line">abstract: 该文章已加密, 请输入密码查看。</span><br><span class="line">message: 该文章已加密, 请输入密码查看。</span><br><span class="line">wrong<span class="emphasis">_pass_</span>message: 密码不正确，请重新输入！</span><br><span class="line"><span class="section">wrong<span class="emphasis">_hash_</span>message: 文章不能被校验, 不过您还是能看看解密后的内容！</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<p>各参数说明</p>
<ul>
<li>password：文章密码</li>
<li>abstract：文章摘要，会显示在博客的列表页</li>
<li>message：文章查看时，密码输入框上面的描述性文字</li>
<li>wrong_pass_message：校验失败提示</li>
<li>wrong_hash_message：hash 验证失败</li>
</ul>
<h2 id="多语言"><a class="header-anchor" href="#多语言"></a>多语言</h2>
<p>对于多语言，根据自身需要添加，默认，修改博客项目根目录 <code>_connfig.yml</code> 文件 <code>language</code> 属性即可</p>
<ol>
<li>对于单语言：language: xxx（具体语言可查看下方的官方说明）</li>
<li>对于多语言：
<ul>
<li>语言添加   <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">zh-CN</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">en</span></span><br></pre></td></tr></table></figure>
</li>
<li>更改语言切换，<code>_config.&#123;theme&#125;.yml</code> 文件，<code>language_switcher</code>设置为 true</li>
</ul>
</li>
<li>字段定义，如果一些字段的翻译不是你想要的，你可以自行修改
<ul>
<li>在根目录的 <code>source/_data</code> 文件夹下，创建 <code>languages.yml</code> 文件</li>
<li>在文件中，修改对应语言的字段   <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zh-CN:</span></span><br><span class="line">  <span class="comment"># items</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">copyright:</span></span><br><span class="line">      <span class="comment"># the translation you perfer</span></span><br><span class="line">      <span class="attr">author:</span> <span class="string">本文博主</span></span><br><span class="line"><span class="attr">en:</span></span><br><span class="line">  <span class="attr">menu:</span></span><br><span class="line">    <span class="attr">schedule:</span> <span class="string">Calendar</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9waXNjZXMvZG9jcy90aGVtZS1zZXR0aW5ncy9pbnRlcm5hdGlvbmFsaXphdGlvbi5odG1sP2hpZ2hsaWdodD1sYW5ndWFnZQ==">多语言配置<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="GitHub-Action"><a class="header-anchor" href="#GitHub-Action"></a>GitHub Action</h2>
<h2 id="Hexo-PWA"><a class="header-anchor" href="#Hexo-PWA"></a>Hexo PWA</h2>
<blockquote>
<p>由于暂未支持 Hexo5.0+版本，先占坑</p>
</blockquote>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0L2lzc3Vlcy80">更新说明及常见问题<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly90b21teS5uZXQuY24vMjAyMC8wOC8wOC91cGdyYWRlLWhleG8tdG8tdjUtMC0wLw==">将 Hexo 升级到 v5.0.0<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly90b21teS5uZXQuY24vMjAyMC8wOC8wNi9kZXBsb3ktaGV4by13aXRoLWdpdGh1Yi1hY3Rpb25zLw==">用 GitHub Actions 来自动部署 Hexo<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9saW53aGl0ZWhhdC5naXRodWIuaW8vQmxvZy8yMDIwLzAyLzA5L0hleG8lRTUlOEQlOUElRTUlQUUlQTIlRTklODMlQTglRTclQkQlQjJQV0EuaHRtbA==">Hexo博客部署PWA<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zaXRvaS5jbi9wb3N0cy80OTExNS5odG1s">博客完美支持 PWA<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmRlY2F5LmZ1bi8yMDE5LzA4LzE5L2VuaGFuY2UtaGV4by13aXRoLXB3YS1pbi10aHJlZS1zdGVwcy8=">三步，让 Hexo 轻松支持 PWA<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucHdhYnVpbGRlci5jb20v">Pwabuilder<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNzY3MDQxL2FydGljbGUvZGV0YWlscy8xMDMyODUxNDc=">Hexo 相关问题和优化<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Build</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Blog 搭建</title>
    <url>/2018/03/25/hexo-blog/</url>
    <content><![CDATA[<p>之前一直纠结用<span class="exturl" data-url="aHR0cHM6Ly9qZWt5bGxyYi5jb20=">Jekyll<i class="fa fa-external-link-alt"></i></span>还是<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv">Hexo<i class="fa fa-external-link-alt"></i></span>来搭建<span class="exturl" data-url="aHR0cHM6Ly9wYWdlcy5naXRodWIuY29t">GitHub Page<i class="fa fa-external-link-alt"></i></span>博客，原本一直想搭建一个<span class="exturl" data-url="aHR0cHM6Ly9tYXRlcmlhbC5pby9ndWlkZWxpbmVz">Material Design<i class="fa fa-external-link-alt"></i></span>主题风格，从<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcw==">Hexo Themes<i class="fa fa-external-link-alt"></i></span>中寻找到一款不错的主题，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lzY29kZXIvaGV4by10aGVtZS1pbmRpZ28=">indigo<i class="fa fa-external-link-alt"></i></span>是一款支持IE10+，评论，目录导航，分享等功能的轻量Blog主题。</p>
<p>简单的修改了该主题之后，本地预览都没有什么问题，但是部署到<a href="">Github</a>上，样式什么的都无法加载，应该是我的操作姿势不对吧，调整了半天没有解决，烦躁中找到之前star的另一款很受欢迎的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lpc3NuYW4vaGV4by10aGVtZS1uZXh0">Next<i class="fa fa-external-link-alt"></i></span>主题。</p>
<p>既然自己修改的无法正常部署预览，那就用别人写好的吧，刚好赶上<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0">Next<i class="fa fa-external-link-alt"></i></span>新版本V6.0系列的推出，那就不废话，直接开干</p>
<span id="more"></span>
<h2 id="材料准备"><a class="header-anchor" href="#材料准备"></a>材料准备</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2Fk">Node LTS<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZHM=">Git<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv">Hexo<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0">Next<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2>
<p><code>Node</code>,<code>Git</code>的安装过程略</p>
<h3 id="Hexo"><a class="header-anchor" href="#Hexo"></a>Hexo</h3>
<ol>
<li>Hexo 安装 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
</li>
<li>初始化 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;your blog name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>安装依赖包 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;you blog name&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
</li>
<li>启动服务预览 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo serve</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Next"><a class="header-anchor" href="#Next"></a>Next</h3>
<ol>
<li>
<p>安装Next 主题</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当前操作在 <code>blog</code>的根目录下执行</p>
</blockquote>
</li>
<li>
<p>修改Blog 配置<br>
<code>you blog name</code> 根目录 <code>_config.yml</code></p>
<ul>
<li>theme: 由原来默认<code>landscape</code>更改位<code>next</code>(大约：76行)</li>
<li>其他配置项，根据自己的需求进行更改，我这里更改了<code>title</code>,<code>subtitle</code>,<code>author</code>,<code>language</code>,<code>url</code>配置，其中<code>language</code>如果没有修改，默认为英文语言，在V6.0系列由原来<code>zh-Hans</code>更新为<code>zh-CN</code></li>
<li>添加部署到Github配置</li>
</ul>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line"><span class="built_in">type</span>: git</span><br><span class="line">repo: https://github.com/BladeCode/BladeCode.github.io.git <span class="comment"># 用户名仓库</span></span><br><span class="line">branch: master <span class="comment"># 用户名仓库的分支应该指定master，master分支也可以不用写</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改Theme 配置<br>
路径：<code>you blog name</code>/Themes/next/_config.yml<br>
这里不罗嗦了，其配置可参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lpc3NuYW4vaGV4by10aGVtZS1uZXh0">hexo-theme-next<i class="fa fa-external-link-alt"></i></span>项目<code>README</code>文件</p>
</li>
</ol>
<h3 id="部署"><a class="header-anchor" href="#部署"></a>部署</h3>
<p>上面已经配置好了部署的目标仓库，那么这里直接使用Hexo提供的部署命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>相关命令介绍等，请查看<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3M=">官方文档说明<i class="fa fa-external-link-alt"></i></span></p>
<p>部署完成后，可以直接访问 <span class="exturl" data-url="aHR0cDovLyU2MHlvdQ==">http://`you<i class="fa fa-external-link-alt"></i></span> blog name`/github.io</p>
<h2 id="自定义域名"><a class="header-anchor" href="#自定义域名"></a>自定义域名</h2>
<p>虽然现在 blog 可以使用 Github 提供的项目二级域名来访问，为了个性化以及方便等，配置自己的域名</p>
<ol>
<li>
<p>登录域名所属的管理网站(这里以阿里云域名服务为例)<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525516603/blog/gitpages-domain-manger.png" alt="gitpages-domain-manger"></p>
</li>
<li>
<p>添加解析</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="comment"># 解析一</span></span><br><span class="line">记录类型：CNAME</span><br><span class="line">主机记录：www</span><br><span class="line">记录值：bladecode.github.io</span><br><span class="line">解析路线：default</span><br><span class="line"></span><br><span class="line">$ <span class="comment"># 解析二</span></span><br><span class="line">记录类型：A</span><br><span class="line">主机记录：@</span><br><span class="line">记录值：192.30.252.153</span><br><span class="line">解析路线：default</span><br><span class="line"></span><br><span class="line">$ <span class="comment"># 解析三</span></span><br><span class="line">记录类型：A</span><br><span class="line">主机记录：@</span><br><span class="line">记录值：192.30.252.154</span><br><span class="line">解析路线：default</span><br></pre></td></tr></table></figure>
<blockquote>
<p>192.30.252.153是GitHub的地址，你也可以ping你的 <span class="exturl" data-url="aHR0cDovL3h4eHguZ2l0aHViLmlv">http://xxxx.github.io<i class="fa fa-external-link-alt"></i></span> 的ip地址，填入进去</p>
</blockquote>
</li>
<li>
<p>修改Github上项目的domain设置<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525516630/blog/gitpages-domain-custom.png" alt="gitpages-domain-custom"></p>
</li>
<li>
<p>添加CNAME文件<br>
保存路径：<code>you blog name</code>/source<br>
新增文件：CNAME 文件 (格式要求:<code>保存成所有文件而不是txt文件</code>)<br>
CNAME 文件内容：<code>incoder.org</code></p>
</li>
</ol>
<blockquote>
<p>如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。所以建议，不要带有www</p>
</blockquote>
<h2 id="Https开启"><a class="header-anchor" href="#Https开启"></a>Https开启</h2>
<p>开启Https 需要借助<span class="exturl" data-url="aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20=">Cloudflare<i class="fa fa-external-link-alt"></i></span>，关于Cloudflare的介绍等不在这里展开</p>
<ol>
<li>注册账号</li>
<li>Add website<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525516650/blog/gitpages-https-add-site.png" alt="site"></li>
<li>Querying your DNS<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525516664/blog/gitpages-https-dns-query.png" alt="query"></li>
<li>Select Plan<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525516681/blog/gitpages-https-select-plan.png" alt="plan"></li>
<li>域名解析记录获取<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525516694/blog/gitpages-https-continue.png" alt="continue"></li>
<li>DNS 对比，并修改<a href="">Cloudflare</a>提供的DNS来解析<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525516714/blog/gitpages-https-change-dns.png" alt="change"></li>
<li>域名管理后台，修改DNS<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525516733/blog/gitpages-https-wanwang-dns.png" alt="dns">
<blockquote>
<p>阿里云服务相关域名DNS修改帮助<span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmFsaXl1bi5jb20va25vd2xlZGdlX2RldGFpbC8zOTg0NC5odG1s">文档<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
</li>
<li>成功激活<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525516756/blog/gitpages-https-active.png" alt="active"></li>
<li>SSL证书申请提醒<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525516994/blog/gitpages-https-ssl-cer.png" alt="cer"></li>
<li>添加强制HTTPS规则<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517025/blog/gitpages-https-page-rule.png" alt="rule"></li>
<li>规则制定<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517045/blog/gitpages-https-deploy-https.png" alt="deploy"></li>
</ol>
<p>好了剩下的就是等证书颁发，可能要等上一些时间，具体每个人不尽相同，这里就不多做解释了。</p>
<p>Let’s all，本次的Hexo的相关初级教程就到这里</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Build</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Blog 迭代</title>
    <url>/2018/05/02/hexo-iterative/</url>
    <content><![CDATA[<p>最初博客通过<span class="exturl" data-url="aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20=">Cloudflare<i class="fa fa-external-link-alt"></i></span>反向代理进行HTTPS解析，放完五一假期，Github官方开始支持<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmdpdGh1Yi5jb20vMjAxOC0wNS0wMS1naXRodWItcGFnZXMtY3VzdG9tLWRvbWFpbnMtaHR0cHM=">自定义域名的HTTPS解析<i class="fa fa-external-link-alt"></i></span>，在使用Cloudflare期间，经常性的521等问题烦恼，这次也可以名正言顺的弃用CloudFlare</p>
<p><strong>本次迭代内容</strong></p>
<ul>
<li>弃用Cloudflare</li>
<li>自动化部署</li>
<li>常用设置</li>
<li>常用插件安装</li>
</ul>
<span id="more"></span>
<h2 id="弃用Cloudflare"><a class="header-anchor" href="#弃用Cloudflare"></a>弃用Cloudflare</h2>
<ol>
<li>关闭Cloudflare中设置Page Rules</li>
<li>删除Cloudflare的DNS记录</li>
<li>还原域名配置中的DNS解析</li>
<li>添加Github提供的IP解析</li>
</ol>
<p><span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vYXJ0aWNsZXMvc2V0dGluZy11cC1hbi1hcGV4LWRvbWFpbi8jY29uZmlndXJpbmctYW4tYWxpYXMtb3ItYW5hbWUtcmVjb3JkLXdpdGgteW91ci1kbnMtcHJvdmlkZXI=">官方自定义域名设置<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="自动化部署"><a class="header-anchor" href="#自动化部署"></a>自动化部署</h2>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9wYWdlcy5naXRodWIuY29t">Github Pages<i class="fa fa-external-link-alt"></i></span>是Github 提供一个渲染静态的Web页面服务</p>
</blockquote>
<ul>
<li><code>&#123;username&#125;.github.io</code>仓库默认<code>master</code>分支</li>
<li>其他项目仓库，默认<code>gh-pages</code>分支</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vYXJ0aWNsZXMvdXNlci1vcmdhbml6YXRpb24tYW5kLXByb2plY3QtcGFnZXM=">官方说明文档<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>因此<code>&#123;username&#125;.github.io</code>仓库，dev分支用来存储网站的源码，<code>master</code>分支存放生成的静态文件，这样一个仓库就可以管理整个项目。每次<code>push</code>新的功能，然而每次都需要先<code>push</code>到<code>dev</code>分支，然后生成静态文件，再<code>push</code>到<code>master</code>分支，这种重复性的操作，实在太不优雅，所以采用<span class="exturl" data-url="aHR0cHM6Ly90cmF2aXMtY2kub3Jn">Travis CI<i class="fa fa-external-link-alt"></i></span>进行自动化部署</p>
<p>接着Github支持自定义域名开启HTTPS的好消息，Travis CI (<span class="exturl" data-url="aHR0cHM6Ly90cmF2aXMtY2kuY29t">https://travis-ci.com<i class="fa fa-external-link-alt"></i></span>) 也支持开源项目啦</p>
<blockquote>
<p>Travis CI 区别</p>
</blockquote>
<ul>
<li>Travis-CI(<span class="exturl" data-url="aHR0cHM6Ly90cmF2aXMtY2kub3Jn">https://travis-ci.org<i class="fa fa-external-link-alt"></i></span>) ：GitHub公开项目</li>
<li>Travis-CI(<span class="exturl" data-url="aHR0cHM6Ly90cmF2aXMtY2kuY29t">https://travis-ci.com<i class="fa fa-external-link-alt"></i></span>) ：<s>私有付费项目</s>，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRyYXZpcy1jaS5jb20vMjAxOC0wNS0wMi1vcGVuLXNvdXJjZS1wcm9qZWN0cy1vbi10cmF2aXMtY2ktY29tLXdpdGgtZ2l0aHViLWFwcHM/dXRtX3NvdXJjZT1Ccm9hZGNhc3QmdXRtX2NhbXBhaWduPTJtYXlfcmVsZWFzZQ==">2018.05.02也开始支持开源项目<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS9jaGFuZ2VzLzIwMTgtMDQtMjUtZ2l0aHViLXNlcnZpY2VzLWRlcHJlY2F0aW9u">GitHub Services are being deprecated<i class="fa fa-external-link-alt"></i></span>，因此本节的自动化部署就开启Travis CI (<span class="exturl" data-url="aHR0cHM6Ly90cmF2aXMtY2kuY29t">https://travis-ci.com<i class="fa fa-external-link-alt"></i></span>) 集成方案</p>
<h3 id="准备"><a class="header-anchor" href="#准备"></a>准备</h3>
<ol>
<li>使用GitHub账号登录Travis-CI，并确认接受访问</li>
<li>同步了GitHub存储库，转到您的配置文件页面并启用您想要构建的存储库</li>
<li>添加 <code>.travis.yml</code> 文件到构建部署项目的根目录下</li>
</ol>
<h3 id="Hexo-自动部署"><a class="header-anchor" href="#Hexo-自动部署"></a>Hexo 自动部署</h3>
<p>部署流程<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517765/blog/gitpages-travis-ci-branch-deploy.png" alt="部署流程"></p>
<p>Hexo 部署脚本示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置语言</span></span><br><span class="line">language: node_js</span><br><span class="line"><span class="comment"># 设置相应的版本</span></span><br><span class="line">node_js: </span><br><span class="line">  - <span class="string">&#x27;12.16.3&#x27;</span></span><br><span class="line">  <span class="comment"># - lts/*</span></span><br><span class="line"><span class="comment"># 可以减少travis构建时间</span></span><br><span class="line">cache:</span><br><span class="line">    directories:</span><br><span class="line">        - node_modules</span><br><span class="line">before_install:</span><br><span class="line">  <span class="comment"># - npm config set bin-links false</span></span><br><span class="line">  <span class="comment"># - npm install -g hexo</span></span><br><span class="line">  - npm install -g hexo-cli</span><br><span class="line"><span class="comment"># 安装hexo及插件</span></span><br><span class="line">install:</span><br><span class="line">  - npm install</span><br><span class="line">before_script:</span><br><span class="line">  - npm install -g mocha</span><br><span class="line">  - git <span class="built_in">clone</span> --branch master https://github.com/BladeCode/BladeCode.github.io.git public</span><br><span class="line">script:</span><br><span class="line">  <span class="comment"># 清除</span></span><br><span class="line">  - hexo cl</span><br><span class="line">  <span class="comment"># 生成</span></span><br><span class="line">  - hexo g</span><br><span class="line">after_script:</span><br><span class="line">  - <span class="built_in">cd</span> ./public</span><br><span class="line">  - git init</span><br><span class="line">  <span class="comment"># 修改成自己的github用户名</span></span><br><span class="line">  - git config user.name <span class="string">&quot;BladeCode&quot;</span></span><br><span class="line">  <span class="comment"># 修改成自己的GitHub邮箱</span></span><br><span class="line">  - git config user.email <span class="string">&quot;Jerry.x@outlook.com&quot;</span></span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -m <span class="string">&quot;update by Travis-CI on `date &#x27;+%Y-%m-%d %H:%M:%S&#x27;`&quot;</span></span><br><span class="line">  <span class="comment"># GH_token就是在travis中设置的token</span></span><br><span class="line">  - git push --force --quiet <span class="string">&quot;https://<span class="variable">$&#123;GH_TOKEN&#125;</span>@<span class="variable">$&#123;GH_REF&#125;</span>&quot;</span> master:master</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  <span class="comment"># 只监测这个分支，一有动静就开始构建</span></span><br><span class="line">  - dev</span><br><span class="line"><span class="built_in">env</span>:</span><br><span class="line">    global:</span><br><span class="line">        <span class="comment"># 设置仓库地址</span></span><br><span class="line">        - GH_REF: github.com/BladeCode/BladeCode.github.io.git</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="常用设置"><a class="header-anchor" href="#常用设置"></a>常用设置</h2>
<p><span class="exturl" data-url="aHR0cDovL3RoZW1lLW5leHQuaWlzc25hbi5jb20=">NexT 配置使用手册<i class="fa fa-external-link-alt"></i></span><br>
<a href="https://theme-next.js.org/docs/">NexT 配置使用手册 <mark class="label primary">新</mark></a></p>
<h3 id="NexT主题更新"><a class="header-anchor" href="#NexT主题更新"></a>NexT主题更新</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L2Jsb2IvbWFzdGVyL2RvY3MvemgtQ04vREFUQS1GSUxFUy5tZA==">官方说明<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="常用插件安装"><a class="header-anchor" href="#常用插件安装"></a>常用插件安装</h2>
<ul>
<li>文章字符统计 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by1zeW1ib2xzLWNvdW50LXRpbWU=">hexo-symbols-count-time<i class="fa fa-external-link-alt"></i></span></li>
<li>修复LeanCloud访客计数器中的严重安全漏洞 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by1sZWFuY2xvdWQtY291bnRlci1zZWN1cml0eQ==">hexo-leancloud-counter-security<i class="fa fa-external-link-alt"></i></span></li>
<li>图片灯箱 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvdGhlbWUtbmV4dC1mYW5jeWJveDM=">theme-next-fancybox3<i class="fa fa-external-link-alt"></i></span></li>
<li>本地检索 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by1nZW5lcmF0b3Itc2VhcmNoZGI=">hexo-generator-searchdb<i class="fa fa-external-link-alt"></i></span></li>
<li>注脚 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NIRU5YQ0hFTi9oZXhvLXJlbmRlcmVyLW1hcmtkb3duLWl0LXBsdXM=">hexo-renderer-markdown-it-plus<i class="fa fa-external-link-alt"></i></span></li>
<li>文章加密 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0QwbjlYMW4vaGV4by1ibG9nLWVuY3J5cHQ=">hexo-blog-encrypt<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="其他"><a class="header-anchor" href="#其他"></a>其他</h2>
<h3 id="图床选择"><a class="header-anchor" href="#图床选择"></a>图床选择</h3>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qaW1teXNvbmcuaW8vcG9zdHMvc3RhdGljLXdlYnNpdGUtc3RvcmFnZQ==">个人网站中的静态文件云存储选择<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zc3BhaS5jb20vcG9zdC80MDQ5OQ==">嗯，图片就交给它了<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lpc3NuYW4vaGV4by10aGVtZS1uZXh0L2lzc3Vlcy85MzI=">NexT主题无法备份解决方式<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Build</tag>
      </tags>
  </entry>
  <entry>
    <title>Hugo 初体验</title>
    <url>/2018/07/11/hugo/</url>
    <content><![CDATA[<p>个人博客使用 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2luZGV4Lmh0bWw=">Hexo<i class="fa fa-external-link-alt"></i></span> 搭建，使用效果很不错，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Jvb3RDbHVzdGVy">RootCluster<i class="fa fa-external-link-alt"></i></span> 组织主要存放自己新技术的学习和一些Demo实验。该组织同样也可以使用Github pages服务，因此也需要给RootCluster构建一个静态页面，可用直观清晰的看自己的项目，虽然之前已使用Hexo构建，为了了解其他的静态页面构建，所以这次选择了 <span class="exturl" data-url="aHR0cHM6Ly9nb2h1Z28uaW8=">Hugo<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9nb2h1Z28uaW8=">Hugo<i class="fa fa-external-link-alt"></i></span> 是世界上最快的静态网站引擎。它是用 <span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcub3Jn">Go<i class="fa fa-external-link-alt"></i></span>（aka Golang）编写的，由 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JlcA==">bep<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwZjEz">spf13<i class="fa fa-external-link-alt"></i></span> 和<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvaHVnb2lvL2h1Z28vZ3JhcGhzL2NvbnRyaWJ1dG9ycw==">朋友<i class="fa fa-external-link-alt"></i></span>开发</p>
<span id="more"></span>
<h2 id="材料准备"><a class="header-anchor" href="#材料准备"></a>材料准备</h2>
<ul>
<li>SystemOS：Windows 10</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jaG9jb2xhdGV5Lm9yZw==">Chocolatey<i class="fa fa-external-link-alt"></i></span>：Windows的包管理器</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9nb2h1Z28uaW8vZ2V0dGluZy1zdGFydGVkL2luc3RhbGxpbmc=">Hugo<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2>
<h3 id="Chocolatey安装"><a class="header-anchor" href="#Chocolatey安装"></a>Chocolatey安装</h3>
<p>如果已安装，跳过该步骤</p>
<ul>
<li>使用 PowerShell.exe  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://chocolatey.org/install.ps1&#x27;))</span><br></pre></td></tr></table></figure>
</li>
<li>使用 cmd.exe  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="string">&quot;%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe&quot;</span> -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command <span class="string">&quot;iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://chocolatey.org/install.ps1&#x27;))&quot;</span> &amp;&amp; SET <span class="string">&quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>以上两种方式，选择其一即可</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1531314279/blog/hugo_install.png" alt="PowerShell.exe 演示"></p>
<h3 id="hugo安装"><a class="header-anchor" href="#hugo安装"></a>hugo安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">choco install hugo -confirm</span><br></pre></td></tr></table></figure>
<h3 id="初始化Hugo"><a class="header-anchor" href="#初始化Hugo"></a>初始化Hugo</h3>
<ul>
<li>
<p>初始化hugo模板</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hugo new site project_name</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>进入项目并启动项目</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> project_name &amp;&amp; hugo serve</span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1531314737/blog/hugo_init.png" alt="hugo_init"></p>
</li>
<li>
<p><span class="exturl" data-url="aHR0cHM6Ly90aGVtZXMuZ29odWdvLmlv">主题安装<i class="fa fa-external-link-alt"></i></span></p>
<p>这里选择<span class="exturl" data-url="aHR0cHM6Ly90aGVtZXMuZ29odWdvLmlvL2h1Z28tZWxhdGUtdGhlbWU=">Elate<i class="fa fa-external-link-alt"></i></span>主题作为组织的网站</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1531316293/blog/hugo_theme.png" alt=""></p>
</li>
</ul>
<h2 id="GitHub-Action-部署"><a class="header-anchor" href="#GitHub-Action-部署"></a>GitHub Action 部署</h2>
<ol>
<li>新生成部署 key</li>
</ol>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 进入本地电脑的 .ssh 文件夹</span> </span><br><span class="line">cd .ssh/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 生成部署 key</span></span><br><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;Jerry.x@outlook.com&quot; -f id_rsa_deploy -N &quot;&quot;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>添加部署 key 到项目仓库设置中</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is a basic workflow to help you get started with Actions</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls when the action will run. </span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># Triggers the workflow on push or pull request events but only for the master branch</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Allows you to run this workflow manually from the Actions tab</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># This workflow contains a single job called &quot;build&quot;</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># The type of runner that the job will run on</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Steps represent a sequence of tasks that will be executed as part of the job</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment"># Runs a single command using the runners shell</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hugo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-hugo@v2.3.1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">hugo-version:</span> <span class="string">&#x27;0.61.0&#x27;</span></span><br><span class="line">      <span class="comment"># Runs a set of commands using the runners shell</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">hugo</span> <span class="string">--minify</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">          <span class="attr">commit_message:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="Travis"><a class="header-anchor" href="#Travis"></a>Travis</h3>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">go</span></span><br><span class="line"></span><br><span class="line"><span class="attr">go:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">master</span>  <span class="comment"># 使用最新版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify which branches to build using a safelist</span></span><br><span class="line"><span class="comment"># 分支白名单限制: 只有hugo分支的提交才会触发构建</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="comment"># 安装最新的hugo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">go</span> <span class="string">get</span> <span class="string">-v</span> <span class="string">github.com/gohugoio/hugo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="comment"># 运行hugo命令</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hugo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span> <span class="comment"># 重要，指定这是一份github pages的部署配置</span></span><br><span class="line">  <span class="attr">skip-cleanup:</span> <span class="literal">true</span> <span class="comment"># 重要，不能省略</span></span><br><span class="line">  <span class="attr">local-dir:</span> <span class="string">public</span> <span class="comment"># 静态站点文件所在目录</span></span><br><span class="line">  <span class="attr">target-branch:</span> <span class="string">master</span> <span class="comment"># 要将静态站点文件发布到哪个分支</span></span><br><span class="line">  <span class="attr">github-token:</span> <span class="string">$GITHUB_TOKEN</span> <span class="comment"># 重要，$GITHUB_TOKEN是变量，需要在GitHub上申请、再到配置到Travis</span></span><br><span class="line">  <span class="attr">keep-history:</span> <span class="literal">true</span> <span class="comment"># 是否保持target-branch分支的提交记录</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">dev</span> <span class="comment"># 博客源码的分支</span></span><br></pre></td></tr></table></figure>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9nb2h1Z28uaW8vZG9jdW1lbnRhdGlvbi8=">Hugo Documentation<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hcmtldHBsYWNlL2FjdGlvbnMvaHVnby1zZXR1cA==">Hugo setup<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Hugo</category>
      </categories>
      <tags>
        <tag>Build</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA 多模块项目</title>
    <url>/2019/01/10/idea-multi-module/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbQ==">Jetbrains<i class="fa fa-external-link-alt"></i></span>系列中<span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9pZGVh">IDEA<i class="fa fa-external-link-alt"></i></span>是现如今公认最好用，最强大的Java开发工具，不接受任何反驳，本篇介绍macOS上使用 IDEA 创建 SpringBoot 多模块项目</p>
<h2 id="准备工作"><a class="header-anchor" href="#准备工作"></a>准备工作</h2>
<ul>
<li>系统环境：macOS 10.14.2</li>
<li>应用工具：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9pZGVh">IDEA<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9tYXZlbi5hcGFjaGUub3Jn">Maven<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<blockquote>
<p>这里不再介绍基本软件的安装及配置</p>
</blockquote>
<span id="more"></span>
<h2 id="多模块项目"><a class="header-anchor" href="#多模块项目"></a>多模块项目</h2>
<p>一般简单的项目，按照如下项目结构进行构建，可根据也无需要自行调整</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rc-springboot-docker</span><br><span class="line">  ├── boot-api           # 项目对应用服务间提供api的接口，同时也管理项目常量、REST返回组装实体类等</span><br><span class="line">  ├── boot-common        # 项目公共基础包（可丢弃）</span><br><span class="line">  ├── boot-core          # 项目业务操作，server dao层</span><br><span class="line">  ├── boot-web           # 项目后端Web管理</span><br><span class="line">  ├── boot-rest          # 项目业务控制层，给客户端提供rest接口</span><br><span class="line">  └── README.md</span><br></pre></td></tr></table></figure>
<ul>
<li>boot-api：是一个maven module</li>
<li>boot-common：是一个maven module</li>
<li>boot-core：是一个maven module</li>
<li>boot-web：是一个springboot module</li>
<li>boot-rest：是一个springboot module</li>
</ul>
<h2 id="构建"><a class="header-anchor" href="#构建"></a>构建</h2>
<h3 id="Parent-Project"><a class="header-anchor" href="#Parent-Project"></a>Parent Project</h3>
<p>顾名思义，这是项目的外壳，一个标准的empty maven project，当然你要可以使用gradle来作为项目的构建工具，可根据自身需要自行选择，这里采用maven方式演示</p>
<ul>
<li>
<p><code>Create Project</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1547062782/blog/idea-new-project.png" alt="idea-new-project"></p>
</li>
<li>
<p>设置项目groupId和artifactId等信息<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1547062780/blog/idea-new-setting.png" alt="idea-new-setting"></p>
</li>
<li>
<p>设置项目名称及项目存储位置<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1547062780/blog/idea-new-path.png" alt="idea-new-path"></p>
</li>
<li>
<p>删除项目src目录，使项目成为名副其实的空项目<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1547062780/blog/idea-delete-src.png" alt="idea-delete-src"></p>
</li>
<li>
<p>新增忽略文件<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1547062782/blog/idea-new-ignore.png" alt="idea-new-ignore"><br>
新增忽略文件的目的：</p>
<ol>
<li>忽略项目中不需要进行版本追踪的文件</li>
<li>隐藏忽略文件</li>
</ol>
</li>
<li>
<p>选择maven项目模板忽略文件<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1547062782/blog/idea-select-maven.png" alt="idea-select-maven"></p>
</li>
<li>
<p>修改忽略文件及隐藏忽略文件<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1547062781/blog/idea-ignore-settings.png" alt="idea-ignore-settings"></p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># IntelliJ project files</span><br><span class="line">.DS_Store</span><br><span class="line">.idea/</span><br><span class="line">*.iml</span><br><span class="line">out</span><br><span class="line">gen</span><br><span class="line"></span><br><span class="line"># eclipse</span><br><span class="line">*.classpath</span><br><span class="line">*.project</span><br><span class="line">*.springBeans</span><br></pre></td></tr></table></figure>
<blockquote>
<p>关于ignore文件的写法，可以参考<a href="https://incoder.org/2018/04/13/gitignore/">.gitignore 基础知识</a></p>
</blockquote>
</li>
</ul>
<h3 id="Module-Project"><a class="header-anchor" href="#Module-Project"></a>Module Project</h3>
<p>在module中有两类，一类是maven项目，还有一类是需要启动的springboot项目</p>
<h4 id="maven-module-project"><a class="header-anchor" href="#maven-module-project"></a>maven module project</h4>
<ul>
<li>创建maven module<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1547066735/blog/idea-module-maven.png" alt="idea-module-maven"></li>
<li>设置maven module artifactId等信息<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1547066737/blog/idea-module-maven-artifact.png" alt="idea-module-maven-artifact"></li>
<li>设置maven module 名称及存储位置<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1547066735/blog/idea-module-maven-name.png" alt="idea-module-maven-name"></li>
</ul>
<h4 id="springboot-module-project"><a class="header-anchor" href="#springboot-module-project"></a>springboot module project</h4>
<ul>
<li>创建springboot module<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1547066076/blog/idea-new-module-springboot.png" alt="idea-new-module-springboot"></li>
<li>设置springboot module 信息<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1547066075/blog/idea-module-metadata.png" alt="idea-module-metadata"></li>
<li>选择核心组件<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1547066076/blog/idea-module-springboot-core.png" alt="idea-module-springboot-core"></li>
<li>设置springboot module 名称及存储位置<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1547066076/blog/idea-module-springboot-name.png" alt="idea-module-springboot-name"></li>
</ul>
<h3 id="Modify-Config"><a class="header-anchor" href="#Modify-Config"></a>Modify Config</h3>
<h4 id="Modify-parent-pom"><a class="header-anchor" href="#Modify-parent-pom"></a>Modify parent pom</h4>
]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Init</tag>
      </tags>
  </entry>
  <entry>
    <title>开发小技巧</title>
    <url>/2019/01/02/idea-skill/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvQW5kcm9pZF9TdHVkaW8=">Android Studio<i class="fa fa-external-link-alt"></i></span> 是Google基于JetBrains的 <span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9pZGVh">IntelliJ IDEA<i class="fa fa-external-link-alt"></i></span> 所定制开发的 Android 开发 IDE。因此这里的设置适用于 JetBrains 公司系列的开发工具，同样也适用于 Android Studio，这是一篇持续更新的文章，在平时的使用过程中一些习惯性的模板化的一些设置，可以减少我们一些重复性的操作，进而提高开发效率。</p>
<span id="more"></span>
<h2 id="设置"><a class="header-anchor" href="#设置"></a>设置</h2>
<p>快捷键：</p>
<ul>
<li>Windows：<code>Ctrl</code>+<code>Alt</code>+<code>S</code></li>
<li>macOS：<code>⌘</code>+<code>,</code></li>
</ul>
<h3 id="样式"><a class="header-anchor" href="#样式"></a>样式</h3>
<h4 id="约束提示-空格及缩进"><a class="header-anchor" href="#约束提示-空格及缩进"></a>约束提示/空格及缩进</h4>
<ul>
<li>描述：
<ul>
<li>为了约束编写的代码过长而不换行，在代码编辑面板右侧右侧有个条竖线进行约束和警示，当然你可以关闭</li>
<li>为了工整的显示代码的空格和换行是否正确，可以开启显示空格和缩进等样式</li>
</ul>
</li>
</ul>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1546416652/blog/idea-skill-line.png" alt="idea-skill-line"></p>
<h4 id="窗口打开全部展示"><a class="header-anchor" href="#窗口打开全部展示"></a>窗口打开全部展示</h4>
<ul>
<li>描述：为了在编辑器中展示全部打开的文件(不限制在同一行)<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1562844691/blog/idea-open-windows-limit.png" alt="idea-open-windows-limit"></li>
</ul>
<h3 id="颜色"><a class="header-anchor" href="#颜色"></a>颜色</h3>
<h4 id="局部变量"><a class="header-anchor" href="#局部变量"></a>局部变量</h4>
<ul>
<li>描述：为了直观的区分出全局变量和局部变量，而不需要仔细阅读代码<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1546417187/blog/idea-skill-local.png" alt="idea-skill-local"></li>
</ul>
<h4 id="控制台日志"><a class="header-anchor" href="#控制台日志"></a>控制台日志</h4>
<ul>
<li>描述：为了直观在控制台上显示不同级别日志<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1562845142/blog/idea-logcat-color.png" alt="idea-logcat-color"></li>
</ul>
<p>颜色推荐：</p>
<ul>
<li><font color=#AA66CC>Assert：AA66CC</font></li>
<li><font color=#33B5E5>Debug：33B5E5</font></li>
<li><font color=#FF6B68>Error：FF6B68</font></li>
<li><font color=#99CC00>Info：99CC00</font></li>
<li><font color=#BBBBBB>Verbose：BBBBBB</font></li>
<li><font color=#FFBB33>Warning：FFBB33</font></li>
</ul>
<h3 id="其他"><a class="header-anchor" href="#其他"></a>其他</h3>
<h4 id="Toolbar添加设置按钮"><a class="header-anchor" href="#Toolbar添加设置按钮"></a>Toolbar添加设置按钮</h4>
<ul>
<li>描述：在不方便使用快捷键打开设置时，原本的操作是：File–&gt;Settings Repository…，因此调整到状态栏上<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1546417198/blog/idea-skill-settings.png" alt="idea-skill-settings"></li>
</ul>
<h4 id="不区分大小写"><a class="header-anchor" href="#不区分大小写"></a>不区分大小写</h4>
<ul>
<li>描述：在编码过程中，通常一些智能提示需要根据输入的支付来提示，而大小写不同对应的提示也不完全一致，因此取消智能提示对大小写字符的要求<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1546416873/blog/idea-skill-case.png" alt="idea-skill-case"></li>
</ul>
<h4 id="自动导包"><a class="header-anchor" href="#自动导包"></a>自动导包</h4>
<ul>
<li>描述：在编码过程中，一些无用或者需要引入的包，可设置成自动的方式，当无法自动导入或移除无用包时，再手动的去选择处理<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1546416872/blog/idea-skill-auto.png" alt="idea-skill-auto"></li>
</ul>
<h4 id="字段默认前缀"><a class="header-anchor" href="#字段默认前缀"></a>字段默认前缀</h4>
<ul>
<li>描述：为了让代码规范，我们会对变量前面设置默认前缀，那么 idea 也是支持<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1562845918/blog/idea-field-prefix.png" alt="idea-field-prefix"></li>
</ul>
<h2 id="常用技巧"><a class="header-anchor" href="#常用技巧"></a>常用技巧</h2>
<h2 id="编码技巧"><a class="header-anchor" href="#编码技巧"></a>编码技巧</h2>
<h2 id="调试技巧"><a class="header-anchor" href="#调试技巧"></a>调试技巧</h2>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2p1ZGFzbi9JbnRlbGxpSi1JREVBLVR1dG9yaWFs">IntelliJ-IDEA-Tutorial<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>DevTool</category>
      </categories>
      <tags>
        <tag>Android Studio</tag>
        <tag>JetBrains</tag>
      </tags>
  </entry>
  <entry>
    <title>JetBrains 系列激活</title>
    <url>/2020/02/27/idea-welfare/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/incoder/image/upload/v1582782666/blog/idea.png" alt=""></p>
<span id="more"></span>
<p>位于捷克的布拉格的<span class="exturl" data-url="aHR0cHM6Ly9qZXRicmFpbnMuY29t">JetBrains<i class="fa fa-external-link-alt"></i></span>公司你可能不是很熟悉，但在开发的江湖中你一定听过他的名号，“<strong>Java 开发最好用 IDE，没有之一</strong>”，产品很好，但价格也不便宜。虽然有学生优惠，但对于非学生用户来说也是不小的开支。如果你想支持正版，官方还提供了一个开源项目渠道，你可以用你的开源项目进行申请，申请通过可以获得一年JetBrains全家桶的使用权限，这么好的福利当然不能错过。</p>
<p>我们先看看正常<strong>个人订阅</strong>价格图，IDEA：$149.00/1st year，全家桶产品：$249.00/1st year<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1582782335/blog/idea-price.png" alt="idea-price"><br>
如果你工资比较高，建议还是支持一下，废话不多说，我们一起来看看怎么通过开源项目申请使用产品</p>
<p>申请地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9zaG9wL2Vmb3JtL29wZW5zb3VyY2U/cHJvZHVjdD1BTEw=">https://www.jetbrains.com/shop/eform/opensource?product=ALL<i class="fa fa-external-link-alt"></i></span></p>
<p>按照实际情况填写，大概一周左右，申请通过，JetBrains官方会发送邮件给你，你只需要按照邮件内的文件继续按照步骤进行操作，就可以获得 1 年的使用权限</p>
]]></content>
      <categories>
        <category>DevTool</category>
      </categories>
      <tags>
        <tag>JetBrains</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 年秋季面试经历</title>
    <url>/2020/11/15/interview-2020/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试……" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7df5a630483ac756d9ef49dddde6909b3a7656915830d435fb5c23cae727eaa5"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这里需要密码才能访问</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Summary</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 常用应用安装</title>
    <url>/2018/05/15/linux-build/</url>
    <content><![CDATA[<p>作为 Android 开发者，目标主要是在客户端，平时也就是和服务端对接数据接口，很少直接干到服务端的 Linux 机器，随着这波推动团队技术平台基础开发工具模块的完善，拿到了一台 Linux 机器，重新构建移动端的测试服务器。</p>
<p>该机器主要功能：</p>
<ol>
<li>提供移动端服务 Api 接口</li>
<li>提供移动端通讯录管理授权服务</li>
<li>提供企业微信通讯录同步服务</li>
<li>管理移动端服务器 Api 接口文档</li>
</ol>
<span id="more"></span>
<p>也是第一次正式的从头开始安装所需软件及应用部署，虽然这些工作可以完全找运维去处理，难得这样的机会从头开始去熟悉 Linux。</p>
<p><strong>安卓，是一个基于Linux内核的开放源代码移动操作系统</strong>，因此多了解 Linux 是一件双赢的事情，基于当前机器需要提供的服务，安装部署需要的软件应用</p>
<blockquote class="blockquote-center">废话不多说，上来就是干</blockquote>
<p>和 Windows 一样不同的系统，安装的软件也是有区别的，而且 Linux 的系统众多，因此需要先查看系统的版本及相关信息，然后再下载对应系统版本的应用进行安装</p>
<h2 id="查看-Linux-发行版的名称及其版本号"><a class="header-anchor" href="#查看-Linux-发行版的名称及其版本号"></a>查看 Linux 发行版的名称及其版本号</h2>
<h3 id="查看内核"><a class="header-anchor" href="#查看内核"></a>查看内核</h3>
<ol>
<li><code>cat /proc/version</code> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[dc2-user@10-255-0-191 ~]$ cat /proc/version</span><br><span class="line">Linux version 3.10.0-957.27.2.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC) ) #1 SMP Mon Jul 29 17:46:05 UTC 2019</span><br></pre></td></tr></table></figure>
</li>
<li><code>uname -a</code> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[dc2-user@10-255-0-191 ~]$ uname -a</span><br><span class="line">Linux 10-255-0-191 3.10.0-957.27.2.el7.x86_64 #1 SMP Mon Jul 29 17:46:05 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="查看-Linux-系统版本"><a class="header-anchor" href="#查看-Linux-系统版本"></a>查看 Linux 系统版本</h3>
<ol>
<li><code>lsb_release -a</code>：列出所有版本信息 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[dc2-user@10-255-0-191 ~]$ lsb_release -a</span><br><span class="line">LSB Version:	:core-4.1-amd64:core-4.1-noarch</span><br><span class="line">Distributor ID:	CentOS</span><br><span class="line">Description:	CentOS Linux release 7.6.1810 (Core)</span><br><span class="line">Release:	7.6.1810</span><br><span class="line">Codename:	Core</span><br></pre></td></tr></table></figure>
</li>
<li><code>cat /etc/redhat-release</code>：只适合 Redhat 系的 Linux <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[dc2-user@10-255-0-191 ~]$ cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br></pre></td></tr></table></figure>
</li>
<li><code>cat /etc/issue</code>：此命令也适用于所有的 Linux 发行版 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/issue</span><br><span class="line">CentOS release 6.7 (Final)</span><br><span class="line">Kernel \r on an \m</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Java"><a class="header-anchor" href="#Java"></a>Java</h2>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5vcmFjbGUuY29tL3RlY2huZXR3b3JrL2phdmEvamF2YXNlL2Rvd25sb2Fkcy9pbmRleC5odG1s">官方下载地址<i class="fa fa-external-link-alt"></i></span>，选择需要的版本下载安装包</p>
<blockquote>
<p>官方提供了<code>.rpm</code>,<code>.gz</code>两种格式安装包</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 下载安装包</span></span><br><span class="line"><span class="comment">#    拷贝安装包到需要安装的服务器</span></span><br><span class="line"><span class="comment"># 2. 解压并安装</span></span><br><span class="line"><span class="comment">#   .rpm 格式安装(jdk-xxx.rpm更换成对应的文件名)</span></span><br><span class="line">sudo rpm -ivh jdk-xxx.rpm</span><br><span class="line"><span class="comment">#   .gz 格式安装(解压到指定目录，常存放 /usr/java/ 路径)</span></span><br><span class="line">tar zxvf jdk-xxx.tar.gz -C /usr/java/</span><br><span class="line"><span class="comment"># 3. 设置环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 指定 JDK 的配置信息(修改这里路径，指向 jdk 安装路径)</span></span><br><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_172</span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME PATH CLASSPATH</span><br><span class="line"><span class="comment"># 4. 编译配置文件，使修改生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 5. 验证 jdk 是否安装成功</span></span><br><span class="line">java –version</span><br></pre></td></tr></table></figure>
<h2 id="Tomcat"><a class="header-anchor" href="#Tomcat"></a>Tomcat</h2>
<p><span class="exturl" data-url="aHR0cDovL3RvbWNhdC5hcGFjaGUub3Jn">官方下载地址<i class="fa fa-external-link-alt"></i></span>，选择需要的版本下载安装包</p>
<blockquote>
<p>官方提供了<code>.zip</code>,<code>.gz</code>两种格式安装包，Linux服务器下载<code>Core</code>类即可</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 下载安装文件</span></span><br><span class="line">wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-9/v9.0.8/bin/apache-tomcat-9.0.8.tar.gz</span><br><span class="line"><span class="comment"># 2. 解压安装文件(解压到指定目录，常存放 /usr/tomcat/ 路径)</span></span><br><span class="line">tar -zxvf apache-tomcat-9.0.8.tar.gz -C /usr/tomcat/</span><br><span class="line"><span class="comment"># 3. 启动 tomcat</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/tomcat/bin</span><br><span class="line">./startup.sh</span><br><span class="line"><span class="comment"># 4. 关闭 tomcat</span></span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure>
<h3 id="配置Web管理账号"><a class="header-anchor" href="#配置Web管理账号"></a>配置Web管理账号</h3>
<ul>
<li>修改文件 conf/tomcat-users.xml，在元素中添加帐号密码，需要指定角色  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/local/tomcat/conf/tomcat-users.xml</span><br><span class="line"><span class="comment">#   &lt;tomcat-users&gt;</span></span><br><span class="line"><span class="comment">#       &lt;user name=&quot;admin&quot; password=&quot;admin&quot; roles=&quot;admin-gui,manager-gui&quot; /&gt;</span></span><br><span class="line"><span class="comment">#   &lt;/tomcat-users&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="配置端口"><a class="header-anchor" href="#配置端口"></a>配置端口</h3>
<ul>
<li>可以修改 conf 目录下的文件 server.xml，修改 Connector 元素(Tomcat 的默认端口是 8080)，需要重新启动 Tomcat 服务生效  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/local/tomcat/conf/server.xml</span><br><span class="line"><span class="comment"># &lt;Connector port=&quot;9999&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt; </span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="应用部署"><a class="header-anchor" href="#应用部署"></a>应用部署</h3>
<ul>
<li>放置需部署包到容器中 <code>webapps</code> 路径  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/tomcat/webapps</span><br></pre></td></tr></table></figure>
</li>
<li>启动服务  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/tomcat/bin</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Maven"><a class="header-anchor" href="#Maven"></a>Maven</h2>
<p><span class="exturl" data-url="aHR0cDovL3RvbWNhdC5hcGFjaGUub3JnLw==">官方网站<i class="fa fa-external-link-alt"></i></span>，选择需要的版本下载</p>
<ul>
<li>官方 Maven: <span class="exturl" data-url="aHR0cHM6Ly9tYXZlbi5hcGFjaGUub3JnLw==">https://maven.apache.org/<i class="fa fa-external-link-alt"></i></span></li>
<li>Maven 下载地址: <span class="exturl" data-url="aHR0cHM6Ly9tYXZlbi5hcGFjaGUub3JnL2Rvd25sb2FkLmNnaQ==">https://maven.apache.org/download.cgi<i class="fa fa-external-link-alt"></i></span></li>
<li>Maven 历史版本: <span class="exturl" data-url="aHR0cHM6Ly9hcmNoaXZlLmFwYWNoZS5vcmcvZGlzdC9tYXZlbi9tYXZlbi0zLw==">https://archive.apache.org/dist/maven/maven-3/<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="安装"><a class="header-anchor" href="#安装"></a>安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载文件 Maven 文件</span></span><br><span class="line">wget https://mirrors.bfsu.edu.cn/apache/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz</span><br><span class="line"><span class="comment"># 解压 Maven 文件</span></span><br><span class="line">tar -xvf  apache-maven-3.8.1-bin.tar.gz</span><br><span class="line"><span class="comment"># 移动 Maven 文件到 /usr/local/ 路径</span></span><br><span class="line">sudo <span class="built_in">mv</span> -f apache-maven-3.8.1 /usr/local/</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a class="header-anchor" href="#配置"></a>配置</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑环境配置</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 添加如下环境变量，文件末尾添加如下代码</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/usr/local/apache-maven-3.8.1</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$&#123;MAVEN_HOME&#125;</span>/bin</span><br><span class="line"><span class="comment"># 使环境变量生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<h3 id="验证"><a class="header-anchor" href="#验证"></a>验证</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure>
<p>如果需要更改 Maven 的镜像源，可参考 <a href="https://incoder.org/2020/02/27/fuck-gfw/#Maven">专治各种网络不服</a> 文章</p>
<h2 id="Apache"><a class="header-anchor" href="#Apache"></a>Apache</h2>
<p>一般系统中已经包含 Apache 应用<br>
<span class="exturl" data-url="aHR0cDovL2h0dHBkLmFwYWNoZS5vcmcvZG93bmxvYWQuY2dp">官方下载地址<i class="fa fa-external-link-alt"></i></span>，选择需要的版本下载安装包</p>
<blockquote>
<p>官方提供了<code>.bz2</code>,<code>.gz</code>两种格式安装包</p>
</blockquote>
<h3 id="安装-v2"><a class="header-anchor" href="#安装-v2"></a>安装</h3>
<p>查看系统中是否已包含 httpd 应用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep httpd</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">yum list | grep httpd</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>方式一</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 下载需要的版本文件</span></span><br><span class="line">wget http://apache.claz.org//httpd/httpd-2.4.33.tar.gz</span><br><span class="line"><span class="comment"># 2. 解压安装文件(解压到指定目录，常存放 /usr/local/httpd/ 路径)</span></span><br><span class="line">tar -zxvf httpd-2.4.33.tar.gz -C /usr/local/httpd/</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>方式二(推荐)</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.下载安装 httpd</span></span><br><span class="line">yum install httpd</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="卸载"><a class="header-anchor" href="#卸载"></a>卸载</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum erase httpd.x86_64</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">rpm -e httpd.x86_64</span><br></pre></td></tr></table></figure>
<h3 id="常用命令"><a class="header-anchor" href="#常用命令"></a>常用命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看服务运行状态</span></span><br><span class="line">systemctl status httpd.service</span><br><span class="line"><span class="comment"># 启动 apache 服务</span></span><br><span class="line">systemctl start httpd.service</span><br><span class="line"><span class="comment"># 停止 apache 服务</span></span><br><span class="line">systemctl stop httpd.service</span><br></pre></td></tr></table></figure>
<p>RPM默认安装路径：</p>
<table>
<thead>
<tr>
<th>路径</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>/etc</td>
<td>一些设置文件放置的目录如 /etc/crontab</td>
</tr>
<tr>
<td>/usr/bin</td>
<td>一些可执行文件</td>
</tr>
<tr>
<td>/usr/lib</td>
<td>一些程序使用的动态函数库</td>
</tr>
<tr>
<td>/usr/share/doc</td>
<td>一些基本的软件使用手册与帮助文档</td>
</tr>
<tr>
<td>/usr/share/man</td>
<td>一些 man page 文件</td>
</tr>
</tbody>
</table>
<h2 id="Nginx"><a class="header-anchor" href="#Nginx"></a>Nginx</h2>
<p><span class="exturl" data-url="aHR0cDovL25naW54Lm9yZy9kb3dubG9hZA==">官方下载地址<i class="fa fa-external-link-alt"></i></span>，选择需要的版本下载安装包(最新安装版本 1.14.0)</p>
<blockquote>
<p>官方提供了<code>.zip</code>,<code>.gz</code>两种格式安装包</p>
</blockquote>
<h3 id="安装-v3"><a class="header-anchor" href="#安装-v3"></a>安装</h3>
<ul>
<li>
<p>方式一</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 下载安装文件</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.14.0.tar.gz</span><br><span class="line"><span class="comment"># 2. 解压安装文件(解压到指定目录，常存放 /usr/local/ 路径)</span></span><br><span class="line">tar -zxvf nginx-1.14.0.tar.gz -C /usr/local/</span><br><span class="line"><span class="comment"># 3.  编译安装依赖库</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/nginx/</span><br><span class="line">./configure</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>方式二</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认安装路径 /etc/nginx/</span></span><br><span class="line">yum install nginx</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="常用命令-v2"><a class="header-anchor" href="#常用命令-v2"></a>常用命令</h3>
<ul>
<li>加压文件安装常用命令  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止 ngix</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s quit</span><br><span class="line"><span class="comment"># 重新载入 nginx(当配置信息发生修改时)       </span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line"><span class="comment"># 查看版本     </span></span><br><span class="line">/usr/local/nginx/sbin/nginx -v</span><br><span class="line"><span class="comment"># 查看 nginx 的配置文件的目录            </span></span><br><span class="line">/usr/local/nginx/sbin/nginx -t</span><br><span class="line"><span class="comment"># 查看帮助信息            </span></span><br><span class="line">/usr/local/nginx/sbin/nginx -h            </span><br></pre></td></tr></table></figure>
</li>
<li>yum安装常用命令  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"><span class="comment"># 停止 </span></span><br><span class="line">systemctl stop nginx</span><br><span class="line"><span class="comment"># 重启 </span></span><br><span class="line">systemctl restart nginx</span><br><span class="line"><span class="comment"># 查看运行状态 </span></span><br><span class="line">systemctl status nginx</span><br><span class="line"><span class="comment"># 开机启动 </span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx </span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Node"><a class="header-anchor" href="#Node"></a>Node</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3Jn">官方下载地址<i class="fa fa-external-link-alt"></i></span>，选择需要的版本下载安装包</p>
<blockquote>
<p>官方提供了<code>.gz</code>,<code>.7z</code>,<code>zip</code>等多种格式安装包</p>
</blockquote>
<h3 id="安装-v4"><a class="header-anchor" href="#安装-v4"></a>安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 下载安装文件</span></span><br><span class="line">wget https://nodejs.org/download/chakracore-release/v8.6.0/node-v8.6.0-linux-x64.tar.gz</span><br><span class="line"><span class="comment"># 2. 解压安装文件(解压到当前目录)</span></span><br><span class="line">tar -zxf node-v8.6.0-linux-x64.tar.gz</span><br><span class="line"><span class="comment"># 3. 建立软链接，实现全局访问</span></span><br><span class="line"><span class="built_in">ln</span> -s /root/node-v8.6.0-linux-x64/bin/node /usr/local/bin/node</span><br><span class="line"><span class="built_in">ln</span> -s /root/node-v8.6.0-linux-x64/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure>
<h2 id="Redis"><a class="header-anchor" href="#Redis"></a>Redis</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9yZWRpcy5pby9kb3dubG9hZA==">官方下载地址<i class="fa fa-external-link-alt"></i></span>，选择需要的版本下载安装包</p>
<blockquote>
<p>官方提供了<code>.gz</code>格式安装包</p>
</blockquote>
<h3 id="安装-v5"><a class="header-anchor" href="#安装-v5"></a>安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 下载安装文件</span></span><br><span class="line">wget wget http://download.redis.io/releases/redis-4.0.10.tar.gz</span><br><span class="line"><span class="comment"># 2. 解压安装文件(解压到当前目录)</span></span><br><span class="line">tar xzf redis-4.0.10.tar.gz</span><br><span class="line"><span class="comment"># 3. 编译安装</span></span><br><span class="line"><span class="built_in">cd</span> redis-4.0.10</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make</span><br><span class="line"><span class="comment"># 4. 启动服务</span></span><br><span class="line">src/redis-server</span><br></pre></td></tr></table></figure>
<h2 id="配置-v2"><a class="header-anchor" href="#配置-v2"></a>配置</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 redis.conf 文件中 daemonize 属性 为 yes</span></span><br><span class="line">vim /you_install_path/redis.conf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其他配置根据自身需要调整修改</p>
</blockquote>
<h2 id="其他命令"><a class="header-anchor" href="#其他命令"></a>其他命令</h2>
<ol>
<li>关闭服务 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379 shutdown</span><br></pre></td></tr></table></figure>
</li>
<li>非安全模式启动 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 后台以非安全模式启动</span></span><br><span class="line"><span class="built_in">nohup</span> /usr/local/bin/redis-server --protected-mode no &amp;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="常用命令-v3"><a class="header-anchor" href="#常用命令-v3"></a>常用命令</h2>
<h3 id="文件查找"><a class="header-anchor" href="#文件查找"></a>文件查找</h3>
<h4 id="find"><a class="header-anchor" href="#find"></a>find</h4>
<p>find 命令是根据文件的属性进行查找，如文件名，文件大小，所有者，所属组，是否为空，访问时间，修改时间等。</p>
<ul>
<li>基本格式：<br>
find path expression</li>
<li>示例：
<ul>
<li>在根目录下查找文件 httpd.conf，表示在整个硬盘查找<br>
find / -name httpd.conf</li>
<li>表示当前目录下查找文件名开头是字符串 srm 的文件<br>
find . -name ‘srm*’</li>
<li>查找在系统中最后 10 分钟访问的文件(access time)<br>
find / -amin -10</li>
<li>查找在系统中属于 fred 这个用户的文件<br>
find / -user fred</li>
<li>查找出小于 1000KB 的文件<br>
find / -size -1000k</li>
</ul>
</li>
</ul>
<h4 id="grep"><a class="header-anchor" href="#grep"></a>grep</h4>
<p>grep 是根据文件的内容进行查找，会对文件的每一行按照给定的模式(patter)进行匹配查找。</p>
<ul>
<li>基本格式：<br>
find expression</li>
<li>主要参数：<br>
－c：只输出匹配行的计数。<br>
－i：不区分大小写<br>
－h：查询多文件时不显示文件名。<br>
－l：查询多文件时只输出包含匹配字符的文件名。<br>
－n：显示匹配行及行号。<br>
－s：不显示不存在或无匹配文本的错误信息。<br>
－v：显示不包含匹配文本的所有行。</li>
<li>示例：
<ul>
<li>显示所有包含每行字符串至少有 5 个连续小写字符的字符串的行<br>
grep ‘[a-z]{5}’ aa</li>
<li>显示所有以 d 开头的文件中包含 test 的行<br>
grep ‘test’ d*</li>
</ul>
</li>
</ul>
<h3 id="进程相关"><a class="header-anchor" href="#进程相关"></a>进程相关</h3>
<ul>
<li>
<p>查看指定服务进程</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 httpd 服务进程</span></span><br><span class="line">ps -ef | grep httpd</span><br><span class="line"><span class="comment"># UID        PID  PPID  C STIME TTY          TIME CMD</span></span><br><span class="line"><span class="comment"># root      7192  7103  0 19:59 pts/3    00:00:00 grep --color=auto httpd</span></span><br></pre></td></tr></table></figure>
  <div class="note info"><ul>
<li>UID：用户 ID</li>
<li>PID：进程 ID</li>
<li>PPID：父进程 ID</li>
<li>C：CPU 用于计算执行优先级的因子。数值越大，表明进程是 CPU 密集型运算，执行优先级会降低；数值越小，表明进程是 I/O 密集型运算，执行优先级会提高</li>
<li>STIME：进程启动的时间</li>
<li>TTY：完整的终端名称</li>
<li>TIME：CPU 时间</li>
<li>CMD：完整的启动进程所用的命令和参数</li>
</ul>
</div>
</li>
<li>
<p>杀死指定进程</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 pid（逐个都删除）</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看指定端口</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检测 6379 端口是否在监听  </span></span><br><span class="line">netstat -lntp | grep 6379 </span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="文件复制"><a class="header-anchor" href="#文件复制"></a>文件复制</h3>
<h4 id="语法"><a class="header-anchor" href="#语法"></a>语法</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp(选项)(参数)</span><br></pre></td></tr></table></figure>
<h4 id="选项"><a class="header-anchor" href="#选项"></a>选项</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1：使用 ssh 协议版本 1；</span><br><span class="line">-2：使用 ssh 协议版本 2；</span><br><span class="line">-4：使用 ipv4；</span><br><span class="line">-6：使用 ipv6；</span><br><span class="line">-B：以批处理模式运行；</span><br><span class="line">-C：使用压缩；</span><br><span class="line">-F：指定ssh配置文件；</span><br><span class="line">-i：identity_file 从指定文件中读取传输时使用的密钥文件（例如亚马逊云 pem），此参数直接传递给ssh；</span><br><span class="line">-l：指定宽带限制；</span><br><span class="line">-o：指定使用的 ssh 选项；</span><br><span class="line">-P：指定远程主机的端口号；</span><br><span class="line">-p：保留文件的最后修改时间，最后访问时间和权限模式；</span><br><span class="line">-q：不显示复制进度；</span><br><span class="line">-r：以递归方式复制。</span><br></pre></td></tr></table></figure>
<h4 id="参数"><a class="header-anchor" href="#参数"></a>参数</h4>
<ul>
<li>源文件：指定要复制的源文件</li>
<li>目标文件：目标文件。格式为 user@host：filename（文件名为目标文件的名称）</li>
</ul>
<h4 id="示例"><a class="header-anchor" href="#示例"></a>示例</h4>
<ul>
<li>
<p>上传本地文件到远程机器指定目录</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp /opt/soft/nginx-0.5.38.tar.gz root@10.10.10.10:/opt/soft/scptest</span><br><span class="line"># 指定端口 2222</span><br><span class="line">scp -rp -P 2222 /opt/soft/nginx-0.5.38.tar.gz root@10.10.10.10:/opt/soft/scptest</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>上传本地目录到远程机器指定目录</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -r /opt/soft/mongodb root@10.10.10.10:/opt/soft/scptest</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>从远程机器复制文件到本地</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp root@10.10.10.10:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>从远程机器复制文件（含目录）到本地</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -r root@10.10.10.10:/opt/soft/mongodb /opt/soft/</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="文件删除"><a class="header-anchor" href="#文件删除"></a>文件删除</h3>
<h4 id="语法-v2"><a class="header-anchor" href="#语法-v2"></a>语法</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> [选项] 文件或目录</span><br></pre></td></tr></table></figure>
<h4 id="选项-v2"><a class="header-anchor" href="#选项-v2"></a>选项</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-f：强行删除，忽略不存在的文件，不提示确认。(f 为 force 的意思)</span><br><span class="line">-i：进行交互式删除，即删除时会提示确认。(i 为 interactive 的意思)</span><br><span class="line">-r：将参数中列出的全部目录和子目录进行递归删除。(r 为 recursive 的意思)</span><br><span class="line">-v：详细显示删除操作进行的步骤。(v 为 verbose 的意思)</span><br></pre></td></tr></table></figure>
<h4 id="示例-v2"><a class="header-anchor" href="#示例-v2"></a>示例</h4>
<ul>
<li>
<p>删除一个文件</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> file</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>删除一个目录</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> file/</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Build</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 之 MySQL</title>
    <url>/2018/07/23/linux-mysql/</url>
    <content><![CDATA[<p>之前粗略的接触了Linux的基础使用和安装，这次准备在自购的服务器上跑些应用，纯属娱乐，废话不说，上来就先仍数据库。<br>
数据库常用的<code>Oracle</code>,<code>MySQL</code>,<code>SQL Server</code>,<code>MongoDB</code>等，排名不分先后，自己平时接触最多的也就是<code>MySQL</code>，<code>MongoDB</code>，好<code>MySQL</code>先来一份。</p>
<h2 id="介绍"><a class="header-anchor" href="#介绍"></a>介绍</h2>
<p>MySQL是一个开源数据库管理系统，通常作为流行的LEMP（Linux，Nginx，MySQL / MariaDB，PHP / Python / Perl）堆栈的一部分安装。它使用关系数据库和SQL（结构化查询语言）来管理其数据。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2VudG9zLm9yZw==">CentOS 7<i class="fa fa-external-link-alt"></i></span>更喜欢<span class="exturl" data-url="aHR0cHM6Ly9tYXJpYWRiLm9yZw==">MariaDB<i class="fa fa-external-link-alt"></i></span>，它是由原始<code>MySQL</code>开发人员管理的<code>MySQL</code>分支，旨在替代MySQL。<font color=red size=4>如果你在CentOS 7上运行 <code>yum install mysql</code>，那么安装的是MariaDB，而不是MySQL</font></p>
<span id="more"></span>
<p>对于 MySQL 也是有好几个类别</p>
<ol>
<li>MySQL Community Server：社区版本，开源免费，但不提供官方技术支持</li>
<li>MySQL Enterprise Edition：企业版本，需付费，可以试用 30 天</li>
<li>MySQL Cluster 集群版：开源免费。可将几个 MySQL Server 封装成一个 Server</li>
<li>MySQL Cluster CGE：高级集群版，需付费</li>
<li>MySQL Workbench：一款专为 MySQL 设计的 ER/数据库建模工具，分为两个版本
<ul>
<li>MySQL Workbench OSS：社区版</li>
<li>MySQL WorkbenchSE：商用版</li>
</ul>
</li>
</ol>
<p>先检查服务器是否已经安装了mariadb</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查是否安装了 mariadb 客户端</span></span><br><span class="line">rpm -qa | grep mariadb</span><br><span class="line"><span class="comment"># 检查是否安装了 mariadb 服务端</span></span><br><span class="line">rpm -qa | grep mariadb-server</span><br></pre></td></tr></table></figure>
<p>执行结果如下图，如果没有任何提示，则表示没有安装<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1606229882/blog/mariadb-check.png" alt=""></p>
<p>执行检查命令，发现有 mariadb 服务，则需要先卸载 <code>mariadb</code> 相关服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mariadb 相关卸载</span></span><br><span class="line">rpm -qa |grep mariadb |xargs yum remove -y</span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1606235520/blog/mariadb-uninstall.png" alt=""></p>
<h2 id="清单"><a class="header-anchor" href="#清单"></a>清单</h2>
<ul>
<li>OS: CentOS 7</li>
<li>DataBase：MySQL 8.0.11</li>
</ul>
<blockquote>
<p><code>uname -a</code>查看你 Linux 系统的信息，按照系统版本选择对应的应用</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[dc2-user@10-255-0-191 ~]$ uname -a</span><br><span class="line">Linux 10-255-0-191 3.10.0-957.27.2.el7.x86_64 #1 SMP Mon Jul 29 17:46:05 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line"># 这里，el7.x86_64 分别表示，el7：CentOS 7，x86_64：64 位系统</span><br></pre></td></tr></table></figure>
<h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2>
<blockquote>
<p>官方下载 MySQL Community Server 地址：<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9teXNxbC8=">https://dev.mysql.com/downloads/mysql/<i class="fa fa-external-link-alt"></i></span><br>
清华镜像 MySQL 地址：<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL215c3FsL3l1bS8=">https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1606147634/blog/mysql-download.png" alt=""></p>
<h3 id="在线安装（推荐方式）"><a class="header-anchor" href="#在线安装（推荐方式）"></a>在线安装（推荐方式）</h3>
<p>适用于当前安装服务器可以正常互联网访问，如上图，选择方式进入<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9yZXBvL3l1bQ==">MySQL Yum Repository<i class="fa fa-external-link-alt"></i></span>，选择对应系统的版本，比如 <code>mysql80-community-release-el7-3.noarch.rpm</code></p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1606227057/blog/mysql-line-rpm.png" alt=""></p>
<p>根据自己设备网络情况选择使用的下载地址</p>
<ul>
<li>官方地址：<span class="exturl" data-url="aHR0cHM6Ly9yZXBvLm15c3FsLmNvbS8vbXlzcWw4MC1jb21tdW5pdHktcmVsZWFzZS1lbDctMy5ub2FyY2gucnBt">https://repo.mysql.com//mysql80-community-release-el7-3.noarch.rpm<i class="fa fa-external-link-alt"></i></span></li>
<li>清华镜像：<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL215c3FsL3l1bS9teXNxbC04LjAtY29tbXVuaXR5LWVsNy14ODZfNjQvbXlzcWw4MC1jb21tdW5pdHktcmVsZWFzZS1lbDctMy5ub2FyY2gucnBt">https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-8.0-community-el7-x86_64/mysql80-community-release-el7-3.noarch.rpm<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 获取官方yum源安装包 mysql80-community-release-el7-3.noarch.rpm 是根据官网提供的版本信息</span></span><br><span class="line">wget https://repo.mysql.com//mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line"><span class="comment"># 2. 安装rpm包</span></span><br><span class="line">rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line"><span class="comment"># 3. 安装mysql-server</span></span><br><span class="line">yum install -y mysql-server</span><br><span class="line"><span class="comment"># 如果你需要设置不区分大小写，必须在第一次启动 mysqld 服务前设置，lower_case_table_names=1</span></span><br><span class="line"><span class="comment"># vim /etc/my.cnf</span></span><br><span class="line"><span class="comment"># 4. 启动mysqld服务</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"><span class="comment"># 5. 查看是否成功启动</span></span><br><span class="line">ps aux|grep mysqld</span><br><span class="line"><span class="comment"># 6. 设置mysqld服务开机自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure>
<blockquote>
<p>设置不区分大小写参数，文件地址 <code>/etc/my.cnf</code></p>
</blockquote>
<h3 id="离线安装"><a class="header-anchor" href="#离线安装"></a>离线安装</h3>
<p>适用于当前安装服务器无法互联网访问，如安装截图所示，选择 <span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9teXNxbC8=">MySQL Community Server<i class="fa fa-external-link-alt"></i></span> 类别，然后选择对应系统及版本进行下载，总共需要如下所示相关的应用安装包</p>
<p>按照<font color=red size=4>此顺序进行安装</font></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-8.0.22-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-plugins-8.0.22-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-8.0.22-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-compat-8.0.22-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-embedded-compat-8.0.22-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-devel-8.0.22-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-8.0.22-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-8.0.22-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<p>安装 <code>mysql-community-devel-8.0.22-1.el7.x86_64.rpm</code> 时出错，需要先执行 <code>yum install openssl-devel</code> 命令进行安装 openssl-devel，如下图<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1606415382/blog/mysql-community-devel.png" alt=""></p>
<p>安装完上面的包，进行启动 MySQL 服务，并进行相应的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果你需要设置不区分大小写，必须在第一次启动 mysqld 服务前设置，lower_case_table_names=1</span></span><br><span class="line"><span class="comment"># vim /etc/my.cnf</span></span><br><span class="line"><span class="comment"># 启动mysqld服务</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"><span class="comment"># 查看是否成功启动</span></span><br><span class="line">ps aux|grep mysqld</span><br><span class="line"><span class="comment"># 设置mysqld服务开机自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure>
<p>整个安装设置过程如下图<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1607229288/blog/mysql-offline-install.png" alt=""></p>
<h2 id="配置"><a class="header-anchor" href="#配置"></a>配置</h2>
<p>由于MySQL从5.7开始不允许在首次安装后，使用空密码进行登录，系统会随机生成一个密码以供管理员首次登录使用，这个密码记录在<code>/var/log/mysqld.log</code>文件中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 查看系统提供密码</span></span><br><span class="line"><span class="built_in">cat</span> /var/log/mysqld.log|grep <span class="string">&#x27;A temporary password&#x27;</span></span><br><span class="line"><span class="comment"># 2. 使用获取到的密码登录MySQL</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment"># 3. 切换数据库</span></span><br><span class="line">use mysql;</span><br><span class="line"><span class="comment"># 4. 修改root密码 your_password 替换成你自己的密码就可以了，这个密码是强密码，要求密码包含大小写字母、数字及标点符号，长度大于6</span></span><br><span class="line">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;your_password&#x27;</span>;</span><br><span class="line"><span class="comment"># 5. 刷新修改</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<h2 id="默认信息"><a class="header-anchor" href="#默认信息"></a>默认信息</h2>
<h3 id="配置信息地址"><a class="header-anchor" href="#配置信息地址"></a>配置信息地址</h3>
<p>默认安装配置信息：<font color=red size=4>/etc/my.cnf</font></p>
<h3 id="MySQL-安装路径"><a class="header-anchor" href="#MySQL-安装路径"></a>MySQL 安装路径</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 MySQL 安装的位置</span></span><br><span class="line"><span class="built_in">which</span> mysqld</span><br></pre></td></tr></table></figure>
<h3 id="其他配置信息"><a class="header-anchor" href="#其他配置信息"></a>其他配置信息</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1607229288/blog/mysql-cnf.png" alt=""></p>
<h2 id="连接"><a class="header-anchor" href="#连接"></a>连接</h2>
<p>自己平时习惯使用 <span class="exturl" data-url="aHR0cHM6Ly93d3cubmF2aWNhdC5jb20uY24=">Navicat<i class="fa fa-external-link-alt"></i></span> 进行数据库操作，因此这里进行配置链接已在云端刚刚安装的MySQL服务<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1532362215/blog/linux-mysql.png" alt="linux-mysql"></p>
<h3 id="ERROR-2003"><a class="header-anchor" href="#ERROR-2003"></a>ERROR 2003</h3>
<p>通过本地的工具无法连接到服务器上的 MySQL 服务，错误提示：<code>ERROR 2003 (HY000): Can't connect to MySQL server on '116.85.58.6' (60)</code></p>
<p>进行原因排查，分别通过 <code>ping</code>，<code>telnet</code> 命令来检查网络连接情况，发现 IP 是通的，端口不同，那么去看服务器是不是开启了防火墙，如果开启了防火墙，需要将 MySQL 服务的端口排除</p>
<div class="note warning"><p>对于开启了防火墙的，可以将防火墙关闭，或者设置端口白名单</p>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙状态，结果显示为running或not running</span></span><br><span class="line"><span class="comment">## 如果显示，-bash: firewall-cmd: command not found，则表示当前服务器没有安装防火墙</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"><span class="comment"># 关闭防火墙firewall</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line"><span class="comment"># 关闭防火墙firewall后开启</span></span><br><span class="line">systemctl start firewalld.service</span><br><span class="line"><span class="comment"># 开启端口</span></span><br><span class="line"><span class="comment">## zone -- 作用域</span></span><br><span class="line"><span class="comment">## add-port=80/tcp -- 添加端口，格式为：端口/通讯协议</span></span><br><span class="line"><span class="comment">## permanent -- 永久生效，没有此参数重启后失效</span></span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line"><span class="comment">## 开启3306端口后，workbench或naivcat 就能连接到MySQL数据库了</span></span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1606417200/blog/mysql-link.png" alt=""></p>
<p>SSH 连接 MySQL 所在的服务器，查看防火墙情况，但发现压根没有防火墙，那么此时，要去看看你的云服务器的安全组设置规则，将 3306 暴露出来，查看云服务器安全组设置<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1606418056/blog/didi-rule.png" alt=""></p>
<p>在已有安全组中添加安全规则或者新增安全组在新的安全组中添加安全规则<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1606418056/blog/didi-add-rule.png" alt=""></p>
<h3 id="ERROR-1130"><a class="header-anchor" href="#ERROR-1130"></a>ERROR 1130</h3>
<p>按照上图图的配置信息链接MySQL，发现错误提示：<code>ERROR 1130: Host 'xxx.xxx.xxx.xxx' is not allowed to connect to this MySQL server</code></p>
<h4 id="原因"><a class="header-anchor" href="#原因"></a>原因</h4>
<p>不允许从远程登陆MySQL服务，只能在localhost</p>
<h4 id="解决方法"><a class="header-anchor" href="#解决方法"></a>解决方法</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换数据库</span></span><br><span class="line">use mysql;</span><br><span class="line"><span class="comment"># 修改user 指定的host 为 %</span></span><br><span class="line">update user <span class="built_in">set</span> host = <span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="comment"># 查看 user 表中的信息</span></span><br><span class="line"><span class="keyword">select</span> host, user from user;</span><br><span class="line"><span class="comment"># 成功修改s</span></span><br><span class="line">+-----------+------------------+</span><br><span class="line">| host      | user             |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">| %         | root             |</span><br><span class="line">| localhost | mysql.infoschema |</span><br><span class="line">| localhost | mysql.session    |</span><br><span class="line">| localhost | mysql.sys        |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<h3 id="ERROR-2059"><a class="header-anchor" href="#ERROR-2059"></a>ERROR 2059</h3>
<p>继续重试链接，错误提示：<code>ERROR 2059: Authentication plugin 'caching_sha2_password' cannot be loaded:The specified module could not be found.</code></p>
<h4 id="原因-v2"><a class="header-anchor" href="#原因-v2"></a>原因</h4>
<p>MySQL 8不支持动态修改密码验证方式</p>
<h4 id="解决方法-v2"><a class="header-anchor" href="#解决方法-v2"></a>解决方法</h4>
<h5 id="方法一"><a class="header-anchor" href="#方法一"></a>方法一</h5>
<p>修改plugin默认的 <code>caching_sha2_password</code>  为 <code>mysql_native_password</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止mysql</span></span><br><span class="line">systemctl stop mysqld.service</span><br><span class="line"><span class="comment"># my.cnf文件中默认有下面的语句，删除前面的#号即可，没有的话就把它添加到my.cnf中 ，默认路径`/etc/my.cnf`</span></span><br><span class="line">default-authentication-plugin=mysql_native_password</span><br><span class="line"><span class="comment"># 切换数据库</span></span><br><span class="line">use mysql</span><br><span class="line"><span class="comment"># 给指定用户设置密码，这里`%`是因为之前已经将远程没有特殊指定，用%代替了localhost</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;your_password&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h5 id="方法二"><a class="header-anchor" href="#方法二"></a>方法二</h5>
<p>更新你的数据库连接工具，Navicat version12+，Workbench version8+</p>
<h3 id="BDB1507"><a class="header-anchor" href="#BDB1507"></a>BDB1507</h3>
<p>BDB1507 Thread died in Berkeley DB library，由于其他操作原因造成数据库被破坏问题，可以通过如下命令进行数据库修复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/lib/rpm/</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">ls</span> | grep <span class="string">&#x27;db.&#x27;</span>`;<span class="keyword">do</span> <span class="built_in">mv</span> <span class="variable">$i</span> <span class="variable">$i</span>.bak;<span class="keyword">done</span></span><br><span class="line">rpm --rebuilddb</span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1607750118/blog/rpm-rebuild.png" alt=""></p>
<h2 id="卸载"><a class="header-anchor" href="#卸载"></a>卸载</h2>
<h3 id="应用卸载"><a class="header-anchor" href="#应用卸载"></a>应用卸载</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">快速删除</span></span><br><span class="line">yum remove mysql mysql-server mysql-libs mysql-server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找残留文件（例如：mysql-community-server-8.0.22-1.el7.x86_64）</span></span><br><span class="line">rpm -qa | grep -i mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将查询出来的应用删除</span></span><br><span class="line">yum remove mysql-community-server-8.0.22-1.el7.x86_64</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找残余目录</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># /etc/selinux/targeted/active/modules/100/mysql</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># /etc/selinux/targeted/tmp/modules/100/mysql</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># /var/lib/mysql</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># /var/lib/mysql/mysql</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># /usr/share/mysql</span></span></span><br><span class="line">find / -name mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除残余目录</span></span><br><span class="line">rm -rf /etc/selinux/targeted/active/modules/100/mysql</span><br><span class="line">rm -rf /etc/selinux/targeted/tmp/modules/100/mysql</span><br><span class="line">rm -rf /var/lib/mysql</span><br><span class="line">rm -rf /var/lib/mysql/mysql</span><br><span class="line">rm -rf /usr/share/mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次检查残余目录，确保没有残余</span></span><br><span class="line">find / -name mysql</span><br></pre></td></tr></table></figure>
<h3 id="开机自启（可选）"><a class="header-anchor" href="#开机自启（可选）"></a>开机自启（可选）</h3>
<p>当你安装时设置了开机启动，当不需要再开机启动时，那么再卸载完数据库后，记得在开启启动的列表中删除数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig --list | grep -i mysql</span><br><span class="line">chkconfig --del mysqld</span><br></pre></td></tr></table></figure>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGlnaXRhbG9jZWFuLmNvbS9jb21tdW5pdHkvdHV0b3JpYWxzL2hvdy10by1pbnN0YWxsLW15c3FsLW9uLWNlbnRvcy03">How To Install MySQL on CentOS 7<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L255aXN0MzI3L2FydGljbGUvZGV0YWlscy80NTA3NDU1OQ==">ERROR 1130<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FpcnRfeGlhbmcvYXJ0aWNsZS9kZXRhaWxzLzgwMjYxNjc0">ERROR 2059<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombok</title>
    <url>/2019/08/21/lombok/</url>
    <content><![CDATA[<p>在实际开发过程中，不管是服务端（Java），还是客户端（Android）都需要创建对应的实例bean对象，用来实例化对象，在对需要实例化的对象中，通常需要写 <code>set</code>，<code>get</code> 方法，字段少的时候，还能忍受，尤其当客户端字段多的时候，而且字段类型或者字段名称来回改动时，稍不注意，就很大机率修改不全面，就会造成一些隐藏bug，有没有不需要手动取写（快捷键生成）这些方法，当然有，本片文章，我们就来学习 <span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZw==">Lombok<i class="fa fa-external-link-alt"></i></span></p>
<p>Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.<br>
Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more（Project Lombok是一个java库，可以自动插入编辑器并构建工具，为您的java增添色彩。 永远不要再写另一个getter或equals方法，使用一个注释，你的类有一个功能齐全的构建器，自动化你的日志记录变量等等），这是官方对Lombok的介绍，简单来讲就是通过注解的方式，代替一些重复性的代码，让代码更加简洁</p>
<span id="more"></span>
<h2 id="安装集成"><a class="header-anchor" href="#安装集成"></a>安装集成</h2>
<ul>
<li>编辑器（IDEA or Android Studio）安装 Lombok 插件，<code>File</code> -&gt; <code>Settings...</code> -&gt; <code>Plugins</code> -&gt; <code>搜索 Lombok 并安装</code></li>
<li>开启编辑器 Annotation Processors<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1566701581/blog/idea-annotation-processors.png" alt=""></li>
<li>项目集成Lombok依赖，项目按照不同的包管理， 按照对应方式添加包依赖  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- gradle 集成 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://projectlombok.org/setup/gradle --&gt;</span></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementationOnly &#x27;org.projectlombok:lombok:1.18.8&#x27;</span><br><span class="line">    annotationProcessor &#x27;org.projectlombok:lombok:1.18.8&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- maven集成 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://projectlombok.org/setup/maven --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="稳定注解"><a class="header-anchor" href="#稳定注解"></a>稳定注解</h2>
<p>Lombok提供稳定的注解，可以直接在生成环境使用，<code>org.projectlombok.lombok</code>包<code>lombok</code>路径下</p>
<h3 id="val"><a class="header-anchor" href="#val"></a>val</h3>
<p><strong>val</strong> 作为任何局部变量声明类型（包含 for语句声明），并且该类型会推断初始化表达式的类型，同时也是<code>final</code>的。</p>
<ul>
<li>0.10版本加入该功能</li>
<li>使用场景：局部变量声明</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// x 将被推断为 double 类型，并且是final</span></span><br><span class="line"><span class="type">val</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10.0</span>;</span><br><span class="line"><span class="comment">// y 将被推断为 ArrayList&lt;String&gt; 类型，并且是final</span></span><br><span class="line"><span class="type">val</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="comment">// z 将被转换为 final int z = 10;</span></span><br><span class="line"><span class="type">val</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>官方示例<span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9mZWF0dXJlcy92YWw=">val<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="var"><a class="header-anchor" href="#var"></a>var</h3>
<p><strong>var</strong> 作为任何局部变量声明类型（包含 for语句声明），并且该类型会推断初始化表达式的类型。</p>
<ul>
<li>1.16.20版本加入该功能</li>
<li>使用场景：局部变量声明</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// x 将被推断为double，转换为 double x = 10.0d;</span></span><br><span class="line"><span class="type">var</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10.0</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>官方示例<span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9mZWF0dXJlcy92YXI=">var<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="NonNull"><a class="header-anchor" href="#NonNull"></a>@NonNull</h3>
<p>注解在 <strong>属性</strong> 上，会自动产生一个关于此参数的非空检查，如果参数为空，则抛出一个空指针异常，也会有一个默认的无参构造方法</p>
<ul>
<li>0.11.10版本加入该功能</li>
<li>支持字段，方法，参数，局部变量，枚举</li>
</ul>
<blockquote>
<p>官方示例<span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9mZWF0dXJlcy9Ob25OdWxs">@NonNull<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Cleanup"><a class="header-anchor" href="#Cleanup"></a>@Cleanup</h3>
<p>自动资源管理，安全地调用close（）方法，确保通过调用 close() 方法清除你注释的变量声明，无论发生声明情况</p>
<ul>
<li>支持局部变量</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">(String in, String out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="meta">@Cleanup</span> <span class="type">FileInputStream</span> <span class="variable">inStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(in);</span><br><span class="line">    <span class="meta">@Cleanup</span> <span class="type">FileOutputStream</span> <span class="variable">outStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(out);</span><br><span class="line">    <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">65536</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> inStream.read(b);</span><br><span class="line">        <span class="keyword">if</span> (r == -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        outStream.write(b, <span class="number">0</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>官方示例<span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9mZWF0dXJlcy9DbGVhbnVw">@Cleanup<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Getter-Setter"><a class="header-anchor" href="#Getter-Setter"></a>@Getter/@Setter</h3>
<ul>
<li>注解在 <strong>属性</strong> 上；为单个属性提供 set/get 方法;</li>
<li>注解在 <strong>类</strong> 上，为该类所有的属性提供 set/get 方法， 都提供默认构造方法</li>
<li>等级可自己更改 PUBLIC, MODULE, PROTECTED, PACKAGE, PRIVATE，默认Public</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可手动设置字段的set方法为你需要的修饰类型</span></span><br><span class="line"><span class="meta">@Setter(AccessLevel.PROTECTED)</span> </span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>官方示例<span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9mZWF0dXJlcy9HZXR0ZXJTZXR0ZXI=">@Getter/@Setter<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="ToString"><a class="header-anchor" href="#ToString"></a>@ToString</h3>
<p>任何 <strong>类</strong> 定义都可以用 @ToString 注释，让lombok生成 toString() 方法的实现。默认情况下，它会按顺序打印您的类名以及每个字段，并以逗号分隔</p>
<ul>
<li>includeFieldNames，默认true：打印时包括每个字段的名称</li>
<li>callSuper，默认false：在输出中包含超类的实现的结果</li>
<li>doNotUseGetters，默认false：通常情况下，如果有可用的getter，那么就会调用它们。要禁止此操作并让生成的代码直接使用这些字段，请将其设置为true</li>
<li>onlyExplicitlyIncluded，默认false：仅包含用明确标记的字段和方法。通常，默认情况下包含所有（非静态）字段</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 排除该字段一同生成在 toString()方法中</span></span><br><span class="line"><span class="meta">@ToString</span>.Exclude </span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="comment">// 配置在toString中呈现此成员的行为；如果在方法上，请在输出中包含方法的返回值</span></span><br><span class="line"><span class="comment">// rank(默认为0)：首先打印更高的等级。相同级别的成员按照它们在源文件中出现的顺序打印</span></span><br><span class="line"><span class="comment">// name(默认为&quot;&quot;)：默认为带注释的成员的 字段/方法 名称。如果名称等于默认包含字段的名称，则此成员将取代它</span></span><br><span class="line"><span class="meta">@ToString</span>.Include(rank = <span class="number">0</span>, name = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>官方示例<span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9mZWF0dXJlcy9Ub1N0cmluZw==">@ToString<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="EqualsAndHashCode"><a class="header-anchor" href="#EqualsAndHashCode"></a>@EqualsAndHashCode</h3>
<p>注解在 <strong>类</strong> 上, 可以生成 equals、canEqual、hashCode 方法，与 @Data 相比，少了 toString() 方法，部分属性和 @ToString 注解相同</p>
<blockquote>
<p>官方示例<span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9mZWF0dXJlcy9FcXVhbHNBbmRIYXNoQ29kZQ==">@EqualsAndHashCode<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Constructor"><a class="header-anchor" href="#Constructor"></a>Constructor</h3>
<p>按照定制生成构造函数</p>
<ul>
<li>@NoArgsConstructor：生成不带参数的构造函数</li>
<li>@RequiredArgsConstructor：生成带有必需参数的构造函数。参数是final字段和字段是具有约束的，例如@NonNull</li>
<li>@AllArgsConstructor：生成一个全参构造函数</li>
</ul>
<blockquote>
<p>官方示例<span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9mZWF0dXJlcy9jb25zdHJ1Y3Rvcg==">Constructor<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Data"><a class="header-anchor" href="#Data"></a>@Data</h3>
<p>生成所有字段的 getter，一个有用的 toString 方法，以及检查所有 <code>non-transient</code> 字段的 hashCode 和 equals 实现。还将为所有 <code>non-final</code> 字段以及构造函数生成setter</p>
<blockquote>
<p>官方示例<span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9mZWF0dXJlcy9EYXRh">@Data<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Value"><a class="header-anchor" href="#Value"></a>@Value</h3>
<p>@Value 是 @Data 的变体版，默认情况下，所有字段都是 <code>private</code> 和 <code>final</code> 的，并且不会生成setter，默认情况下，<code>class</code> 本身也是 <code>final</code> 的，因为不可变性不是可以强制进入子类的东西</p>
<ul>
<li>0.12.0版本加入稳定的该功能</li>
</ul>
<blockquote>
<p>官方示例<span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9mZWF0dXJlcy9WYWx1ZQ==">@Value<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Builder"><a class="header-anchor" href="#Builder"></a>@Builder</h3>
<ul>
<li>对成员注解，则它必须是构造函数或方法</li>
<li>对类（class）注解，那么将生成一个私有构造函数，所有字段都作为参数(就好像类上有@AllArgsConstructor(access = AccessLevel.PRIVATE))，并且这个构造函数已经被@Builder注释了</li>
</ul>
<blockquote>
<p>注意，只有当您没有编写任何构造函数，也没有添加任何显式的@XArgsConstructor注释时，才会生成这个构造函数。在这些情况下，lombok将假定存在一个all-args构造函数，并生成使用它的代码;这意味着如果没有这个构造函数，就会出现编译器错误。</p>
</blockquote>
<blockquote>
<p>官方示例<span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9mZWF0dXJlcy9CdWlsZGVy">@Builder<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="SneakyThrows"><a class="header-anchor" href="#SneakyThrows"></a>@SneakyThrows</h3>
<ul>
<li>捕获或抛出方法主体中语句声明它们生成的任何已检查异常</li>
<li>SneakyThrows不会下沉，封装到RuntimeException中，或者以其他方式修改列出的已检查异常类型的任何异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lombok 写法</span></span><br><span class="line"><span class="meta">@SneakyThrows(UnsupportedEncodingException.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">utf8ToString</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于下面写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">utf8ToString</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (UnsupportedEncodingException $uniqueName) &#123;</span><br><span class="line">           <span class="keyword">throw</span> useMagicTrickeryToHideThisFromTheCompiler($uniqueName);</span><br><span class="line">           <span class="comment">// This trickery involves a bytecode transformer run automatically during the final stages of compilation;</span></span><br><span class="line">           <span class="comment">// there is no runtime dependency on lombok.</span></span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>官方示例<span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9mZWF0dXJlcy9TbmVha3lUaHJvd3M=">@SneakyThrows<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Synchronized"><a class="header-anchor" href="#Synchronized"></a>@Synchronized</h3>
<p>@Synchronized几乎与将“synchronized”关键字放在方法上完全一样，只不过它将同步到一个私有内部对象上，这样其他不在您控制之下的代码就不会通过锁定自己的实例来干扰线程管理</p>
<ul>
<li>对于 <strong>非静态</strong> 方法，使用一个名为 <code>$lock</code> 的字段</li>
<li>对于 <strong>静态</strong> 方法，则注释会锁定名为 <code>$LOCK</code> 的静态字段</li>
</ul>
<blockquote>
<p>官方示例<span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9mZWF0dXJlcy9TeW5jaHJvbml6ZWQ=">@Synchronized<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Getter-lazy-true"><a class="header-anchor" href="#Getter-lazy-true"></a>@Getter(lazy=true)</h3>
<p>适用于那些计算占用大量 CPU，或者占用较大内存时，该注解很有用</p>
<blockquote>
<p>官方示例<span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9mZWF0dXJlcy9HZXR0ZXJMYXp5">@GetterLazy<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Log"><a class="header-anchor" href="#Log"></a>@Log</h3>
<p>注解路径<code>lombok.extern.java</code>路径下，相关的 Log 有已下几种</p>
<ul>
<li>@CommonsLog  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.apache.commons.logging.<span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> org.apache.commons.logging.LogFactory.getLog(LogExample.class);</span><br></pre></td></tr></table></figure>
</li>
<li>@Flogger  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> com.google.common.flogger.<span class="type">FluentLogger</span> <span class="variable">log</span> <span class="operator">=</span> com.google.common.flogger.FluentLogger.forEnclosingClass();</span><br></pre></td></tr></table></figure>
</li>
<li>@JBossLog  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.jboss.logging.<span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> org.jboss.logging.Logger.getLogger(LogExample.class);</span><br></pre></td></tr></table></figure>
</li>
<li>@Log  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.util.logging.<span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> java.util.logging.Logger.getLogger(LogExample.class.getName());</span><br></pre></td></tr></table></figure>
</li>
<li>@Log4j  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.apache.log4j.<span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> org.apache.log4j.Logger.getLogger(LogExample.class);</span><br></pre></td></tr></table></figure>
</li>
<li>@Log4j2  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.apache.logging.log4j.<span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> org.apache.logging.log4j.LogManager.getLogger(LogExample.class);</span><br></pre></td></tr></table></figure>
</li>
<li>@Slf4j  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.<span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> org.slf4j.LoggerFactory.getLogger(LogExample.class);</span><br></pre></td></tr></table></figure>
</li>
<li>@XSlf4j  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.ext.<span class="type">XLogger</span> <span class="variable">log</span> <span class="operator">=</span> org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>官方示例<span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9mZWF0dXJlcy9sb2c=">@log<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="实验注解"><a class="header-anchor" href="#实验注解"></a>实验注解</h2>
<p>Lombok提供实验性注解，请根据实际情况取舍，<code>org.projectlombok.lombok</code>包 <code>lombok.experimental</code>路径下</p>
<h3 id="Accessors"><a class="header-anchor" href="#Accessors"></a>@Accessors</h3>
<h3 id="ExtensionMethod"><a class="header-anchor" href="#ExtensionMethod"></a>@ExtensionMethod</h3>
<h3 id="FieldDefaults"><a class="header-anchor" href="#FieldDefaults"></a>@FieldDefaults</h3>
<h3 id="Delegate"><a class="header-anchor" href="#Delegate"></a>@Delegate</h3>
<h3 id="Wither"><a class="header-anchor" href="#Wither"></a>@Wither</h3>
<h3 id="onX"><a class="header-anchor" href="#onX"></a>onX</h3>
<ul>
<li>onMethod</li>
<li>onConstructor</li>
<li>onParam</li>
</ul>
<h3 id="UtilityClass"><a class="header-anchor" href="#UtilityClass"></a>UtilityClass</h3>
<h3 id="Helper"><a class="header-anchor" href="#Helper"></a>Helper</h3>
<h3 id="FieldNameConstants"><a class="header-anchor" href="#FieldNameConstants"></a>FieldNameConstants</h3>
<h3 id="SuperBuilder"><a class="header-anchor" href="#SuperBuilder"></a>SuperBuilder</h3>
<h2 id="进阶配置"><a class="header-anchor" href="#进阶配置"></a>进阶配置</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0bG9tYm9rLm9yZy9mZWF0dXJlcy9jb25maWd1cmF0aW9u">Configuration system<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="其他"><a class="header-anchor" href="#其他"></a>其他</h2>
<p>如果在对Android项目进行升级使用 Lombok 代替原来的写法，在很大程度上还是会遇到如下截图问题<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1567324868/blog/lombok-error.png" alt="lombok-error"><br>
根据提示项目已经开启了 Annotation Processors，但是在每次打开项目都会提示错误信息</p>
<h3 id="解决方法"><a class="header-anchor" href="#解决方法"></a>解决方法</h3>
<p>Setting for all projects</p>
<ol>
<li>File -&gt; Other Settings -&gt; Settings for new projects -&gt; Build, Execution, Deployment -&gt; Compiler -&gt;Annotation Processors</li>
<li>Enable Annotation Processing</li>
<li>Click Apply</li>
<li>Restart Your Android studio</li>
</ol>
<p>一些旧项目还需要额外的一些操作</p>
<ol>
<li>删除项目根路径下的 <code>yourProject.iml</code> 文件以及 <code>.idea</code> 目录 或者你可以 File -&gt; Invalidate Caches / Restart… 操作</li>
<li>重新打开项目</li>
</ol>
<blockquote>
<p>参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21wbHVzaG5pa292L2xvbWJvay1pbnRlbGxpai1wbHVnaW4vaXNzdWVzLzI2NA==">issues264<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>Util</category>
      </categories>
      <tags>
        <tag>Util</tag>
      </tags>
  </entry>
  <entry>
    <title>应该知道的系统环境配置文件</title>
    <url>/2018/11/24/mac-bash/</url>
    <content><![CDATA[<p>在计算机操作系统中<code>Shell</code>是用户与操作系统交互的媒介，而<code>bash</code>作为目前<code>Linux\macOS</code>系统中最常用的<code>Shell</code>，它支持的<code>startup</code>文件也并不单一，甚至让人感到费解，以下就是对Shell的学习</p>
<p>Shell：在计算机中，值“为用户提供用户界面”的软件，通常指的是 <strong>命令行界面</strong> 的解析器。一般来说，<code>Shell</code>指操作系统中提供访问内核所提供的服务程序。</p>
<span id="more"></span>
<p>通常将<code>Shell</code>分为两类</p>
<ul>
<li>命令行：提供一个命令行界面（CLI）</li>
<li>图形界面：提供一个图形用户界面（GUI）</li>
</ul>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/be/The_general_structure_of_a_Linux_system.jpeg/250px-The_general_structure_of_a_Linux_system.jpeg" alt="linux_system"></p>
<p>在PC桌面领域，不同的操作系统都有自己的<code>Shell</code>，截止2018.10主流的操作系统市场占有率，Windows（78.04%），OS X（13.73%），Unknown（5.44%），Linux（1.64%），Chrome（1.15%），数据来源于<span class="exturl" data-url="aHR0cDovL2dzLnN0YXRjb3VudGVyLmNvbS9vcy1tYXJrZXQtc2hhcmUvZGVza3RvcC93b3JsZHdpZGUvI21vbnRobHktMjAxNzEwLTIwMTgxMA==">statcounter<i class="fa fa-external-link-alt"></i></span>；</p>
<p>这些操作系统中都有自己独特的<code>Shell</code>命令，在不同的系统版本中，命令工具也是不完全相同，例如：</p>
<ul>
<li>Windows：Windows CE、Windows NT常用<a href="https://en.wikipedia.org/wiki/Cmd.exe"><code>cmd.exe</code></a>；Windows 10中常用<a href="https://zh.wikipedia.org/wiki/Windows_PowerShell"><code>PowerShell</code></a></li>
<li>OS X：默认<a href="https://zh.wikipedia.org/wiki/Bash"><code>bash</code></a>，除此之外还提供了<a href="https://zh.wikipedia.org/wiki/Tcsh"><code>tcsh</code></a>、<a href="https://zh.wikipedia.org/wiki/Z_shell"><code>zsh</code></a>和<a href="https://zh.wikipedia.org/wiki/Korn_shell"><code>ksh</code></a></li>
<li>Linux：<code>/etc/shells</code>路径下，<code>/bin/sh</code>，<code>/bin/bash</code>，<code>/bin/csh</code>等应用</li>
</ul>
<blockquote>
<p>更详细的请查阅<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JUFFJUJDJUU1JUIxJUE0IyVFNSU5MSVCRCVFNCVCQiVBNCVFOCVBMSU4QyVFNyU5NSU4QyVFOSU5RCVBMiVFRiVCQyU4OENMSSVFRiVCQyU4OSVFNiVBRSVCQyVFNSVCMSVBNA==">维基百科<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="Configuration-Files"><a class="header-anchor" href="#Configuration-Files"></a>Configuration Files</h2>
<table>
<thead>
<tr>
<th>文件</th>
<th>sh</th>
<th>ksh</th>
<th>csh</th>
<th>tcsh</th>
<th>bash</th>
<th>zsh</th>
</tr>
</thead>
<tbody>
<tr>
<td>/etc/.login</td>
<td>—</td>
<td>—</td>
<td>login</td>
<td>login</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>/etc/csh.cshrc</td>
<td>—</td>
<td>—</td>
<td>yes</td>
<td>yes</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>/etc/csh.login</td>
<td>—</td>
<td>—</td>
<td>login</td>
<td>login</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>~/.tcshrc</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>yes</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>~/.cshrc</td>
<td>—</td>
<td>—</td>
<td>yes</td>
<td>yes</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>~/etc/ksh.kshrc</td>
<td>—</td>
<td>int.</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>/etc/sh.shrc</td>
<td>int.</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>$ENV (typically ~/.kshrc)</td>
<td>int.</td>
<td>int.</td>
<td>—</td>
<td>—</td>
<td>int.</td>
<td>—</td>
</tr>
<tr>
<td>~/.login</td>
<td>—</td>
<td>—</td>
<td>login</td>
<td>login</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>~/.logout</td>
<td>—</td>
<td>—</td>
<td>login</td>
<td>login</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>/etc/profile</td>
<td>login</td>
<td>login</td>
<td>—</td>
<td>—</td>
<td>login</td>
<td>login</td>
</tr>
<tr>
<td>~/.profile</td>
<td>login</td>
<td>login</td>
<td>—</td>
<td>—</td>
<td>login</td>
<td>login</td>
</tr>
<tr>
<td>~/.bash_profile</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>login</td>
<td>—</td>
</tr>
<tr>
<td>~/.bash_login</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>login</td>
<td>—</td>
</tr>
<tr>
<td>~/.bash_logout</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>login</td>
<td>—</td>
</tr>
<tr>
<td>~/.bashrc</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>int.+n/login</td>
<td>—</td>
</tr>
<tr>
<td>/etc/zshenv</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>yes</td>
</tr>
<tr>
<td>/etc/zprofile</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>login</td>
</tr>
<tr>
<td>/etc/zshrc</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>int.</td>
</tr>
<tr>
<td>/etc/zlogin</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>login</td>
</tr>
<tr>
<td>/etc/zlogout</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>login</td>
</tr>
<tr>
<td>~/.zshenv</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>yes</td>
</tr>
<tr>
<td>~/.zprofile</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>login</td>
</tr>
<tr>
<td>~/.zshrc</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>int.</td>
</tr>
<tr>
<td>~/.zlogin</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>login</td>
</tr>
</tbody>
</table>
<ul>
<li>yes：表示shell在启动时始终读取文件</li>
<li>login：表示如果shell是登录shell，则读取文件</li>
<li>n/login：表示如果shell不是登录shell，则读取文件</li>
<li>int.：表示如果shell是交互式的，则读取文件</li>
</ul>
<blockquote>
<p>更详细的介绍请查阅<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVW5peF9zaGVsbCNDb25maWd1cmF0aW9uX2ZpbGVz">维基百科<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>关于常用<code>Shell</code>，执行流程如下图：<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1543141362/blog/flow.png" alt="flow"></p>
<h2 id="startup文件"><a class="header-anchor" href="#startup文件"></a>startup文件</h2>
<p><code>bash</code>作为目前<code>Linux</code>，<code>macOS（默认bash命令）</code>系统中最常用的<code>shell</code>，通过上面的表格，我们可以知道macOS系统中，<code>bash</code>主要由以下文件</p>
<ul>
<li>/etc/profile：The systemwide initialization file, executed for login shells</li>
<li>~/.profile：</li>
<li>~/.bash_profile：The personal initialization file, executed for login shells</li>
<li>~/.bash_login：</li>
<li>~/.bash_logout：The individual login shell cleanup file, executed when a login shell exits</li>
<li>~/.bashrc：The individual per-interactive-shell startup file</li>
</ul>
<p>我们看看在macOS系统中，bash的startup文件是如何进行加载</p>
<div class="note info"><p>注意：</p>
<ul>
<li><code>/etc/profile</code>和<code>/etc/paths</code>是系统级别，系统启动后就会加载，后面的配置文件是当前用户级的环境变量</li>
<li>如果<code>~/.bash_profile</code>存在，后面几个文件就会忽略不读，不在时，才会以此类推读取后面的文件</li>
<li><code>~/.bashrc</code>没有上述规则，他始终加载，它是在<code>bash shell</code>打开的时候载入的</li>
</ul>
</div>
<h2 id="特点"><a class="header-anchor" href="#特点"></a>特点</h2>
<p><code>bash</code>的两种属性，即 <strong>“交互”</strong> 与 <strong>“登录”</strong>，按照<code>bash</code>是否与用户进行交互，可将其分为 <strong>“交互式”</strong> 与 <strong>“非交互式”</strong>；按照<code>bash</code>是否被用户登录，又可将其分为 <strong>“登录shell”</strong> 与 <strong>“非登录shell”</strong></p>
<h3 id="交互式与非交互式"><a class="header-anchor" href="#交互式与非交互式"></a>交互式与非交互式</h3>
<ul>
<li>交互式：shell的一种运行模式，交互式shell等待用户输入命令，并且立即执行，然后将结果反馈给用户。整个流程：登录——&gt;执行命令——&gt;退出。当你退出后，这个shell就终止</li>
<li>非交互式：shell的另一种运行模式，它专门用来执行预先设定的命令。这种模式下，shell不予用户进行交互，而是读取存储在脚本文件中的命令并执行它们。当它读取到文件结尾，这个shell就终止</li>
</ul>
<h3 id="登录shell与非登录shell"><a class="header-anchor" href="#登录shell与非登录shell"></a>登录shell与非登录shell</h3>
<ul>
<li>登录shell：
<ul>
<li>用户通过输入用户名/密码（或者证书认证）后启动的shell；</li>
<li>通过带有<code>-l|--login</code>参数的<code>bash</code>命令启动的shell<br>
例如：系统启动，远程启动，使用<code>su -</code>切换用户，通过<code>bash --login</code>命令启动的bash等</li>
</ul>
</li>
<li>非登录shell：以上情况除外基本就是 <strong>“非登录shell”</strong><br>
例如：从图形化界面启动终端，使用<code>su -</code>切换用户，通过<code>bash</code>命令启动bash等</li>
</ul>
<h3 id="主要区别"><a class="header-anchor" href="#主要区别"></a>主要区别</h3>
<ul>
<li>使用<code>logout</code>退出<code>登录shell</code>，使用<code>exit</code>退出<code>非登录shell</code>。</li>
<li>其实<code>exit</code>命令会判断当前shell的登录属性，并且分别调用<code>logout</code>或<code>exit</code>指令</li>
<li><strong>登录shell</strong>和<strong>非登录shell</strong>的主要区别在于启动shell时所执行的startup文件不同；登录shell执行的startup文件为<code>~/.bash_profile</code>，而<strong>非登录shell</strong>执行的startup文件为<code>~/.bashrc</code></li>
</ul>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<h3 id="Path语法"><a class="header-anchor" href="#Path语法"></a>Path语法</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 中间使用冒号分隔</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:&lt;PATH 1&gt;:&lt;PATH 2&gt;:&lt;PATH 3&gt;:------:&lt;PATH N&gt;</span><br></pre></td></tr></table></figure>
<h3 id="环境变量设置"><a class="header-anchor" href="#环境变量设置"></a>环境变量设置</h3>
<h4 id="全局设置"><a class="header-anchor" href="#全局设置"></a>全局设置</h4>
<ul>
<li><code>/etc/paths</code>：全局环境变量设置，建议修改此文件</li>
<li><code>/etc/profile</code>：不建议修改此文件，全局配置，不管是哪个用户，登录时都会读取此文件</li>
<li><code>/etc/bashrc</code>：一般在这个文件中添加系统级别环境变量，全局配置，bash shell执行时，不管是何种方式，都会读取此文件</li>
</ul>
<h4 id="单用户设置"><a class="header-anchor" href="#单用户设置"></a>单用户设置</h4>
<ul>
<li><code>~/.bash_profile</code>：添加用户级环境变量<br>
例如：设置<code>ANDROID_HOME</code>到PATH  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ANDROID_HOME=/Users/shaoc/Library/Android/sdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ANDROID_HOME</span>/tools:<span class="variable">$ANDROID_HOME</span>/platform-tools:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
</li>
<li><code>~/.bashrc</code> 同上<br>
一般重启shell设置就会生效，如果想立刻生效，则可执行下面的语句：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> 相应的文件</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="zsh中配置环境变量"><a class="header-anchor" href="#zsh中配置环境变量"></a>zsh中配置环境变量</h4>
<p>在安装 <code>oh my zsh</code>后，<code>.bash_profile</code>文件中的环境变量就无法起到作用，因为终端默认启动的是<code>zsh</code>，而不是<code>shell</code>，所以无法加载</p>
<ul>
<li>
<p>解决方法<br>
在<code>~/.zshrc</code>配置文件中，增加对<code>.bash_profile</code>的引用：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p><code>.bash_profile</code>文件示例：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ANDROID_HOME=/Users/blade/Library/Android/sdk</span><br><span class="line"><span class="built_in">export</span> GRADLE_HOME=/Users/blade/Documents/DevTools/Gradle/gradle-4.6</span><br><span class="line"><span class="built_in">export</span> FLUTTER_HOME=/Users/blade/Documents/DevTools/flutter</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ANDROID_HOME</span>/tools:<span class="variable">$ANDROID_HOME</span>/platform-tools:<span class="variable">$GRADLE_HOME</span>/bin:<span class="variable">$FLUTTER_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NjaDAxMjAvYXJ0aWNsZS9kZXRhaWxzLzcwMjU2MzE4">原关于“.bash_profile”和“.bashrc”区别的总结<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oYW81NzQzLmdpdGh1Yi5pby8yMDE3LzA2LzI4LzIwMTctMDYtMjgv">Mac环境变量配置<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Aria2 之 macOS</title>
    <url>/2018/12/12/mac-download/</url>
    <content><![CDATA[<h2 id="Aria2-是什么"><a class="header-anchor" href="#Aria2-是什么"></a>Aria2 是什么</h2>
<p>Aria2 是一款支持多种协议的 <strong>轻量级命令行</strong> 下载工具。有以下特性：</p>
<ul>
<li>多线程连线：Aria2 会自动从多个线程下载文件，并充分利用你的带宽；</li>
<li>轻量：运行时不会占用过多资源，根据官方介绍，内存占用通常在 4MB~9MB，使用 BitTorrent 协议，下行速度 2.8MB/s 时 CPU 占用率约 6%；</li>
<li>全功能 BitTorrent 客户端；</li>
<li>支持 RPC 界面远程控制</li>
</ul>
<span id="more"></span>
<h2 id="Aria2-安装"><a class="header-anchor" href="#Aria2-安装"></a>Aria2 安装</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install aria2</span><br></pre></td></tr></table></figure>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9icmV3LnNo">Homebrew<i class="fa fa-external-link-alt"></i></span>是一款自由及开放源代码的软件包管理系统，用以简化Mac OS X系统上的软件安装过程，以Ruby语言写成，默认安装在<code>/usr/local</code></p>
</blockquote>
<h2 id="Aria2-配置"><a class="header-anchor" href="#Aria2-配置"></a>Aria2 配置</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入~路径</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="comment"># 创建.aria2文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> .aria2</span><br><span class="line"><span class="comment"># 创建aria2.conf配置文件</span></span><br><span class="line"><span class="built_in">touch</span> aria2.conf</span><br></pre></td></tr></table></figure>
<p>复制以下内容保存在<code>aria2.conf</code>文件中，<strong>修改</strong> <code>dir=/Users/blade/Downloads</code>路径即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#用户名</span><br><span class="line">#rpc-user=user</span><br><span class="line">#密码</span><br><span class="line">#rpc-passwd=passwd</span><br><span class="line">#上面的认证方式不建议使用,建议使用下面的token方式</span><br><span class="line">#设置加密的密钥</span><br><span class="line">#rpc-secret=token</span><br><span class="line">#允许rpc</span><br><span class="line">enable-rpc=true</span><br><span class="line">#允许所有来源, web界面跨域权限需要</span><br><span class="line">rpc-allow-origin-all=true</span><br><span class="line">#允许外部访问，false的话只监听本地端口</span><br><span class="line">rpc-listen-all=true</span><br><span class="line">#RPC端口, 仅当默认端口被占用时修改</span><br><span class="line">rpc-listen-port=6800</span><br><span class="line">#最大同时下载数(任务数), 路由建议值: 3</span><br><span class="line">max-concurrent-downloads=5</span><br><span class="line">#断点续传</span><br><span class="line">continue=true</span><br><span class="line">#同服务器连接数</span><br><span class="line">max-connection-per-server=5</span><br><span class="line">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</span><br><span class="line">min-split-size=10M</span><br><span class="line">#单文件最大线程数, 路由建议值: 5</span><br><span class="line">split=10</span><br><span class="line">#下载速度限制</span><br><span class="line">max-overall-download-limit=0</span><br><span class="line">#单文件速度限制</span><br><span class="line">max-download-limit=0</span><br><span class="line">#上传速度限制</span><br><span class="line">max-overall-upload-limit=0</span><br><span class="line">#单文件速度限制</span><br><span class="line">max-upload-limit=0</span><br><span class="line">#断开速度过慢的连接</span><br><span class="line">#lowest-speed-limit=0</span><br><span class="line">#验证用，需要1.16.1之后的release版本</span><br><span class="line">#referer=*</span><br><span class="line">#文件保存路径, 默认为当前启动位置</span><br><span class="line">dir=/Users/blade/Downloads</span><br><span class="line">#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本</span><br><span class="line">#disk-cache=0</span><br><span class="line">#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)</span><br><span class="line">#enable-mmap=true</span><br><span class="line">#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长</span><br><span class="line">#所需时间 none &lt; falloc ? trunc &lt;&lt; prealloc, falloc和trunc需要文件系统和内核支持</span><br><span class="line">file-allocation=prealloc</span><br></pre></td></tr></table></figure>
<h3 id="开启-Aria2"><a class="header-anchor" href="#开启-Aria2"></a>开启 Aria2</h3>
<p>终端中输入，其中xxx是你的电脑用户名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aria2c --conf-path=<span class="string">&quot;/Users/xxx/.aria2/aria2.conf&quot;</span> -D</span><br></pre></td></tr></table></figure>
<h3 id="Aria2-开机自启"><a class="header-anchor" href="#Aria2-开机自启"></a>Aria2 开机自启</h3>
<ol>
<li>创建<code>aria2.plist</code>文件 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Library/LaunchAgents</span><br><span class="line"><span class="built_in">touch</span> aria2.plist</span><br></pre></td></tr></table></figure>
</li>
<li>修改<code>aria2.plist</code>文件内容，其中<code>&lt;array&gt;&lt;/array&gt;</code>中的值改为自己电脑上 aria2c 命令的路径，可以在终端输入which aria2c查看，将WorkingDirectory后面的<code>&lt;string&gt;&lt;/string&gt;</code>中的值改为自己的下载路径 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC<span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span></span><br><span class="line"><span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span><br><span class="line">&lt;plist version=<span class="string">&quot;1.0&quot;</span>&gt;</span><br><span class="line">    &lt;dict&gt;</span><br><span class="line">        &lt;key&gt;KeepAlive&lt;/key&gt;</span><br><span class="line">        &lt;<span class="literal">true</span> /&gt;</span><br><span class="line">        &lt;key&gt;RunAtLoad&lt;/key&gt;</span><br><span class="line">        &lt;<span class="literal">true</span> /&gt;</span><br><span class="line">        &lt;key&gt;Label&lt;/key&gt;</span><br><span class="line">        &lt;string&gt;aria2&lt;/string&gt;</span><br><span class="line">        &lt;key&gt;ProgramArguments&lt;/key&gt;</span><br><span class="line">        &lt;array&gt;</span><br><span class="line">            &lt;string&gt;/usr/local/bin/aria2c&lt;/string&gt;</span><br><span class="line">        &lt;/array&gt;</span><br><span class="line">        &lt;key&gt;WorkingDirectory&lt;/key&gt;</span><br><span class="line">        &lt;string&gt;/Users/blade/Downloads&lt;/string&gt;</span><br><span class="line">    &lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="启用Web"><a class="header-anchor" href="#启用Web"></a>启用Web</h3>
<p>其实，如果你喜欢使用命令来操作，那么此步可跳过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取项目代码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ziahamza/webui-aria2</span><br><span class="line"><span class="comment"># 打开 index.html 文件</span></span><br><span class="line"><span class="built_in">cd</span> webui-aria2/docs</span><br><span class="line">open index.html</span><br></pre></td></tr></table></figure>
<h2 id="其他"><a class="header-anchor" href="#其他"></a>其他</h2>
<h3 id="进行brew更新警告"><a class="header-anchor" href="#进行brew更新警告"></a>进行brew更新警告</h3>
<p>警告内容：<code>Unbrewed header files were found in /usr/local/include ...</code><br>
原因：系统中已存在下面列表中包含的包内容不是通过<code>brew</code>进行安装<br>
解决方法：删除那些文件就可以了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 或者获取sudo权限删除</span></span><br><span class="line">sudo <span class="built_in">rm</span>  -rf ‘/usr/local/bin/node’</span><br><span class="line"><span class="comment"># 重新安装node</span></span><br><span class="line">brew install node</span><br></pre></td></tr></table></figure>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRlYXJ0aC5tZS9tYWNfYXJpYTJfYXJpYW5nLw==">Mac安装使用aria2,AriaNg下载百度网盘资源<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tb2ZpdGVyLmNvbS8yMDE4LzA4LzE5LyVFNSVBNiU4MiVFNCVCRCU5NSVFOSU4NSU4RCVFNyVCRCVBRS1BcmlhMi0lRTYlOUQlQTUlRTglQkYlOUIlRTglQTElOEMlRTYlOTYlODclRTQlQkIlQjYlRTQlQjglOEIlRTglQkQlQkQv">如何配置 Aria2 来进行文件下载<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tYWMtc2V0dXAud2lsZGZsYW1lLm9yZy9hcmlhXzIvcmVhZG1lLmh0bWw=">Aria2 - 下载神器<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VyYXNpbi9ub3Rlcy9ibG9iL21hc3Rlci9saW51eC9zb2Z0L2FyaWEyLm1k">Aria2 命令使用参考文档<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>Download</tag>
      </tags>
  </entry>
  <entry>
    <title>MacBook Pro 初始化</title>
    <url>/2018/11/10/mac-init/</url>
    <content><![CDATA[<p>今天拿到了一辆跑车 MBP，虽然不是顶配，也能算上中等吧，废话不啰嗦，上来就是一顿操作猛如虎，最终效果就是唬</p>
<p>跑车的一些零配件来源地<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pheXdjamxvdmUvYXdlc29tZS1tYWMvYmxvYi9tYXN0ZXIvUkVBRE1FLXpoLm1k">Awesome Mac<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly93d3cubWFjd2suY29tLw==">MacWK<i class="fa fa-external-link-alt"></i></span> 一些破解软件集合地</p>
<p>软件的安装，这里不再赘述，这里主要对常用开发软件的配置进行记录</p>
<span id="more"></span>
<h2 id="JDK"><a class="header-anchor" href="#JDK"></a>JDK</h2>
<p>作为Android开发者，JDK的安装那是少不了</p>
<h3 id="下载"><a class="header-anchor" href="#下载"></a>下载</h3>
<p>在Oracle 官网下载所需JDK 版本，这里举例：<span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS90ZWNobmV0d29yay9qYXZhL2phdmFzZS9kb3dubG9hZHMvamRrOC1kb3dubG9hZHMtMjEzMzE1MS5odG1s">JDK1.8.0_191<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="安装"><a class="header-anchor" href="#安装"></a>安装</h3>
<p>此处省略，简单的安装步骤</p>
<h3 id="配置"><a class="header-anchor" href="#配置"></a>配置</h3>
<p>以下<strong>命令</strong>相关操作，均在自带系统<strong>终端</strong>应用或者自己安装的其他终端命令工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看安装的Java版本</span></span><br><span class="line">java -version</span><br><span class="line"><span class="comment"># 编辑profile文件</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"><span class="comment"># 在打开的 profile 文件中，最下面加入以下文本，添加完成后，保存退出</span></span><br><span class="line">JAVA_HOME=<span class="string">&quot;/Library/Java/JavaVirtualMachines/jdk1.8.0_191.jdk/Contents/Home/&quot;</span></span><br><span class="line"></span><br><span class="line">CLASS_PATH=<span class="string">&quot;<span class="variable">$JAVA_HOME</span>/lib&quot;</span></span><br><span class="line"></span><br><span class="line">PATH=<span class="string">&quot;.:<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使配置生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 查看JAVA_HOME是否正确</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1541968115/blog/mac-jdk-comand.png" alt="jdk-command"></p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1541968115/blog/mac-jdk-config.png" alt="jdk-config"></p>
<blockquote>
<p>注意：</p>
<ol>
<li><code>JAVA_HOME</code> 中 <code>jdk1.8.0_191.jdk</code> 是自己安装对应版本的文件夹，可以在Finder中，快捷键：Command + Shift + G，输入： <code>/Library/Java/JavaVirtualMachines/</code> ，最终得到对应的文件夹名，如： <code>jdk1.8.0_191.jdk</code></li>
<li>vim模式下，输入“i”：表示，插入，“esc”：表示退出编辑模式，“:wq!”：表示保存并退出</li>
</ol>
</blockquote>
<h2 id="MySQL"><a class="header-anchor" href="#MySQL"></a>MySQL</h2>
<h3 id="下载-v2"><a class="header-anchor" href="#下载-v2"></a>下载</h3>
<p>官方下载地址：<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy8=">https://dev.mysql.com/downloads/<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1582517702/blog/mac-mysql-downlaod.png" alt="mac-mysql-downlaod"></p>
<h3 id="安装-v2"><a class="header-anchor" href="#安装-v2"></a>安装</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1582523133/blog/mac-mysql-install.gif" alt="mac-mysql-install"></p>
<p>我这里选择自定义设置密码，请记住你设置的密码，最好是大小写+数字+字符的组合方式</p>
<h3 id="登录"><a class="header-anchor" href="#登录"></a>登录</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用 root 账号登录 MySQL</span><br><span class="line">mysql -u root -p</span><br><span class="line"># 出现下图中的MySQL，表示成功连接 MySQL</span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1582523478/blog/mac-login-mysql.png" alt="mac-login-mysql"></p>
<h3 id="卸载"><a class="header-anchor" href="#卸载"></a>卸载</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1582517706/blog/mac-mysql-uninstall.png" alt="mac-mysql-uninstall"></p>
<h2 id="Git"><a class="header-anchor" href="#Git"></a>Git</h2>
<p>直接在自带系统<strong>终端</strong>应用中，输入 <code>git --version</code> ，由于之前并没有安装，系统会提示，直接同意并安装即可</p>
<h3 id="GitHub配置"><a class="header-anchor" href="#GitHub配置"></a>GitHub配置</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看本地是否生成过秘钥，如果该文件夹不存在，则表示未生成过秘钥</span></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line"><span class="comment"># 生成一个github的秘钥，这里github可以根据喜好自己命名（默认.ssh路径，不添加密码等操作，直接三次回车，即可生成秘钥）</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;github&quot;</span></span><br><span class="line"><span class="comment"># 查看公钥</span></span><br><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="comment"># 复制公钥添加到GitHub的SSH设置中，这里省略操作截图步骤</span></span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1542034940/blog/mac-github-config.png" alt="mac-github-config"></p>
<h2 id="Gradle配置"><a class="header-anchor" href="#Gradle配置"></a>Gradle配置</h2>
<ul>
<li>
<p>下载地址：<span class="exturl" data-url="aHR0cDovL3NlcnZpY2VzLmdyYWRsZS5vcmcvZGlzdHJpYnV0aW9ucw==">官网<i class="fa fa-external-link-alt"></i></span>，下载-all版本</p>
</li>
<li>
<p>设置GRADLE_HOME路径</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开.bash_profile文件</span></span><br><span class="line">open -e .bash_profile</span><br><span class="line"><span class="comment"># Gradle_HOME环境设置，并保存</span></span><br><span class="line">GRADLE_HOME=/Users/blade/Documents/DevTools/Gradle/gradle-4.6</span><br><span class="line"><span class="built_in">export</span> GRADLE_HOME</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GRADLE_HOME</span>/bin</span><br><span class="line"><span class="comment"># 配置文件生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="comment"># 验证配置</span></span><br><span class="line">gradle -version</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果提示The file /Users/blade/.bash_profile does not exist.则在根路径下创建 <code>.bash_profile</code> 文件<br>
执行命令 <code>touch .bash_profilesss</code></p>
</blockquote>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1541968116/blog/mac-gradle-config.png" alt="gradle-config"></p>
</li>
</ul>
<h2 id="Keka"><a class="header-anchor" href="#Keka"></a>Keka</h2>
<p>对于 macOS 上的文件解压缩工具，有<a href="">The Unarchiver</a>，<span class="exturl" data-url="aHR0cHM6Ly9tYWNpdGJldHRlci5jb20v">BetterZip<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly93d3cua2VrYS5pby96aC1jbi8=">Keka<i class="fa fa-external-link-alt"></i></span>等，我这里使用 keka，毕竟开源：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FvbmV6L0tla2ElRUYlQkMlOEMlRTclOUMlOUYlRTklQTYlOTk=">https://github.com/aonez/Keka，真香<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew cask install keka</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">brew cask zap keka</span><br></pre></td></tr></table></figure>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9zc3BhaS5jb20vcG9zdC80Njk0Mw==">Mac 压缩 / 解压缩工具解决方案<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="OpenInTerminal"><a class="header-anchor" href="#OpenInTerminal"></a>OpenInTerminal</h2>
<p>OpenInTerminal 是在 Finder 上的一个扩展工具，能够快速在当前位置已命令行或者指定的编辑器打开，非常方便，对于 OpenInTerminal 和 OpenInTerminal-Lite，OpenInEditor-Lite 的区别</p>
<table>
<thead>
<tr>
<th>Features</th>
<th>OpenInTerminal</th>
<th>OpenInTerminal-Lite &amp; OpenInEditor-Lite</th>
</tr>
</thead>
<tbody>
<tr>
<td>Support Terminal, <span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRlcm0yLmNvbS8=">iTerm<i class="fa fa-external-link-alt"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plaXQvaHlwZXI=">Hyper<i class="fa fa-external-link-alt"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2p3aWxtL2FsYWNyaXR0eQ==">Alacritty<i class="fa fa-external-link-alt"></i></span> and <span class="exturl" data-url="aHR0cHM6Ly9zdy5rb3ZpZGdveWFsLm5ldC9raXR0eS8=">kitty<i class="fa fa-external-link-alt"></i></span>.</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Support TextEdit, <span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v">Visual Studio Code<i class="fa fa-external-link-alt"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vaW5zaWRlcnMv">VSCode Insiders<i class="fa fa-external-link-alt"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly9hdG9tLmlvLw==">Atom<i class="fa fa-external-link-alt"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly93d3cuc3VibGltZXRleHQuY29tLw==">Sublime Text<i class="fa fa-external-link-alt"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1ZTQ29kaXVtL3ZzY29kaXVt">VSCodium<i class="fa fa-external-link-alt"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFyZWJvbmVzLmNvbS9wcm9kdWN0cy9iYmVkaXQv">BBEdit<i class="fa fa-external-link-alt"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly9tYWNyb21hdGVzLmNvbQ==">TextMate<i class="fa fa-external-link-alt"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly9jb3RlZGl0b3IuY29tLw==">CotEditor<i class="fa fa-external-link-alt"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hY3ZpbS1kZXYvbWFjdmlt">MacVim<i class="fa fa-external-link-alt"></i></span> and <span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS8=">JetBrains<i class="fa fa-external-link-alt"></i></span>(AppCode, CLion, GoLand, IntelliJ IDEA, PhpStorm, PyCharm, RubyMine, WebStorm).</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Set to open a new tab or window.</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Support English, Chinese, French, Russian, Italian and Spanish.</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Copy path of the selected file or Finder window to Clipboard</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>GUI preferences</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>Support keyboard shortcuts.</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>Support Dark Mode.</td>
<td>✅</td>
<td>❌</td>
</tr>
</tbody>
</table>
<h3 id="安装-v3"><a class="header-anchor" href="#安装-v3"></a>安装</h3>
<ul>
<li>openinterminal  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew cask install openinterminal</span><br></pre></td></tr></table></figure>
</li>
<li>openinterminal-lite &amp; openineditor-lite  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew cask install openinterminal-lite</span><br><span class="line">brew cask install openineditor-lite</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="配置-v2"><a class="header-anchor" href="#配置-v2"></a>配置</h3>
<p>这里主要是对应用进行授权</p>
<ul>
<li>openinterminal<br>
System Preferences（系统偏好设置） -&gt; Extensions（扩展） -&gt; Finder Extensions（访达扩展）</li>
<li>openinterminal-lite &amp; openineditor-lite<br>
拖拽 openinterminal-lite &amp; openineditor-lite 到你的 Finder 的状态栏上</li>
</ul>
<h2 id="macOS-快捷键"><a class="header-anchor" href="#macOS-快捷键"></a>macOS 快捷键</h2>
<p>顺带记录自己常用的快捷键吧🙃，其他用的时候在边用边查找吧</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS96aC1jbi9IVDIwMTIzNg==">Mac 键盘快捷键<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>Exp</tag>
        <tag>Build</tag>
      </tags>
  </entry>
  <entry>
    <title>iTerm2 日常</title>
    <url>/2020/08/05/mac-item2/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/incoder/image/upload/v1596547673/blog/logo2x.jpg" alt=""></p>
<p>iTerm2是一款优秀强大的第三方终端，相信用 Mac 的开发者，一定听过或者用过 iTerm2 这款终端应用，如果你还没使用过，没关系那么本篇文章就带你了解学习 iTerm2 中的一些常用操作，来提高你的工作效率</p>
<span id="more"></span>
<h2 id="安装配置"><a class="header-anchor" href="#安装配置"></a>安装配置</h2>
<h3 id="下载"><a class="header-anchor" href="#下载"></a>下载</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRlcm0yLmNvbQ==">iTerm2官网<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>注意：<br>
系统自带的终端默认使用<code>bash</code>；iTerm2默认使用<code>zsh</code>，因此两者切换如下命令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装完iTerm 可使用如下命令来切换</span></span><br><span class="line">chsh -s /bin/[zsh | bash]</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a class="header-anchor" href="#配置"></a>配置</h3>
<h3 id="基础设置"><a class="header-anchor" href="#基础设置"></a>基础设置</h3>
<ol>
<li>
<p>默认应用<br>
MenuBar -&gt; iTerm2 -&gt; Make iTerm2 Default Term<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1541968115/blog/mac-iterm2-default.png" alt="iterm2-default"></p>
</li>
<li>
<p>全局热键<br>
MenuBar -&gt; iTerm2 -&gt; preference -&gt; Keys -&gt; Show/hide iTerm2 with a system-wide hotkey<br>
输入设置的快捷键，这里使用<code>⌘,</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1541968115/blog/mac-iterm2-hotkey.png" alt="iterm2-hotkey"></p>
</li>
</ol>
<h3 id="安装Oh-my-zsh"><a class="header-anchor" href="#安装Oh-my-zsh"></a>安装Oh my zsh</h3>
<ul>
<li>方式一：crul  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li>方式二：wget  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<img src="https://res.cloudinary.com/incoder/image/upload/v1541968115/blog/mac-zsh-install.png" alt="zsh-install"></li>
</ul>
<h4 id="PowerLine"><a class="header-anchor" href="#PowerLine"></a>PowerLine</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install powerline-status --user</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果提示：<br>
command not found: pip<br>
先执行，再执行上面的字体安装命令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo easy_install pip</span><br></pre></td></tr></table></figure>
<h4 id="安装PowerFonts"><a class="header-anchor" href="#安装PowerFonts"></a>安装PowerFonts</h4>
<p>为避免后续的使用中，可能会遇到字符乱码的问题，因此安装字体</p>
<p>字体库需要首先将项目<code>clone</code>到本地，然后执行源码中的<code>install.sh</code>，根据自己的喜好存放在指定的位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入Documents目录</span></span><br><span class="line"><span class="built_in">cd</span> Documents</span><br><span class="line"><span class="comment"># 创建文件夹PowerFonts</span></span><br><span class="line"><span class="built_in">mkdir</span> PowerFonts</span><br><span class="line"><span class="comment"># 进入PowerFonts目录</span></span><br><span class="line"><span class="built_in">cd</span> PowerFonts</span><br><span class="line"><span class="comment"># clone源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/powerline/fonts.git --depth=1</span><br><span class="line"><span class="comment"># 进入fonts目录</span></span><br><span class="line"><span class="built_in">cd</span> fonts</span><br><span class="line"><span class="comment"># 执行安装脚本</span></span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>
<h4 id="设置字体及背景"><a class="header-anchor" href="#设置字体及背景"></a>设置字体及背景</h4>
<ul>
<li>
<p>设置字体<br>
MenuBar -&gt; iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text -&gt; Change Font，选择<code>Meslo LG</code>字体，L，M，S风格，看个人喜好，这里选择<code>Meslo LG S Powerline</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1541968115/blog/mac-iterm2-font.png" alt="iterm2-font"></p>
</li>
<li>
<p>背景设置<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1541968117/blog/mac-iterm2-presets.png" alt="iterm2-presets"></p>
</li>
</ul>
<h4 id="修改主题"><a class="header-anchor" href="#修改主题"></a>修改主题</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开.zshrc隐藏文件</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment"># 修改ZSH_THEME为agnoster</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;agnoster&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>默认：ZSH_THEME=“robbyrussell”</p>
</blockquote>
<h4 id="辅助"><a class="header-anchor" href="#辅助"></a>辅助</h4>
<ul>
<li>高亮插件  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/custom/plugins/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment"># 添加zsh-syntax-highlighting到plugins中，放在git后面</span></span><br><span class="line">plugins=(</span><br><span class="line">    git</span><br><span class="line">    zsh-syntax-highlighting</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 文件最后添加，然后保存并退出</span></span><br><span class="line"><span class="built_in">source</span> ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></table></figure>
最后，对配置文件进行生效处理  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
</li>
<li>命令补全<br>
安装步骤和上面的高亮插件一致  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/custom/plugins/</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure>
</li>
<li>设置背景图<br>
iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Window -&gt; BackGround Image</li>
</ul>
<h2 id="主题选择"><a class="header-anchor" href="#主题选择"></a>主题选择</h2>
<p>Oh my zsh 本身也包含了很多主题，而我比较喜欢的一款 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvbWthdHYvcG93ZXJsZXZlbDEwaw==">powerlevel10k<i class="fa fa-external-link-alt"></i></span> 的主题，非常的简洁，满足我的装 X 的需求的同时，极其简单的设置也是我对其爱不释手。</p>
<p>之前最早使用的是 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Bvd2VybGV2ZWw5ay9wb3dlcmxldmVsOWs=">powerlevel9k<i class="fa fa-external-link-alt"></i></span>，我的博客里面一些终端的截图就是 powerlevel9k，但随着我的需求越来越多以及加载的插件也越来越多，我不能忍受 iTerm2 在使用 时的效率问题，然后就看到了powerlevel10k，它是在powerlevel9k 的基础上迭代的，大大提高了响应效率和更加简洁的配置等</p>
<h3 id="安装"><a class="header-anchor" href="#安装"></a>安装</h3>
<p>官方提供了多种安装方式（Manual，Oh My Zsh，Homebrew 等等），选择你熟系的方式进行安装，我这里使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvbWthdHYvcG93ZXJsZXZlbDEwayNvaC1teS16c2g=">Oh My Zsh<i class="fa fa-external-link-alt"></i></span> 方式安装，选择了 gitee 镜像地址进行下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 下载主题</span></span><br><span class="line">git <span class="built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br><span class="line"><span class="comment"># 2. 在 .zshrc 文件中设置主题</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment"># 3. 大概 19 行，设置 ZSH_THEME 参数的值为 powerlevel10k/powerlevel10k</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;powerlevel10k/powerlevel10k&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>默认安装路径：/Users/<code>&lt;PC USER NAME&gt;</code>/.oh-my-zsh/custom/themes/powerlevel10k</p>
</blockquote>
<h3 id="更新"><a class="header-anchor" href="#更新"></a>更新</h3>
<p>当初选择的什么安装方式，就使用什么方式进行更新，我这里以 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvbWthdHYvcG93ZXJsZXZlbDEwayNGQVE=">Oh My Zsh<i class="fa fa-external-link-alt"></i></span> 方式进行更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git -C <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k pull</span><br></pre></td></tr></table></figure>
<h3 id="配置-v2"><a class="header-anchor" href="#配置-v2"></a>配置</h3>
<p>只需要在终端（）或者 iTerm2 命令窗口中输入 <code>p10k configure</code> 即可，然后根据提示选择即可完成配置，我比较懒，就用的 <code>Pure</code> 样式</p>
<h3 id="问题"><a class="header-anchor" href="#问题"></a>问题</h3>
<h4 id="VS-Code"><a class="header-anchor" href="#VS-Code"></a>VS Code</h4>
<p>在 VS Code Terminal 中显示不出来图标或者显示乱码异常等问题，先设置 VS Code 字体看看是否能解决，如果不能再进行排查</p>
<p>Open File → Preferences → Settings, 在搜索框中输入<code>terminal.integrated</code>，字体设置为<code>MesloLGS NF</code>.</p>
<h2 id="常用工具"><a class="header-anchor" href="#常用工具"></a>常用工具</h2>
<h3 id="Homebrew"><a class="header-anchor" href="#Homebrew"></a>Homebrew</h3>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9icmV3LnNo">Homebrew<i class="fa fa-external-link-alt"></i></span> 是一款自由及开放源代码的软件包管理系统，用以简化macOS系统上的软件安装过程，最初由马克斯·霍威尔（Max Howell）写成</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0hvbWVicmV3L2hvbWVicmV3LWNhc2s=">Homebrew Cask<i class="fa fa-external-link-alt"></i></span>，它是一套建立在 Homebrew 基础之上软件安装命令行工具，是 Homebrew 的扩展</li>
</ul>
<h4 id="官方"><a class="header-anchor" href="#官方"></a>官方</h4>
<blockquote>
<p>如果你使用的官方安装教程，需要切换 brew 的镜像源，可参考 <a href="https://incoder.org/2020/02/27/fuck-gfw">专治各种网络不服</a> 文章</p>
</blockquote>
<h5 id="安装-v2"><a class="header-anchor" href="#安装-v2"></a>安装</h5>
<p>在你的终端（Terminal/iTerm2）运行如下脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h5 id="卸载"><a class="header-anchor" href="#卸载"></a>卸载</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="国内（推荐）"><a class="header-anchor" href="#国内（推荐）"></a>国内（推荐）</h4>
<blockquote>
<p>按照命令行上面的提示，进行安装</p>
</blockquote>
<h5 id="安装-v3"><a class="header-anchor" href="#安装-v3"></a>安装</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h5 id="卸载-v2"><a class="header-anchor" href="#卸载-v2"></a>卸载</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/HomebrewUninstall.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="常用命令"><a class="header-anchor" href="#常用命令"></a>常用命令</h4>
<p>对于 brew 和 brew cask 的命令基本一致，比如</p>
<ul>
<li>【brew】：brew install [包名]</li>
<li>【brew cask】：brew cask install [包名]</li>
</ul>
<h5 id="brew-基础命令"><a class="header-anchor" href="#brew-基础命令"></a>brew 基础命令</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装指定包应用，如：brew install wget</span></span><br><span class="line">brew install [包名]</span><br><span class="line"><span class="comment"># 重新安装指定应用，如：brew reinstall wget</span></span><br><span class="line">brew reinstall [包名]</span><br><span class="line"><span class="comment"># 卸载指定包，如：brew uninstall wget</span></span><br><span class="line">brew uninstall [包名]</span><br><span class="line"><span class="comment"># 列出已安装的软件</span></span><br><span class="line">brew list</span><br><span class="line"><span class="comment"># 全部更新过时软件，如：brew upgrade</span></span><br><span class="line">brew upgrade</span><br><span class="line"><span class="comment"># 指定更新过时的软件，如：brew upgrade wget</span></span><br><span class="line">brew upgrade [包名]</span><br><span class="line"><span class="comment"># 用浏览器打开brew的官方网站</span></span><br><span class="line">brew home</span><br><span class="line"><span class="comment"># 显示当前软件信息，如：brew info wget</span></span><br><span class="line">brew info [包名]</span><br><span class="line"><span class="comment"># 显示包依赖，如：brew deps wget</span></span><br><span class="line">brew deps [包名]</span><br><span class="line"><span class="comment"># 清理所有包的旧版本</span></span><br><span class="line">brew cleanup</span><br><span class="line"><span class="comment"># 清理指定包的旧版本</span></span><br><span class="line">brew cleanup [包名]</span><br><span class="line"><span class="comment"># 查看可清理的旧版本包，不执行实际操作</span></span><br><span class="line">brew cleanup -n</span><br><span class="line"><span class="comment"># 查找指定包</span></span><br><span class="line">brew search [包名]</span><br><span class="line"><span class="comment"># 查看缓存路径</span></span><br><span class="line">brew --cache</span><br></pre></td></tr></table></figure>
<h5 id="brew-service"><a class="header-anchor" href="#brew-service"></a>brew service</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看使用brew安装的服务列表</span></span><br><span class="line">brew services list</span><br><span class="line"><span class="comment"># 启动服务（仅启动不注册）</span></span><br><span class="line">brew services run formula|--all</span><br><span class="line"><span class="comment"># 启动服务，并注册</span></span><br><span class="line">brew services start formula|--all</span><br><span class="line"><span class="comment"># 停止服务，并取消注册</span></span><br><span class="line">brew services stop formula|--all</span><br><span class="line"><span class="comment"># 重启服务，并注册</span></span><br><span class="line">brew services restart formula|--all</span><br><span class="line"><span class="comment"># 清除已卸载应用的无用的配置</span></span><br><span class="line">brew services cleanup</span><br></pre></td></tr></table></figure>
<h3 id="Nmap"><a class="header-anchor" href="#Nmap"></a>Nmap</h3>
<p>端口扫描必备工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 nmap 工具</span></span><br><span class="line">brew install nmap</span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1605693920/blog/nmap.png" alt="nmap"></p>
<h2 id="常用快捷键"><a class="header-anchor" href="#常用快捷键"></a>常用快捷键</h2>
<h3 id="标签"><a class="header-anchor" href="#标签"></a>标签</h3>
<ol>
<li>新建标签：⌘(command) + t</li>
<li>关闭标签：⌘(command) + w</li>
<li>切换标签：⌘(command) + 数字 ⌘(command) + 左右方向键</li>
<li>切换全屏：⌘(command) + enter</li>
<li>查找：⌘(command) + f</li>
</ol>
<h3 id="分屏"><a class="header-anchor" href="#分屏"></a>分屏</h3>
<ol>
<li>垂直分屏：⌘(command) + d</li>
<li>水平分屏：⌘(command) + ⇧(shift) + d</li>
<li>切换屏幕：⌘(command) + ⌥(option) + 方向键 ⌘(command) + [ 或 ⌘(command) + tab 所在的数字]</li>
<li>查看历史命令：⌘(command) + ;</li>
<li>查看剪贴板历史：⌘(command) + ⇧(shift) + h</li>
</ol>
<h3 id="其他"><a class="header-anchor" href="#其他"></a>其他</h3>
<ol>
<li>清除当前行：⌘(command) + u</li>
<li>清屏：⌘(command) + r</li>
<li>列出剪切板历史：⌘(command) + ⇧(shift) + h</li>
<li>命令快照（很实用的一个功能）：⌘(command) + ⌥(option) + b
<blockquote>
<p>大概只能记录 30s 左右的操作</p>
</blockquote>
</li>
</ol>
<h2 id="常见问题"><a class="header-anchor" href="#常见问题"></a>常见问题</h2>
<h3 id="文本乱码"><a class="header-anchor" href="#文本乱码"></a>文本乱码</h3>
<p>在一开始使用macOS就已经安装iTerm2来代替了系统自带的Terminal应用，毕竟颜值是决定要不用长期使用的重要因素</p>
<p>iTerm2对应的配置文件：<code>.zshrc</code>，Terminal对于的配置文件：<code>.bash_profile</code> 或 <code>.bashrc</code></p>
<ul>
<li>问题：iTerm2查看本地文件，能正常显示，无乱码，但查看服务器上文件，出现乱码</li>
<li>原因：本地iTerm2终端和服务器字符集不一致，造成乱码，macOS默认Terminal应用是<code>utf-8</code>，而iTerm2默认没有设置<code>utf-8</code>编码</li>
<li>解决办法：给本地的<code>.zshrc</code>设置字符集编码  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用vim打开.zshrc文件</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment"># 在文本内容末尾添加以下两行内容进行字符编码设置</span></span><br><span class="line"><span class="built_in">export</span> LC_ALL=en_US.UTF-8  </span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br><span class="line"><span class="comment"># 保存文件内容，退出vim模式，并使刚刚设置的内容生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<blockquote>
<p>帮助：可以在本地和服务器上分别使用<code>locale</code>命令来查看，本地和服务器的字符编码是否一致</p>
</blockquote>
</li>
</ul>
<h3 id="结束指定进程"><a class="header-anchor" href="#结束指定进程"></a>结束指定进程</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看指定端口号 lsof -i:端口号</span></span><br><span class="line">lsof -i:8088</span><br><span class="line">COMMAND   PID  USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line">java    72612 blade   18u  IPv6 0x21ccddb0352361e5      0t0  TCP *:radan-http (LISTEN)</span><br><span class="line"><span class="comment"># kill指定进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 72612</span><br></pre></td></tr></table></figure>
<h3 id="免密登录服务器"><a class="header-anchor" href="#免密登录服务器"></a>免密登录服务器</h3>
<p>一图胜千言，请看图</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1559382897/blog/ssh-login.png" alt="ssh-login"></p>
<h3 id="代理处理"><a class="header-anchor" href="#代理处理"></a>代理处理</h3>
<p>在 Mac 系统上，使用 iTerm2 是一件很享受的过程，很多事情都可以通过命令行直接完成，但是一个致命的问题是，很多连接在国内环境下，异常忙，比如通过命令 clone 或处理 GitHub 上的项目，速度慢的让人抓狂，虽然电脑开启了代理（非全局），但视乎没有什么作用，针对此问题，需要让我们的终端也通过代理</p>
<ol>
<li>install privoxy <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install privoxy</span><br></pre></td></tr></table></figure>
</li>
<li>setting privoxy <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/local/etc/privoxy/config</span><br></pre></td></tr></table></figure>
</li>
<li>config privoxy <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">listen-address 0.0.0.0:xxxx</span><br><span class="line">forward-socks5 / localhost:1080 .</span><br></pre></td></tr></table></figure>
<blockquote>
<p>0.0.0.0 可以让其他设备访问到，若不需要，请修改成用 127.0.0.1；xxxx是HTTP代理的默认端口；<br>
localhost:1080 是 SOCKS5（shadowsocks） 默认的地址，可根据需要自行修改，且注意不要忘了最后有一个空格和点号。</p>
</blockquote>
</li>
<li>start privoxy <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 因没有安装在系统目录内，所以启动的时候需要打全路径</span></span><br><span class="line">sudo /usr/local/sbin/privoxy /usr/local/etc/privoxy/config</span><br><span class="line"><span class="comment"># 查看是否启动成功（1087 端口号换成自己的）</span></span><br><span class="line">netstat -na | grep 1087</span><br><span class="line"><span class="comment"># 看到有类似如下信息就表示启动成功了</span></span><br><span class="line">tcp4	0	0  *.1087		*.*		LISTEN</span><br></pre></td></tr></table></figure>
代理端口查看<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1562848027/blog/shadowsocks-proxy.png" alt="shadowsocks-proxy"></li>
<li>use proxy
<ul>
<li>temp proxy<br>
如果关闭终端标签页或窗口，功能就会失效
<ul>
<li>star proxy  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里的端口号1087，换成你自己的</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&#x27;http://localhost:1087&#x27;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&#x27;http://localhost:1087&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li>cancel proxy  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> http_proxy</span><br><span class="line"><span class="built_in">unset</span> https_proxy</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>auto proxy
<ul>
<li>setting ~/.bash_profile  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开.bash_profile 文件</span></span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="comment"># .bash_profile文件最后添加（1087 端口替换成你自己的）</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&#x27;http://localhost:1087&#x27;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&#x27;http://localhost:1087&#x27;</span></span><br><span class="line"><span class="comment"># 保存文件  :wq 后，使配置生效</span></span><br><span class="line"><span class="built_in">source</span>  ~/.bash_profile</span><br></pre></td></tr></table></figure>
</li>
<li>上面的方式也可以在文件(<code>.bash_profile</code>)中加入如下方法，使用时只需要在终端中输入<code>proxy_on</code>命令，关闭输入<code>proxy_off</code>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_off</span></span>()&#123;</span><br><span class="line">    <span class="built_in">unset</span> http_proxy</span><br><span class="line">    <span class="built_in">unset</span> https_proxy</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;已关闭代理&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_on</span></span>() &#123;</span><br><span class="line">    <span class="built_in">export</span> no_proxy=<span class="string">&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot;</span></span><br><span class="line">    <span class="built_in">export</span> http_proxy=<span class="string">&quot;http://127.0.0.1:1087&quot;</span></span><br><span class="line">    <span class="built_in">export</span> https_proxy=<span class="variable">$http_proxy</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;已开启代理&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li>test <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 已废弃，只能查看到当前的 IP 地址，其他信息请使用 curl cip.cc 命令</span></span><br><span class="line">curl ip.gs</span><br></pre></td></tr></table></figure>
<img src="https://res.cloudinary.com/incoder/image/upload/v1562849019/blog/proxy-config.png" alt="proxy-config"> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl cip.cc</span><br></pre></td></tr></table></figure>
<img src="https://res.cloudinary.com/incoder/image/upload/v1605687042/blog/proxy-config-info.png" alt="proxy-config-info"></li>
</ol>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aGFuZ21pYW8uY2MvcG9zdHMvZTZiYzY1ZGUuaHRtbA==">Mac终端-iTerm2使用<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMTEwMTQ0NDg=">Homebrew国内如何自动安装（国内地址）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9saGFqaC5naXRodWIuaW8vbWFjLzIwMTgvMDQvMjUvSXRlcm0yLXVzYWdlLWFuZC1za2lsbHMuaHRtbA==">iTerm2 用法与技巧<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>iTerm2</tag>
      </tags>
  </entry>
  <entry>
    <title>MacBook Pro 疑难杂症</title>
    <url>/2020/11/13/mac-question/</url>
    <content><![CDATA[<p>这是一篇记录使用macOS系统时遇到的一些疑难杂症</p>
<h2 id="macOS-Big-Sur"><a class="header-anchor" href="#macOS-Big-Sur"></a>macOS Big Sur</h2>
<p>在 2020.11.13 正式推送了 macOS Big Sur version 11.0.1 版本，这一个版本是改动比较大的版本，这里关于它的新特性就不做介绍了，有兴趣的请查看官方网站介绍 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYXBwbGUuY29tLmNuL21hY29zL2JpZy1zdXI=">Big Sur<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1605885064/blog/macOS_Big_Sur.png" alt=""></p>
<span id="more"></span>
<h3 id="Glance-失效"><a class="header-anchor" href="#Glance-失效"></a>Glance 失效</h3>
<p>Glance 是一个快速预览增强，可以对一些文件进行快速预览，大大提高我们的日常效率，但该应用在 Big Sur 版本中不兼容，由于作者已入职 Apple，且对项目做了归档，不在维护，因此该问题依旧没有解决，可以使用一个付费的应用<span class="exturl" data-url="aHR0cHM6Ly9hcHBzLmFwcGxlLmNvbS9jbi9hcHAvaXByZXZpZXctcG93ZXJmdWwtcXVpY2stbG9vay9pZDE1MTkyMTM1MDk/bD1lbiZtdD0xMg==">iPreView<i class="fa fa-external-link-alt"></i></span>来满足当前需要</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly92MmV4LmNvbS90LzcyNTkwOQ==">Glance 在 Big Sur 系统中失效<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="AirPods-异常"><a class="header-anchor" href="#AirPods-异常"></a>AirPods 异常</h2>
<p>在 AirPods 使用过程中，发现有时候耳机并不能正常工作。通常情况下，我会断开与 macOS 的连接，重新连接，如果还是不能正常工作，在 macOS 的系统蓝牙设置里面，移除连接的耳机设备，将耳机放入 AirPods 盒子里面，先盖上盒子，然后再打开盒子，此时并按住 AirPods 盒子背后的按钮，直到前面呼吸灯变成白色，然后再 macOS 的蓝牙里面找到新的设备，并连接配对。同时也可参考官方指引步骤 <span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS96aC1jbi9IVDIwNzAxMA==">连接并使用 AirPods 和 AirPods Pro<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="单耳工作"><a class="header-anchor" href="#单耳工作"></a>单耳工作</h3>
<p>换一个连接设备，检查耳机是否正常，如果是正常，那说明耳机没有问题，问题就出在 macOS 声音管理上面，打开<code>系统设置</code> -&gt; <code>声音</code> -&gt; <code>输出模式</code> -&gt;<code>设置为居中的平衡模式（既双耳工作）</code></p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1605689283/blog/airpods-single.png" alt="airpods-settings"></p>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>Exp</tag>
        <tag>iTerm2</tag>
      </tags>
  </entry>
  <entry>
    <title>品·杭州</title>
    <url>/2018/04/29/memory-hz1/</url>
    <content><![CDATA[<p>上有天堂，下游苏杭，杭州，一个温文尔雅，一个记忆中天堂，一个南方姑娘的城市。<br>
杭州：毕业后的第二个城市，很开心在这样的城市生活，工作，结识这里的人，杭州和家乡的气候非常相似，因此在杭州有种在家的感觉，在这里遇到的的人，我都会记着你们美丽帅气的脸庞</p>
<span id="more"></span>
<p>18年是一个动荡的一年，曾经的伙伴渐渐的离开了的团队，这两年中，有的人毕业，有的人结婚，有的人生子，有的人成长，感谢我能成为你们生命中的一个过客，和你们一起经历生活百态</p>
<p>不管你们在何方，从事着什么样的工作，过着什么样的生活，我会想你们，愿你们的一切顺利</p>
<p>粗略的剪影，请异步<span class="exturl" data-url="aHR0cDovL3YueW91a3UuY29tL3Zfc2hvdy9pZF9YTXpVNE5UZ3lNREUwTkE9PS5odG1sP3NwbT1hMmh6cC44MjQ0NzQwLjAuMA==">优酷<i class="fa fa-external-link-alt"></i></span></p>
<div class="note default"><p>不遵守规则的人，我们叫他废物，但是，不珍惜同伴的人，连废物都不如<br>
——宁智波·带土</p>
</div>]]></content>
      <categories>
        <category>Memory</category>
      </categories>
      <tags>
        <tag>杭州</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务架构 - Alibaba 生态整合（一）</title>
    <url>/2020/11/11/microservices-alibaba1/</url>
    <content><![CDATA[<p>曾几何时，市面上对于微服务，分两个派系，一个派系以阿里为主的 Dubbo 生态体系，还有一派以 Spring Cloud 生态为主的体系，这两个系列的讨论也一直没有停息过。但现在 Spring Cloud Alibaba 的出现，提供了一整套构建分布式应用开发的微服务组件，由于这些组件是构建在原生的 Spring Cloud 之上，因此其服务治理方面的能力可认为是 Spring Cloud Plus， 不仅完全覆盖 Spring Cloud 原生特性，而且提供更为稳定和成熟的实现。那么从本系列就开始跟着我一起用阿里系的应用搭建分布式微服务应用，满足企业级的应用需要，而不是停留在 Dome 级别的应用框架使用。废话不多说，我们一起开始这一系列的实践</p>
<span id="more"></span>
<p>本篇文章主要讲一讲在构建分布式微服务应用时，经常遇到的问题以及对于同类型组件选择，以及在开发过程中相关问题的思考，对于在整个应用开发过程中，开发人员应该怎么去配合等等，那第一个问题是面对我们的业务场景该如何去做技术选型，我们先看 Spring 官方经典的微服务架构图</p>
<p><img src="https://spring.io/images/diagram-microservices-88e01c7d34c688cb49556435c130d352.svg" alt=""></p>
<p>微服务的核心组件由：网关，服务注册发现，服务配置，熔断限流等组成</p>
<div class="note info"><p>注意这里微服务主要以 <code>Alibaba</code> 系相关的开源组件为基础构建，并非是 <a href="https://github.com/alibaba/spring-cloud-alibaba"><code>Spring Cloud Alibaba</code></a> 项目的照搬，而是基于企业实际业务需求的抽象整合，只为提高效率、总结编程套路以及提升编程思想</p>
</div>
<h2 id="选型"><a class="header-anchor" href="#选型"></a>选型</h2>
<ul>
<li>编程语言：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzgv">Oracle JDK 8<i class="fa fa-external-link-alt"></i></span></li>
<li>构建工具：<span class="exturl" data-url="aHR0cHM6Ly9ncmFkbGUub3Jn">Gradle<i class="fa fa-external-link-alt"></i></span></li>
<li>网关路由：<span class="exturl" data-url="aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWNsb3VkLWdhdGV3YXk=">Spring Cloud Gateway<i class="fa fa-external-link-alt"></i></span></li>
<li>服务通信：<span class="exturl" data-url="aHR0cHM6Ly9kdWJiby5hcGFjaGUub3JnL3po">Dubbo<i class="fa fa-external-link-alt"></i></span></li>
<li>消息管理：<span class="exturl" data-url="aHR0cDovL3JvY2tldG1xLmFwYWNoZS5vcmc=">RockerMQ<i class="fa fa-external-link-alt"></i></span></li>
<li>分布式事务：<span class="exturl" data-url="aHR0cDovL3NlYXRhLmlvL3poLWNu">Seata<i class="fa fa-external-link-alt"></i></span></li>
<li>注册中心及配置中心：<span class="exturl" data-url="aHR0cHM6Ly9uYWNvcy5pby96aC1jbg==">Nacos<i class="fa fa-external-link-alt"></i></span></li>
<li>限流，熔断，降级：<span class="exturl" data-url="aHR0cHM6Ly9zZW50aW5lbGd1YXJkLmlvL3poLWNu">Sentinel<i class="fa fa-external-link-alt"></i></span></li>
<li>文档管理：<span class="exturl" data-url="aHR0cDovL3NwcmluZ2ZveC5naXRodWIuaW8vc3ByaW5nZm94">SpringFox<i class="fa fa-external-link-alt"></i></span> + <span class="exturl" data-url="aHR0cHM6Ly9kb2MueGlhb21pbmZvLmNvbQ==">Knife4j<i class="fa fa-external-link-alt"></i></span> + <span class="exturl" data-url="aHR0cHM6Ly9kdWJiby5hcGFjaGUub3JnL3poL2Jsb2cvMjAyMC8xMi8yMi9kdWJiby1hcGktZG9jcy1hcGFjaGUtZHViYm8lRTYlOTYlODclRTYlQTElQTMlRTUlQjElOTUlRTclQTQlQkElRTYlQjUlOEIlRTglQUYlOTUlRTUlQjclQTUlRTUlODUlQjcv">Dubbo-Api-Docs<i class="fa fa-external-link-alt"></i></span></li>
<li>部署发布：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZG9ja2VyLmNvbQ==">Docker<i class="fa fa-external-link-alt"></i></span> + <span class="exturl" data-url="aHR0cHM6Ly93d3cuc29uYXR5cGUuY29tL25leHVzL3JlcG9zaXRvcnktb3Nz">Nexus Repository OSS<i class="fa fa-external-link-alt"></i></span></li>
<li>运维监控：<span class="exturl" data-url="aHR0cHM6Ly9wcm9tZXRoZXVzLmlv">Prometheus<i class="fa fa-external-link-alt"></i></span> + <span class="exturl" data-url="aHR0cHM6Ly9ncmFmYW5hLmNvbQ==">Grafana<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1616294894/blog/Spring-Cloud-Alibaba.png" alt=""></p>
<h2 id="SpringCloud-VS-SpringCloud-Alibaba"><a class="header-anchor" href="#SpringCloud-VS-SpringCloud-Alibaba"></a>SpringCloud VS SpringCloud Alibaba</h2>
<p>这里我汇总到表格中，方便查看比较</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1616302368/blog/Spring_Cloud_VS_Spring_Cloud_Alibaba.png" alt=""></p>
<h2 id="相关问题"><a class="header-anchor" href="#相关问题"></a>相关问题</h2>
<h3 id="JDK"><a class="header-anchor" href="#JDK"></a>JDK</h3>
<h4 id="OpenJDK"><a class="header-anchor" href="#OpenJDK"></a>OpenJDK</h4>
<p>Java 最早由 SUN（Sun Microsystems，发起于美国斯坦福大学，SUN 是 Stanford University Network 的缩写）发明，2006 年 SUN 公司将 Java 开源，此时的 JDK 即为 OpenJDK</p>
<p><span class="exturl" data-url="aHR0cDovL29wZW5qZGsuamF2YS5uZXQv">OpenJDK<i class="fa fa-external-link-alt"></i></span> 是 Java SE 的开源实现，由 SUN 和 Java 社区提供支持，2009 年 Oracle 收购了 SUN 公司，自此 Java 的维护方之一的 SUN 也就变成了 Oracle</p>
<p>大多数 JDK 都是在 OpenJDK 的基础上编写实现的，比如 IBM J9，Azul Zulu，Azul Zing 和 Oracle JDK。几乎所有的 JDK 都派生自 OpenJDK，他们之间不同的是授权许可证。常见的 OpenJDK 发行商</p>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>发行商</strong></th>
<th style="text-align:center"><strong>长期支持（TLS）</strong></th>
<th style="text-align:center"><strong>许可证（license）</strong></th>
<th style="text-align:center"><strong>TCK 测试</strong></th>
<th style="text-align:center"><strong>未修改的上游构建</strong></th>
<th style="text-align:center"><strong>提供商业支持</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><span class="exturl" data-url="aHR0cHM6Ly9hZG9wdG9wZW5qZGsubmV0Lw==">AdoptOpenJDK<i class="fa fa-external-link-alt"></i></span></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center"><font color=red>No</font></td>
<td style="text-align:center">Optional</td>
<td style="text-align:center">Optional（IBM）</td>
</tr>
<tr>
<td style="text-align:center"><span class="exturl" data-url="aHR0cDovL2RyYWdvbndlbGwtamRrLmlvLw==">Alibaba Dragonwell<i class="fa fa-external-link-alt"></i></span></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center"><font color=red>No</font></td>
<td style="text-align:center"><font color=red>No</font></td>
</tr>
<tr>
<td style="text-align:center"><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9jb3JyZXR0by8=">Amazon Corretto<i class="fa fa-external-link-alt"></i></span></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center"><font color=red>No</font></td>
<td style="text-align:center">Optional</br>（on AWS）</td>
</tr>
<tr>
<td style="text-align:center"><span class="exturl" data-url="aHR0cHM6Ly93d3cuYXp1bC5jb20vZG93bmxvYWRzL3p1bHUtY29tbXVuaXR5Lz9wYWNrYWdlPWpkaw==">Azul Zulu<i class="fa fa-external-link-alt"></i></span></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center"><font color=red>No</font></td>
<td style="text-align:center">Optional</td>
</tr>
<tr>
<td style="text-align:center"><span class="exturl" data-url="aHR0cHM6Ly9iZWxsLXN3LmNvbS9wYWdlcy9kb3dubG9hZHMv">BellSoft Liberica JDK<i class="fa fa-external-link-alt"></i></span></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center"><font color=red>No</font></td>
<td style="text-align:center">Optional</td>
</tr>
<tr>
<td style="text-align:center"><span class="exturl" data-url="aHR0cHM6Ly93d3cuaWJtLmNvbS9zdXBwb3J0L3BhZ2VzL2phdmEtc2RrLWRvd25sb2Fkcw==">IBM Java JDK<i class="fa fa-external-link-alt"></i></span></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center"><font color=red>No</font></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center"><font color=red>No</font></td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:center"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29qZGtidWlsZC9vamRrYnVpbGQ=">ojdkbuild<i class="fa fa-external-link-alt"></i></span></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center"><font color=red>No</font></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center"><font color=red>No</font></td>
</tr>
<tr>
<td style="text-align:center"><span class="exturl" data-url="aHR0cHM6Ly93d3cub3BlbmxvZ2ljLmNvbS9vcGVuamRrLWRvd25sb2Fkcw==">OpenLogic OpenJDK<i class="fa fa-external-link-alt"></i></span></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center"><font color=red>No</font></td>
<td style="text-align:center"><font color=red>No</font></td>
<td style="text-align:center">Optional</td>
</tr>
<tr>
<td style="text-align:center"><span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2UtZG93bmxvYWRzLmh0bWw=">Oracle Java SE<i class="fa fa-external-link-alt"></i></span></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center"><font color=red>No</font></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center"><font color=red>No</font></td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:center"><span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLmphdmEubmV0Lw==">Oracle OpenJDK<i class="fa fa-external-link-alt"></i></span></td>
<td style="text-align:center"><font color=red>No</font></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center"><font color=red>No</font></td>
</tr>
<tr>
<td style="text-align:center"><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLnJlZGhhdC5jb20vcHJvZHVjdHMvb3Blbmpkay9kb3dubG9hZA==">Red Hat OpenJDK<i class="fa fa-external-link-alt"></i></span></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center"><font color=red>No</font></td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:center"><span class="exturl" data-url="aHR0cHM6Ly9zYXAuZ2l0aHViLmlvL1NhcE1hY2hpbmUv">SAP SAPMachine<i class="fa fa-external-link-alt"></i></span></td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center"><font color=red>No</font></td>
<td style="text-align:center"><font color=red>No</font></td>
</tr>
</tbody>
</table>
<blockquote>
<p>TLS：long-term support，长期支持（LTS）是一种产品生命周期管理策略，在该策略中，与标准版相比，计算机软件的稳定版本可以维持更长的时间。该术语通常保留给开源软件，它描述的软件版本比该软件的标准版本支持数月或数年的支持。<br>
TCK：Technology Compatibility Kit，技术兼容性套件（TCK）是一套测试套件，至少名义上检查Java规范请求（JSR）的特定声称实施是否符合要求</p>
</blockquote>
<h4 id="OralceJDK"><a class="header-anchor" href="#OralceJDK"></a>OralceJDK</h4>
<p>显而易见 OracleJDK 是在 Oracle 收购 SUN 公司之后，基于 OpenJDK 源码构建的 JDK 被命名了 OracleJDK，两则之间没有重大的技术差异</p>
<h4 id="两者的区别"><a class="header-anchor" href="#两者的区别"></a>两者的区别</h4>
<h4 id="问题"><a class="header-anchor" href="#问题"></a>问题</h4>
<p>有人会说了，这有啥好说的，我们在公司开发都是用 OracleJDK 的。曾经我也以为这两个区别不是很大，看公司的使用情况了，直到我使用了 CentOS 7 系统默认带的 OpenJDK 来编译 Gradle 项目，死活是编译不过，总是提醒我找不到 <code>tools.jar</code> 包。有图有真相</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1616514430/blog/gradle-openjre.png" alt=""></p>
<p>一开始，我把以为是环境配置的问题，但是经过一番折腾，卸载了自带的 OpenJDK，然后再用 <code>yum install java</code> 命令去安装 OpenJDK，发现并不是环境的问题，而是系统自带的这个 OpenJDK 是 JRE，所以并没有包含 <code>tools.jar</code> 文件。所以这个问题就是你系统 JDK 的问题了。建议卸载 JRE，重新安装 JDK</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以先查找 JDK，下面命令是我查找 java-1.8 的相关应用</span></span><br><span class="line">yum search java-1.8 | grep -i --color JDK</span><br><span class="line"><span class="comment"># 也可以直接安装 JDK，比如我这里提供的 java-1.8.0-openjdk-devel.x86_64</span></span><br><span class="line">yum install java-1.8.0-openjdk-devel.x86_64</span><br></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1616515361/blog/centos-openjdk.png" alt=""></p>
<h3 id="Gradle-or-Maven"><a class="header-anchor" href="#Gradle-or-Maven"></a>Gradle or Maven</h3>
<p>关于如何使用 Gradle 构建项目，以及使用 Gradle 配置符合企业敏捷开发需求，可查看我的 <a href="https://incoder.org/tags/Gradle">Gradle</a> 系列的文章</p>
<h3 id="jar-与-bootJar"><a class="header-anchor" href="#jar-与-bootJar"></a>jar 与 bootJar</h3>
<p>之前在<a href="https://incoder.org/2019/07/05/springboot2/">《SpringBoot（二） 启动分析JarLauncher》</a>文章中进行对 SpringBoot 应用启动做了分析，提到了 <a href="https://incoder.org/2019/07/05/springboot2/#jar%E8%A7%84%E8%8C%83">jar 规范</a>，做了简单的介绍，那么本篇在此基础上进一步的完善这个知识点</p>
<blockquote>
<p>这里以 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Jvb3RDbHVzdGVyL3JjLW1pY3Jvc2VydmljZXMtYWxpYmFiYQ==">rc-microservices-alibaba<i class="fa fa-external-link-alt"></i></span> 项目的 <code>microservices-alibaba-gateway</code> 模块的编译为例</p>
</blockquote>
<h4 id="jar"><a class="header-anchor" href="#jar"></a>jar</h4>
<p>jar（Java Archive）可以看做是特殊文件压缩的一种，通常用于聚合大量的 Java 类文件，相关的元数据和资源文件到一个文件，以便分发 Java 平台应用软件或库。jar 文件是一种归档文件，以 ZIP 格式构建，以 <code>.jar</code> 为文件扩展名。包含一个可选的 <code>META-INF</code> 目录，可以通过命令行 jar 工具或使用 Java 平台中的 <code>java.util.jar</code> API 创建 jar 文件</p>
<p>可以看到，我们打包成 jar 的文件，仅仅是源码+资源文件，以及生成的 <code>META_INF</code> 文件</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">microservices-alibaba-gateway-1.0-SNAPSHOT</span><br><span class="line">    ├── META-INF</span><br><span class="line">    ├── org</span><br><span class="line">    │   └── incoder</span><br><span class="line">    │       └── gateway</span><br><span class="line">    │           ├── config</span><br><span class="line">    │           ├── exception</span><br><span class="line">    │           └── filter</span><br><span class="line">    ├── static</span><br><span class="line">    └── templates</span><br></pre></td></tr></table></figure>
<h4 id="bootJar"><a class="header-anchor" href="#bootJar"></a>bootJar</h4>
<p>看名字就知道，这是 SpringBoot 的专属 jar。为什么会有这种 jar，原因是在 SpringBoot 出现之前，我们的 jar 应用想要运行，需要将应用放入到 Tomcat 中。而 SpringBoot 的出现改变了这层关系，是 SpringBoot 在打包成 bootJar 时，会内置 Tomcat，我们可以直接运行启动 jar 应用，可能有人会说，这怎么改变了，不都还是运行在 Tomcat 上么。没错它确实依然运行在 Tomcat 上，但是他们的加载方式改变了</p>
<p>我们可以看到，打成 bootJar 的文件，除了 <code>META-INF</code> 相关文件，并且包含了 <code>BOOT-INF</code> 的 lib 路径下存放项目所使用的所有第三方的 jar 包 ，同时在打包的根目录，生成了 SpringBoot 的 loader 相关的文件</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">microservices-alibaba-gateway-1.0-SNAPSHOT</span><br><span class="line">    ├── BOOT-INF</span><br><span class="line">    │   ├── classes</span><br><span class="line">    │   │   ├── META-INF</span><br><span class="line">    │   │   ├── org</span><br><span class="line">    │   │   │   └── incoder</span><br><span class="line">    │   │   │       └── gateway</span><br><span class="line">    │   │   │           ├── config</span><br><span class="line">    │   │   │           ├── exception</span><br><span class="line">    │   │   │           └── filter</span><br><span class="line">    │   │   ├── static</span><br><span class="line">    │   │   └── templates</span><br><span class="line">    │   └── lib</span><br><span class="line">    ├── META-INF</span><br><span class="line">    └── org</span><br><span class="line">        └── springframework</span><br><span class="line">            └── boot</span><br><span class="line">                └── loader</span><br><span class="line">                    ├── archive</span><br><span class="line">                    ├── data</span><br><span class="line">                    ├── jar</span><br><span class="line">                    ├── jarmode</span><br><span class="line">                    └── util</span><br></pre></td></tr></table></figure>
<h3 id="Spring-生态"><a class="header-anchor" href="#Spring-生态"></a>Spring 生态</h3>
<ol>
<li>Spring：一个一站式轻量级Java 开发框架，核心是控制反转（IOC）和面向切面（AOP），针对开发 Web 层，业务层，持久层等提供了多种配置解决方案，也是整个微服务开发的基石</li>
<li>SpringMVC：是 Spring 基础之上的一个 MVC 框架，主要处理 Web 开发的路径映射和视图渲染，属于 Spring 框架中 Web 层开发的一部分（开发配置非常繁琐，复杂）</li>
<li>SpringBoot：专注于服务方面的接口开发，和前端解耦，默认优于配置，一定程度上取消了 XML 配置，是一套快速开发的脚手架，能快速开发单个微服务</li>
<li>SpringCloud：大部分功能组件基于 SpringBoot 去实现，提供了完整的微服务架构的技术生态，SpringCloud 专注于微服务的整合和管理</li>
</ol>
<h3 id="单工程-or-聚合工程"><a class="header-anchor" href="#单工程-or-聚合工程"></a>单工程 or 聚合工程</h3>
<blockquote>
<p>个人推荐单工程的方式，毕竟聚合工程最终会随着业务的发展推进，需要拆分为单项目开发管理，那还不如一开始就拆分</p>
</blockquote>
<h4 id="单工程"><a class="header-anchor" href="#单工程"></a>单工程</h4>
<p>这里的单工程是指，每一个模块都是一个项目，由一个仓库进行管理，特点及要求如下</p>
<ol>
<li>适合团队小组分工明确，开发人员多</li>
<li>适合项目迭代快</li>
<li>需要比较健全的基础设施，比如网关，公共基础工具包，消息管理，以及自动化部署相关服务设施</li>
</ol>
<blockquote>
<p>相关的构架过程可参考 <a href="https://incoder.org/2020/12/16/gradle3/">Gradle（三）SpringBoot 单工程</a> 文章</p>
</blockquote>
<h4 id="聚合工程"><a class="header-anchor" href="#聚合工程"></a>聚合工程</h4>
<p>这里的聚合工程是指，将整个系统开发的所有模块以及公共模块都放在一个项目工程中，也就是用同一个仓库来进行管理，特点如下</p>
<ol>
<li>适合项目初期，项目分工不是特别明确，开发人员少</li>
<li>项目需要集中管理</li>
</ol>
<blockquote>
<p>相关的构架过程可参考 <a href="https://incoder.org/2021/03/06/gradle4/">Gradle（四）SpringBoot 聚合工程</a> 文章</p>
</blockquote>
<h3 id="业务拆分"><a class="header-anchor" href="#业务拆分"></a>业务拆分</h3>
<p>对于服务的拆分是没有统一的标准，除了通过实际的业务场景，团队能力，人员组织架构等多种因素综合考虑。都根据实际的需求进行调整，对于拆分主要从以下原则去思考</p>
<ol>
<li>单一职责原则：保证每个服务只做好一件事，体现“高内聚，低耦合”，尽量减少对外界环境的依赖</li>
<li>服务依赖原则：避免服务间的循环依赖，在设计时就需要对服务进行分级，区分核心服务与非核心服务</li>
<li>Two Pizza Team原则：让团队保持在2 个披萨就能让队员吃饱的小规模概念</li>
</ol>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NzM4NTIzNA==">传统行业转型微服务的挖坑与填坑<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzE5ODgyMzIw">Java官方（Oracle/Sun）发布的JDK，和开源项目OpenJDK，里面包含的JVM是否相同<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNTk4Mjkx">OpenJDK和Oracle JDK有什么区别和联系？<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Microservices</category>
      </categories>
      <tags>
        <tag>Microservices</tag>
        <tag>Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务架构 - SpringCloud 生态整合（一）</title>
    <url>/2020/11/08/microservices-springcloud1/</url>
    <content><![CDATA[<p>微服务这一概念在 2014 年的 3 月份随着 James Lewis 和 Martin Fowler 在博客中对于微服务这一概念做出了详细的阐述，开始走进开发者的视野。在 Spring 官方的加持下，助推微服务架构风格的应用开始火边整个后端领域。在早起微服务化的演进中 Netflix 的一些列开源的组件，迅速占领微服务生态中的 C 位，提供了网关路由，负载均衡，服务注册发现，服务通信，服务熔断限流等核心组件</p>
<span id="more"></span>
<p>本系列文章是基于 Spring 官方提供的组件，完成相关功能组件的整合，以满足企业需求为目的的学习总结。本篇文章先从 Spring 官网经典的微服务架构图开始</p>
<p><img src="https://spring.io/images/diagram-microservices-88e01c7d34c688cb49556435c130d352.svg" alt=""></p>
<div class="note info"><p>注意这里主要以 <code>Spring</code> 系官方相关的开源组件为基础构建，并非是 <a href="https://spring.io/projects/spring-cloud"><code>Spring Cloud</code></a> 项目的照搬，而是基于企业实际业务需求的抽象整合，只为提高效率、总结编程套路以及提升编程思想</p>
</div>
<p>当然这只是我在实际生产实践中的总结，并不一定适合你的业务场景，你也可以参考我的另一个系列 <a href="https://incoder.org/2020/11/11/microservices-alibaba1/">Alibaba 生态整合</a>，希望能对你有所帮助</p>
<h2 id="选型"><a class="header-anchor" href="#选型"></a>选型</h2>
<ul>
<li>编程语言：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzgv">Oracle JDK 8<i class="fa fa-external-link-alt"></i></span></li>
<li>构建工具：<span class="exturl" data-url="aHR0cHM6Ly9ncmFkbGUub3Jn">Gradle<i class="fa fa-external-link-alt"></i></span></li>
<li>网关路由：<span class="exturl" data-url="aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWNsb3VkLWdhdGV3YXk=">Spring Cloud Gateway<i class="fa fa-external-link-alt"></i></span></li>
<li>服务通信：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL09wZW5GZWlnbi9mZWlnbg==">OpenFeign<i class="fa fa-external-link-alt"></i></span></li>
<li>注册中心：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL05ldGZsaXgvZXVyZWth">Eureka<i class="fa fa-external-link-alt"></i></span></li>
<li>配置中心：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1jbG91ZC9zcHJpbmctY2xvdWQtY29uZmln">Spring Cloud Config<i class="fa fa-external-link-alt"></i></span></li>
<li>限流，熔断，降级：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL05ldGZsaXgvSHlzdHJpeA==">Hystrix<i class="fa fa-external-link-alt"></i></span></li>
<li>文档管理：<span class="exturl" data-url="aHR0cDovL3NwcmluZ2ZveC5naXRodWIuaW8vc3ByaW5nZm94">SpringFox<i class="fa fa-external-link-alt"></i></span> + <span class="exturl" data-url="aHR0cHM6Ly9kb2MueGlhb21pbmZvLmNvbQ==">Knife4j<i class="fa fa-external-link-alt"></i></span></li>
<li>部署发布：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZG9ja2VyLmNvbQ==">Docker<i class="fa fa-external-link-alt"></i></span> + <span class="exturl" data-url="aHR0cHM6Ly93d3cuc29uYXR5cGUuY29tL25leHVzL3JlcG9zaXRvcnktb3Nz">Nexus Repository OSS<i class="fa fa-external-link-alt"></i></span></li>
<li>链路追踪：<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5zcHJpbmcuaW8vc3ByaW5nLWNsb3VkLXNsZXV0aA==">Spring Cloud Sleuth<i class="fa fa-external-link-alt"></i></span> + <span class="exturl" data-url="aHR0cHM6Ly96aXBraW4uaW8=">Zipkin<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Microservices</category>
      </categories>
      <tags>
        <tag>Microservices</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>第 100 篇原创文章</title>
    <url>/2020/12/31/milepost1/</url>
    <content><![CDATA[<p>未曾想过，居然能写到第 100 篇文章。虽然大部分文章都是线性流水操作，但全部是自己经过<strong>实践</strong>的总结；虽然没有精彩的故事，但都是自己成长的<strong>思考</strong>；虽然有时一篇文章需要要长达一个多月的反复核对，但还是能默默<strong>坚持</strong>。只是这第 100 篇来的有点晚，断断续续大概有 3 年的时间，时间是个坏老头，把我给你写情话，悄悄的改成了谎话！</p>
<span id="more"></span>
<p>回想起之前写文章主要是为了记录一些操作步骤和一些知识点，方便遇到类似问题，快速定位，解决问题。但随着文章的越写越多，包含的内容也越来越多，需要去了解的知识也越来越多，真的是有一种 “你知道的越多，你不知道的越多” 的感觉，这种感觉让我对待每个知识点都能有往深去深挖的动力，对每一个知识点用自己文字将它讲出来时有一种让我欲罢不能成就感，这或许就是上瘾吧</p>
<p>总结下第一个里程碑，主要是平时接触到领域算是一些入门级别的一些文章，以及一些比较粗浅的见闻，缺乏深层次的剖析和思考，这也是第二个里程碑首要做的事情，把每个接触到的知识点进行深挖，打通自己的技术栈。技术领域能不能走得远，很大程度上并不是你的技能宽度，而是深度，是在一个方向上的深耕，并且对于底层的技能也是要有足够的涉猎，只有这样就算是技术的花样任它怎么去变，你都能以不变应万变（透过现象找到本质）；第二点是是对第一阶段内容完善补充；第三点就是打磨自己的语言表达能力，让文章更加的通俗易懂；第四点就是不能太拖拉，要保持高效的内容输出</p>
<p>这一阶段，对开源项目贡献评价最高的是 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoeC9yYXAyLWRlbG9zL2lzc3Vlcy8xMTk=">rap2-delos<i class="fa fa-external-link-alt"></i></span> 项目了。努力在接下来的里程中，提高质量和参与度，争取早日在大型项目中做到 Committer</p>
<p>很感谢这一路走来，大伙对我的认可和期待以及赞赏，下一个里程碑我们见~</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1611485411/blog/milepost1-admire.png" alt=""></p>
]]></content>
      <categories>
        <category>Milepost</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>OSS 之 Minio 初体验</title>
    <url>/2021/03/16/minio/</url>
    <content><![CDATA[<p>MinIO 是一个基于 Apache License v2.0 开源协议使用 Go 语言开发的对象存储服务。它兼容亚马逊 S3 云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等，而一个对象文件可以是任意大小，从几 kb 到最大 5T 不等。MinIO 是一个非常轻量的服务,可以很简单的和其他应用的结合，类似 NodeJS, Redis 或者 MySQL。</p>
<span id="more"></span>
<p>MinIO 包含 MinIO Server, MinIO Client 以及方便开发基于不同编程语言使用的 MinIO SDK，这三部分组成，使用步骤也很简单，在服务器上安装 MinIO Server 应用，在项目中集成对应的 MinIO SDK，然后按照你的业务情况编写相应的实现即可，在开始前，我们先看看为什么我选择 MiniIO 作为自建的 OSS 服务</p>
<ol>
<li>MinIO 由良好的存储机制</li>
<li>兼容 Amason 的 S3 分布式存储</li>
<li>天然的支持云原生</li>
<li><mark>支持私有部署</mark>，可分布式，可单机，100%开源</li>
<li>友好简单的部署方式，提供管理页面</li>
<li>还可以配合其他的健康管理工具进行监控，比如 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pbi5pby9kb2NzL2hvdy10by1tb25pdG9yLW1pbmlvLXVzaW5nLXByb21ldGhldXMuaHRtbA==">Prometheus<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2>
<p>由于 MinIO Server 已经提供了 Docker 的安装镜像，那我们就以 Docker 安装为例，其他安装方式可参考官方教程 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pbi5pby9kb2NzL21pbmlvLXF1aWNrc3RhcnQtZ3VpZGUuaHRtbA==">MinIO Quickstart Guide<i class="fa fa-external-link-alt"></i></span></p>
<p>关于 Docker 的安装这里不再赘述，Docker 相关详细的使用等知识，可参考我之前的文章 <a href="">Docker（一）</a></p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 拉取 minio docker 镜像</span></span><br><span class="line">docker pull minio/minio</span><br><span class="line"><span class="comment"># 2. 运行 minio 服务</span></span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -p 9000:9000 --name minio \</span></span><br><span class="line"><span class="language-bash">  -v /opt/docker/minio/data:/data \</span></span><br><span class="line"><span class="language-bash">  -v /opt/docker/minio/config:/root/.minio \</span></span><br><span class="line"><span class="language-bash">  -d --restart=always \</span></span><br><span class="line"><span class="language-bash">  -d minio/minio server /data</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里简单说一下命令的含义，应用命名为 minio ，运行服务在 9000 端口，同时将容器的相关路径文件映射到宿主机的 <code>/opt/docker/minio</code> 路径，开机自启</p>
</blockquote>
<p>成功运行服务，可查看日志</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Endpoint: http://172.17.0.2:9000 http://127.0.0.1:9000</span><br><span class="line">Browser Access:</span><br><span class="line">http://172.17.0.2:9000 http://127.0.0.1:9000</span><br><span class="line">Object API (Amazon S3 compatible):</span><br><span class="line">Go: https://docs.min.io/docs/golang-client-quickstart-guide</span><br><span class="line">Java: https://docs.min.io/docs/java-client-quickstart-guide</span><br><span class="line">Python: https://docs.min.io/docs/python-client-quickstart-guide</span><br><span class="line">JavaScript: https://docs.min.io/docs/javascript-client-quickstart-guide</span><br><span class="line">.NET: https://docs.min.io/docs/dotnet-client-quickstart-guide</span><br><span class="line">Detected default credentials &#x27;minioadmin:minioadmin&#x27;, please change the credentials immediately using &#x27;MINIO_ROOT_USER&#x27; and &#x27;MINIO_ROOT_PASSWORD&#x27;</span><br></pre></td></tr></table></figure>
<p>安装完成后，我们就可以通过 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo5MDAw">http://localhost:9000<i class="fa fa-external-link-alt"></i></span> 访问 MinIO 服务，默认用户名和密码分别为: <mark>minioadmin</mark>, <mark>minioadmin</mark></p>
<h2 id="使用"><a class="header-anchor" href="#使用"></a>使用</h2>
<h3 id="页面操作"><a class="header-anchor" href="#页面操作"></a>页面操作</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1617090692/blog/minio-web.png" alt=""></p>
<p>我们直接看图，输入账号密码后，可以看到 MinIO 的管理页面，我们就可以上传文件，是不是很方便。第一次上传必须先要创建一个 bucket 后，才可以上传，如下图操作结果</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1617091291/blog/minio-upload.png" alt=""></p>
<h3 id="Client-操作"><a class="header-anchor" href="#Client-操作"></a>Client 操作</h3>
<h3 id="SDK-操作"><a class="header-anchor" href="#SDK-操作"></a>SDK 操作</h3>
<div class="note warning"><p>这里以 Java 语言为例，查看官方文档时，一定要查看英文文档，中文文档已年久失修落后很多，其他的语言实现请参考官方文档</p>
</div>
<h4 id="导入依赖"><a class="header-anchor" href="#导入依赖"></a>导入依赖</h4>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  implementation <span class="string">&quot;io.minio:minio:8.1.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="功能实现"><a class="header-anchor" href="#功能实现"></a>功能实现</h4>
<p>由于我这里是 SpringBoot 项目，为了方便在应用的 <code>application.yml</code> 文件中配置了 MinIO 相关的参数</p>
<h4 id="配置文件"><a class="header-anchor" href="#配置文件"></a>配置文件</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">minio:</span></span><br><span class="line">  <span class="comment"># minio 服务运行的地址</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">http://127.0.0.1</span></span><br><span class="line">  <span class="comment"># minio 服务运行的端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line">  <span class="comment"># minio 服务登录账号</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">minioadmin</span></span><br><span class="line">  <span class="comment"># minio 服务登录密码</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">minioadmin</span></span><br><span class="line">  <span class="comment"># minio 设置上传默认存放桶</span></span><br><span class="line">  <span class="attr">bucketName:</span> <span class="string">cpe-manager-test</span></span><br></pre></td></tr></table></figure>
<h4 id="工具类"><a class="header-anchor" href="#工具类"></a>工具类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 资源上传工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Jerry xu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> : 2021/3/18  14:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * minio:</span></span><br><span class="line"><span class="comment">     * endpoint: http://192.168.1.163</span></span><br><span class="line"><span class="comment">     * port: 9000</span></span><br><span class="line"><span class="comment">     * accessKey: minioadmin</span></span><br><span class="line"><span class="comment">     * secretKey: minioadmin</span></span><br><span class="line"><span class="comment">     * bucketName: cpe-manager-test</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ENDPOINT</span> <span class="operator">=</span> <span class="string">&quot;http://192.168.1.163&quot;</span>;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">PORT</span> <span class="operator">=</span> <span class="number">19000</span>;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.accessKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCESS_KEY</span> <span class="operator">=</span> <span class="string">&quot;minioadmin&quot;</span>;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.secretKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET_KEY</span> <span class="operator">=</span> <span class="string">&quot;minioadmin&quot;</span>;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.bucketName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUCKET_NAME</span> <span class="operator">=</span> <span class="string">&quot;cpe-manager-test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MinioClient <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (minioClient == <span class="literal">null</span>) &#123;</span><br><span class="line">            minioClient = MinioClient.builder().endpoint(ENDPOINT, PORT, <span class="literal">false</span>).credentials(ACCESS_KEY, SECRET_KEY).build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minioClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取minio所有的桶</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.List&lt;io.minio.messages.Bucket&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Bucket&gt; <span class="title function_">getAllBucket</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取minio中所以的 bucket</span></span><br><span class="line">        List&lt;Bucket&gt; buckets = getInstance().listBuckets();</span><br><span class="line">        <span class="keyword">for</span> (Bucket bucket : buckets) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;bucket 名称:  &#123;&#125;      bucket 创建时间: &#123;&#125;&quot;</span>, bucket.name(), bucket.creationDate());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buckets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将图片上传到minio服务器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 输入流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName  存储的文件名称，必须包含后缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName  自定义存储桶</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">uploadToMinio</span><span class="params">(InputStream inputStream, String objectName, String bucketName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取文件后缀</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileSuffix</span> <span class="operator">=</span> Objects.requireNonNull(objectName).substring(objectName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">            <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> FileType.getContentType(fileSuffix);</span><br><span class="line"><span class="comment">//            // 重新生成文件名，避免重复</span></span><br><span class="line"><span class="comment">//            String objectName = UUID.randomUUID().toString() + fileSuffix;</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> inputStream.available();</span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">putObjectArgs</span> <span class="operator">=</span> PutObjectArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .object(objectName)</span><br><span class="line">                    .stream(inputStream, size, -<span class="number">1</span>)</span><br><span class="line">                    .contentType(contentType)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="comment">// 上传到minio</span></span><br><span class="line">            <span class="type">ObjectWriteResponse</span> <span class="variable">objectWriteResponse</span> <span class="operator">=</span> getInstance().putObject(putObjectArgs);</span><br><span class="line">            inputStream.close();</span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.isEmpty(objectWriteResponse.etag())) &#123;</span><br><span class="line">                <span class="comment">// 返回上传获取到的地址</span></span><br><span class="line">                <span class="keyword">return</span> getUrlByObjectName(objectName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将图片上传到minio服务器，默认存放在 cpe-manager-test 桶内</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 输入流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName  存储的文件名称，必须包含后缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">uploadToMinio</span><span class="params">(InputStream inputStream, String objectName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取文件后缀</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileSuffix</span> <span class="operator">=</span> Objects.requireNonNull(objectName).substring(objectName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">            <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> FileType.getContentType(fileSuffix);</span><br><span class="line"><span class="comment">//            // 重新生成文件名，避免重复</span></span><br><span class="line"><span class="comment">//            String objectName = UUID.randomUUID().toString() + fileSuffix;</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> inputStream.available();</span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">putObjectArgs</span> <span class="operator">=</span> PutObjectArgs.builder()</span><br><span class="line">                    .bucket(BUCKET_NAME)</span><br><span class="line">                    .object(objectName)</span><br><span class="line">                    .stream(inputStream, size, -<span class="number">1</span>)</span><br><span class="line">                    .contentType(contentType)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="comment">// 上传到minio</span></span><br><span class="line">            <span class="type">ObjectWriteResponse</span> <span class="variable">objectWriteResponse</span> <span class="operator">=</span> getInstance().putObject(putObjectArgs);</span><br><span class="line">            inputStream.close();</span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.isEmpty(objectWriteResponse.etag())) &#123;</span><br><span class="line">                <span class="comment">// 返回上传获取到的地址</span></span><br><span class="line">                <span class="keyword">return</span> getUrlByObjectName(objectName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据指定的objectName获取下载链接，需要bucket设置可下载的策略</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 对象的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUrlByObjectName</span><span class="params">(String objectName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getInstance().getPresignedObjectUrl(</span><br><span class="line">                    GetPresignedObjectUrlArgs.builder()</span><br><span class="line">                            .method(Method.GET)</span><br><span class="line">                            .bucket(BUCKET_NAME)</span><br><span class="line">                            .object(objectName)</span><br><span class="line">                            <span class="comment">// 过期策略【默认有效期7天】</span></span><br><span class="line"><span class="comment">//                            .expiry(2, TimeUnit.HOURS)</span></span><br><span class="line">                            .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据objectName从minio中下载文件到指定的目录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName minio上的文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName   下载生成的文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dir        文件目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">downloadFromMinioToFile</span><span class="params">(String objectName, String fileName, String dir)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">GetObjectArgs</span> <span class="variable">objectArgs</span> <span class="operator">=</span> GetObjectArgs.builder()</span><br><span class="line">                .bucket(BUCKET_NAME)</span><br><span class="line">                .object(objectName)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.mkdirs()) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;创建失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> getInstance().getObject(objectArgs);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(dir, fileName.substring(fileName.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>)));</span><br><span class="line">        <span class="type">int</span> length;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((length = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">        &#125;</span><br><span class="line">        outputStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据文件名批量删除（默认删除 BUCKET_NAME 下的文件）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listFile 文件名(含后缀)列表，例如：demo.png</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功返回为null， 失败返回Map&lt;objectName, failMessage&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title function_">removeObjects</span><span class="params">(List&lt;String&gt; listFile)</span> &#123;</span><br><span class="line">        List&lt;DeleteObject&gt; objects = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String, String&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        listFile.forEach(t -&gt; objects.add(<span class="keyword">new</span> <span class="title class_">DeleteObject</span>(t)));</span><br><span class="line">        Iterable&lt;Result&lt;DeleteError&gt;&gt; results =</span><br><span class="line">                getInstance().removeObjects(</span><br><span class="line">                        RemoveObjectsArgs.builder()</span><br><span class="line">                                .bucket(BUCKET_NAME)</span><br><span class="line">                                .objects(objects)</span><br><span class="line">                                .build());</span><br><span class="line">        <span class="keyword">for</span> (Result&lt;DeleteError&gt; result : results) &#123;</span><br><span class="line">            <span class="type">DeleteError</span> <span class="variable">error</span> <span class="operator">=</span> result.get();</span><br><span class="line">            resultMap.put(error.objectName(), error.message());</span><br><span class="line">            log.error(<span class="string">&quot;Error in deleting:&#123;&#125;, message&#123;&#125;&quot;</span>, error.objectName(), error.message());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="上传接口"><a class="header-anchor" href="#上传接口"></a>上传接口</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/upload&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;文件上传&quot;, notes = &quot;支持多文件上传&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">uploadTest</span><span class="params">(<span class="meta">@ApiParam(value = &quot;文件&quot;)</span> <span class="meta">@RequestParam(&quot;file&quot;)</span> List&lt;MultipartFile&gt; file)</span> &#123;</span><br><span class="line">    <span class="comment">// 上传的图片地址</span></span><br><span class="line">    List&lt;String&gt; successFile = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(file.size());</span><br><span class="line">    file.forEach(t -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> MinioUtils.uploadToMinio(t.getInputStream(), t.getOriginalFilename());</span><br><span class="line">            log.info(<span class="string">&quot;图片地址&#123;&#125;&quot;</span>, url);</span><br><span class="line">            successFile.add(url);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> successFile;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="测试"><a class="header-anchor" href="#测试"></a>测试</h4>
<h2 id="问题"><a class="header-anchor" href="#问题"></a>问题</h2>
<h3 id="bucket命名"><a class="header-anchor" href="#bucket命名"></a>bucket命名</h3>
<p>创建 bucket 时，命名不可以使用下划线符号 “<font color="red">_</font>”</p>
<h3 id="账号密码修改"><a class="header-anchor" href="#账号密码修改"></a>账号密码修改</h3>
<p>通过网页管理页面修改登录账号及密码，提示 “Credentials of this user cannot be updated through MinIO Browser.” ，原因是安装应用时，并未显示的指定用户名和密码，可在运行启动时添加如下配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-e <span class="string">&quot;MINIO_ROOT_USER=admin&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;MINIO_ROOT_PASSWORD=admin123456&quot;</span> \</span><br></pre></td></tr></table></figure>
<h3 id="最长7天有效"><a class="header-anchor" href="#最长7天有效"></a>最长7天有效</h3>
<p>通过网页管理页面共享图片或者是使用 SDK 上传图片得到的图片 URL 地址，有效期最长为7天</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">mc config host add minio http://192.168.1.163:19000 minioadmin minioadmin --api S3v4</span><br><span class="line">mc policy set public minio/cpe-manager-test</span><br><span class="line"></span><br><span class="line">mc config host add minio http://127.0.0.1:9000 minioadmin minioadmin --api S3v4</span><br><span class="line">mc policy set public minio/bucket (bucket修改成你自己的名字)</span><br></pre></td></tr></table></figure>
<h3 id="图片无法查看"><a class="header-anchor" href="#图片无法查看"></a>图片无法查看</h3>
<ol>
<li>使用 SDK 上传时，需要注意设置content-type信息</li>
<li>无权限查看</li>
</ol>
<h2 id="小结"><a class="header-anchor" href="#小结"></a>小结</h2>
<p>关于 MinIO 还有很多知识点，本片只是站在使用者角度，把一些使用过程和问题进行了汇总，谈不上深度</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pbi5pby9jbi9taW5pby1xdWlja3N0YXJ0LWd1aWRlLmh0bWw=">Minio 手册<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pbmlvL21pbmlvLWphdmEvdHJlZS9yZWxlYXNl">Minio 示例<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhbms5OXRhbmsvYXJ0aWNsZS9kZXRhaWxzLzEwOTQ2NDMyNQ==">Minio 修改密码<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC82OGFjMDQ3NzI5MWQ=">Minio<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ2FvaG9uZ3l1L3AvMTM5ODY5NjQuaHRtbA==">Minio 安装以及使用<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1d1Smlhbmdhbmc1MTEyL2FydGljbGUvZGV0YWlscy8xMTI5ODgwNzQ=">Minio 设置文件链接永久有效<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>FileUpdate</tag>
      </tags>
  </entry>
  <entry>
    <title>《激战》</title>
    <url>/2018/10/03/movie-fierce/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>怕，你就会输一辈子</p>

</blockquote>
<p>喜欢其中的一些台词，大伙共勉</p>
<ul>
<li>其实，我每次上台都很怕的，不过每次我都会跟自己说，我能做到</li>
<li>这场比赛我可能会跌倒，但我一定会站起来</li>
<li>怕，你就会输一辈子</li>
</ul>
<span id="more"></span>
<p>自己的一些感触：<br>
其实很多时候，道理都懂，但却不能坚持下去，但这些道理都在自己生活中一点点的用生活感悟出来，那这些道理会更浓烈，更让人刻骨铭心</p>
<ul>
<li>尊重和珍惜，那些愿意为你去花时间的人</li>
<li>要和自己志同道合，有共同目标的伙伴去互相较劲</li>
<li>从哪里跌倒就要从哪里爬起来</li>
<li>一路跌跌撞撞走下去，中间的酸甜苦辣是最美的味道</li>
</ul>
<iframe src="//player.bilibili.com/player.html?aid=18575495&cid=30305453&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      <categories>
        <category>Movie</category>
      </categories>
      <tags>
        <tag>激战</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】• 微服务</title>
    <url>/2019/06/01/microservices/</url>
    <content><![CDATA[<p>这是第一篇翻译文章，用于学习近些年火热的微服务，这篇是<code>微服务</code>概念是由 <code>James Lewis</code> 所著，虽然官网已有<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvY2xiUlFaNi01WW9YNjhNendCZlFfUQ==">中文翻译<i class="fa fa-external-link-alt"></i></span>，但是在学习过程中，应该应该动手输出，这样有助于对知识的理解和记忆，废话不多说，开始翻译</p>
<h2 id="微服务"><a class="header-anchor" href="#微服务"></a>微服务</h2>
<blockquote>
<p>近些年术语“微服务架构”就像雨后春笋般蓬勃的发展，微服务描述软件应用设计是独立可部署服务一个特殊方式。虽然这些都不够准确的去定义一个架构风格，但存在一些通用的特质（大家达成共识的特征），如何去组织围绕业务能力，如何自动化部署，端点的智能发现，以及语言和数据去中心化的控制</p>
</blockquote>
<span id="more"></span>
<h3 id="James-Lewis"><a class="header-anchor" href="#James-Lewis"></a>James Lewis</h3>
<p>James Lewis 是 ThoughtWorks 的首席顾问，也是技术顾问委员会的成员。James 利用小型协作服务构建应用程序的兴趣起源于大规模集成企业系统的背景。他构建数量级的系统都使用微服务，并且几年来，他一直积极参与不断地社区发展</p>
<h3 id="Martin-Fowler"><a class="header-anchor" href="#Martin-Fowler"></a>Martin Fowler</h3>
<p>Martin Fowler 是一个作者，演讲家，和普通的软件开发，他一直对如何组件化软件系统的问题感到困惑，他希望微服务能够实现其倡导者所发现的早期承诺</p>
<hr>
<p>“微服务”在当时任然是一个新的名词。虽然我们的自然倾向是通过这些构建，这个技术分隔软件系统，这个术语描述了一种我们发现越来越有吸引力的软件系统风格。我们已经看到很多项目在过去的几年中使用这种风格，到目前为止的结果是积极的，以至于对于我们的许多同事而言，这已成为构建企业级应用的默认样式。然而，遗憾的是，没有太多信息可以描述微服务的风格以及微服务是如何实现</p>
<p>简而言之，<strong>微服务架构风格</strong><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>是一个开发单应用作为小型服务套件开发模式，<font color=#FF0000>每个应用运行在自己的进程中并且他们之间通过轻量级的机制进行通信，通常的如 HTTP 资源 API</font>。这些服务围绕业务能力并且这些都是<font color=#FF0000>可以独立的自动化部署</font>。这些服务我们进行<strong>去中心化</strong>的集中管理。<font color=#FF0000>这些服务可以使用不同的编程语言来编写，同样也可以使用不同的数据存储技术</font></p>
<p>开始解释微服务风格，将它与单体风格进行比较是有用的：作为单元构建的单片应用程序。企业应用程序通常由 3 个之上主要构成部分：</p>
<ul>
<li>客户端（由用户机器上的浏览器中运行的 HTML 页面和 JavaScript 组成）</li>
<li>数据库（由插入到公共中的许多表组成，通常是关系型，数据库管理系统）</li>
<li>服务端应用程序。<br>
这个服务端应用程序处理 HTTP 请求，执行域逻辑，从数据库中检索和更新数据，并选择装配发送到浏览器的 HTML 视图。这个服务端应用程序是一个单体的，一个逻辑可执行文件<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> ，任何一次更改都生成一个新的版本去构建和部署</li>
</ul>
<p>这种单体服务是构建这种系统的自然方式。所有的请求逻辑处理都运行在一个进程中，允许你使用语言的基本特性将应用划分为类，功能和命名空间。对于一些其他样例，你可以运行和测试应用在开发者的笔记本上，并使用部署管道确保已正确测试并部署到生成环境中。你可以通过负载均衡运行许多实例来进行水平扩展（常见单体应用模式 前面通过Nginx负载均衡，在 Nginx 后面运行多个应用实例）</p>
<p>单体应用程序可以成功，但是越来越多的人感到沮丧-特别是随着更多应用程序部署到云端。更改周期紧密相连-对应用程序的一小部分更改，需要重新构建和部署整个应用。随着时间的推移，通常很难保持良好的模块化结构，是的更难以保持改变只影响模块中的一个模块的更改。扩展需要扩展整个应用程序，而不是需要更多资源的部分扩展</p>
<p><img src="https://martinfowler.com/articles/microservices/images/sketch.png" alt="图 1：单体应用和微服务"><br>
从上图可知单体应用和微服务在部署的角度（可升缩角度）来讲：</p>
<ul>
<li>单体应用：进行可升缩，是将单体应用整个进行升缩，每台机器上的应用都是相同的</li>
<li>微服务：每个服务都是独立的单元，可根据需要对服务单元进行任意组合进行升缩，每台机器上的应用是不相同的</li>
</ul>
<p>这些挫折导致了微服务架构的风格：构建应用程序作为服务套件。事实上服务是独立部署和可扩展的，每个服务之间也提供坚实模块的边界，甚至允许不同的编程语言编写不同的服务。它们也可以由不同的团队来管理</p>
<p>我们并不认为微服务风格是新颖的或创新的，其根源可以归结为 Unix 的设计原则。但是我们认为这些没有足够的人考虑微服务架构风格，如果使用它们，许多软件的开发会更好，从中获益匪浅</p>
<h2 id="微服务架构的特征"><a class="header-anchor" href="#微服务架构的特征"></a>微服务架构的特征</h2>
<p>我们不能说微服务架构风格有正式的定义，但我们可以尝试描述我们认为合适标签的架构的共同特性。与概述共同特征的任何定义一样，并非所有的微服务架构都具备所有的特征，但我们确实希望大多数微服务架构都具有大多数的特性。虽然我们的作者一直是这个相当宽松社区的积极成员，我们的目的是尝试描述我们在自己的工作中所看到的以及我们所知道的团队的努力，特别是我们没有规定一些符合的定义</p>
<h3 id="服务组件化"><a class="header-anchor" href="#服务组件化"></a>服务组件化</h3>
<p>只要我们参与软件行业，人们一直希望通过将组件集成在一起来构建系统，我们在物质世界中看待事物的方式有很多类似，在过去的几十年中，我们已经看到了大多数语言平台的大型公共 libraries 的大量进展</p>
<p>在谈论组件时，我们遇到了组件构成的困难定义，我们的定义<strong>组件</strong>是一个可独立更换和升级的软件单元</p>
<p>微服务架构会使用到这些 libraries，但他们讲自己的软件组件化的主要方式是分解为服务。我们定义 <strong>libraries</strong> 作为组件链接到程序中，也可以使用内存函数中调用的组件，而<strong>服务</strong>是进程外的组件，它们与诸如 Web 服务请求或远程调用之类的机制进行通信。（这与许多 OOP<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> 中的服务对象感念不同）</p>
<blockquote>
<p>所谓的库都是调用在同一个进程当中，而服务的调用是跨进程的，要通过 Web 请求的方式或者是 RPC 的方式进行通信</p>
</blockquote>
<p>将服务用作组件（而不是 libraries）的一个主要原因是服务可以独立部署。如果你在单个进程中有多个 libraries组成的应用程序<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>，则对任何单个组件的更改都会导致必须重新部署整个应用程序。但如果一个应用由多个服务组成，你可以期望任何单服务的改变仅需要更新自己。这不是绝对的，一些更改改变了部分服务接口，从而导致一定的协调，但良好的微服务架构的目标是通过服务合同中的内聚服务边界和演化机制来最小化这些架构</p>
<p>将服务用作组件的另一个结果是更明确的组件接口，多数语言没有很好的机制来定义已<span class="exturl" data-url="aHR0cHM6Ly9tYXJ0aW5mb3dsZXIuY29tL2JsaWtpL1B1Ymxpc2hlZEludGVyZmFjZS5odG1s">发布的接口<i class="fa fa-external-link-alt"></i></span>。通常这并不仅仅只有文档和原则性问题，来防止客户破坏组件的封装原则，而且会导致组件间过度紧密耦合。通过使用显示远程调用机制，服务可以更容易地避免这种情况</p>
<p>使用这种服务也有一些缺点。远程调用通常要比进程内调用成本要高，因此远程调用需要更粗粒度的，这通常更难以使用。如果你需要去更改组件间的职责分配，那么当你跨越流程边界时，这种行为的变化就更难</p>
<p>在第一次中，我们可以观察到服务可以映射到运行时的进程，但这只是一个大致的描述。一个服务可能包含多个进程，这些进程始终一起开发和部署，这样的应用进程和数据库是这个服务所独有的</p>
<h3 id="围绕业务能力进行组织"><a class="header-anchor" href="#围绕业务能力进行组织"></a>围绕业务能力进行组织</h3>
<p>在寻找将大型应用程序拆分为多个部分时，通常管理侧重于技术层，导致 UI 团队，服务器逻辑团队和数据库团队。当团队按照这些方式分开时，即使是简单的更改也可能导致跨团队项目需要时间和预算批准。一个聪明的团队围绕这个进行优化，并未减少这两个情况的发生——会强制将逻辑放置到可以访问的应用中。换句话说，逻辑无处不在。这就是康威定律<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup> 的一个例子</p>
<blockquote>
<p>Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization’s communication structure<br>
——Melvyn Conway, 1967</p>
</blockquote>
<p><img src="https://martinfowler.com/articles/microservices/images/conways-law.png" alt="Conway's Law in action"><br>
微服务划分方法是不同的，分为围绕<strong>业务能力</strong>组织的服务。此类服务为该业务领域采用广泛的软件实现，包括用户页面，持久存储，以及任何额外协作。因此，团队是跨职能的，包括开发所需的全部技能：用户体验，数据库和项目管理</p>
<p><img src="https://martinfowler.com/articles/microservices/images/PreferFunctionalStaffOrganization.png" alt="Service boundaries reinforced by team boundaries"></p>
<blockquote>
<p>微服务有多大？<br>
虽然“微服务”已经成为这种架构风格的流行名称，但它的名字确实导致了对微服务的不关注以及关于什么构成“micro”的争论。在我们与微服务从业者的对话中，我们看到了一系列服务规模。报道的最大数量遵循亚马逊的 Two Pizza Team 的概念（比如：整个团队都可以讨厌两个披萨），意味着不超过十二人。对于规模较小的服务，我们已经看到一个6人的团队在支持6个服务。</p>
<p>这导致了这样的问题：在这个尺寸范围内是否存在足够大的差异，每个人的服务和每个服务的尺寸不应该集中在一个微服务的标签下。目前我们认为将它们组合在一起会更好，但当我们进一步探索这种风格时，我们肯定会改变主意</p>
</blockquote>
<p>以这种方式组建的一家公司是 <span class="exturl" data-url="aHR0cDovL3d3dy5jb21wYXJldGhlbWFya2V0LmNvbQ==">www.comparethemarket.com<i class="fa fa-external-link-alt"></i></span>。跨职能团队负责构建和运营每个产品，每个产品分为多个通过消息总线进行通信的单独服务。</p>
<p>大型单机应用程序也可以围绕业务功能进行模块化，尽管这不是常见的情况。当然，我们会敦促一个庞大的团队构建一个单体的应用，以便在业务线上划分自己。我们在这里看到的主要问题是，它们往往围绕太多的背景进行组织。如果整体跨许多这些模块化边界，那么团队中的个体成员很难将它们适应其短期组织中。此外，我们看到模块化生产线需要大量的规范来执行。服务组件所需要的更明确的分离是的更容易保持团队边界清晰</p>
<h3 id="产品不是项目"><a class="header-anchor" href="#产品不是项目"></a>产品不是项目</h3>
<p>我们看到的大多数应用程序开发工作都使用项目模型：其目的是提供一些软件然后被认为是完成的。完成后，软件将移交给维护组织，构建他的项目团队将被解散。</p>
<p>微服务支持者倾向于避免这种模式，而是倾向于认为团队应该在其整个生命周期内拥有产品。对此的一个共同启示是亚马逊的概念<span class="exturl" data-url="aHR0cHM6Ly9xdWV1ZS5hY20ub3JnL2RldGFpbC5jZm0/aWQ9MTE0MjA2NQ==">“你构建，运行它”<i class="fa fa-external-link-alt"></i></span>，开发团队对生产中的软件负全部责任。这使的开发人员能够日常接触他们的软件在生成中的行为，并增加与用户的联系，因此他们必须承担至少一些支持工作。</p>
<p>产品心态，与业务能力的联系紧密相连。不是将软件视为一组要完成的功能，而是存在一种持续的关系，其中的问题是软件如何帮助其用户增强业务能力</p>
<p>没有理由不采用单一应用程序采用相同的方法，但较小的服务粒度可以更容易地在服务开发人员和用户之间创建个人关系</p>
<h3 id="智能端点和哑的-pips"><a class="header-anchor" href="#智能端点和哑的-pips"></a>智能端点和哑的 pips</h3>
<p>在构建不同进程间通信结构时，我们已经看到许多产品和方法都强调将重要的<code>smarts</code>放入沟通机制本身。一个很好的例子是企业服务总线（ESB），其中 ESB 产品通常包括用于消息路由，编排，转换和应用业务规则的复杂工具。</p>
<blockquote>
<p>微服务和 SOA<br>
当我们谈到微服务时，一个常见的问题，这是否是我们十年前看到的面向服务的体系结构（SOA），这一点是有道理的，因为微服务风格非常类似于 SOA 的一些拥护者所支持的。然而，问题在于 SOA 意味着<span class="exturl" data-url="aHR0cHM6Ly9tYXJ0aW5mb3dsZXIuY29tL2JsaWtpL1NlcnZpY2VPcmllbnRlZEFtYmlndWl0eS5odG1s">太多不同的东西<i class="fa fa-external-link-alt"></i></span>，并且大多数时候我们遇到称为“SOA”的东西，它与我们在这里描述的样式有很大不同，通常是由于专注于用于集成单片应用程序的 ESB</p>
<p>特别是我们已经看到了许多拙劣的服务导向实现——从隐藏 ESB<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup> 中的复杂性的趋势，失败的多年计划，耗资数百万美元，没有任何价值，积极治理模式，积极抑制变化，有时很难看到过去的这些问题</p>
<p>当然，微服务社区中使用的许多技术都是从开发人员在大型组织中集成服务的经验中发展而来的。<span class="exturl" data-url="aHR0cHM6Ly9tYXJ0aW5mb3dsZXIuY29tL2JsaWtpL1RvbGVyYW50UmVhZGVyLmh0bWw=">容忍读者<i class="fa fa-external-link-alt"></i></span>模式就是一个例子。使用网络努力做出了贡献，使用简单的协议是从这些经验中得到的另一种方法——远离中心标准的反应，这种标准已达到复杂性，坦率地说，<span class="exturl" data-url="aHR0cDovL3dpa2kuYXBhY2hlLm9yZy93cy9XZWJTZXJ2aWNlU3BlY2lmaWNhdGlvbnM=">令人叹为观止<i class="fa fa-external-link-alt"></i></span>（只要你需要一个本体来管理你的本体，你就知道你遇到了很大的麻烦）</p>
<p>SOA 的这种场景表现导致一些服务提倡者完全拒绝 SOA 标签，尽管其他人认为服务是 SOA 的一种形式，也许正确的服务向导，无论哪种方式，SOA<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup> 意味着这些不同的事物意味着有一个更清晰地定义这种建筑风格的术语是有价值的</p>
</blockquote>
<p>微服务社区倾向于采用另一种方法：智能端点和愚蠢的 pips。从微服务构建的应用程序旨在尽可能地分离和聚集——他们拥有自己的域逻辑，在经典的 Unix 意义上更像是过滤器——接收请求，适当地应用逻辑并产生响应。这些是使用简单的 RESTish 协议而不是复杂的协议（如 WS-Choregoraphy 或 BPEL 中央工具的编排）编排的。</p>
<p>最常用的两个协议是 HTTP 请求——响应资源 API 和轻量级消息<sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup> 传递。第一个最好的表达方式是</p>
<blockquote>
<p>Be of the web, not behind the wed<br>
– lan Robinson</p>
</blockquote>
<p>微服务团队使用万维网（在很大程度上，Unix）构建的原则和协议。经常使用的资源可以通过开发人员或操作人员的非常小的努力来缓存。</p>
<p>常用的第二种方法是通过轻量级消息总线进行消息传递。选择的基础设施通常是哑的（哑仅作为消息路由器的行为）—— 向 RabbitMQ 或者 ZeroMQ 这样的简单实现不仅仅提供可靠的异步结构——智能功能存在于那些生产和消费诸多消息的各个端点中，即存在于各个服务中。</p>
<p>在一个单体应用中，组件在进程中执行，它们之间通信是通过方法调用或函数调用。将整体变为微服务的最大问题在于改变通信模式。从内存中方法调用到 RPC 的简单转换导致繁琐的通信，这种通信效果不佳。相反，您需要粗粒度的方法替换细粒度的通信。</p>
<h3 id="去中心化的治理"><a class="header-anchor" href="#去中心化的治理"></a>去中心化的治理</h3>
<p>集中治理的后果之一是在单个技术平台上实现标准化的趋势。经验表明，这种方法是有限的——不是每个平台是一样的，不是每个平台的解决方案是一致的。我们推荐使用正确的工具来完成工作，而单体应用程序在一定程度上利用不同的语言，但这并不常见</p>
<p>将单个应用组件拆分为多个服务，我们可以在构建每个组件时做出选择。你希望使用 Node.js 建立一个简单的报告页面？没问题。想通过 C++ 来实现出彩的实时组件？没毛病。想换不同风格的数据库，以更好地适应一个组件的读取行为？可以重建</p>
<p>当然，只是因为你可以做某件事，并不意味着你可以应该——但以这种方式划分你的系统意味着你可以选择</p>
<p>构建微服务的团队也更喜欢采用不同的标准方法。他们更倾向于其他开发人员可以使用的有用工具来解决与他们面临的类似问题，而不是使用在纸上某处写下的一组定义标准。这些工具通常从实现中收集并广泛的共享，有时，但不仅仅是使用内部开源模型。现在 Git 和 GitHub 已经成为事实上的版本控制系统，开源实践在内部变得越来越普遍。</p>
<p>Netflix 是遵循这一理念的组织的一个很好的例子。共享有用的，尤其是经过实战考验的代码，因为鼓励其他开发人员以类似的方式解决类似问题，但如果需要，可以选择不同的方法。共享库往往侧重于数据存储，进程间通信的常见问题，我们将在下面进一步讨论基础架构自动化</p>
<p>对于微服务社区来说，管理费用特别缺乏吸引力。这并不是说社区不重视服务契约。恰恰相反，因为往往会有更多。只是他们正在寻找管理这些契约的不同方式。像<span class="exturl" data-url="aHR0cHM6Ly9tYXJ0aW5mb3dsZXIuY29tL2JsaWtpL1RvbGVyYW50UmVhZGVyLmh0bWw=">容错读取<i class="fa fa-external-link-alt"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9tYXJ0aW5mb3dsZXIuY29tL2FydGljbGVzL2NvbnN1bWVyRHJpdmVuQ29udHJhY3RzLmh0bWw=">消费者驱动的契约<i class="fa fa-external-link-alt"></i></span>这样的模式通常应用于微服务。这些援助服务契约独立发展。在构建过程中执行消费者驱动的契约可以增强信心，并提供有关您的服务是否正常运行的快速反馈。事实上，我们知道澳大利亚的一个团队通过消费者驱动的契约推动服务的建设。他们使用简单的工具来定义合同服务。在编写新服务的代码之前，这将成为自动构建的一部分。然后，该服务仅构建在满足合同的程度——在构建新软件时避免“YAGNI”<sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup> 困境的优雅方法。这些技术和围绕他们成长的工具通过减少服务间的时间耦合来限制重要合同管理的需要</p>
<blockquote>
<p>多语言，多选择<br>
JVM 作为平台的发展只是在一个通用平台中混合语言的最新例子。近十年依赖，通常的做法是采用更高级别的语言来更高级别的抽象。同样，在平台底层以更低层次的编程语言编写性能敏感的代码也很普遍。然而，许多单块系统并不需要这种级别的性能优化，另外 DSL 和更高层次的抽象也不常用（这令我们感到失望）。相反，许多单体应用通常就使用单一编程语言，并且对所用的技术数量进行限制的趋势<sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup></p>
</blockquote>
<p>也许去中心化治理的最高点就是建立它/运行它，由亚马逊推广的精神。团队负责他们构建的软件的所有方面，包括全天候运行软件。这种责任水平的下放绝对不是常态，但我们确实看到越来越多的公司将责任推向开发团队。Netflix 是另一个采用这种精神<sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup> 的组织。每天晚上凌晨 3 点您被你的寻呼机唤醒，无疑是在编写代码时专注于质量的强大动力。这些想法与传统的集中治理模式相差甚远</p>
<h3 id="去中心化数据管理"><a class="header-anchor" href="#去中心化数据管理"></a>去中心化数据管理</h3>
<p>去中心化数据管理以多种不同的方式呈现。在最抽象的层面上，它意味着世界的概念模型在不同系统之间会有所不同。在整个大型企业时，这是一个常见问题，客户的销售视角将与支持视角不同。从销售视角中称为“客户”的某些内容，可能根本不会出现在支持视角中。那些在两个视角中具有相同属性的事物，或许在语义上有微妙的不同</p>
<blockquote>
<p>经过实战检验的标准和强制执行的标准<br>
微服务团队倾向于避开企业架构小组制定的严格执行标准，但很乐意使用甚至宣传 HTTP，ATOM 和其他微格式等开放标准的使用，这有点很二分法</p>
<p>关键的区别在于如何制定标准以及如何实施标准。有 IETF 等团体管理的标准只有在更广泛的世界中有多高实施时才能成为标准，并且通常来至于成功的开源项目</p>
<p>这些标准与企业的许多标准不同，后者通常由最近没有编程或受供应商过度影响的团体开发</p>
</blockquote>
<p>此问题在应用程序间很常见，但也可能在应用程序中发生，特别是将应用程序划分为单独的组件时。一种有用的思考方式是“领域驱动设计”中的<span class="exturl" data-url="aHR0cHM6Ly9tYXJ0aW5mb3dsZXIuY29tL2JsaWtpL0JvdW5kZWRDb250ZXh0Lmh0bWw=">“限定上下文”<i class="fa fa-external-link-alt"></i></span>的概念。DDD 将复杂领域划分为多个限界上下文，并映射出他们之间的关系。此过程对单体和微服务架构两者都很有用，而且就像前面有关“业务功能”一节中所讨论的那样，在服务和各个限界上下文之间所存在的自然的联动关系，能有助于澄清和强化这种划分。</p>
<p>除了关于概念模型的分散决策之外，微服务还分散了数据存储决策。虽然单一应用程序更喜欢使用单个逻辑数据库来存储持久性数据，但企业通常更喜欢在一系列应用程序中使用单个数据库——其中许多决策是通过供应商的商业模式来实现。微服务更喜欢让每个服务管理自己的数据库，可以是同一数据库技术的不同实例，也可以是完全不同的数据库系统——这种方法称为<span class="exturl" data-url="aHR0cHM6Ly9tYXJ0aW5mb3dsZXIuY29tL2JsaWtpL1BvbHlnbG90UGVyc2lzdGVuY2UuaHRtbA==">&quot;Polyglot Persistence&quot;<i class="fa fa-external-link-alt"></i></span>。你可以在整体中使用多语言持久性，但它在微服务中更常出现。<br>
<img src="https://martinfowler.com/articles/microservices/images/decentralised-data.png" alt=""></p>
<p>跨服务分散数据责任对管理更新有影响。处理更新的常用方法是在更新多个资源时使用事务来保证一致性。这种方法通常用于整体结构中。</p>
<p>使用这样的事务有助于保持一致性，但会产生显著的时间耦合，在多个服务中是有问题。众所周知，分布式事务很难实现，因此微服务架构<span class="exturl" data-url="aHR0cDovL3d3dy5lYWlwYXR0ZXJucy5jb20vcmFtYmxpbmdzLzE4X3N0YXJidWNrcy5odG1s">强调服务之间的无事务协调<i class="fa fa-external-link-alt"></i></span>，明确承认一致性可能只有最终的一致性，而问题则通过补偿操作来处理。</p>
<p>选择以这种方式管理不一致是许多开发团队面临的新挑战，但它通常与业务实践相匹配。企业通常会处理一定程度的不一致，以便快速响应需求，同时采取某种逆转流程来应对错误。只要修复错误的成本低于在更大的一致性下丢失业务的成本，那么权衡是值得的。</p>
<h3 id="基建设施自动化"><a class="header-anchor" href="#基建设施自动化"></a>基建设施自动化</h3>
<p>基础设施自动糊技术在过去几年中发生了巨大变化——特别是云和 AWS 的发展降低了构建，部署和运行微服务的操作复杂性。</p>
<p>许多使用微服务构建的产品或系统都是由具有丰富的<span class="exturl" data-url="aHR0cHM6Ly9tYXJ0aW5mb3dsZXIuY29tL2JsaWtpL0NvbnRpbnVvdXNEZWxpdmVyeS5odG1s">持续交付(Continuous Delivery)<i class="fa fa-external-link-alt"></i></span>经验的团队构建的，并且是前身的<span class="exturl" data-url="aHR0cHM6Ly9tYXJ0aW5mb3dsZXIuY29tL2FydGljbGVzL2NvbnRpbnVvdXNJbnRlZ3JhdGlvbi5odG1s">持续集成(Continuous Integration)<i class="fa fa-external-link-alt"></i></span>。以这种方式构建软件的团队广泛使用基础设施自动化技术。这在下面显示的构建管道中说明</p>
<p><img src="https://martinfowler.com/articles/microservices/images/basic-pipeline.png" alt="basic build pipeline"></p>
<p>由于这不是关于持续交付的文章，我们将在这里引起注意几个关键功能。我们希望尽可能地信心使我们的软件正常工作，因此我们进行了大量的<strong>自动化测试</strong>。推广工作软件“向上”管道意味着我们<strong>自动化部署</strong>到每个新环境。</p>
<blockquote>
<p>做正取的事情很容易<br>
我们发现由于持续交付和部署而增加自动化的一个副作用是创建有用的工具来帮助开发人员和操作人员。用于创建人工制品，管理代码库，提供简单服务或添加标准监视器和日志记录的工具现在非常普遍。网上最好的例子可能是 <span class="exturl" data-url="aHR0cHM6Ly9uZXRmbGl4LmdpdGh1Yi5pby8=">Netflix 的开源工具集<i class="fa fa-external-link-alt"></i></span>，但还有其他一些，包括我们官方使用的 <span class="exturl" data-url="aHR0cDovL2Ryb3B3aXphcmQuY29kYWhhbGUuY29tLw==">Dropwizard<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>一个单一的应用程序将非常愉快地构建，测试和推动通过这些环境。事实证明，一旦你投资自动化整个生产的生产之路，那么部署更多地应用程序视乎不再那么可怕。请记住，CD的目标之一就是使用部署无聊，所以无论是一个还是多个应用，只要它任然无聊就无聊无所谓<sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup></p>
<p>我们看到团队使用广泛的基础设施自动化的另一个领域是管理生产中的微服务。与我们上面的断言相反，只要部署很无聊，单块和微服务之间没有太大的区别，每个部署的运营环境可能会截然不同<br>
<img src="https://martinfowler.com/articles/microservices/images/micro-deployment.png" alt="Module deployment often differs"></p>
<h3 id="容错设计"><a class="header-anchor" href="#容错设计"></a>容错设计</h3>
<p>使用服务作为组件的结果是，应用需要设计以便他们能够容忍服务的失败。由于提供者不可用（不可达）等，任何服务调用都可能失败，客户端必须尽可能优雅地对此作出响应。与单体设计相比，这是一个缺点，因为它引入了额外的复杂性来处理它。结果是微服务团队持续不断反思服务失败如何影响用户体验。Netflix 的 Simian Army 在工作日引发服务甚至数据中心的故障，以测试应用程序的弹性和监控。</p>
<blockquote>
<p>断路器和“可随时上线的代码”<br>
断路器一词与其他一些模式一起出现发布，如 Bulkhead 和 Timeout。在构建彼此通信的应用系统时，将这些模式加以综合运用变得至关重要。<span class="exturl" data-url="aHR0cDovL3RlY2hibG9nLm5ldGZsaXguY29tLzIwMTIvMDIvZmF1bHQtdG9sZXJhbmNlLWluLWhpZ2gtdm9sdW1lLmh0bWw=">Netflix 博客<i class="fa fa-external-link-alt"></i></span>这篇文章很好的解释了这些模式如何应用。</p>
</blockquote>
<p>这种在生产环境中所进行自动化测试，足以让大多数运维组织兴奋地浑身颤栗，就像在一周的长假即将到来前那样。这并不是说单体式架构风格不具备复杂的监控设置——在我们的经验中，这在单体系统中并不常见罢了。</p>
<p>由于服务可能随时发生故障，因此能够快速检测故障并在可能情况下自动恢复服务非常重要。微服务应用程序非常重视应用程序的实时监控，检查“架构元素指标”（数据库每秒获得多少请求）和“业务相关指标”（例如每分钟收到多少订单）。当系统某个地方出现问题，语义监控可以提供一个预警，从而触发开发团队跟进和调查工作。</p>
<p>这对于微服务架构尤为重要，因为微服务对编排和事件协作的偏好会导致紧急行为。虽然许多权威人士赞扬偶然出现的价值，但事实是，新兴行为有时可能是一件坏事。监控对于快速发现下不良紧急行为至关重要，因此可以修复。</p>
<blockquote>
<p>“同步调用”有害<br>
每当您在服务之间进行多次同步调用时，您将遇到停机的乘法效应。简而言之，就是系统停机时间成为各个组件停机时间的产物。您面临一个选择，使您的呼叫异步或管理停机时间。在 <code>www.guardian.co.uk</code>网站上，他们在新平台上实施了一条简单的规则——每个用户请求一次同步调用，而在 Netflix，他们的平台 API 重新设计已经在 API 结构中建立了异步性。</p>
</blockquote>
<p>monoliths 可以像微服务一样透明——事实上，他们应该是。不同之处在于您绝对需要知道在不同进程中运行的服务何时断开连接。对于同一过程中的库，这种透明性不太可能有用。</p>
<p>微服务团队希望看到针对每个服务的复杂监控和日志记录设置，例如显示上/下状态的仪表板以及各种运营和业务相关指标。有关断路器状态，当前吞吐量和延迟的详细信息是我们经常遇到的其他示例。</p>
<h3 id="“演进式”设计"><a class="header-anchor" href="#“演进式”设计"></a>“演进式”设计</h3>
<p>微服务从业者通常拥有“演进式”设计背景，而且通常将服务分解视为额外的工具，使应用程序开发人员能够控制应用程序中的更改而不会减慢变更。变更控制并不一定意味着改变——通过正确的态度和工具，你可以对软件进行频繁，快速和良好控制的变更。</p>
<p>每当你尝试将软件系统分解为组件时，就面临着如何进行划分各个部分的决定——我们决定将应用程序切分的遵循的原则是什么？组件的关键属性是独立替换和可升级性<sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup> 的特点——这意味着需要寻找这些点，即想象在不影响其合作者的情况下重写组件。事实上，许多微服务团队通过明确预期服务将来会废弃，而不是守着这些服务做长期的演进。</p>
<p>Guardian 网站是一个设计和构建为单体的应用程序的一个很好例子，然而它已经开始向在微服务方向进行演进了。原先的单体系统依然是网站的核心，但在添加新特性时他们愿意以构建一些微服务的方式来进行添加，而这些微服务会去调用原先那个单体系统的 API。这种方法对于本质上是临时的功能尤其方便，例如报道体育赛事的专用页面。当使用快速开发语言时，像这样的网站就能被快速整合在一起，并在时间结束后删除。我们在金融机构看到了类似的做法，针对一个市场机会，添加新服务进来，并在几个月甚至几周后丢弃。</p>
<p>这种对可替换性的强调是模块化设计一般性原则的一个特例，即通过“演进式”模式推动模块化实现。大家都愿意将那些在同时发生变化<sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup> 的东西，放到同一个模块中。很少变化的部分，应该放在不同的服务中，以区别那些当前正在经历大量变动的部分。如果您发现需要同时反复变更的两个服务时，那就表明他们应该合并。</p>
<p>将组件放入服务中可以为更细粒度的发布计划添加机会。对于单体应用，任何更改都需要完整构建和部署整个应用程序。但是对使用微服务，您只需要重新部署您修改的服务。这可以简化并加快发布过程。缺点是：必须考虑当一个服务发生变化时，依赖它并对其进行消费的其他服务将无法工作。传统的集成方法是尝试使用版本控制来解决这个问题，但微服务领域中，大家更喜欢使用版本控制作为<span class="exturl" data-url="aHR0cHM6Ly9tYXJ0aW5mb3dsZXIuY29tL2FydGljbGVzL2VudGVycHJpc2VSRVNULmh0bWwjdmVyc2lvbmluZw==">最后不得已的手段<i class="fa fa-external-link-alt"></i></span>。我们可以通过将服务设计为对提供者变更，尽量能够容错来避免大量版本控制</p>
<h2 id="未来的方向是“微服务”吗？"><a class="header-anchor" href="#未来的方向是“微服务”吗？"></a>未来的方向是“微服务”吗？</h2>
<p>我们写这篇文章的主要目的是解释微服务的主要思想和原则。通过花时间来做到这一点，我们清楚地认为微服务架构风格是一个重要的想法——值得认真考虑企业应用程序。我们最近使用这种方式构建了几个系统，并了解其他团队已经使用并支持这种方法。</p>
<p>我们了解到那些在某种程度上做为这种架构风格的实践先驱包括：亚马逊，Netflix，<span class="exturl" data-url="aHR0cHM6Ly93d3cudGhlZ3VhcmRpYW4uY29tLw==">Guardian<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9nZHMuYmxvZy5nb3YudWsv">UK Government Digital Service<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9tYXJ0aW5mb3dsZXIuY29tL2FydGljbGVzL3JlYWxlc3RhdGUuY29tLmF1">realeastate.com.au<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cDovL3d3dy5jb21wYXJldGhlbWFya2V0LmNvbS8=">comparethemarket.com<i class="fa fa-external-link-alt"></i></span>。2013 年的技术大会圈子充满了各种各样的，正在转向可以归类为微服务的公司——包括 Travis CI。此外，有很多组织长期以来一直在做我们称为微服务的东西，但没有使用过这个名字（通常被标记为 SOA——尽管如我们所说，SOA 有许多互相矛盾的形式<sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup> ）</p>
<p>然而，尽管有这些积极的经验，但我们并不认为我们确信微服务是软件架构的未来发展方向。虽然到目前为止我们的经验与单体应用相比是积极的，但我们意识到没有足够的时间让我们做出充分的判断。</p>
<p><img src="https://martinfowler.com/articles/microservices/images/sam-book.jpg" alt=""></p>
<blockquote>
<p>我们的同事 Sam Newman 在 2014 年的大部分时间都在撰写一本书，该书描述了我们构建微服务的经验。如果想进一步了解该主题，这应该是您的下一步</p>
</blockquote>
<p>通常，您的架构决策的真正后果只有在开发它几年后才会明显。我们已经由带着强烈模块化愿望的优秀团队所做的一些项目，最终却构建出一个单体架构，并在几年内不断腐化。许多人认为微服务不太可能出现这种衰退，因为服务边界是明确的，很难随意捣乱。然而，对于那些开发时间足够长的各种系统，除非我们已经见识的足够多，否则我们无法真正评估微服务架构是如何成熟的。</p>
<p>人们可能会期望微服务成熟得很好。在组件化的任何努力中，成功取决于在组件中的适用程度。很难弄清楚组件边界的确切位置。“演进式”设计承认难以对边界进行正确定位，因此它将工作的重点放到了易于对边界进行重构之上。但是当您的组件是具有远程通信的服务时。那么重构比适用进程内库要困难的多。跨服务边界移动代码很困难，任何接口更改都需要在参与者之间协调，需要添加向后兼容性，测试变得更加复杂。</p>
<p>另一个问题是，如果组件没有干净利落地组成一个系统，那么您所做的就是将复杂性从组件内部转移到组件之间的连接。这样做的后果，不仅仅是移动复杂性，而是将其移动到一个不那么明确且难以控制的地方。当你在一个小而简单的组件内部查看时，人们很容易认为事情已经变得更好了，然而却忽略了服务之间的杂乱连接</p>
<p>最后，还有团队技能的因素。新技术往往被技术更加过硬的团队所采用。对于技术更加过硬的团队更更有效的一项技术，并不一定适用于技术略逊一筹的团队。我们已经看到很多不太熟练的团队构建混乱的单体架构，当微服务发生这种混乱时，会出现什么情况？这需要花时间来观察。一个糟糕的团队，总是会创建一个糟糕的系统——很难说微服务是减少了杂乱，还是让事情变得更糟。</p>
<p>我们听到一个合理的说法，不应该一上来就以微服务架构作为起点。相反，从<span class="exturl" data-url="aHR0cHM6Ly9tYXJ0aW5mb3dsZXIuY29tL2JsaWtpL01vbm9saXRoRmlyc3QuaHRtbA==">单体应用开始<i class="fa fa-external-link-alt"></i></span>，保持模块化。当单体系统出现问题时将其拆分为微服务。（虽然<span class="exturl" data-url="aHR0cHM6Ly9tYXJ0aW5mb3dsZXIuY29tL2FydGljbGVzL2RvbnQtc3RhcnQtbW9ub2xpdGguaHRtbA==">这个建议并不理想<i class="fa fa-external-link-alt"></i></span>，但是好的进程内接口通常不是一个好的服务接口）</p>
<p>因此，我们谨慎乐观地写下这一点。到目前为止，我们已经看到了足够多的微服务风格，觉得它是<span class="exturl" data-url="aHR0cHM6Ly9tYXJ0aW5mb3dsZXIuY29tL21pY3Jvc2VydmljZXMv">一条值得走的路<i class="fa fa-external-link-alt"></i></span>。我们无法确定最终会在哪里结束，但软件开发的挑战之一是您只能根据您当前必须提供的不完善信息作出决策。</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<p>虽然这不是一个详尽的列表，但是它们是微服务从业者可以从中吸取灵感来源，或者是那些倡导的理念与本所述内容详实的一些资料</p>
<p>博客和在线文章</p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL2Jsb2dzLm1zZG4uY29tL2IvY2xlbWVuc3Yv">Clemens Vasters’ blog on cloud at microsoft<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2RhdmlkbW9yZ2FudGluaS5ibG9nc3BvdC5jb20vMjAxMy8wOC9taWNyby1zZXJ2aWNlcy1pbnRyb2R1Y3Rpb24uaHRt">David Morgantini’s introduction to the topic on his blog<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovLzEyZmFjdG9yLm5ldC8=">12 factor apps from Heroku<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ292LnVrL2Rlc2lnbi1wcmluY2lwbGVz">UK Government Digital Service design principles<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2ppbW15bmlsc3Nvbi5jb20vYmxvZy8=">Jimmy Nilsson’s blog<i class="fa fa-external-link-alt"></i></span> and <span class="exturl" data-url="aHR0cDovL3d3dy5pbmZvcS5jb20vYXJ0aWNsZXMvQ0NDLUppbW15LU5pbHNzb24=">article on infoq about Cloud Chunk Computing<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2FsaXN0YWlyLmNvY2tidXJuLnVzL0hleGFnb25hbCthcmNoaXRlY3R1cmU=">Alistair Cockburn on Hexagonal architectures<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>书籍</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9ncC9wcm9kdWN0LzA5Nzg3MzkyMTM/aWU9VVRGOCZ0YWc9bWFydGluZm93bGVyYy0yMCZsaW5rQ29kZT1hczImY2FtcD0xNzg5JmNyZWF0aXZlPTkzMjUmY3JlYXRpdmVBU0lOPTA5Nzg3MzkyMTM=">Release it<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9ncC9wcm9kdWN0LzA1OTY4MDU4Mjk/aWU9VVRGOCZ0YWc9bWFydGluZm93bGVyYy0yMCZsaW5rQ29kZT1hczImY2FtcD0xNzg5JmNyZWF0aXZlPTkzMjUmY3JlYXRpdmVBU0lOPTA1OTY4MDU4Mjk=">Rest in practice<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wYWdlcy5hcGlnZWUuY29tL3dlYi1hcGktZGVzaWduLWVib29rLmh0bWw=">Web API Design (free ebook)<i class="fa fa-external-link-alt"></i></span>. Brian Mulloy, Apigee.</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9ncC9wcm9kdWN0LzAzMjEyMDA2ODM/aWU9VVRGOCZ0YWc9bWFydGluZm93bGVyYy0yMCZsaW5rQ29kZT1hczImY2FtcD0xNzg5JmNyZWF0aXZlPTkzMjUmY3JlYXRpdmVBU0lOPTAzMjEyMDA2ODM=">Enterprise Integration Patterns<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9ncC9wcm9kdWN0LzAxMzE0MjkwMTk/aWU9VVRGOCZ0YWc9bWFydGluZm93bGVyYy0yMCZsaW5rQ29kZT1hczImY2FtcD0xNzg5JmNyZWF0aXZlPTkzMjUmY3JlYXRpdmVBU0lOPTAxMzE0MjkwMTk=">Art of unix programming<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9ncC9wcm9kdWN0LzAzMjE1MDM2Mjc/aWU9VVRGOCZ0YWc9bWFydGluZm93bGVyYy0yMCZsaW5rQ29kZT1hczImY2FtcD0xNzg5JmNyZWF0aXZlPTkzMjUmY3JlYXRpdmVBU0lOPTAzMjE1MDM2Mjc=">Growing Object Oriented Software, Guided by Tests<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9ncC9wcm9kdWN0LzAxOTgyOTM3NTU/aWU9VVRGOCZ0YWc9bWFydGluZm93bGVyYy0yMCZsaW5rQ29kZT1hczImY2FtcD0xNzg5JmNyZWF0aXZlPTkzMjUmY3JlYXRpdmVBU0lOPTAxOTgyOTM3NTU=">The Modern Firm: Organizational Design for Performance and Growth<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9ncC9wcm9kdWN0LzAzMjE2MDE5MTI/aWU9VVRGOCZ0YWc9bWFydGluZm93bGVyYy0yMCZsaW5rQ29kZT1hczImY2FtcD0xNzg5JmNyZWF0aXZlPTkzMjUmY3JlYXRpdmVBU0lOPTAzMjE2MDE5MTI=">Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9ncC9wcm9kdWN0LzAzMjExMjUyMTU/aWU9VVRGOCZ0YWc9bWFydGluZm93bGVyYy0yMCZsaW5rQ29kZT1hczImY2FtcD0xNzg5JmNyZWF0aXZlPTkzMjUmY3JlYXRpdmVBU0lOPTAzMjExMjUyMTU=">Domain-Driven Design: Tackling Complexity in the Heart of Software<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>简报</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1xVnl0M3FRXzdUQQ==">Architecture without Architects<i class="fa fa-external-link-alt"></i></span>. Erik Doernenburg</li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5pbmZvcS5jb20vcHJlc2VudGF0aW9ucy9zb2Etd2l0aG91dC1lc2I=">Does my bus look big in this?<i class="fa fa-external-link-alt"></i></span>. Jim Webber and Martin Fowler, QCon 2008</li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5pbmZvcS5jb20vcHJlc2VudGF0aW9ucy93ZWJiZXItZ3VlcmlsbGEtc29h">Guerilla SOA<i class="fa fa-external-link-alt"></i></span>. Jim Webber, 2006</li>
<li><span class="exturl" data-url="aHR0cDovL3ZpbWVvLmNvbS80MzY1OTA3MA==">Patterns of Effective Delivery<i class="fa fa-external-link-alt"></i></span>.Daniel Terhorst-North, 2011.</li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5zbGlkZXNoYXJlLm5ldC9hZHJpYW5jbw==">Adrian Cockcroft’s slideshare channel.<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3ZpbWVvLmNvbS8yODYwODY2Nw==">Hydras and Hypermedia<i class="fa fa-external-link-alt"></i></span>. Ian Robinson, JavaZone 2010</li>
<li>Justice will take a million intricate moves Leonard Richardson, Qcon 2008.</li>
<li><span class="exturl" data-url="aHR0cDovL3ZpbWVvLmNvbS83NDQ1MjU1MA==">Java, the UNIX way<i class="fa fa-external-link-alt"></i></span>. James Lewis, JavaZone 2012</li>
<li><span class="exturl" data-url="aHR0cDovL3lvdy5ldmVudGVyLmNvbS95b3ctMjAxMi0xMDEyL21pY3JvLXNlcnZpY2VzLWFyY2hpdGVjdHVyZS1ieS1mcmVkLWdlb3JnZS0xMjg2">Micro services architecture<i class="fa fa-external-link-alt"></i></span>. Fred George, YOW! 2012</li>
<li><span class="exturl" data-url="aHR0cDovL2dvdG9jb24uY29tL3ZpZGVvIzE4">Democratising attention data at guardian.co.uk<i class="fa fa-external-link-alt"></i></span>. Graham Tackley, GOTO Aarhus 2013</li>
<li><span class="exturl" data-url="aHR0cDovL2dvdG9jb24uY29tL3ZpZGVvIzY=">Functional Reactive Programming with RxJava<i class="fa fa-external-link-alt"></i></span>. Ben Christensen, GOTO Aarhus 2013 (registration required).</li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5pbmZvcS5jb20vcHJlc2VudGF0aW9ucy9CcmVha2luZy10aGUtTW9ub2xpdGg=">Breaking the Monolith<i class="fa fa-external-link-alt"></i></span>. Stefan Tilkov, May 2012.</li>
</ul>
<p>论文</p>
<ul>
<li>L. Lamport,<span class="exturl" data-url="aHR0cDovL3Jlc2VhcmNoLm1pY3Jvc29mdC5jb20vZW4tdXMvdW0vcGVvcGxlL2xhbXBvcnQvcHVicy9pbXBsZW1lbnRhdGlvbi5wZGY=">“The Implementation of Reliable Distributed Multiprocess Systems”<i class="fa fa-external-link-alt"></i></span>, 1978</li>
<li>L. Lamport, R. Shostak, M. Pease,<span class="exturl" data-url="aHR0cDovL3d3dy5jcy5jb3JuZWxsLmVkdS9jb3Vyc2VzL2NzNjE0LzIwMDRzcC9wYXBlcnMvbHNwODIucGRm">“The Byzantine Generals Problem”<i class="fa fa-external-link-alt"></i></span>, 1982</li>
<li>R.T. Fielding, <span class="exturl" data-url="aHR0cDovL3d3dy5pY3MudWNpLmVkdS9+ZmllbGRpbmcvcHVicy9kaXNzZXJ0YXRpb24vdG9wLmh0bQ==">“Architectural Styles and the Design of Network-based Software Architectures”<i class="fa fa-external-link-alt"></i></span>, 2000</li>
<li>E. A. Brewer, <span class="exturl" data-url="aHR0cDovL3d3dy5jcy5iZXJrZWxleS5lZHUvfmJyZXdlci9jczI2MmItMjAwNC9QT0RDLWtleW5vdGUucGRm">“Towards Robust Distributed Systems”<i class="fa fa-external-link-alt"></i></span>, 2000</li>
<li>E. Brewer, <span class="exturl" data-url="aHR0cDovL3d3dy5pbmZvcS5jb20vYXJ0aWNsZXMvY2FwLXR3ZWx2ZS15ZWFycy1sYXRlci1ob3ctdGhlLXJ1bGVzLWhhdmUtY2hhbmdlZA==">“CAP Twelve Years Later: How the ‘Rules’ Have Changed”<i class="fa fa-external-link-alt"></i></span>, 2012</li>
</ul>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<p>单体应用与微服务比较</p>
<h3 id="单体应用"><a class="header-anchor" href="#单体应用"></a>单体应用</h3>
<h4 id="特性"><a class="header-anchor" href="#特性"></a>特性</h4>
<ul>
<li>调用方便，都是在一个进程内进行调用（针对于 Java 来说，就是运行在一个 JVM 上的应用）</li>
<li>部署方式简单，</li>
<li>事务处理方式可以容易处理</li>
<li>由于都在一个进程内API 调用，不涉及网络的访问，因此出错的可能性要低很多</li>
</ul>
<h4 id="优缺点"><a class="header-anchor" href="#优缺点"></a>优缺点</h4>
<ul>
<li>优点
<ul>
<li>为人所熟知</li>
<li>便于共享</li>
<li>易于测试</li>
<li>容易部署</li>
</ul>
</li>
<li>缺点
<ul>
<li>复杂性逐渐变高</li>
<li>技术债务逐渐上升</li>
<li>部署速度逐渐变慢</li>
<li>阻碍技术创新</li>
<li><strong>无法按需伸缩</strong></li>
</ul>
</li>
</ul>
<h3 id="微服务-v2"><a class="header-anchor" href="#微服务-v2"></a>微服务</h3>
<h4 id="特性-v2"><a class="header-anchor" href="#特性-v2"></a>特性</h4>
<ul>
<li>每个微服务可独立运行在自己的进程里</li>
<li>一系列独立运行的微服务共同构建起了这个系统</li>
<li>每个服务为独立的业务开发，一个微服务一般玩某个特定的功能，比如：订单管理，用户管理等</li>
<li>微服务之间通过一些轻量的通讯机制进行通信，比如通过 REST API 或者 RPC 的方式调用</li>
</ul>
<h4 id="优缺点-v2"><a class="header-anchor" href="#优缺点-v2"></a>优缺点</h4>
<ul>
<li>优点
<ul>
<li>易于开发和维护</li>
<li>启动较快</li>
<li>局部修改容易部署</li>
<li>技术栈不受限</li>
<li>按需伸缩</li>
<li>DevOps</li>
</ul>
</li>
<li>缺点
<ul>
<li>运维复杂</li>
<li>数据一致性问题</li>
<li>集成测试复杂</li>
<li><strong>重复代码</strong></li>
<li>监控困难</li>
</ul>
</li>
<li>挑战
<ul>
<li><strong>运维要求较高</strong></li>
<li>分布式的复杂性</li>
<li>接口调整成本高</li>
<li>重复你劳动</li>
</ul>
</li>
</ul>
<h4 id="设计原则"><a class="header-anchor" href="#设计原则"></a>设计原则</h4>
<ul>
<li>单一职责原则</li>
<li>服务自治原则</li>
<li>轻量级通信原则</li>
<li>接口明确原则</li>
</ul>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9tYXJ0aW5mb3dsZXIuY29tL2FydGljbGVzL21pY3Jvc2VydmljZXMuaHRtbA==">Microservices<i class="fa fa-external-link-alt"></i></span></li>
<li>校验 • <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzExNTY3MjE4NzQ=">CeaserWang<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>The term “microservice” was discussed at a workshop of software architects near Venice in May, 2011 to describe what the participants saw as a common architectural style that many of them had been recently exploring. In May 2012, the same group decided on “microservices” as the most appropriate name. James presented some of these ideas as a case study in March 2012 at 33rd Degree in Krakow in <span class="exturl" data-url="aHR0cDovLzIwMTIuMzNkZWdyZWUub3JnL3RhbGsvc2hvdy82Nw==">Microservices - Java, the Unix Way<i class="fa fa-external-link-alt"></i></span> as did Fred George <span class="exturl" data-url="aHR0cHM6Ly93d3cuc2xpZGVzaGFyZS5uZXQvZnJlZGdlb3JnZS9taWNyby1zZXJ2aWNlLWFyY2hpdGVjdXJl">about the same time<i class="fa fa-external-link-alt"></i></span>. Adrian Cockcroft at Netflix, describing this approach as “fine grained SOA” was pioneering the style at web scale as were many of the others mentioned in this article - Joe Walnes, Daniel Terhorst-North, Evan Botcher and Graham Tackley. <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>The term monolith has been in use by the Unix community for some time. It appears in <span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9ncC9wcm9kdWN0L0IwMDNVMlQ1QkE/aWU9VVRGOCZ0YWc9bWFydGluZm93bGVyYy0yMCZsaW5rQ29kZT1hczImY2FtcD0xNzg5JmNyZWF0aXZlPTkzMjUmY3JlYXRpdmVBU0lOPUIwMDNVMlQ1QkE=">The Art of Unix Programming<i class="fa fa-external-link-alt"></i></span> to describe systems that get too big. <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>Many object-oriented designers, including ourselves, use the term service object in the <span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9ncC9wcm9kdWN0LzAzMjExMjUyMTU/aWU9VVRGOCZ0YWc9bWFydGluZm93bGVyYy0yMCZsaW5rQ29kZT1hczImY2FtcD0xNzg5JmNyZWF0aXZlPTkzMjUmY3JlYXRpdmVBU0lOPTAzMjExMjUyMTU=">Domain-Driven Design<i class="fa fa-external-link-alt"></i></span> sense for an object that carries out a significant process that isn’t tied to an entity. This is a different concept to how we’re using “service” in this article. Sadly the term service has both meanings and we have to live with the polyseme. <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>We consider <span class="exturl" data-url="aHR0cHM6Ly9tYXJ0aW5mb3dsZXIuY29tL2JsaWtpL0FwcGxpY2F0aW9uQm91bmRhcnkuaHRtbA==">an application to be a social construction<i class="fa fa-external-link-alt"></i></span> that binds together a code base, group of functionality, and body of funding. <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p>The original paper can be found on Melvyn Conway’s website <span class="exturl" data-url="aHR0cDovL3d3dy5tZWxjb253YXkuY29tL0hvbWUvQ29tbWl0dGVlc19QYXBlci5odG1s">here<i class="fa fa-external-link-alt"></i></span>. <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p>We can’t resist mentioning Jim Webber’s statement that ESB stands for <span class="exturl" data-url="aHR0cDovL3d3dy5pbmZvcS5jb20vcHJlc2VudGF0aW9ucy9zb2Etd2l0aG91dC1lc2I=">“Egregious Spaghetti Box”<i class="fa fa-external-link-alt"></i></span>. <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p>Netflix makes the link explicit - until recently referring to their architectural style as fine-grained SOA. <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn8" class="footnote-item"><p>At extremes of scale, organisations often move to binary protocols - <span class="exturl" data-url="aHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9wcm90b2J1Zi8=">protobufs<i class="fa fa-external-link-alt"></i></span> for example. Systems using these still exhibit the characteristic of smart endpoints, dumb pipes - and trade off transparency for scale. Most web properties and certainly the vast majority of enterprises don’t need to make this tradeoff - transparency can be a big win. <a href="#fnref8" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn9" class="footnote-item"><p>“YAGNI” or “You Aren’t Going To Need It” is an <span class="exturl" data-url="aHR0cDovL2MyLmNvbS9jZ2kvd2lraT9Zb3VBcmVudEdvbm5hTmVlZEl0">XP principle<i class="fa fa-external-link-alt"></i></span> and exhortation to not add features until you know you need them. <a href="#fnref9" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn10" class="footnote-item"><p>It’s a little disengenuous of us to claim that monoliths are single language - in order to build systems on todays web, you probably need to know JavaScript and XHTML, CSS, your server side language of choice, SQL and an ORM dialect. Hardly single language, but you know what we mean. <a href="#fnref10" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn11" class="footnote-item"><p>Adrian Cockcroft specifically mentions “developer self-service” and “Developers run what they wrote”(sic) in <span class="exturl" data-url="aHR0cDovL3d3dy5zbGlkZXNoYXJlLm5ldC9hZHJpYW5jby9mbG93Y29uLWFkZGVkLXRvLWZvci1jbWcta2V5bm90ZS10YWxrLW9uLWhvdy1zcGVlZC13aW5zLWFuZC1ob3ctbmV0ZmxpeC1pcy1kb2luZy1jb250aW51b3VzLWRlbGl2ZXJ5">this excellent presentation<i class="fa fa-external-link-alt"></i></span> delivered at Flowcon in November, 2013. <a href="#fnref11" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn12" class="footnote-item"><p>We are being a little disengenuous here. Obviously deploying more services, in more complex topologies is more difficult than deploying a single monolith. Fortunately, patterns reduce this complexity - investment in tooling is still a must though. <a href="#fnref12" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn13" class="footnote-item"><p>In fact, Daniel Terhorst-North refers to this style as Replaceable Component Architecture rather than microservices. Since this seems to talk to a subset of the characteristics we prefer the latter. <a href="#fnref13" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn14" class="footnote-item"><p>Kent Beck highlights this as one his design principles in <span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9ncC9wcm9kdWN0LzAzMjE0MTMwOTE/aWU9VVRGOCZ0YWc9bWFydGluZm93bGVyYy0yMCZsaW5rQ29kZT1hczImY2FtcD0xNzg5JmNyZWF0aXZlPTkzMjUmY3JlYXRpdmVBU0lOPTAzMjE0MTMwOTE=">Implementation Patterns<i class="fa fa-external-link-alt"></i></span>. <a href="#fnref14" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn15" class="footnote-item"><p>And SOA is hardly the root of this history. I remember people saying “we’ve been doing this for years” when the SOA term appeared at the beginning of the century. One argument was that this style sees its roots as the way COBOL programs communicated via data files in the earliest days of enterprise computing. In another direction, one could argue that microservices are the same thing as the Erlang programming model, but applied to an enterprise application context. <a href="#fnref15" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>Translation</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>MQ 系列 — RabbitMQ（一）环境搭建</title>
    <url>/2020/11/10/mq-rabbit1/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>MQ 系列 — RocketMQ（一）环境搭建</title>
    <url>/2020/11/10/mq-rocket1/</url>
    <content><![CDATA[<p>本篇我们来看 MQ 系列的另一个广泛使用的中间件 <span class="exturl" data-url="aHR0cHM6Ly9yb2NrZXRtcS5hcGFjaGUub3Jn">RocketMQ<i class="fa fa-external-link-alt"></i></span>。官方介绍到 “Apache RocketMQ™ 是一个统一的消息传递引擎，轻量级的数据处理平台。Apache RocketMQ 是一个分布式消息传递和流媒体平台，具有低延迟，高性能和可靠性，万亿级容量和灵活的可伸缩性” 。更重要的是在分布式消息队列中，目前唯一提供<font color="red">完整的事务消息</font>的，只有 RocketMQ。</p>
<span id="more"></span>
<div class="note info"><ul>
<li><s>RocketMQ 3.0.8 以及之前的版本是 支持分布式事务消息（找不到对应的提交记录）</s></li>
<li><s>RocketMQ 3.0.8 之后，分布式事务的阉割了，不支持分布式事务消息（找不到对应的提交记录）</s></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9yb2NrZXRtcS5hcGFjaGUub3JnL3JlbGVhc2Vfbm90ZXMvcmVsZWFzZS1ub3Rlcy00LjAuMC1pbmN1YmF0aW5nLw==">RocketMQ 4.0.0 开始 Apache 孵化，但是也不支持分布式事务消息<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9yb2NrZXRtcS5hcGFjaGUub3JnL3JlbGVhc2Vfbm90ZXMvcmVsZWFzZS1ub3Rlcy00LjMuMC8=">RocketMQ 4.3.0 又开始支持分布式事务消息<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</div>
<h2 id="基本概念"><a class="header-anchor" href="#基本概念"></a>基本概念</h2>
<p>RocketMQ 由四部分组成：name servers, brokers, producers and consumers。它们中的每一个都可以在没有单个故障点的情况下进行水平扩展</p>
<h3 id="name-servers"><a class="header-anchor" href="#name-servers"></a>name servers</h3>
<p>用来保存 Broker 相关 Topic 等元信息并给 Producer，提供 Consumer 查找 Broker 信息。主要包括两个功能：</p>
<ol>
<li>Broker 管理，NameServer 接受来自经纪人群集的注册，并提供心跳机制以检查经纪人是否还活着</li>
<li>Routing 管理，每个NameServer 将保存有关代理群集的完整路由信息以及客户端查询的队列信息</li>
</ol>
<h3 id="brokers"><a class="header-anchor" href="#brokers"></a>brokers</h3>
<p>负责消息的存储和传递，消息查询，HA 保证等（消息存储中心，主要作用是接收来自 Producer 的消息并存储， Consumer 从这里取得消息）。Broker 服务器具有几个重要的子模块：</p>
<ul>
<li>Remoting Module：处理来自客户端的请求</li>
<li>Client Manager：管理客户（生产者/消费者）并维护消费者的主题订阅</li>
<li>Store Service：提供简单的 API，以在物理磁盘中存储或查询消息</li>
<li>HA Service：提供主代理（master broker）和从代理（slave broker）之间的数据同步功能</li>
<li>Index Service：通过指定的键为消息建立索引并提供快速的消息查询</li>
</ul>
<h3 id="producers"><a class="header-anchor" href="#producers"></a>producers</h3>
<p>负责产生消息，生产者向消息服务器发送由业务应用程序系统生成的消息。支持分布式部署，分布式生产者通过多种负载平衡模式将消息发送到 Broker 集群。发送过程支持快速失败并且延迟低</p>
<h3 id="consumers"><a class="header-anchor" href="#consumers"></a>consumers</h3>
<p>负责消费消息，消费者从消息服务器拉取信息并将其输入用户应用程序。支持 “推和拉” 模型中的分布式部署。它还支持集群使用和消息广播。它提供了实时消息订阅机制，可以满足大多数消费者的需求</p>
<h2 id="整体流程"><a class="header-anchor" href="#整体流程"></a>整体流程</h2>
<h2 id="准备工作"><a class="header-anchor" href="#准备工作"></a>准备工作</h2>
<ul>
<li>Linux</li>
<li>JDK8+</li>
<li>Maven3.2.x+</li>
<li>Git</li>
</ul>
<blockquote>
<p>相关工具没安装可参考 <a href="https://incoder.org/2018/05/15/linux-build/">Linux 常用应用安装</a></p>
</blockquote>
<h2 id="单机部署"><a class="header-anchor" href="#单机部署"></a>单机部署</h2>
<p>单机部署，主要是进行 RocketMQ 的简单使用，因此没有必要分配较大内存空间，RocketMQ NameServer 默认会占用 <strong>4G</strong>，因此在启动部署时会调整 JVM 的相关参数，指定分配内存空间</p>
<h3 id="普通部署"><a class="header-anchor" href="#普通部署"></a>普通部署</h3>
<h4 id="RocketMQ-部署"><a class="header-anchor" href="#RocketMQ-部署"></a>RocketMQ 部署</h4>
<ol>
<li>Nameserver <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 程序存放位置，根据喜好</span></span><br><span class="line"><span class="built_in">cd</span> /home/application</span><br><span class="line"><span class="comment"># 下载应用</span></span><br><span class="line">wget https://archive.apache.org/dist/rocketmq/4.7.1/rocketmq-all-4.7.1-bin-release.zip</span><br><span class="line"><span class="comment"># 解压文件，并进入解压后的目录，进行查看目录概要等信息(没有 unzip 命令，请 yum install unzip)</span></span><br><span class="line">unzip rocketmq-all-4.7.1-bin-release.zip &amp;&amp; <span class="built_in">cd</span> rocketmq-all-4.7.1-bin-release/ &amp;&amp; <span class="built_in">ls</span> -l</span><br><span class="line"><span class="comment"># 进入启动目录</span></span><br><span class="line"><span class="built_in">cd</span> bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑启动脚本文件，修个相应的 JVM 参数</span></span><br><span class="line">vim runserver.sh</span><br><span class="line"><span class="comment">### 定位到: JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=1 28m -XX:MaxMetaspaceSize=320m&quot;</span></span><br><span class="line"><span class="comment">### 更改为: JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms512M -Xmx512M -Xmn256M -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修个完成后启动 nameserver 应用</span></span><br><span class="line"><span class="built_in">nohup</span> ./mqnamesrv &amp;</span><br></pre></td></tr></table></figure>
</li>
<li>启动 broker <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 bin 目录</span></span><br><span class="line"><span class="built_in">cd</span> /home/application/rocketmq-all-4.7.1-bin-release/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑启动脚本文件，修个相应的 JVM 参数</span></span><br><span class="line">vim runbroker.sh</span><br><span class="line"><span class="comment">### 定位到: JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms8g -Xmx8g -Xmn4g&quot;</span></span><br><span class="line"><span class="comment">### 更改为: JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms1g -Xmx1g -Xmn512m&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修个完成后，后台启动 broker，-n 指定 NameServer 服务ip地址</span></span><br><span class="line"><span class="built_in">nohup</span> ./mqbroker -n localhost:9876 &amp;</span><br></pre></td></tr></table></figure>
</li>
<li>验证 RocketMQ <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 clusterList 命令来查看集群的状态</span></span><br><span class="line">sh /home/application/rocketmq-all-4.7.1-bin-release/bin/mqadmin clusterList -n 127.0.0.1:9876</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="RocketMQ-Console-部署"><a class="header-anchor" href="#RocketMQ-Console-部署"></a>RocketMQ-Console 部署</h4>
<p>通过命令去操作 RocketMQ，其实是比较麻烦，没有图形化来的直观和方法。为此 RocketMQ 官方提供了一个运维管理界面 RokcetMQ-Console-Ng，用于对 RocketMQ 集群提供常用的运维功能</p>
<blockquote>
<p>基于 SpringBoot 开发</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/apache/rocketmq-externals/archive/rocketmq-console-1.0.0.tar.gz</span><br><span class="line">tar -xf rocketmq-console-1.0.0.tar.gz</span><br><span class="line"><span class="comment"># 重命名，为了方便后续操作</span></span><br><span class="line"><span class="built_in">mv</span> rocketmq-externals-rocketmq-console-1.0.0/rocketmq-console rocketmq-consoe</span><br><span class="line"><span class="built_in">cd</span> rocketmq-console</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">vim src/main/resources/applications.properties</span><br><span class="line"><span class="comment">### 修改指向的 nameserver 地址</span></span><br><span class="line"><span class="comment">### rocketmq.config.namesrvAddr=127.0.0.1:9876</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 maven 命令编译源代码</span></span><br><span class="line">mvn clean package -DskipTests</span><br><span class="line"><span class="comment"># 复制包到自己常用的软件安装目录</span></span><br><span class="line"><span class="built_in">cp</span> rocketmq-console-ng-1.0.0.jar /opt/application/</span><br><span class="line"><span class="comment"># 启动 rocketmq-conolse</span></span><br><span class="line"><span class="built_in">nohup</span> java -jar rocketmq-console-ng-1.0.0.jar &amp;</span><br></pre></td></tr></table></figure>
<p>正常启动后，访问：<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgw">http://localhost:8080<i class="fa fa-external-link-alt"></i></span> 查看是否安装成功</p>
<div class="note info"><p>如果你使用的 root 用户启动 rocketmq, rocketmq-console 应用，那么他们的日志分别在</p>
<ul>
<li>rocketmq: /home/root/logs/rocketmqlogs/</li>
<li>rocketmq-console: /home/root/logs/consolelogs</li>
</ul>
</div>
<h3 id="Docker-部署"><a class="header-anchor" href="#Docker-部署"></a>Docker 部署</h3>
<p>截止 2020-11-10，官方的镜像依然还是 4.6 版本，难道又是阿里没人维护的 KPI 🙄</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9yb2NrZXRtcS1kb2NrZXI=">RocketMQ-Docker<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="分布式部署"><a class="header-anchor" href="#分布式部署"></a>分布式部署</h2>
<h3 id="普通部署-v2"><a class="header-anchor" href="#普通部署-v2"></a>普通部署</h3>
<h3 id="Docker-部署-v2"><a class="header-anchor" href="#Docker-部署-v2"></a>Docker 部署</h3>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9lYm9vay9yYW5raW5n">《Apache RocketMQ 从入门到实战》.pdf<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaW9jb2Rlci5jbi9Sb2NrZXRNUS9pbnN0YWxsLw==">芋道 RocketMQ 极简入门<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaW9jb2Rlci5jbi9TcHJpbmctQm9vdC9Sb2NrZXRNUS8=">芋道 Spring Boot 消息队列 RocketMQ 入门<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY2hlbnlhbmJpbi9wLzEzNzk4OTUyLmh0bWw=">RocketMQ 4.7.1 环境搭建、集群、SpringBoot整合MQ<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty（四）之 gRPC</title>
    <url>/2020/04/12/netty-grpc/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/incoder/image/upload/v1586693547/blog/grpc.png" alt=""></p>
<span id="more"></span>
<p><span class="exturl" data-url="aHR0cHM6Ly9ncnBjLmlvLw==">gRPC<i class="fa fa-external-link-alt"></i></span> is a modern open source high performance RPC framework that can run in any environment. It can efficiently connect services in and across data centers with pluggable support for load balancing, tracing, health checking and authentication. It is also applicable in last mile of distributed computing to connect devices, mobile applications and browsers to backend services.</p>
<p>gPRC 是高性能，开源通用RPC框架，可以运行在任何环境中，它是可插拔的并且支持负载均衡，跟踪，运行状况检查和身份校验，从而有效地连接数据中心和跨数据中心的服务，它也适用于分布式计算的最后一段，以将设备，移动应用和浏览器连接到后端的服务</p>
<p>gRPC 可以使用 Protocol buffers 作为接口定义语言（IDL：Interface Definition Language）和基础的消息交换格式，通常来说，你可以使用 proto2 这个版本，但是我们建议你使用 proto3 这个版本和 gRPC 一起使用，支持完整的语言，同时避免客户端和服务端版本不一致出现的其他问题</p>
<h2 id="gRPC"><a class="header-anchor" href="#gRPC"></a>gRPC</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vcHJvdG9jb2wtYnVmZmVycy9kb2NzL3Byb3RvMw==">proto3 语言官方使用手册<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="proto3-指南"><a class="header-anchor" href="#proto3-指南"></a>proto3 指南</h3>
<h3 id=""><a class="header-anchor" href="#"></a></h3>
<h2 id="gRPC实践"><a class="header-anchor" href="#gRPC实践"></a>gRPC实践</h2>
<h3 id="gRPC下载"><a class="header-anchor" href="#gRPC下载"></a>gRPC下载</h3>
<h3 id="编译器安装"><a class="header-anchor" href="#编译器安装"></a>编译器安装</h3>
<h3 id="编写-proto-文件"><a class="header-anchor" href="#编写-proto-文件"></a>编写.proto 文件</h3>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
        <tag>gRPC</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 必备技能</title>
    <url>/2019/11/01/mysql1/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/incoder/image/upload/v1573002782/blog/mysql-skill.png" alt=""></p>
<span id="more"></span>
<h2 id="SQL-语句"><a class="header-anchor" href="#SQL-语句"></a>SQL 语句</h2>
<p>SQL全称(Structured Query Language)：是一种特定目的编程语言，用于管理关系数据库管理系统（RDBMS），或在关系流数据管理系统（RDSMS）中进行流处理<br>
也就是一种数据库查询和程序设计语言，用于存取数据以及查询和管理关系型数据库</p>
<h3 id="SQL-规则"><a class="header-anchor" href="#SQL-规则"></a>SQL 规则</h3>
<ol>
<li>SQL 语句可以单行或多行书写，以分号 <code>;</code> 结尾</li>
<li>可以使用空格和缩进来增强语句可读性</li>
<li>MySQL数据库的 SQL 语句不区分大小写，<strong>关键字建议大写</strong></li>
</ol>
<h3 id="SQL-分类"><a class="header-anchor" href="#SQL-分类"></a>SQL 分类</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1582687197/blog/SQL_Commands.png" alt="SQL_Commands"></p>
<h4 id="DDL"><a class="header-anchor" href="#DDL"></a>DDL</h4>
<p>Data Definition Language（DDL）：数据定义语言，用来创建数据库中的表，索引，视图，存储过程，触发器等。</p>
<h5 id="操作数据库"><a class="header-anchor" href="#操作数据库"></a>操作数据库</h5>
<ul>
<li>CREATE：创建 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 创建数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名称;</span><br><span class="line"># 创建数据库，判断是否存在，不存在则创建</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 数据库名称;</span><br><span class="line"># 创建数据库并指定其字符集</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名称 <span class="type">CHARACTER</span> <span class="keyword">SET</span> 字符集;</span><br></pre></td></tr></table></figure>
</li>
<li>ALERT：修改 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 修改数据库的字符集</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE 数据库名称 <span class="type">CHARACTER</span> <span class="keyword">SET</span> 字符集名称;</span><br></pre></td></tr></table></figure>
</li>
<li>DROP：删除 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 删除数据库</span><br><span class="line"><span class="keyword">DROP</span> DATABASE 数据库名称;</span><br><span class="line"># 判断数据库存在，存在则删除</span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> 数据库名称;</span><br></pre></td></tr></table></figure>
</li>
<li>查询 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询所有数据库的名称</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br><span class="line"># 查询某个数据库的创建语句</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE 数据库名称;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="操作表"><a class="header-anchor" href="#操作表"></a>操作表</h5>
<ul>
<li>CREATE：创建 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 语法</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tableName(</span><br><span class="line">     列名<span class="number">1</span> 数据类型<span class="number">1</span>,</span><br><span class="line">     列名<span class="number">2</span> 数据类型<span class="number">2</span>,</span><br><span class="line">     ....</span><br><span class="line">     列名n 数据类型n,</span><br><span class="line">     [添加约束...]</span><br><span class="line"> );</span><br><span class="line"> # 示例</span><br></pre></td></tr></table></figure>
</li>
<li>ALERT：修改 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 修改表名</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 RENAME <span class="keyword">TO</span> 新表名;</span><br><span class="line"># 修改表的字符集</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="type">CHARACTER</span> <span class="keyword">SET</span> 字符集名称;</span><br><span class="line"># 添加一列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 列名 数据类型;</span><br><span class="line"># 修改列名 类型</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 列名 新列名 新数据类型;</span><br><span class="line"># 只修改数据类型</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 列名 新数据类型;</span><br><span class="line"># 删除列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 列名;</span><br></pre></td></tr></table></figure>
</li>
<li>DROP：删除 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 删除表</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名;</span><br><span class="line"># 判断表是否存在，存在则删除</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> 表名;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>TRUNCATE 和 DELETE 区别</p>
<div class="note info"><ol>
<li>TRUNCATE TABLE 表名 语句在功能上与不带 WHERE 子句的 DELETE 语句相同；二者均删除表中的全部数据，但 TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少</li>
<li>DELETE 语句每次删除一行，并在事务日志中为所删除的每一行记录。TRUNCATE TABLE 通过释放存储表数据所用的数据页来删除数据，并且旨在事务日志中记录页的释放</li>
<li>TRUNCATE TABLE 删除表中的所有行，但表结构及其列，约束，索引等保存不变，且会<strong>重置表的计数</strong>（通常我们作为表的主键）；DELETE TABLE <strong>不会重置计数</strong>；如果要删除表定义及其数据，使用 DROP TABLEE 语句</li>
</ol>
</div>
<h4 id="DML"><a class="header-anchor" href="#DML"></a>DML</h4>
<p>Data  Manipulation Language（DML）：数据操作语言，用来改变数据库数据</p>
<ul>
<li>
<p>INSERT</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 插入</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(字段列表) <span class="keyword">VALUES</span>(值列表)</span><br><span class="line"># 拷贝表</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 新表名 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 新表名 <span class="keyword">LIKE</span> 表名;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>UPDATE</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>,字段n<span class="operator">=</span>值n [<span class="keyword">WHERE</span> 条件] [<span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段名 <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>] [LIMIT];</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>DELETE</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 条件] [<span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段名 <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>] [LIMIT];</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="DQL"><a class="header-anchor" href="#DQL"></a>DQL</h4>
<p>Data Query Language（DDL）：数据查询语言，用于建立，修改，删除数据库中的各种对象</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">column_1,column_2,...</span><br><span class="line"><span class="keyword">FROM</span> table_1</span><br><span class="line">[<span class="keyword">INNER</span> <span class="operator">|</span> <span class="keyword">LEFT</span> <span class="operator">|</span><span class="keyword">RIGHT</span>] <span class="keyword">JOIN</span> table_2 <span class="keyword">ON</span> CONDITIONS</span><br><span class="line"><span class="keyword">WHERE</span> conditions</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column_1</span><br><span class="line"><span class="keyword">HAVING</span> group_conditions</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">column</span> limit <span class="keyword">offset</span>,length</span><br></pre></td></tr></table></figure>
<h4 id="DCL"><a class="header-anchor" href="#DCL"></a>DCL</h4>
<p>Data Control Language（DCL）：数据控制语言</p>
<ul>
<li>GRANT</li>
<li>REVOKE</li>
</ul>
<h4 id="TCL"><a class="header-anchor" href="#TCL"></a>TCL</h4>
<p>Transaction Control Language（TCL）： 事务控制语言，用于维护数据的一致性</p>
<h3 id="索引"><a class="header-anchor" href="#索引"></a>索引</h3>
<h3 id="字符集"><a class="header-anchor" href="#字符集"></a>字符集</h3>
<h2 id="常用命令"><a class="header-anchor" href="#常用命令"></a>常用命令</h2>
<h2 id="锁表处理"><a class="header-anchor" href="#锁表处理"></a>锁表处理</h2>
<h3 id="方法一"><a class="header-anchor" href="#方法一"></a>方法一</h3>
<ol>
<li>查看是否锁表<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">OPEN</span> TABLES <span class="keyword">where</span> In_use <span class="operator">&gt;</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>查看进程，查找被锁表的进程ID <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> processlist;</span><br></pre></td></tr></table></figure>
</li>
<li>kill 锁表的进程 ID<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">kill id;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="方法二"><a class="header-anchor" href="#方法二"></a>方法二</h3>
<ol>
<li>查看当前数据库的锁表情况<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.INNODB_TRX;</span><br></pre></td></tr></table></figure>
</li>
<li>杀掉查询结果中锁表的trx_mysql_thread_id<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">kill trx_mysql_thread_id</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="MySQL-用户分配"><a class="header-anchor" href="#MySQL-用户分配"></a>MySQL 用户分配</h2>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1574820841/blog/mysql-account.png" alt="mysql-account"></p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY2h5aW5ncC9wL215c3FsLWNoYXJhY3Rlci1zZXQtY29sbGF0aW9uLmh0bWw=">再见乱码：5分钟读懂MySQL字符集设置<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>DataBase</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty（二）之 Protobuf</title>
    <url>/2019/11/29/netty-protobuf/</url>
    <content><![CDATA[<p>Netty 框架中已经默认支持了 Protobuf 格式的数据传输，因此我们本节就来学习 Protobuf，Protobuf 主要用于进行 RPC 数据传输（它是一种自定义协议，这种协议能更好，更小体积，对数据编解码【序列号和反序列化的过程】），在学习 Protobuf 之前我们先了解两个概念 RMI 和 RPC</p>
<span id="more"></span>
<p>RMI：Remote Method Invocation，用于跨机器方法调用，只针对于 Java（要求调用者和被调用者都必须是 Java 程序）</p>
<ul>
<li>client：stub（装）</li>
<li>server：skeleton（骨架）<br>
client 与 server 底层通过 socket 数据传输</li>
</ul>
<p>RPC：Remote Procedure Call，远程过程调用，原理和 RMI 一致，优势在于跨语言支持</p>
<p>那对于 RMI 和 RPC 编写的具体步骤如下：</p>
<ol>
<li>定义接口说明文件（IDL：Interface Description Language ）：描述对象（结构体），对象成员，接口方法等一系列信息</li>
<li>通过 RPC 框架所提供的编译器，将说明文件编译成具体语言文件</li>
<li>在客户端与服务器端分别引入 RPC 编译器所生产的文件，即可享调用本地方法一样调用远程方法</li>
</ol>
<h2 id="序列化与反序列化"><a class="header-anchor" href="#序列化与反序列化"></a>序列化与反序列化</h2>
<p>序列化与反序列化也叫做，编码与解码</p>
<p>序列化：将对象转换成字节，这个过程是encode<br>
反序列化：将字节翻译成对象，这个过程是decode</p>
<h2 id="Protobuf"><a class="header-anchor" href="#Protobuf"></a>Protobuf</h2>
<ul>
<li>官方网站：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vcHJvdG9jb2wtYnVmZmVycw==">Protocol Buffers<i class="fa fa-external-link-alt"></i></span></li>
<li>官方指南：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vcHJvdG9jb2wtYnVmZmVycy9kb2NzL292ZXJ2aWV3">Guide<i class="fa fa-external-link-alt"></i></span></li>
<li>官方说明：Protocol buffers are a language-neutral, platform-neutral extensible mechanism for serializing structured data.（Protocol buffers 是一种语言中立，平台中立，可扩展的一种机制用于序列化结构化的数据）</li>
</ul>
<h3 id="Protobuf-编译环境搭建"><a class="header-anchor" href="#Protobuf-编译环境搭建"></a>Protobuf 编译环境搭建</h3>
<ol>
<li>下载对应系统的编译器，格式如 <code>protoc-$VERSION-$PLATFORM.zip</code>，这里下载的是 <code>protoc-3.11.0-osx-x86_64.zip</code></li>
<li>为了使用方便，我们需要将 protoc 解压的路径添加到环境变量中</li>
<li>在终端中使用 <code>protoc -h</code> 命令验证 protoc 变量是否配置正确</li>
</ol>
<h3 id="Protobuf-特定语言"><a class="header-anchor" href="#Protobuf-特定语言"></a>Protobuf 特定语言</h3>
<p>这是一步可选步骤，根据自身需要，选择需要的语言编译文件，这里下载的是 <code>protobuf-java-3.11.0.zip</code>，用于学习了解 protoc 对 Java 编译的支持原理等</p>
<h3 id="Protobuf-使用"><a class="header-anchor" href="#Protobuf-使用"></a>Protobuf 使用</h3>
<p>在官方 README 介绍中，请查看<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Byb3RvY29sYnVmZmVycy9wcm90b2J1Zi9ibG9iL21hc3Rlci9SRUFETUUubWQ=">Protobuf Runtime Installation<i class="fa fa-external-link-alt"></i></span>说明，这里介绍了在使用不同语言时需要安装的一些依赖，比如这里查看 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Byb3RvY29sYnVmZmVycy9wcm90b2J1Zi90cmVlL21hc3Rlci9qYXZh">Java<i class="fa fa-external-link-alt"></i></span>，在需要使用的项目中引入相关的依赖</p>
<h4 id="简单使用"><a class="header-anchor" href="#简单使用"></a>简单使用</h4>
<ol>
<li>编写<code>.proto</code>文件 <figure class="highlight proto"><table><tr><td class="code"><pre><span class="line">syntax = &#x27;proto2&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.incoder.protoc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> optimize_for = SPEED;</span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">&quot;org.incoder.protobuf&quot;</span>;</span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">&quot;HelloProtobuf&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">World</span> &#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="type">string</span> name = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">optional</span> <span class="type">string</span> address = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>执行编译命令，<code>protoc --java_out=$DST_DIR $SRC_DIR/FILE_NAME.proto</code></li>
<li>编写简单的测试，明白 RPC 的过程 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvalidProtocolBufferException &#123;</span><br><span class="line">    <span class="comment">///////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">    <span class="comment">// 把下面的这个过程等同到 RPC 的过程</span></span><br><span class="line">    <span class="comment">///////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// A机器上构建了World对象</span></span><br><span class="line">    HelloProtobuf.<span class="type">World</span> <span class="variable">world</span> <span class="operator">=</span> HelloProtobuf.World.newBuilder()</span><br><span class="line">            .setName(<span class="string">&quot;China&quot;</span>)</span><br><span class="line">            .setAddress(<span class="string">&quot;处于地球东半球&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A 机器构建的对象转换成字节数组</span></span><br><span class="line">    <span class="comment">// 字节数组通过网络传输（Netty 等方式） A 机器传输到 B 机器</span></span><br><span class="line">    <span class="type">byte</span>[] world2ByteArray = world.toByteArray();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// B 机器上把字节数转换成对象（取决于在 B 机器上的使用语言），并把数据打印出来</span></span><br><span class="line">    HelloProtobuf.<span class="type">World</span> <span class="variable">worlds</span> <span class="operator">=</span> HelloProtobuf.World.parseFrom(world2ByteArray);</span><br><span class="line">    System.out.println(worlds);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>整个过程如下截图<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1575096751/blog/netty-protobuf-hello.png" alt=""></p>
<h4 id="在-Netty-中的应用（单消息）"><a class="header-anchor" href="#在-Netty-中的应用（单消息）"></a>在 Netty 中的应用（单消息）</h4>
<p>和之前<a href="">Netty初体验（一）</a>中编写步骤一样，这里只是对Initializer 中使用Netty 提供相关 Protobuf 的工具类</p>
<ul>
<li>ProtobufDecoder：将收到的 ByteBuf 解码为 Google Protocol Buffers 和 MessageLite（），请注意，如果使用基于流的传输方式（比如：TCP/IP），则此解码器必须与适当的 ByteToMessageDecoder（如：ProtobufVarint32FrameDecoder 或者 ProtobufVarint32LengthFieldPrepender）</li>
<li>ProtobufDecoderNano：将接收到的 ByteBuf解码为 Google Protocol Buffers MessageNano，请注意，如果使用的是基于流的传输方式（如：TCP/IP），则此解码器必须与适当的 ByteToMessageDecoder（如果：LengthFieldBasedFrameDecoder）一起使用</li>
<li>ProtobufEncoder：将请求的 Google Protocol Buffers 和 MessageLite 编码为 ByteBuf</li>
<li>ProtobufEncoderNano：将请求的 Google Protocol Buffers MessageNano 编码为 ByteBuf</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vcHJvdG9jb2wtYnVmZmVycy9kb2NzL2VuY29kaW5nI3ZhcmludHM=">ProtobufVarint32FrameDecoder<i class="fa fa-external-link-alt"></i></span>：解码器按消息中 Google Protocol Buffers 基于 128 Varints 整数长度字段的值动态拆分接收到的 ByteBuf  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">For example:</span><br><span class="line">BEFORE DECODE (302 bytes)       AFTER DECODE (300 bytes)</span><br><span class="line">+--------+---------------+      +---------------+</span><br><span class="line">| Length | Protobuf Data |-----&gt;| Protobuf Data |</span><br><span class="line">| 0xAC02 |  (300 bytes)  |      |  (300 bytes)  |</span><br><span class="line">+--------+---------------+      +---------------+</span><br></pre></td></tr></table></figure>
</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vcHJvdG9jb2wtYnVmZmVycy9kb2NzL2VuY29kaW5nP2Nzdz0xI3ZhcmludHM=">ProtobufVarint32LengthFieldPrepender<i class="fa fa-external-link-alt"></i></span>：一种编码器，可在 Google Protocol Buffers Base 128 Varints 之前添加  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BEFORE ENCODE (300 bytes)       AFTER ENCODE (302 bytes)</span><br><span class="line">+---------------+               +--------+---------------+</span><br><span class="line">| Protobuf Data |--------------&gt;| Length | Protobuf Data |</span><br><span class="line">|  (300 bytes)  |               | 0xAC02 |  (300 bytes)  |</span><br><span class="line">+---------------+               +--------+---------------+</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="SingleClient"><a class="header-anchor" href="#SingleClient"></a>SingleClient</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">EventLoopGroup</span> <span class="variable">eventLoopGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">            bootstrap.group(eventLoopGroup).channel(NioSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> <span class="title class_">SingleClientInitializer</span>());</span><br><span class="line"></span><br><span class="line">            <span class="type">ChannelFuture</span> <span class="variable">channelFuture</span> <span class="operator">=</span> bootstrap.connect(<span class="string">&quot;localhost&quot;</span>, <span class="number">5555</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            eventLoopGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="SingleClientInitializer"><a class="header-anchor" href="#SingleClientInitializer"></a>SingleClientInitializer</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleClientInitializer</span> <span class="keyword">extends</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> ch.pipeline();</span><br><span class="line"></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">ProtobufVarint32FrameDecoder</span>());</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">ProtobufDecoder</span>(NettyDataInfo.Person.getDefaultInstance()));</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">ProtobufVarint32LengthFieldPrepender</span>());</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">ProtobufEncoder</span>());</span><br><span class="line"></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">SingleClientHandler</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="SingleClientHandler"><a class="header-anchor" href="#SingleClientHandler"></a>SingleClientHandler</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleClientHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;NettyDataInfo.Person&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, NettyDataInfo.Person msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端建立连接后发送消息给服务端</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        NettyDataInfo.<span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> NettyDataInfo.Person.newBuilder()</span><br><span class="line">                .setName(<span class="string">&quot;netty&quot;</span>)</span><br><span class="line">                .setAge(<span class="number">20</span>)</span><br><span class="line">                .setAddress(<span class="string">&quot;https://netty.io&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送消息给服务器</span></span><br><span class="line">        ctx.channel().writeAndFlush(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="SingleServer"><a class="header-anchor" href="#SingleServer"></a>SingleServer</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">EventLoopGroup</span> <span class="variable">bossGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="type">EventLoopGroup</span> <span class="variable">workGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServerBootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">            bootstrap.group(bossGroup, workGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.INFO))</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> <span class="title class_">SingleServerInitializer</span>());</span><br><span class="line"></span><br><span class="line">            <span class="type">ChannelFuture</span> <span class="variable">channelFuture</span> <span class="operator">=</span> bootstrap.bind(<span class="number">5555</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="SingleServerInitializer"><a class="header-anchor" href="#SingleServerInitializer"></a>SingleServerInitializer</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleServerInitializer</span> <span class="keyword">extends</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> ch.pipeline();</span><br><span class="line"></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">ProtobufVarint32FrameDecoder</span>());</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">ProtobufDecoder</span>(NettyDataInfo.Person.getDefaultInstance()));</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">ProtobufVarint32LengthFieldPrepender</span>());</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">ProtobufEncoder</span>());</span><br><span class="line"></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">SingleServerHandler</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="SingleServerHandler"><a class="header-anchor" href="#SingleServerHandler"></a>SingleServerHandler</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleServerHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;NettyDataInfo.Person&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, NettyDataInfo.Person msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 打印客户端连接后发送的消息</span></span><br><span class="line">        System.out.println(msg.getName());</span><br><span class="line">        System.out.println(msg.getAge());</span><br><span class="line">        System.out.println(msg.getAddress());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="在-Netty-中的应用（多消息）"><a class="header-anchor" href="#在-Netty-中的应用（多消息）"></a>在 Netty 中的应用（多消息）</h4>
<p>由于通过 Netty（底层是 socket）使客户端与服务端建立连接，使用 Google Protocol Buffers 协议进行数据通信，而 <code>ProtobufDecoder(MessageLite prototype)</code> 需要指定具体的实例，因此想要进行多消息类型数据通信，可以有两种方式</p>
<ol>
<li>自定义通信协议</li>
<li>在定义 IDL 时，将所有类型的数据进行定义，最终生成一个包含了通信所需的所有类型的顶层 Message</li>
</ol>
<p>方式二具体代码可参考：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Jvb3RDbHVzdGVyL3JjLWNsdXN0ZXItbmV0dHkvYmxvYi9tYXN0ZXIvc3JjL21haW4vamF2YS9vcmcvaW5jb2Rlci9uZXR0eS9wcm90b2J1Zi9tdWx0aXBsZQ==">multiple<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="问题"><a class="header-anchor" href="#问题"></a>问题</h2>
<h3 id="环境搭建问题"><a class="header-anchor" href="#环境搭建问题"></a>环境搭建问题</h3>
<p>在配置好环境变量后，执行 <code>protoc -h</code> 命令提示 <code>“protoc” cannot be opened because the developer cannot be verified.</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1575080551/blog/netty-protobuf-install.png" alt=""></p>
<ul>
<li>原因：在 macOS 10.15 版本上未授权访问</li>
<li>解决：在系统设置中，进行授权，操作如下 Settings -&gt; Security &amp; Privacy -&gt; General<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1575080551/blog/netty-protobuf-mac-allow.png" alt=""></li>
<li>验证：在终端中执行 <code>protoc -h</code> 命令<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1575080551/blog/netty-protobuf-mac-open.png" alt=""></li>
</ul>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
        <tag>Protobuf</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty（三）之 Thrift</title>
    <url>/2019/12/01/netty-thrift/</url>
    <content><![CDATA[<p>The Apache Thrift software framework, for scalable cross-language services development, combines a software stack with a code generation engine to build services that work efficiently and seamlessly between C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, JavaScript, Node.js, Smalltalk, OCaml and Delphi and other languages.</p>
<p>Apache Thrift软件框架，用于可扩展的跨语言服务开发，它包含软件栈和一个代码生成器用于构建服务，这个服务可以高效并且无缝的在 C++，Java，Python，PHP，Ruby，Erlang，Perl，Haskell，C#，Cocoa，Node.js，Smalltalk，OCaml 和 Delphi 等其他语言间协作</p>
<span id="more"></span>
<p><span class="exturl" data-url="aHR0cDovL3RocmlmdC5hcGFjaGUub3Jn">Apache Thrift<i class="fa fa-external-link-alt"></i></span> 与 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vcHJvdG9jb2wtYnVmZmVycw==">Google Protocal Buffers<i class="fa fa-external-link-alt"></i></span> 都是一种可以用于在 Netty 之上的一种数据格式，Thrift 可应用的语言比 Protocal Buffers 多，并且 Thrift 除了用于传递数据的定义，底层还提供了传输层，因此可以单独的去使用，而不必强制运行在 Netty 载体之上</p>
<h2 id="Thrift"><a class="header-anchor" href="#Thrift"></a>Thrift</h2>
<h3 id="Thrift数据类型"><a class="header-anchor" href="#Thrift数据类型"></a>Thrift数据类型</h3>
<p>Thrift不支持无符号类型，因为很多编程语言不存在无符号类型，比如Java</p>
<ul>
<li>byte：有符号字节</li>
<li>i16：16位有符号整数</li>
<li>i32：32位有符号整数</li>
<li>i64：64位有符号整数</li>
<li>double：64位浮点数</li>
<li>string：字符串</li>
<li>bool：布尔值</li>
</ul>
<h3 id="Thrift容器类型"><a class="header-anchor" href="#Thrift容器类型"></a>Thrift容器类型</h3>
<ul>
<li>list：一系列由T类型的数据组成有序列表，元素可以重复
<blockquote>
<p>集合中的元素可以是除了service之外的任何类型，包括exception</p>
</blockquote>
</li>
<li>set：一系列由T类型的数据组成的无序列表，元素不可以重复</li>
<li>map：一个字典结构，key 为 K类型，value为 V类型，相当于Java中的 HashMap</li>
</ul>
<h3 id="Thrift支持的三类组件"><a class="header-anchor" href="#Thrift支持的三类组件"></a>Thrift支持的三类组件</h3>
<h4 id="struct"><a class="header-anchor" href="#struct"></a>struct</h4>
<p>结构体，编译生成完成后，对应的是我们的类，就像 C 语言一样，thrift 支持 struct 类型，目的就是将一些数据聚合在一起，方便传输管理。struct 的定义形式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">struct People&#123;</span><br><span class="line">  <span class="number">1</span>:string name;</span><br><span class="line">  <span class="number">2</span>:i32 age;</span><br><span class="line">  <span class="number">3</span>:string gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>枚举，枚举的定义形式和 Java 的 Enum 定义类似</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Gender</span>&#123;</span><br><span class="line">  MALE,</span><br><span class="line">  FEMALE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="exception"><a class="header-anchor" href="#exception"></a>exception</h4>
<p>异常，客户端与服务端之间通信用到的接口可能抛出的异常，thrift 支持自定义 exception，规则与 struct 一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">exception RequestException&#123;</span><br><span class="line">  <span class="number">1</span>:i32 code;</span><br><span class="line">  <span class="number">2</span>:string reason;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="service"><a class="header-anchor" href="#service"></a>service</h4>
<p>服务，客户端与服务端之间通信用到的接口，thrift 定义服务相当于 Java 中创建 interface 一样，创建的 service 经过代码生成命令之后就会生成客户端和服务端的框架代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">service HelloWorldService&#123;</span><br><span class="line">  <span class="comment">// service 中定义的函数，相当于 Java interface 中定义的方法</span></span><br><span class="line">  string <span class="title function_">doAction</span><span class="params">(<span class="number">1</span>:string name, <span class="number">2</span>:i32 age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类型定义"><a class="header-anchor" href="#类型定义"></a>类型定义</h3>
<p>thrift 支持类似 C++ 一样的 typedef 定义，在定义完别名后，在后面的 IDL 文件中就可以使用别名进行编写</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把 i32 别名成 int</span></span><br><span class="line"><span class="keyword">typedef</span> i32 <span class="type">int</span></span><br><span class="line"><span class="comment">// 把 i64 别名成 long</span></span><br><span class="line"><span class="keyword">typedef</span> i64 <span class="type">long</span></span><br></pre></td></tr></table></figure>
<h3 id="常量"><a class="header-anchor" href="#常量"></a>常量</h3>
<p>thrift 也支持常量定义，使用 const 关键字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">const <span class="type">i32</span> <span class="variable">MAX_RETRIES_TIME</span> <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">const <span class="type">string</span> <span class="variable">MY_WEBSITE</span> <span class="operator">=</span> <span class="string">&quot;https://incoder.org&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="命名空间"><a class="header-anchor" href="#命名空间"></a>命名空间</h3>
<p>thrift 的命名空间相当于 Java 中的 package 的意思，主要目的是组织代码。thrift 使用关键字 namespace 定义命名空间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式：namespace 语言名 路径</span></span><br><span class="line">namespace java org.incoder.thrift</span><br></pre></td></tr></table></figure>
<h3 id="文件包含"><a class="header-anchor" href="#文件包含"></a>文件包含</h3>
<p>thrift 也支持文件包含，相当于 C/C++ 中的 include，Java 中的 import，使用关键字 include 定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">include <span class="string">&quot;global.thrift&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="可选与必选"><a class="header-anchor" href="#可选与必选"></a>可选与必选</h3>
<p>thrift 提供两个关键字<code>required</code>，<code>optional</code>，分别用于表示对应的字段是必填还是可选，主要根据你的业务来选择，推荐使用 optional</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>:required string name;</span><br><span class="line"><span class="number">2</span>:optional i32 age;</span><br></pre></td></tr></table></figure>
<h3 id="Thrift工作原理"><a class="header-anchor" href="#Thrift工作原理"></a>Thrift工作原理</h3>
<p>数据之间的传输使用socket（多种语言均支持），数据载以特定的格式（String等）发送，接收方进行语言解析。通过定义 Thrift 文件，由 Thrift 文件（IDL）生成双方语言的接口，model，在生成的model及接口中会有解析码，编码的代码</p>
<h2 id="Thrift-实践"><a class="header-anchor" href="#Thrift-实践"></a>Thrift 实践</h2>
<h3 id="下载Thrift"><a class="header-anchor" href="#下载Thrift"></a>下载Thrift</h3>
<p>这一步可以直接通过 maven 或者 gradle 的方式集成 Thrift 包到所需要的项目包管理中即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># maven</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.thrift<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>libthrift<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># gradle</span><br><span class="line">compile &#x27;org.apache.thrift:libthrift:0.13.0&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="编译器安装"><a class="header-anchor" href="#编译器安装"></a>编译器安装</h3>
<p>对于 macOS 可使用官方提供的方式去安装，也可以借助于 macOS 上，优秀的包管理工具 <span class="exturl" data-url="aHR0cHM6Ly9icmV3LnNo">Homebrew<i class="fa fa-external-link-alt"></i></span> 来进行安装，我这里就直接使用 Homebrew 进行安装，其他系统可参考<span class="exturl" data-url="aHR0cDovL3RocmlmdC5hcGFjaGUub3JnL2RvY3MvaW5zdGFsbA==">官方文档<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install thrift</span><br></pre></td></tr></table></figure>
<h3 id="编写-thrift文件"><a class="header-anchor" href="#编写-thrift文件"></a>编写.thrift文件</h3>
<p>编写.thrift 文件的指南，可以参考<span class="exturl" data-url="aHR0cDovL3RocmlmdC5hcGFjaGUub3JnL2RvY3MvaWRs">官网文档<i class="fa fa-external-link-alt"></i></span>，编写完文件，使用 thrift 编译器提供的命令生成相关的代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">thrift --gen &lt;language&gt; &lt;Thrift filename&gt;</span><br></pre></td></tr></table></figure>
<h2 id="示例"><a class="header-anchor" href="#示例"></a>示例</h2>
<div class="tabs" id="tags"><ul class="nav-tabs"><li class="tab active"><a href="#tags-1">Thrift Definition File</a></li><li class="tab"><a href="#tags-2">Python Service</a></li><li class="tab"><a href="#tags-3">Python Client</a></li><li class="tab"><a href="#tags-4">Java Server</a></li><li class="tab"><a href="#tags-5">Java Client</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tags-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 定义命名空间</span><br><span class="line">namespace java org.incoder.thrift.java</span><br><span class="line">namespace py org.incoder.thrift.py</span><br><span class="line"></span><br><span class="line">// 定义别名</span><br><span class="line">typedef i16 short</span><br><span class="line">typedef i32 int</span><br><span class="line">typedef i64 long</span><br><span class="line">typedef bool boolean</span><br><span class="line">typedef string String</span><br><span class="line"></span><br><span class="line">// 定义 struct</span><br><span class="line">struct Person&#123;</span><br><span class="line">    1: optional String username,</span><br><span class="line">    2: optional int age,</span><br><span class="line">    3: optional boolean married</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义 exception</span><br><span class="line">exception DataException&#123;</span><br><span class="line">    1: optional String message,</span><br><span class="line">    2: optional String callStack,</span><br><span class="line">    3: optional String date</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义 service</span><br><span class="line">service PersonService&#123;</span><br><span class="line">    Person getPersonByUsername(1: required String username) throws (1: DataException dataException),</span><br><span class="line"></span><br><span class="line">    void savePerson(1: required Person person) throws (1: DataException dataException)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tags-2"><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    person_handler = PersonHandler()</span><br><span class="line">    processor = PersonService.Processor(person_handler)</span><br><span class="line"></span><br><span class="line">    serverSocket = TSocket.TServerSocket(port=<span class="number">9090</span>)</span><br><span class="line">    transportFactory = TTransport.TFramedTransportFactory()</span><br><span class="line">    protocolFactory = TCompactProtocol.TCompactProtocolFactory()</span><br><span class="line"></span><br><span class="line">    server = TServer.TSimpleServer(processor, serverSocket, transportFactory, protocolFactory)</span><br><span class="line">    server.serve()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Thrift.TException <span class="keyword">as</span> tx:</span><br><span class="line">    <span class="built_in">print</span>(tx.message)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tags-3"><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    tSocket = TSocket.TSocket(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">9090</span>)</span><br><span class="line">    tSocket.setTimeout(<span class="number">600</span>)</span><br><span class="line"></span><br><span class="line">    transport = TTransport.TFramedTransport(tSocket)</span><br><span class="line">    protocol = TCompactProtocol.TCompactProtocol(transport)</span><br><span class="line">    client = PersonService.Client(protocol)</span><br><span class="line"></span><br><span class="line">    transport.<span class="built_in">open</span>()</span><br><span class="line">    person = client.getPersonByUsername(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;username：&quot;</span> + person.username)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;age：&quot;</span> + <span class="built_in">str</span>(person.age))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;married：&quot;</span> + <span class="built_in">str</span>(person.married))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------------------&quot;</span>)</span><br><span class="line">    newPerson = ttypes.Person()</span><br><span class="line">    newPerson.username = <span class="string">&quot;李四&quot;</span></span><br><span class="line">    newPerson.age = <span class="number">30</span></span><br><span class="line">    newPerson.married = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    client.savePerson(newPerson)</span><br><span class="line">    transport.close()</span><br><span class="line"><span class="keyword">except</span> Thrift.TException <span class="keyword">as</span> tx:</span><br><span class="line">    <span class="built_in">print</span>(tx.message)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tags-4"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">TNonblockingServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TNonblockingServerSocket</span>(<span class="number">9090</span>);</span><br><span class="line">    THsHaServer.<span class="type">Args</span> <span class="variable">arg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">THsHaServer</span>.Args(serverSocket).minWorkerThreads(<span class="number">2</span>).maxWorkerThreads(<span class="number">4</span>);</span><br><span class="line">    PersonService.Processor&lt;PersonServiceImpl&gt; processor = <span class="keyword">new</span> <span class="title class_">PersonService</span>.Processor&lt;&gt;(<span class="keyword">new</span> <span class="title class_">PersonServiceImpl</span>());</span><br><span class="line"></span><br><span class="line">    arg.protocolFactory(<span class="keyword">new</span> <span class="title class_">TCompactProtocol</span>.Factory());</span><br><span class="line">    arg.transportFactory(<span class="keyword">new</span> <span class="title class_">TFramedTransport</span>.Factory());</span><br><span class="line">    arg.processorFactory(<span class="keyword">new</span> <span class="title class_">TProcessorFactory</span>(processor));</span><br><span class="line"></span><br><span class="line">    <span class="type">TServer</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">THsHaServer</span>(arg);</span><br><span class="line">    System.out.println(<span class="string">&quot;Thrift service Started!&quot;</span>);</span><br><span class="line">    <span class="comment">// 开启死循环</span></span><br><span class="line">    server.serve();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tags-5"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">TTransport</span> <span class="variable">transport</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TFramedTransport</span>(<span class="keyword">new</span> <span class="title class_">TSocket</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9090</span>), <span class="number">600</span>);</span><br><span class="line">    <span class="type">TProtocol</span> <span class="variable">protocol</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCompactProtocol</span>(transport);</span><br><span class="line">    PersonService.<span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PersonService</span>.Client(protocol);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        transport.open();</span><br><span class="line">        <span class="comment">// 调用定义通过用户名获取用户信息的接口方法 getPersonByUsername</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> client.getPersonByUsername(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(person.getUsername());</span><br><span class="line">        System.out.println(person.getAge());</span><br><span class="line">        System.out.println(person.isMarried());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用定义保存用户信息的方法</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">per</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        per.setUsername(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        per.setAge(<span class="number">30</span>);</span><br><span class="line">        per.setMarried(<span class="literal">true</span>);</span><br><span class="line">        client.savePerson(per);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e.getMessage(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        transport.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>
<blockquote>
<p>相关源码<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Jvb3RDbHVzdGVyL3JjLWNsdXN0ZXItbmV0dHkvdHJlZS9tYXN0ZXIvc3JjL21haW4vamF2YS9vcmcvaW5jb2Rlci90aHJpZnQ=">rc-cluster-netty<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="其他"><a class="header-anchor" href="#其他"></a>其他</h2>
<p>本地 Thrift 的 Python 环境，需要下载官方的文件，进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一：</span></span><br><span class="line">pip3 install thrift</span><br><span class="line"><span class="comment"># 方式二，下载官方包，进行安装</span></span><br><span class="line"><span class="comment"># 1. 下载文件</span></span><br><span class="line">curl https://mirrors.tuna.tsinghua.edu.cn/apache/thrift/0.13.0/thrift-0.13.0.tar.gz</span><br><span class="line"><span class="comment"># 2. 解压文件</span></span><br><span class="line">tar -zvxf thrift-0.13.0.tar.gz</span><br><span class="line"><span class="comment"># 3. 安装thrift</span></span><br><span class="line"><span class="built_in">cd</span> thrift-0.13.0/lib/py/</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
        <tag>Thrift</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty初体验（一）</title>
    <url>/2019/11/20/netty/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9uZXR0eS5pbw==">Netty<i class="fa fa-external-link-alt"></i></span> 是国内外各大互联网公司的必备网络应用框架，Netty 主要处理与网络相关的一些应用。由于 Netty 设计的巧妙的实现方式，以及对协议很好的实现，使的 Netty 可以在各种应用场景下广泛的应用，无论是传统基于HTTP协议的访问方式，还是更底层基于socket的访问方式，以及支持HTML5规范中的websocket的长连接特性，都提供了比较好的支持</p>
<span id="more"></span>
<p>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients（Netty 是一个异步的，事件驱动的网络应用框架，是可维护的，高性能的，协议化的服务端和客户端快速开发方式）</p>
<p>Netty 是一个非阻塞(NIO)客户端服务端框架，它可以快速的进行网络应用开发，例如：基于协议的客户端和服务端。它极大的简化并且支持流式的网络程序，例如：基于TCP和UDP的socket服务<br>
'快捷方便’并不意味着最终的应用程序会受到可维护性或性能问题的影响。Netty经过精心设计，具有实施许多协议所获得的经验，如FTP，SMTP，HTTP以及各种基于二进制和文本的遗留协议。因此，Netty 成功地找到了一种在不妥协的情况下实现易于开发，性能，稳定性和灵活性的方法</p>
<h2 id="特点"><a class="header-anchor" href="#特点"></a>特点</h2>
<ul>
<li>适用于各种传输类型统一API - 阻塞和非阻塞 socket</li>
<li>基于灵活且可扩展的事件模型，可以清晰地关注分离(separation of concerns)</li>
<li>高度可定制的线程模型 - 单线程，一个或多个线程池，如:Staged Event Driven Architecture(SEDA,阶段型事件驱动架构，将一个请求分成若干个阶段，每个阶段可以根据自身情况不用数量的线程来分别进行处理，阶段与阶段之间是通过事件驱动的这种异步通讯模式来进行沟通及通信)</li>
<li>真正的无连接数据报套socket支持（since 3.1）</li>
</ul>
<h2 id="性能"><a class="header-anchor" href="#性能"></a>性能</h2>
<ul>
<li>更高的吞吐量，更低的延迟</li>
<li>减少资源消耗</li>
<li>不必要的内存复制降到最低</li>
</ul>
<h2 id="安全"><a class="header-anchor" href="#安全"></a>安全</h2>
<ul>
<li>完整的SSL / TLS 和 StartTLS 支持</li>
</ul>
<h2 id="Netty-使用场景"><a class="header-anchor" href="#Netty-使用场景"></a>Netty 使用场景</h2>
<ol>
<li>作为HTTP的服务器，类似与Jetty，Tomcat这种Servlet容器，只是Netty在充当HTTP的服务器时，它采用的编程模型并不是基于Servlet的规范，原因是Netty并没有实现Servlet的接口，Servlet的实现，Netty有自己的实现方式</li>
<li>作为RPC通讯的框架，通讯的协议（可自定义），通讯的库，实现远程过程的调用，基于Socket方式（广泛使用）</li>
<li>作为长连接的服务器，基于WebSocket，实现客户端和服务端之间的长连接通信</li>
</ol>
<p>环境说明</p>
<ul>
<li>System：macOS</li>
<li>Java：JDK1.8+</li>
<li>Netty：4.1.25.Final</li>
</ul>
<h3 id="HTTP"><a class="header-anchor" href="#HTTP"></a>HTTP</h3>
<p>Netty 基于Servlet的规范，是一种特定的方式（更底层），因此 Netty 更专注于底层的性能等方面，所以在应用层开发时，是由开发人员自行去组装对请求，对 <strong>请求路由</strong> 处理等</p>
<blockquote>
<p>示例：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Jvb3RDbHVzdGVyL3JjLWNsdXN0ZXItbmV0dHkvdHJlZS9tYXN0ZXIvc3JjL21haW4vamF2YS9vcmcvaW5jb2Rlci9uZXR0eS9odHRw">HTTP<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Socket"><a class="header-anchor" href="#Socket"></a>Socket</h3>
<p>Socket 是计算机网络中用于在节点内发送或接收数据的内部端点。具体来说，它是网络软件 (协议栈) 中这个端点的一种表示，包含通信协议、目标地址、状态等，是系统资源的一种形式</p>
<blockquote>
<p>示例：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Jvb3RDbHVzdGVyL3JjLWNsdXN0ZXItbmV0dHkvdHJlZS9tYXN0ZXIvc3JjL21haW4vamF2YS9vcmcvaW5jb2Rlci9uZXR0eS9zb2NrZXQ=">Socket<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Websocket"><a class="header-anchor" href="#Websocket"></a>Websocket</h3>
<p>WebSocket 是HTML5 规范的一部分，也是基于 HTTP 协议之上的一种协议，WebSocket主要是解决 HTTP 上存在的一些问题；</p>
<ol>
<li>HTTP 一种无状态（同一客户端发出的第一次请求接收到响应后，客户端发送第二次请求，这两次请求之间没有任何关联）的协议，HTTP 无法追踪某一请求来自哪一个客户端，客户端之前在服务器上存在一些信息（常见的解决方式：cookie，session）</li>
<li>HTTP 是基于请求响应模式的协议，请求的发起方一定是客户端，服务器将响应返回给客户端后连接就断掉了（HTTP 1.0），在 1.0 的基础上连接可以短时间的保持，一种 keep-alive 机制（HTTP 1.1）</li>
</ol>
<p>通常我们所使用的长连接技术</p>
<ul>
<li>早期采用轮询的方式保持与服务器的连接</li>
<li>目前通常采用 Websocket 的连接方式保持与服务器的连接
<ul>
<li>客户端（浏览器）与服务器建立连接后，没有其他因素干扰，连接是不会断，一直存在，客户端与服务器双方是对等的，不再区分谁是客户端，谁是服务端，客户端可以发送数据给服务端，服务端也可以发送数据给客户端，在真正意义上实现了服务端的推技术</li>
<li>长连接在建立初期会发送带有 header 头信息的网络请求，在连接建立后，在长连接之上只需要发送需要传递的数据（真正的数据）即可</li>
<li>Websocket 是基于 HTTP 协议</li>
<li>Websocket 也可以用于非浏览器的场景，只要你的库支持 Websocket 即可</li>
</ul>
</li>
</ul>
<blockquote>
<p>示例：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Jvb3RDbHVzdGVyL3JjLWNsdXN0ZXItbmV0dHkvdHJlZS9tYXN0ZXIvc3JjL21haW4vamF2YS9vcmcvaW5jb2Rlci9uZXR0eS93ZWJzb2NrZXQ=">Websocket Server<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Jvb3RDbHVzdGVyL3JjLWNsdXN0ZXItbmV0dHkvYmxvYi9tYXN0ZXIvc3JjL3dlYmFwcA==">Websocket Client<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</blockquote>
<h3 id="Heartbeat"><a class="header-anchor" href="#Heartbeat"></a>Heartbeat</h3>
<p>对于服务器上的集群服务（zookeeper 或者其他的应用服务），或者是客户端与服务端之间的长连接，需要一种机制来检测客户端还是 alive，这种机制就是 heartbeat</p>
<ul>
<li>对于服务器上的这些服务与服务之间，节点与节点之间的通信（无一例外都使用 TCP 连接通信），节点之间的通信如何保证（A 节点感知到 B 或者其他节点是未宕机），此时就需要心跳来检测对应的服务或节点还是正常的</li>
<li>对于客户端与服务器之间由于网络问题，或者客户端开启飞行模式，或者关机等状态，服务端是无法感知，因此也需要借助心跳来检测客户端是否关机或开启了飞行模式</li>
</ul>
<blockquote>
<p>示例：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Jvb3RDbHVzdGVyL3JjLWNsdXN0ZXItbmV0dHkvdHJlZS9tYXN0ZXIvc3JjL21haW4vamF2YS9vcmcvaW5jb2Rlci9uZXR0eS9oZWFydGJlYXQ=">Heartbeat<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<h3 id="Netty-程序编写步骤"><a class="header-anchor" href="#Netty-程序编写步骤"></a>Netty 程序编写步骤</h3>
<ol>
<li>定义好父子的（bossGroup：获取链接,workerGroup：真正来处理链接）线程组（EventLoopGroup）,服务器启动时关联一个处理器处理器类似Initializer这样的处理器</li>
<li>Initializer定义好自定义的或Netty本身提供的ChannelHandler通道处理器，在initChannel中自定义添加若干个处理器</li>
<li>实现自定义处理器ChannelHandler中特定的回调方法</li>
</ol>
<h3 id="Netty-程序测试"><a class="header-anchor" href="#Netty-程序测试"></a>Netty 程序测试</h3>
<ol>
<li>启动 Server 服务</li>
<li>访问启动的服务，使用 curl命令 或者使用浏览器访问进行访问</li>
</ol>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1575207499/blog/netty-http.png" alt="netty-test"></p>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Http VS Https</title>
    <url>/2018/06/22/network-http/</url>
    <content><![CDATA[<h2 id="基础名称"><a class="header-anchor" href="#基础名称"></a>基础名称</h2>
<h3 id="请求报文"><a class="header-anchor" href="#请求报文"></a>请求报文</h3>
<p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：<br>
请求行（request line）、请求头（header）、请求内容组成，如下请求报文的一般格式。<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1562212437/blog/newwork-request.webp" alt="请求报文"></p>
<span id="more"></span>
<h4 id="请求行"><a class="header-anchor" href="#请求行"></a>请求行</h4>
<ol>
<li>
<p>方法：</p>
<ul>
<li>GET： 获取资源</li>
<li>POST： 向服务器端发送数据，传输实体主体</li>
<li>PUT： 传输文件</li>
<li>HEAD： 获取报文首部</li>
<li>DELETE： 删除文件</li>
<li>OPTIONS： 询问支持的方法</li>
<li>TRACE： 追踪路径</li>
</ul>
</li>
<li>
<p>URL：<br>
<code>scheme://host:port/path?query</code></p>
<ul>
<li>scheme: 表示协议，如Http, Https, Ftp等</li>
<li>host: 表示所访问资源所在的主机名：如：<span class="exturl" data-url="aHR0cDovL3d3dy5iYWlkdS5jb20=">www.baidu.com<i class="fa fa-external-link-alt"></i></span></li>
<li>port: 表示端口号，Http默认为80,Https默认为443</li>
<li>path: 表示所访问的资源在目标主机上的储存路径</li>
<li>query: 表示查询条件</li>
</ul>
</li>
<li>
<p>协议/版本号：</p>
</li>
</ol>
<h4 id="请求头"><a class="header-anchor" href="#请求头"></a>请求头</h4>
<ol>
<li>通用首部(General Header)</li>
<li>请求首部(Request Header)</li>
<li>实体首部(Entity Header Fields)</li>
</ol>
<h4 id="请求内容"><a class="header-anchor" href="#请求内容"></a>请求内容</h4>
<p>如: 客户端POST的数据就放在这里(对比:GET的数据放在请求行的URL里)</p>
<p>例如：<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1529805798/blog/http-request.png" alt="请求示例"></p>
<h3 id="响应报文"><a class="header-anchor" href="#响应报文"></a>响应报文</h3>
<p>服务端响应一个HTTP请求消息包括以下格式：<br>
响应行（response line）、响应头（header）、响应内容组成</p>
<h4 id="响应行"><a class="header-anchor" href="#响应行"></a>响应行</h4>
<ol>
<li>状态码：
<ul>
<li>1XX：Informational(信息性状态码)</li>
<li>2XX：Success(成功状态码)</li>
<li>3XX：Redirection(重定向)</li>
<li>4XX：Client Error(客户端错误状态码)</li>
<li>5XX：Server Error(服务器错误状态吗)</li>
</ul>
</li>
<li>状态码描述：</li>
<li>协议/版本号：</li>
</ol>
<h4 id="响应头"><a class="header-anchor" href="#响应头"></a>响应头</h4>
<ol>
<li>通用首部(General Header)</li>
<li>响应首部(Response Header)</li>
<li>实体首部(Entity Header Fields)</li>
</ol>
<h4 id="响应内容"><a class="header-anchor" href="#响应内容"></a>响应内容</h4>
<p>如：服务器返回的HTML、JSON等数据</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1529805798/blog/http-response.png" alt="响应示例"></p>
<h2 id="Http"><a class="header-anchor" href="#Http"></a>Http</h2>
<h3 id="概念"><a class="header-anchor" href="#概念"></a>概念</h3>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUI2JTg1JUU2JTk2JTg3JUU2JTlDJUFDJUU0JUJDJUEwJUU4JUJFJTkzJUU1JThEJThGJUU4JUFFJUFF">HTTP<i class="fa fa-external-link-alt"></i></span>：超文本传输协议（HyperText Transfer Protocol）是一种用于分布式、协作式和超媒体信息系统的应用层协议.</li>
<li>HTTP是万维网的数据通信的基础.</li>
</ul>
<h3 id="通信"><a class="header-anchor" href="#通信"></a>通信</h3>
<ol>
<li>建立TCP连接<br>
在HTTP工作开始之前，Client首先要通过网络与Service建立连接，该连接是通过TCP来完成的，HTTP是比TCP更高层次的应用层协议，根据规则，只有低层协议建立之后才能进行更高层协议的连接，因此，首先要建立TCP连接</li>
<li>Client发起HTTP请求(Request)<br>
Requset通常包含请求行，请求头，请求内容这三部风组成的请求报文</li>
<li>Service发送HTTP响应(Response)<br>
Response通常包含响应行，响应头，响应内容这三部风组成的响应报文</li>
<li>Client关闭TCP连接</li>
</ol>
<h3 id="特点"><a class="header-anchor" href="#特点"></a>特点</h3>
<ol>
<li>无状态
<ul>
<li>每个请求结束后都会被关闭，每次的请求都是独立的，它的执行情况和结果与前面的请求和之后的请求是无直接关系的，它不会受前面的请求应答情况直接影响，也不会直接影响后面的请求应答情况</li>
<li>服务器中没有保存客户端的状态，客户端必须每次带上自己的状态去请求服务器</li>
</ul>
</li>
<li>明文传输，可能被窃听</li>
<li>不验证通信方的身份，可能遭遇伪装
<ul>
<li>HTTP 协议中的请求和响应不会对通信方进行确认。也就是说存在“服务器是否就是发送请求中 URI 真正指定的主机，返回的响应是否真的返回到实际提出请求的客户端”等类似问题</li>
<li>HTTP 协议通信时，由于不存在确认通信方的处理步骤，任何人都可以发起请求</li>
</ul>
</li>
<li>无法证明报文的完整性，可能遭遇篡改
<ul>
<li>在请求或响应送出之后直到对方接收之前的这段时间内，即使请求或响应的内容遭到篡改，也没有办法获悉</li>
</ul>
</li>
</ol>
<h2 id="Https"><a class="header-anchor" href="#Https"></a>Https</h2>
<h3 id="概念-v2"><a class="header-anchor" href="#概念-v2"></a>概念</h3>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUI2JTg1JUU2JTk2JTg3JUU2JTlDJUFDJUU0JUJDJUEwJUU4JUJFJTkzJUU1JUFFJTg5JUU1JTg1JUE4JUU1JThEJThGJUU4JUFFJUFF">HTTPS<i class="fa fa-external-link-alt"></i></span>：超文本传输安全协议（Hypertext Transfer Protocol Secure，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种通过计算机网络进行安全通信的传输协议.</li>
<li>HTTPS经由HTTP进行通信，但利用<code>SSL/TLS</code>来加密数据包.</li>
</ul>
<blockquote>
<p>HTTP+加密+认证+完整性保护 = HTTPS</p>
</blockquote>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1529822573/blog/HTTPS.png" alt="HTTP VS HTTPS"></p>
<h3 id="通信-v2"><a class="header-anchor" href="#通信-v2"></a>通信</h3>
<h4 id="SSL-TLS"><a class="header-anchor" href="#SSL-TLS"></a>SSL/TLS</h4>
<p>SSL/TLS：安全传输层协议(Transport Layer Security), 是介于TCP和HTTP之间的一层安全协议，TLS的前身是SSL(Secure Sockets Layer)</p>
<blockquote>
<p>TLS/SSL关系</p>
</blockquote>
<ul>
<li>SSL2.0</li>
<li>SSL3.0</li>
<li>TLS1.0(SSL3.1)</li>
<li>TLS1.1(SSL3.2)</li>
<li>TLS1.2(SSL3.3)</li>
</ul>
<h4 id="SSL-TLS工作原理"><a class="header-anchor" href="#SSL-TLS工作原理"></a>SSL/TLS工作原理</h4>
<p>HTTPS协议的主要功能都依赖于SSL/TLS协议，SSL/TLS的功能实现主要依赖于三类算法：<code>对称加密</code>,<code>非对称加密</code>,<code>散列函数Hash</code></p>
<ul>
<li>非对称加密实现身份认证和密钥协商，</li>
<li>对称加密算法采用协商的密钥对数据加密，</li>
<li>基于散列函数验证信息的完整性</li>
</ul>
<h4 id="SSL-TLS协议实现"><a class="header-anchor" href="#SSL-TLS协议实现"></a>SSL/TLS协议实现</h4>
<p>TLS以记录协议(record protocol)实现。记录协议负责在传输连接上交换所有的底层消息，并可以配置加密。每一条TLS记录以一个短标头起始。标头包含记录内容的类型(或子协议)、协议版本和长度</p>
<p>TLS的主规格说明书定义了四个核心子协议：</p>
<ul>
<li>握手协议(handshake protocol)；</li>
<li>密钥规格变更协议(change cipher spec protocol)；</li>
<li>应用数据协议(application data protocol)；</li>
<li>警报协议(alert protocol)；</li>
</ul>
<h4 id="握手协议"><a class="header-anchor" href="#握手协议"></a>握手协议</h4>
<p>握手是TLS协议中最精密复杂的部分。在这个过程中，通信双方协商连接参数，并且完成身份验证。根据使用的功能的不同，整个过程通常需要交换6~10条消息。根据配置和支持的协议扩展的不同，交换过程可能有许多变种，在使用中经常可以观察到以下三种流程：</p>
<ul>
<li>单向验证(完整的握手，对服务器进行身份验证)</li>
<li>双向验证(对客户端和服务器都进行身份验证的握手)</li>
<li>简短握手(恢复之前的会话)</li>
</ul>
<h5 id="单向验证"><a class="header-anchor" href="#单向验证"></a>单向验证</h5>
<p><img src="https://blog-10039692.file.myqcloud.com/1494841223417_6503_1494841223715.png" alt="单向验证"></p>
<ol>
<li>Handshake:ClentHello<br>
客户端通过发送 Client Hello 报文开始 SSL通信。报文中包含客户端支持的 SSL的指定版本、加密组件（Cipher Suite）列表（所使用的加密算法及密钥长度等）。</li>
<li>Handshake:ServerHello<br>
服务器可进行 SSL通信时，会以 ServerHello 报文作为应答。和客户端一样，在报文中包含 SSL版本以及加密组件。服务器的加密组件内容是从接收到的客户端加密组件内筛选出来的。</li>
<li>Handshake:Certificate<br>
之后服务器发送 Certificate 报文。报文中包含公开密钥证书。</li>
<li>Handshake:ServerHelloDone<br>
最后服务器发送 ServerHelloDone 报文通知客户端，最初阶段的 SSL握手协商部分结束。</li>
<li>Handshake:ClientKeyExchange<br>
SSL第一次握手结束之后，客户端以 ClientKeyExchange 报文作为回应。报文中包含通信加密中使用的一种被称为 Pre-mastersecret 的随机密码串。该报文已用3 中的公开密钥进行加密。</li>
<li>ChangeCipherSpec<br>
接着客户端继续发送 ChangeCipherSpec 报文。该报文会提示服务器，在此报文之后的通信会采用 Pre-master secret 密钥加密。</li>
<li>Handshake:Finished<br>
客户端发送 Finished 报文。该报文包含连接至今全部报文的整体校验值。这次握手协商是否能够成功，要以服务器是否能够正确解密该报文作为判定标准。</li>
<li>ChangeCipherSpec<br>
服务器同样发送 ChangeCipherSpec 报文。</li>
<li>Handshake:Finished<br>
服务器同样发送 Finished 报文。</li>
<li>Application Data(HTTP)<br>
服务器和客户端的 Finished 报文交换完毕之后，SSL连接就算建立完成。当然，通信会受到 SSL的保护。从此处开始进行应用层协议的通信，即发送 HTTP 请求。</li>
<li>Application Data(HTTP)<br>
应用层协议通信，即发送 HTTP 响应。</li>
<li>Alert:warning,close notify<br>
最后由客户端断开连接。断开连接时，发送 close_notify 报文(上图做了一些省略，实际到这一步还需要发送TCP FIN报文关闭TCP链接)</li>
</ol>
<h5 id="双向验证"><a class="header-anchor" href="#双向验证"></a>双向验证</h5>
<p><img src="https://blog-10039692.file.myqcloud.com/1494841503771_6933_1494841504095.png" alt="双向验证"><br>
同单向验证流程相比，双向验证多了如下两条消息：<code>CertificateRequest</code>与<code>CertificateVerify</code>，其余流程大致相同</p>
<ul>
<li>CertificateRequest<br>
CertificateRequest是TLS规定的一个可选功能，用于服务器认证客户端的身份。通过服务器要求客户端发送一个证书实现，服务器应该在ServerKeyExchange之后立即发送CertificateRequest消息</li>
<li>CertificateVerify<br>
当需要做客户端认证时，客户端发送CertificateVerify消息，来证明自己确实拥有客户端证书的私钥。这条消息仅仅在客户端证书有签名能力的情况下发送</li>
</ul>
<h4 id="应用数据协议-application-data-protocol"><a class="header-anchor" href="#应用数据协议-application-data-protocol"></a>应用数据协议(application data protocol)</h4>
<p>应用数据协议携带着应用消息，只以TLS的角度考虑的话，这些就是数据缓冲区。记录层使用当前连接安全参数对这些消息进行打包、碎片整理和加密</p>
<h4 id="警报协议-alert-protocol"><a class="header-anchor" href="#警报协议-alert-protocol"></a>警报协议(alert protocol)</h4>
<p>警报的目的是以简单的通知机制告知对端通信出现异常状况。它通常会携带close_notify异常，在连接关闭时使用，报告错误</p>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li>《图解HTTP》</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9PdmVydmlldw==">HTTP | MDN<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9rYi5jbmJsb2dzLmNvbS9wYWdlLzE5NDc0Mg==">数字证书及CA的扫盲介绍<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xMDA1MDcz">HTTPS 原理浅析及其在 Android 中的使用<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Http</tag>
        <tag>Https</tag>
      </tags>
  </entry>
  <entry>
    <title>Network（一） 之OkHttp 入门</title>
    <url>/2018/06/23/network-okhttp1/</url>
    <content><![CDATA[<p>自从Android4.4的源码中可以看到<code>HttpURLConnection</code>已经替换成<code>OkHttp</code>开始( <span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9KYWtlV2hhcnRvbi9zdGF0dXMvNDgyNTYzMjk5NTExMjUwOTQ0">JakeWharton曾在Twitter表示<i class="fa fa-external-link-alt"></i></span> ) ，<code>OkHttp</code>+<code>Retrofit</code>+<code>RxJava</code>的组合网络请求一直经久不衰，主流app的网络架构基本都是这样的组合模式，存在即合理，说明<code>OkHttp</code>+<code>Retrofit</code>+<code>RxJava</code>的方式确实给开发，用户体验等带来可观的优势，那么这个系列文章围绕Android的网络展开.</p>
<p>OkHttp：An HTTP &amp; HTTP/2 client for Android and Java applications</p>
<span id="more"></span>
<blockquote>
<p>Android 历史网络库</p>
</blockquote>
<ul>
<li><code>HttpClient</code> 是 Apache 提供的HTTP网络访问接口，从一开始的时候就被引入到了Android的API中；</li>
<li><code>HttpURLConnection</code> 是一种多用途, 轻量极的HTTP客户端, 提供的API比较简单, 可以容易地去使用和扩展.</li>
</ul>
<h2 id="OkHttp优势"><a class="header-anchor" href="#OkHttp优势"></a>OkHttp优势</h2>
<ul>
<li>支持HTTP/2, HTTP/2通过使用多路复用技术在一个单独的TCP连接上支持并发, 通过在一个连接上一次性发送多个请求来发送或接收数据</li>
<li>如果HTTP/2不可用, 连接池复用技术也可以极大减少延时</li>
<li>支持GZIP, 可以压缩下载体积</li>
<li>响应缓存可以直接避免重复请求</li>
<li>会从很多常用的连接问题中自动恢复</li>
<li>如果您的服务器配置了多个IP地址, 当第一个IP连接失败的时候, OkHttp会自动尝试下一个IP</li>
<li>OkHttp还处理了代理服务器问题和SSL握手失败问题，等等…</li>
</ul>
<h2 id="基本使用"><a class="header-anchor" href="#基本使用"></a>基本使用</h2>
<p>该系列版本说明</p>
<ul>
<li>OkHttp版本统一：<strong>3.10.0</strong></li>
<li>JDK：<strong>1.8+</strong></li>
</ul>
<p>Gradle包导入</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// okhttp核心库</span></span><br><span class="line">implementation <span class="string">&#x27;com.squareup.okhttp3:okhttp:3.10.0&#x27;</span></span><br><span class="line"><span class="comment">// okhttp网络请求拦截日志库</span></span><br><span class="line">implementation <span class="string">&#x27;com.squareup.okhttp3:logging-interceptor:3.10.0&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>关于网络请求<br>
基本网络请求由请求（<code>请求行</code>，<code>请求头</code>，<code>请求内容</code>），响应（<code>响应行</code>，<code>响应头</code>，<code>响应内容</code>）两大部分组成，具体的内容请查看<a href="https://incoder.org/2018/06/22/network-http">Http VS Https</a>这篇文章</p>
</blockquote>
<h3 id="OkHttp请求"><a class="header-anchor" href="#OkHttp请求"></a>OkHttp请求</h3>
<p>已在<a href="https://incoder.org/2018/06/22/network-http/#%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87">Http VS Https</a>文章中介绍了，HTTP请求相关内容</p>
<h3 id="OkHttp响应"><a class="header-anchor" href="#OkHttp响应"></a>OkHttp响应</h3>
<p>已在<a href="https://incoder.org/2018/06/22/network-http/#%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87">Http VS Https</a>文章中介绍了，HTTP响应相关内容</p>
<h2 id="同步与异步"><a class="header-anchor" href="#同步与异步"></a>同步与异步</h2>
<p>网络请求执行方式为：同步与异步；<code>同步</code>和<code>异步</code>关注的是消息通信机制 (synchronous communication/ asynchronous communication)</p>
<h3 id="同步"><a class="header-anchor" href="#同步"></a>同步</h3>
<p>就是在发出一个 <strong>调用</strong> 时，在没有得到结果之前，该 <strong>调用</strong> 就不返回，但是一旦调用返回，就得到返回值了。<br>
换句话说，就是由 <strong>调用者</strong> 主动等待这个 <strong>调用</strong> 的结果。<br>
Okhttp同步(<code>execute()</code>)：Invokes the request immediately, and blocks until the response can be processed or is in error.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.github.com/users/BladeCode&quot;</span>;</span><br><span class="line"><span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line"> </span><br><span class="line">String <span class="title function_">run</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder().url(url).build();</span><br><span class="line">    <span class="comment">// 执行同步操作</span></span><br><span class="line">    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute();   </span><br><span class="line">    <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">          <span class="keyword">return</span> response.body().string();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Unexpected code &quot;</span> + response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="异步"><a class="header-anchor" href="#异步"></a>异步</h3>
<p><strong>异步</strong> 则与同步相反，<strong>调用</strong> 在发出之后，这个调用就直接返回了，所以没有返回结果。<br>
换句话说，当一个异步过程调用发出后，<strong>调用者</strong> 不会立刻得到结果。而是在 <strong>调用</strong> 发出后，<strong>被调用者</strong> 通过状态、通知来通知 <strong>调用者</strong>，或通过回调函数处理这个调用。<br>
Okhttp同步(<code>enqueue(Callback responseCallback)</code>)：Schedules the request to be executed at some point in the future.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.github.com/users/BladeCode&quot;</span>;</span><br><span class="line"><span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder().url(url).build();</span><br><span class="line"><span class="comment">// 返回response 对象</span></span><br><span class="line"><span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).enqueue(<span class="keyword">new</span> <span class="title class_">Callback</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Call call, IOException e)</span> &#123;</span><br><span class="line">        System.out.println(e.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 字符串形式表达响应</span></span><br><span class="line">        System.out.println(response.body().string());</span><br><span class="line">        <span class="comment">// 或流的形式表达响应</span></span><br><span class="line">        System.out.println(response.body().charStream());</span><br><span class="line">        System.out.println(response.body().byteStream());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：</p>
</blockquote>
<ul>
<li>响应体太大（超过1MB）, 应避免使用 string()方法, 因为它会将把整个文档加载到内存中.</li>
<li>对于超过1MB的响应body, 应使用流的方式来处理响应body. 这和我们处理xml文档的逻辑是一致的, 小文件可以载入内存树状解析, 大文件就必须流式解析</li>
</ul>
<h2 id="OkHttp-Get"><a class="header-anchor" href="#OkHttp-Get"></a>OkHttp Get</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.github.com/users/BladeCode&quot;</span>;</span><br><span class="line"><span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line"> </span><br><span class="line">String <span class="title function_">run</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder().url(url).build();</span><br><span class="line">    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (response.isSuccessful()) &#123;        </span><br><span class="line">        <span class="keyword">return</span> response.body().string();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Unexpected code &quot;</span> + response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="OkHttp-Post"><a class="header-anchor" href="#OkHttp-Post"></a>OkHttp Post</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">MediaType</span> <span class="variable">JSON</span> <span class="operator">=</span> MediaType.parse(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line"></span><br><span class="line">String <span class="title function_">post</span><span class="params">(String url, String json)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">RequestBody</span> <span class="variable">body</span> <span class="operator">=</span> RequestBody.create(JSON, json);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">      .url(url)</span><br><span class="line">      .post(body)</span><br><span class="line">      .build();</span><br><span class="line">    </span><br><span class="line">    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">        <span class="keyword">return</span> response.body().string();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Unexpected code &quot;</span> + response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Posting-a-String"><a class="header-anchor" href="#Posting-a-String"></a>Posting a String</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">MediaType</span> <span class="variable">MEDIA_TYPE_MARKDOWN</span> <span class="operator">=</span> MediaType.parse(<span class="string">&quot;text/x-markdown; charset=utf-8&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">postBody</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        + <span class="string">&quot;Releases\n&quot;</span></span><br><span class="line">        + <span class="string">&quot;--------\n&quot;</span></span><br><span class="line">        + <span class="string">&quot;\n&quot;</span></span><br><span class="line">        + <span class="string">&quot; * _1.0_ May 6, 2013\n&quot;</span></span><br><span class="line">        + <span class="string">&quot; * _1.1_ June 15, 2013\n&quot;</span></span><br><span class="line">        + <span class="string">&quot; * _1.2_ August 11, 2013\n&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">        .url(<span class="string">&quot;https://api.github.com/markdown/raw&quot;</span>)</span><br><span class="line">        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, postBody))</span><br><span class="line">        .build();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span>(<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute())&#123;</span><br><span class="line">        <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Unexpected code &quot;</span> + response);</span><br><span class="line"> </span><br><span class="line">        System.out.println(response.body().string());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：当提交数据大于1MB，请使用流的方式</p>
</blockquote>
<h3 id="Post-Streaming"><a class="header-anchor" href="#Post-Streaming"></a>Post Streaming</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">MediaType</span> <span class="variable">MEDIA_TYPE_MARKDOWN</span> <span class="operator">=</span> MediaType.parse(<span class="string">&quot;text/x-markdown; charset=utf-8&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">RequestBody</span> <span class="variable">requestBody</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestBody</span>() &#123;</span><br><span class="line">      <span class="meta">@Override</span> </span><br><span class="line">      <span class="keyword">public</span> MediaType <span class="title function_">contentType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MEDIA_TYPE_MARKDOWN;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="meta">@Override</span> </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        sink.writeUtf8(<span class="string">&quot;Numbers\n&quot;</span>);</span><br><span class="line">        sink.writeUtf8(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= <span class="number">997</span>; i++) &#123;</span><br><span class="line">          sink.writeUtf8(String.format(<span class="string">&quot; * %s = %s\n&quot;</span>, i, factor(i)));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">private</span> String <span class="title function_">factor</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">          <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> n / i;</span><br><span class="line">          <span class="keyword">if</span> (x * i == n) <span class="keyword">return</span> factor(x) + <span class="string">&quot; × &quot;</span> + i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.toString(n);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">        .url(<span class="string">&quot;https://api.github.com/markdown/raw&quot;</span>)</span><br><span class="line">        .post(requestBody)</span><br><span class="line">        .build();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span>(<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute())&#123;</span><br><span class="line">        <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Unexpected code &quot;</span> + response);</span><br><span class="line"> </span><br><span class="line">        System.out.println(response.body().string());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Posting-a-File"><a class="header-anchor" href="#Posting-a-File"></a>Posting a File</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">MediaType</span> <span class="variable">MEDIA_TYPE_MARKDOWN</span> <span class="operator">=</span> MediaType.parse(<span class="string">&quot;text/x-markdown; charset=utf-8&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;README.md&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">        .url(<span class="string">&quot;https://api.github.com/BladeCode/raw&quot;</span>)</span><br><span class="line">        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, file))</span><br><span class="line">        .build();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span>(<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute())&#123;</span><br><span class="line">        <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Unexpected code &quot;</span> + response);</span><br><span class="line"> </span><br><span class="line">        System.out.println(response.body().string());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Posting-form-parameters"><a class="header-anchor" href="#Posting-form-parameters"></a>Posting form parameters</h3>
<p>使用<code>FormEncodingBuilder</code>来构建和HTML<form>标签相同效果的请求体。键值对将使用一种HTML兼容形式的URL编码来进行编码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">RequestBody</span> <span class="variable">formBody</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FormEncodingBuilder</span>()</span><br><span class="line">        .add(<span class="string">&quot;search&quot;</span>, <span class="string">&quot;Jurassic Park&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">        .url(<span class="string">&quot;https://en.wikipedia.org/w/index.php&quot;</span>)</span><br><span class="line">        .post(formBody)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>(<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute())&#123;</span><br><span class="line">        <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Unexpected code &quot;</span> + response);</span><br><span class="line"> </span><br><span class="line">        System.out.println(response.body().string());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Posting-a-multipart-request"><a class="header-anchor" href="#Posting-a-multipart-request"></a>Posting a multipart request</h3>
<p><code>MultipartBuilder</code>可以构建复杂的请求体，与HTML文件上传形式兼容。多块请求体中每块请求都是一个请求体，可以定义自己的请求头。这些请求头可以用来描述这块请求，例如他的<code>Content-Disposition</code>。如果<code>Content-Length</code>和<code>Content-Type</code>可用的话，他们会被自动添加到请求头中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IMGUR_CLIENT_ID</span> <span class="operator">=</span> <span class="string">&quot;...&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">MediaType</span> <span class="variable">MEDIA_TYPE_PNG</span> <span class="operator">=</span> MediaType.parse(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image</span></span><br><span class="line">    <span class="type">RequestBody</span> <span class="variable">requestBody</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MultipartBuilder</span>()</span><br><span class="line">        .type(MultipartBuilder.FORM)</span><br><span class="line">        .addPart(</span><br><span class="line">            Headers.of(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;form-data; name=\&quot;title\&quot;&quot;</span>),</span><br><span class="line">            RequestBody.create(<span class="literal">null</span>, <span class="string">&quot;Square Logo&quot;</span>))</span><br><span class="line">        .addPart(</span><br><span class="line">            Headers.of(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;form-data; name=\&quot;image\&quot;&quot;</span>),</span><br><span class="line">            RequestBody.create(MEDIA_TYPE_PNG, <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;website/static/logo-square.png&quot;</span>)))</span><br><span class="line">        .build();</span><br><span class="line"> </span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">        .header(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Client-ID &quot;</span> + IMGUR_CLIENT_ID)</span><br><span class="line">        .url(<span class="string">&quot;https://api.imgur.com/3/image&quot;</span>)</span><br><span class="line">        .post(requestBody)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>(<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute())&#123;</span><br><span class="line">        <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Unexpected code &quot;</span> + response);</span><br><span class="line"> </span><br><span class="line">        System.out.println(response.body().string());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Header"><a class="header-anchor" href="#Header"></a>Header</h2>
<p>通常，HTTP headers 的工作方式类似于 <code>Map&lt;String, String&gt;</code>：每个字段都有一个值或没有，但是一些headers允许多个值</p>
<ul>
<li>例如：Guava’s Multimap.</li>
<li>例如：提供多个vary headers的HTTP响应是合法且常见的。OkHttp的API试图使用两种情况都很舒适</li>
</ul>
<p>在编写请求headers时</p>
<ul>
<li>使用 <code>header(name, value)</code>将 <code>name</code> 的唯一内容设置为 <code>value</code>。如果 <code>name</code> 存在现有值，则在添加新值之前将删除它。</li>
<li>使用 <code>addHeader(name, value)</code> 添加 <code>headers</code> 不会删除已存在的 <code>header</code></li>
</ul>
<p>在读取headers响应时，使用 <code>header(name)</code> 返回最后异常出现的命名值。通常这也是唯一发生，如果没有值，则 <code>header(name)</code> 返回null。将所有字段的值作为列表读取，请使用 <code>headers(name)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">        .url(<span class="string">&quot;https://api.github.com/repos/square/okhttp/issues&quot;</span>)</span><br><span class="line">        .header(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;OkHttp Headers.java&quot;</span>)</span><br><span class="line">        .addHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json; q=0.5&quot;</span>)</span><br><span class="line">        .addHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/vnd.github.v3+json&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Unexpected code &quot;</span> + response);</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;Server: &quot;</span> + response.header(<span class="string">&quot;Server&quot;</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;Date: &quot;</span> + response.header(<span class="string">&quot;Date&quot;</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;Vary: &quot;</span> + response.headers(<span class="string">&quot;Vary&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Response-Caching"><a class="header-anchor" href="#Response-Caching"></a>Response Caching</h3>
<p>实现缓存响应，你需要一个可以读写的缓存目录，以及缓存大小的限制。缓存目录应该是私有的，不受信任的应用程序不应该读取其内容</p>
<p>让多个缓存同时访问同一缓存目录是错误的。大多数应用程序应该只调用一次 <code>new OkHttpClient()</code>，使用它们的缓存配置它，并在任何地方使用相同的实例。否则，两个缓存实例将互相踩踏，破坏响应缓存，并可能导致程序奔溃</p>
<p>响应缓存使用HTTP headers进行所有的配置。你可以添加headers，如：<code>Cache-Control: max-stale=3600</code>，OkHttp的缓存将遵循它。你的Web服务器使用自己的响应headers配置缓存响应的时间，例如：<code>Cache-Control: max-age=9600</code>。有缓存headers可强制缓存响应，强制网络响应，或者强制使用条件GET验证网络响应</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CacheResponse</span><span class="params">(File cacheDirectory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 设置缓存大小 10 MiB</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">cacheSize</span> <span class="operator">=</span> <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>; </span><br><span class="line">    <span class="comment">// 实例化Cache对象</span></span><br><span class="line">    <span class="type">Cache</span> <span class="variable">cache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cache</span>(cacheDirectory, cacheSize);</span><br><span class="line"></span><br><span class="line">    client = <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder()</span><br><span class="line">        .cache(cache)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">        .url(<span class="string">&quot;http://publicobject.com/helloworld.txt&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    String response1Body;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Response</span> <span class="variable">response1</span> <span class="operator">=</span> client.newCall(request).execute()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!response1.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Unexpected code &quot;</span> + response1);</span><br><span class="line"></span><br><span class="line">      response1Body = response1.body().string();</span><br><span class="line">      System.out.println(<span class="string">&quot;Response 1 response:          &quot;</span> + response1);</span><br><span class="line">      System.out.println(<span class="string">&quot;Response 1 cache response:    &quot;</span> + response1.cacheResponse());</span><br><span class="line">      System.out.println(<span class="string">&quot;Response 1 network response:  &quot;</span> + response1.networkResponse());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String response2Body;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Response</span> <span class="variable">response2</span> <span class="operator">=</span> client.newCall(request).execute()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!response2.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Unexpected code &quot;</span> + response2);</span><br><span class="line"></span><br><span class="line">      response2Body = response2.body().string();</span><br><span class="line">      System.out.println(<span class="string">&quot;Response 2 response:          &quot;</span> + response2);</span><br><span class="line">      System.out.println(<span class="string">&quot;Response 2 cache response:    &quot;</span> + response2.cacheResponse());</span><br><span class="line">      System.out.println(<span class="string">&quot;Response 2 network response:  &quot;</span> + response2.networkResponse());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;Response 2 equals Response 1? &quot;</span> + response1Body.equals(response2Body));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>要阻止响应使用缓存，请使用 <code>CacheControl.FORCE_NETWORK</code></li>
<li>要阻止它使用网络，请使用 <code>CacheControl.FORCE_CACHE</code></li>
</ul>
<blockquote>
<p>警告：如果你使用 <code>FORCE_CACHE</code> 且响应需要网络，OkHttp将返回504不满意请求响应</p>
</blockquote>
<h3 id="Canceling-a-Call"><a class="header-anchor" href="#Canceling-a-Call"></a>Canceling a Call</h3>
<p>使用 <code>Call.cancel()</code> 立即停止正在进行的请求，如果线程当前正在请求或读取响应，则它将收到 <code>IOException</code>。当不在需要call时，使用它来保护网络，例如，当你的用户导航离开应用程序时，同步和异步调用都可以取消</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ScheduledExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">        .url(<span class="string">&quot;http://httpbin.org/delay/2&quot;</span>) <span class="comment">// This URL is served with a 2 second delay.</span></span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">startNanos</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Call</span> <span class="variable">call</span> <span class="operator">=</span> client.newCall(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Schedule a job to cancel the call in 1 second.</span></span><br><span class="line">    executor.schedule(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">      <span class="meta">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%.2f Canceling call.%n&quot;</span>, (System.nanoTime() - startNanos) / <span class="number">1e9f</span>);</span><br><span class="line">        call.cancel();</span><br><span class="line">        System.out.printf(<span class="string">&quot;%.2f Canceled call.%n&quot;</span>, (System.nanoTime() - startNanos) / <span class="number">1e9f</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    System.out.printf(<span class="string">&quot;%.2f Executing call.%n&quot;</span>, (System.nanoTime() - startNanos) / <span class="number">1e9f</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> call.execute()) &#123;</span><br><span class="line">      System.out.printf(<span class="string">&quot;%.2f Call was expected to fail, but completed: %s%n&quot;</span>,</span><br><span class="line">          (System.nanoTime() - startNanos) / <span class="number">1e9f</span>, response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      System.out.printf(<span class="string">&quot;%.2f Call failed as expected: %s%n&quot;</span>,</span><br><span class="line">          (System.nanoTime() - startNanos) / <span class="number">1e9f</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Timeouts"><a class="header-anchor" href="#Timeouts"></a>Timeouts</h3>
<p>当无法访问时，使用超时来使call失败。网络分区可能是由于客户端连接问题，服务器可读性问题或其他任何问题时。OkHttp支持连接，读取和写入超时配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ConfigureTimeouts</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    client = <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder()</span><br><span class="line">        .connectTimeout(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">        .writeTimeout(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">        .readTimeout(<span class="number">30</span>, TimeUnit.SECONDS)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">        .url(<span class="string">&quot;http://httpbin.org/delay/2&quot;</span>) <span class="comment">// This URL is served with a 2 second delay.</span></span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute()) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Response completed: &quot;</span> + response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Per-call-Configuration"><a class="header-anchor" href="#Per-call-Configuration"></a>Per-call Configuration</h3>
<p>所有的HTTP 客户端配置都在 <code>OkHttpClient</code> 中，包括代理设置，超时和缓存。当你需要修改单个调用时的配置时，请调用 <code>OkHttpClient.newBuilder()</code>。这将返回与原始客户端共享相同连接池，调度程序和配置的构建器（<code>Builder</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例：我们发出一个请求，其中500毫秒超时，另一个请求超时3000毫秒</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">        <span class="comment">// This URL is served with a 1 second delay.</span></span><br><span class="line">        .url(<span class="string">&quot;http://httpbin.org/delay/1&quot;</span>) </span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copy to customize OkHttp for this request.</span></span><br><span class="line">    <span class="type">OkHttpClient</span> <span class="variable">client1</span> <span class="operator">=</span> client.newBuilder()</span><br><span class="line">        .readTimeout(<span class="number">500</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client1.newCall(request).execute()) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Response 1 succeeded: &quot;</span> + response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Response 1 failed: &quot;</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copy to customize OkHttp for this request.</span></span><br><span class="line">    <span class="type">OkHttpClient</span> <span class="variable">client2</span> <span class="operator">=</span> client.newBuilder()</span><br><span class="line">        .readTimeout(<span class="number">3000</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client2.newCall(request).execute()) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Response 2 succeeded: &quot;</span> + response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Response 2 failed: &quot;</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Handling-authentication"><a class="header-anchor" href="#Handling-authentication"></a>Handling authentication</h3>
<p>OkHttp可以自动重试未经身份验证的请求。如果响应为401 Not Authorized，则要求Authenticator提供凭证。实现应该构建一个包含缺少凭证的新请求。如果没有可用的凭证，则返回null以跳过重试。</p>
<p>使用 <code>Response.challenges()</code>来获取任何身份验证挑战的方案和领域。在完成基本挑战时，使用 <code>Credentials.basic(username, password)</code> 对请求header进行编码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Authenticate</span><span class="params">()</span> &#123;</span><br><span class="line">    client = <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder()</span><br><span class="line">        .authenticator(<span class="keyword">new</span> <span class="title class_">Authenticator</span>() &#123;</span><br><span class="line">          <span class="meta">@Override</span> <span class="keyword">public</span> Request <span class="title function_">authenticate</span><span class="params">(Route route, Response response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">if</span> (response.request().header(<span class="string">&quot;Authorization&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// Give up, we&#x27;ve already attempted to authenticate.</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Authenticating for response: &quot;</span> + response);</span><br><span class="line">            System.out.println(<span class="string">&quot;Challenges: &quot;</span> + response.challenges());</span><br><span class="line">            <span class="type">String</span> <span class="variable">credential</span> <span class="operator">=</span> Credentials.basic(<span class="string">&quot;jesse&quot;</span>, <span class="string">&quot;password1&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> response.request().newBuilder()</span><br><span class="line">                .header(<span class="string">&quot;Authorization&quot;</span>, credential)</span><br><span class="line">                .build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">        .url(<span class="string">&quot;http://publicobject.com/secrets/hellosecret.txt&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Unexpected code &quot;</span> + response);</span><br><span class="line"></span><br><span class="line">      System.out.println(response.body().string());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为避免在身份验证不起作用时进行多次重试，你可以在返回null以放弃，例如，你可能希望在尝试这些确切凭证时跳过重试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (credential.equals(response.request().header(<span class="string">&quot;Authorization&quot;</span>))) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// If we already failed with these credentials, don&#x27;t retry.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当你达到应用程序定义的尝试限制时，你也可以跳过重试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">responseCount</span><span class="params">(Response response)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> ((response = response.priorResponse()) != <span class="literal">null</span>) &#123;</span><br><span class="line">      result++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (responseCount(response) &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// If we&#x27;ve failed 3 times, give up.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NxdWFyZS9va2h0dHAvd2lraQ==">OkHttp Wiki<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzE5NzMyNDcz">怎样理解阻塞非阻塞与同步异步的区别<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5qY29kZWNyYWVlci5jb20vYS9hbnpodW9rYWlmYS9hbmRyb2lka2FpZmEvMjAxNS8wMTA2LzIyNzUuaHRtbA==">OkHttp使用教程<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>OkHttp</tag>
      </tags>
  </entry>
  <entry>
    <title>开源协议，该如何选择</title>
    <url>/2020/11/25/open-license/</url>
    <content><![CDATA[<p>现如今软件行业的发展完全离不开开源社区，很多优秀的软件应用、技术都能看到开源软件的影子，我们都是站在巨人的肩膀上。对于软件行业的从业者，能为开源项目贡献自己的力量，或是将自己对某一个细分领域所做的研究实践开源出来，这是一件非常值得骄傲的事情。而要参与一个大型的开源项目，你除了需要该项目涉及的核心技术知识外，还需要了解一定的开源项目运转方式等，对于如何参与开源项目，这里暂不做过多的介绍，有兴趣的可以移步 Gitee 发起的《<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vZ2l0ZWUtY29tbXVuaXR5L29wZW5zb3VyY2UtZ3VpZGU=">开源指北<i class="fa fa-external-link-alt"></i></span>》项目，该项目中详细介绍了如何参与开源项目。本篇文章也不啰嗦这一点，仅仅围绕开源协议，我们应该清楚的常识和注意的点</p>
<span id="more"></span>
<p>在软件开发中<strong>通常</strong>有两种情况我们需要考虑软件的开源协议或者使用协议</p>
<ol>
<li>我们需要使用到业界的一些优秀的软件包来提高我们开发的效率，避免了重复早轮子，所选择的这些软件包我们不但考虑功能的同时，也要考虑软件包的授权协议</li>
<li>我们需要将自己的经验或者软件产品需要开源时，为了保护自己的权益，我们也需要选择一个合适的开源协议</li>
</ol>
<p>我这里还是引用比较经典 <span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTEvMDUvaG93X3RvX2Nob29zZV9mcmVlX3NvZnR3YXJlX2xpY2Vuc2VzLmh0bWw=">阮一峰<i class="fa fa-external-link-alt"></i></span> 文章中所绘制关于如何选择开源协议的图<br>
<img src="http://www.ruanyifeng.com/blogimg/asset/201105/free_software_licenses.png" alt=""><br>
图中已经很清楚的表示了如何去选择 <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9MR1BM">LGPL<i class="fa fa-external-link-alt"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly93d3cubW96aWxsYS5vcmcvZW4tVVMvTVBMLw==">Mozilla<i class="fa fa-external-link-alt"></i></span>, <a href="">GPL</a>, <a href="">BSD</a>, <a href="">MIT</a>, <a href="">Apache</a> 这 6 种协议</p>
<h2 id="常用协议"><a class="header-anchor" href="#常用协议"></a>常用协议</h2>
<p>这里我们通过表格的形式介绍下这 6 种协议，当然除了表中列出的这些协议之外还有很多协议，我们就挨个来简单对他们有一个了解和认识</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1609258585/blog/license.png" alt=""></p>
<h2 id="其他协议"><a class="header-anchor" href="#其他协议"></a>其他协议</h2>
<h3 id="BY-NC-SA"><a class="header-anchor" href="#BY-NC-SA"></a>BY-NC-SA</h3>
<p>你会发现每篇文章下面都有申明版权，这里使用的是 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><i class="fab fa-creative-commons"></i> BY-NC-SA</a> 4.0 的协议，他们的含义如下</p>
<ul>
<li><i class="fab fa-creative-commons"></i>：知识共享（CreativeCommons）</li>
<li>NC：非商业性使用（NonCommercial），您不得将本作品用于商业目的</li>
<li>SA：相同方式共享（ShareAlike），如果您再混合、转换或者基于本作品进行创作，您必须基于与原先许可协议相同的许可协议 分发您贡献的作品</li>
</ul>
<p>使用此协议，您可以自由地</p>
<ol>
<li>共享 — 在任何媒介以任何形式复制、发行本作品</li>
<li>演绎 — 修改、转换或以本作品为基础进行创作</li>
</ol>
<blockquote>
<p>只要你遵守许可协议条款，许可人就无法收回你的这些权利</p>
</blockquote>
<h2 id="选择"><a class="header-anchor" href="#选择"></a>选择</h2>
<p>上面说了那么多，有些协议并没有展开来说可能并不适用你当前的所需要选择的协议，那么你可以根据实际情况去筛选，可通过 <span class="exturl" data-url="aHR0cHM6Ly9jaG9vc2VhbGljZW5zZS5jb20=">https://choosealicense.com<i class="fa fa-external-link-alt"></i></span>,  <span class="exturl" data-url="aHR0cHM6Ly9rYWl5dWFuc2hlLmNuL2xpY2Vuc2UtdG9vbA==">https://kaiyuanshe.cn/license-tool<i class="fa fa-external-link-alt"></i></span> 这两个网站按照步骤去选择，最终确定协议即可</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9rYWl5dWFuc2hlLmNuL2xpY2Vuc2UtdG9vbC8=">开源许可证选择器<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jaG9vc2VhbGljZW5zZS5jb20v">Choose an open source license<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMjk3MzEwNQ==">博云违反 Apache 2.0 开源协议被要求整改，开源协议到底应该如何遵守？<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3LzI5NDcuaHRtbA==">开源协议是什么？有哪些？如何选择？<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vV2F5b3UvcC9ob3dfdG9fY2hvb3NlX2FfbGljZW5zZS5odG1s">如何为你的代码选择一个开源协议<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vZ2l0ZWUtY29tbXVuaXR5L29wZW5zb3VyY2UtZ3VpZGU=">开源指北 Gitee<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Open Source</category>
      </categories>
      <tags>
        <tag>License</tag>
      </tags>
  </entry>
  <entry>
    <title>OOAD 与 UML</title>
    <url>/2019/05/27/ooad-uml/</url>
    <content><![CDATA[<p>OOAD（Object Oriented Analysis and Desigin） 是根据 OO 的方法学，对软件系统进行分析和设计的过程</p>
<ul>
<li>OOA（Object Oriented Analysis）：分析阶段</li>
<li>OOD（Object Oriented Desigin）：设计阶段</li>
</ul>
<h2 id="What-to-do"><a class="header-anchor" href="#What-to-do"></a>What to do</h2>
<p>分析阶段主要解决以下问题</p>
<ul>
<li>建立针对业务问题域的清晰视图</li>
<li>列出系统必须要完成的核心任务</li>
<li>针对问题域建立公共词汇表</li>
<li>列出针对此问题域的最佳解决方案</li>
</ul>
<span id="more"></span>
<h2 id="How-to-do"><a class="header-anchor" href="#How-to-do"></a>How to do</h2>
<p>设计阶段主要解决以下问题（How to do?）</p>
<ul>
<li>如何解决具体的业务问题</li>
<li>引入系统工作所需的支持元素</li>
<li>定义系统的实现策略</li>
</ul>
<h2 id="OOP的主要特征"><a class="header-anchor" href="#OOP的主要特征"></a>OOP的主要特征</h2>
<h3 id="抽象（abstract）"><a class="header-anchor" href="#抽象（abstract）"></a>抽象（abstract）</h3>
<ul>
<li>忽略到一个对象或实体的细节而只关注其本质特征的过程</li>
<li>简化功能与格式</li>
<li>帮助用户与对象交互</li>
</ul>
<h3 id="封装（encapsulation）"><a class="header-anchor" href="#封装（encapsulation）"></a>封装（encapsulation）</h3>
<ul>
<li>隐藏数据和实现</li>
<li>提供公共方法供用户调用功能</li>
<li>对象的两种视图
<ul>
<li>外部视图：对象能做的工作</li>
<li>内部视图：对象如何完成工作</li>
</ul>
</li>
</ul>
<h3 id="继承（inheritance）"><a class="header-anchor" href="#继承（inheritance）"></a>继承（inheritance）</h3>
<ul>
<li>通过存在的类型定义新类型的机制</li>
<li>通常在两个类型之间存在“is a” 或 “kind of” 这样的关系</li>
<li>通过继承可实现代码重用，另外继承也是多态的基础</li>
<li>如苹果 “is a” 水果</li>
</ul>
<h3 id="多态（polymorphism）"><a class="header-anchor" href="#多态（polymorphism）"></a>多态（polymorphism）</h3>
<ul>
<li>一个名称，多种形式</li>
<li>基于继承的多态</li>
<li>调用方法时根据所给对象的不同选择不同的处理方式</li>
<li>如 Football——play()</li>
<li>给出一个具体的足球或篮球，用户自动知道该使用谁的方式去执行</li>
</ul>
<h3 id="关联（association）"><a class="header-anchor" href="#关联（association）"></a>关联（association）</h3>
<ul>
<li>对象之间交互时的一种引用方式</li>
<li>当一个对象通过对另一个对象的引用去使用另一个对象的服务或操作时，两个对象之间便产生了关联</li>
<li>如 person 使用 computer，person 与 computer 之间就存在了关联关系</li>
</ul>
<h3 id="聚合（aggregation）"><a class="header-anchor" href="#聚合（aggregation）"></a>聚合（aggregation）</h3>
<ul>
<li>关联关系的一种，一个对象成为另一个对象的组成部分</li>
<li>使用关系强的关联</li>
<li>在两个对象之间存在 “has a”这样的关系，一个对象作为另一个对象的属性存在，在外部对象被产生时，可由客户端指定与其关联的内部对象</li>
</ul>
<blockquote>
<p>如汽车与轮胎，轮胎作为汽车的一个组成部分，它和汽车可由分别产生以后转配起来使用，但汽车可由换新轮胎，轮胎也可以卸下来给其他汽车使用</p>
</blockquote>
<h3 id="组合（composition）"><a class="header-anchor" href="#组合（composition）"></a>组合（composition）</h3>
<ul>
<li>当一个对象包含另一个对象时，外部对象负责管理内部对象的生命周期的情况</li>
<li>关联关系中最为强烈的一种</li>
<li>内部对象的创建由外部对象自己控制</li>
<li>外部对象不存在时，内部对象也不能存在</li>
</ul>
<blockquote>
<p>如电视机与显示器</p>
</blockquote>
<h3 id="内聚与耦合（cohesion-coupling）"><a class="header-anchor" href="#内聚与耦合（cohesion-coupling）"></a>内聚与耦合（cohesion &amp; coupling）</h3>
<ul>
<li>域模型是面向对象的。在面向对象术语中域模型也可称为设计模型。</li>
<li>域模型由以下内容组成
<ul>
<li>关联（Association）:一对多，多对一，一对一</li>
<li>依赖（Dependency）</li>
<li>聚集（Aggregation）：整体和部分之间的关系</li>
<li>一般化（泛化）（Generalization）：类与类之间的<strong>继承</strong></li>
</ul>
</li>
<li>内聚：度量一个类独立完成某项工作的能力</li>
<li>耦合：度量系统内或系统之间依赖关系的复杂度</li>
<li>设计原则：增加内聚，减少耦合</li>
</ul>
<h2 id="开发过程概述"><a class="header-anchor" href="#开发过程概述"></a>开发过程概述</h2>
<h3 id="传统开发过程"><a class="header-anchor" href="#传统开发过程"></a>传统开发过程</h3>
<ul>
<li>瀑布模型(真实环境，不可能满足这些)</li>
</ul>
<h3 id="统一软件开发过程（USDP）"><a class="header-anchor" href="#统一软件开发过程（USDP）"></a>统一软件开发过程（USDP）</h3>
<p>特点： 项目是迭代，递增</p>
<ul>
<li>迭代指生命周期中的一个步骤</li>
<li>迭代导致“递增”或者是整个项目的增长</li>
<li>大项目分解为子项目</li>
<li>在每一个迭代的阶段，应该做以下工作
<ul>
<li>选择并分析相关用例</li>
<li>更加所选架构进行设计</li>
<li>在组件层次实现设计</li>
<li>验证组件满足用例的需要</li>
</ul>
</li>
<li>当一次迭代满足目标后，开发进入下一个迭代周期</li>
<li>每一个周期包含一次或多次迭代</li>
<li>一个阶段的结束称之为“里程碑”</li>
</ul>
<h3 id="阶段"><a class="header-anchor" href="#阶段"></a>阶段</h3>
<h4 id="初始化阶段"><a class="header-anchor" href="#初始化阶段"></a>初始化阶段</h4>
<p>该阶段的增量集中于：</p>
<ul>
<li>项目启动</li>
<li>建立业务模型</li>
<li>定义业务问题域</li>
<li>找出主要的风险因素</li>
<li>定义项目需求的外延</li>
<li>创建业务问题域的相关说明文档</li>
</ul>
<h4 id="细化阶段"><a class="header-anchor" href="#细化阶段"></a>细化阶段</h4>
<p>本阶段的增量集中于</p>
<ul>
<li>高层的分析与设计</li>
<li>建立项目的基础框架</li>
<li>监督主要的风险因素</li>
<li>制订达成项目目标的创建计划</li>
</ul>
<h4 id="构建阶段"><a class="header-anchor" href="#构建阶段"></a>构建阶段</h4>
<p>本阶段的增量集中于</p>
<ul>
<li>代码及功能的实现</li>
</ul>
<h4 id="移交阶段"><a class="header-anchor" href="#移交阶段"></a>移交阶段</h4>
<p>本阶段的增量集中于：</p>
<ul>
<li>向用户发布产品</li>
<li>beta 测试</li>
<li>执行性能调优，用户培训和接收测试</li>
</ul>
<h4 id="阶段特点"><a class="header-anchor" href="#阶段特点"></a>阶段特点</h4>
<p>每一个阶段所包含的工作流，每一次递增都由 5 个部分工作流组成</p>
<ul>
<li>需求与初始化分析</li>
<li>分析</li>
<li>设计</li>
<li>实现</li>
<li>测试</li>
<li>每一次迭代执行工作流的深度不同</li>
<li>早期的迭代在深度上覆盖初始工作流，后期迭代在深度上覆盖后期工作流</li>
<li>80/20原则</li>
</ul>
<h2 id="UML"><a class="header-anchor" href="#UML"></a>UML</h2>
<p>UML(Unified Modeling Language)统一建模语言，图形化语言表示，它可以帮助我们在 OOAD 过程中标识元素，构建模块，分析过程并可通过文档说明系统中的重要细节</p>
<h3 id="静态模型（static-model）"><a class="header-anchor" href="#静态模型（static-model）"></a>静态模型（static model）</h3>
<ul>
<li>创建并记录一个系统的静态特征</li>
<li>反映一个软件系统基础，固定的框架结构</li>
<li>创建相关问题域主要元素的视图</li>
<li>静态建模包括：
<ul>
<li><strong><font color=#FF0000>用例图（use case diagrams）</font></strong></li>
<li><strong><font color=#FF0000>类图（class diagrams）</font></strong></li>
<li>对象图（object diagrams）</li>
<li>组件图（component diagrams）</li>
<li>部署图（deployment diagrams）</li>
</ul>
</li>
</ul>
<h3 id="动态模型（dynamic-model）"><a class="header-anchor" href="#动态模型（dynamic-model）"></a>动态模型（dynamic model）</h3>
<ul>
<li>用以展示系统的行为</li>
<li>动态建模包括：
<ul>
<li><strong><font color=#FF0000>时序图（sequence diagrams）</font></strong></li>
<li>协作图（collaboration diagrams）</li>
<li>状态图（state chart diagrams）</li>
<li>活动图（activity diagrams）</li>
</ul>
</li>
</ul>
<h3 id="UML-其他重要元素"><a class="header-anchor" href="#UML-其他重要元素"></a>UML 其他重要元素</h3>
<ul>
<li>包（package）</li>
<li>UML 的扩展机制
<ul>
<li>注释（comments）</li>
<li>构造型（stereotypes）</li>
<li>标记值（tagged values）</li>
<li>限制（constraints）</li>
</ul>
</li>
</ul>
<h3 id="示例"><a class="header-anchor" href="#示例"></a>示例</h3>
<h4 id="用例图"><a class="header-anchor" href="#用例图"></a>用例图</h4>
<ul>
<li>展示系统的核心功能及逾期交互的用户</li>
<li>用户被称为“活动者”（Actor）</li>
<li>用例使用椭圆表示</li>
<li>为简化建模过程，用例图可以标注优先级<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559486362/blog/uml-usecase-diagram.png" alt="uml-usecase-diagram"></li>
</ul>
<h4 id="类图"><a class="header-anchor" href="#类图"></a>类图</h4>
<ul>
<li>表现类的特征</li>
<li>类图描述了多个类，接口的特征，以及对象之间的协作与交互</li>
<li>由一个或者多个矩形区域构成，内容包括
<ul>
<li>类型（类名）</li>
<li>属性（可选）</li>
<li>操作（可选）<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559486361/blog/uml-class-diagram.png" alt="uml-class-diagram"></li>
</ul>
</li>
</ul>
<h4 id="对象图"><a class="header-anchor" href="#对象图"></a>对象图</h4>
<ul>
<li>表现对象的特征</li>
<li>对象图展现了多个对象的特征及对象之间的交互<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559486360/blog/uml-object-diagram.png" alt="uml-object-diagram"></li>
</ul>
<h4 id="组件图"><a class="header-anchor" href="#组件图"></a>组件图</h4>
<ul>
<li>表示软件组件之间的关系<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559486358/blog/uml-component-diagram.png" alt="uml-component-diagram"></li>
</ul>
<h4 id="部署图"><a class="header-anchor" href="#部署图"></a>部署图</h4>
<ul>
<li>表现用于部署软件应用的物理设备信息<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1559486362/blog/uml-deployment-diagram.png" alt="uml-deployment-diagram"></li>
</ul>
<h4 id="时序图"><a class="header-anchor" href="#时序图"></a>时序图</h4>
<ul>
<li>捕捉一段时间范围内多个对象之间的交互信息</li>
<li>强调消息交互的时间顺序</li>
</ul>
]]></content>
      <categories>
        <category>DevTool</category>
      </categories>
      <tags>
        <tag>OOAD</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>OSS 初体验</title>
    <url>/2021/03/27/oss/</url>
    <content><![CDATA[<p>在之前 <a href="https://incoder.org/2021/03/10/springboot12">SpringBoot（十二）文件上传</a> 文章中，已经学习了使用 SpringBoot 基础的功能，完成静态资源的管理，本片文章我们同样也是对非结构化的静态数据进行管理，不过这次我们使用的是比较常用的 OSS 服务，废话不说，我们一起开始 OSS 之旅吧</p>
<span id="more"></span>
<h2 id="什么是-OSS"><a class="header-anchor" href="#什么是-OSS"></a>什么是 OSS</h2>
<p>OSS 是一种面向海量数据规模的分布式存储服务，具有稳定，可靠，安全，低成本的特点。主要用来存储各种非结构化的数据，比如视频，图像，日志，文本文件等。OSS 服务提供标准的 RESTful API 接口，并提供一些常用语言的 SDK 包，方便开发者进行快速开发和二次处理</p>
<h2 id="常用的-OSS"><a class="header-anchor" href="#常用的-OSS"></a>常用的 OSS</h2>
<p>市面上提供云服务的厂商有很多，这里以阿里云的 OSS 服务为主来，完成 OSS 相关的学习和实践</p>
<h2 id="依赖"><a class="header-anchor" href="#依赖"></a>依赖</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.aliyun.oss/aliyun-sdk-oss --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="OSS-工具类"><a class="header-anchor" href="#OSS-工具类"></a>OSS 工具类</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OSS 文件上传</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Jerry xu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> : 2020/11/3  09:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问域名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ENDPOINT</span> <span class="operator">=</span> <span class="string">&quot;xxxxx&quot;</span>;</span><br><span class="line">    <span class="comment">// 存储空间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUCKET_NAME</span> <span class="operator">=</span> <span class="string">&quot;xxxxx&quot;</span>;</span><br><span class="line">    <span class="comment">//==================访问密钥==================</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCESS_KEY_ID</span> <span class="operator">=</span> <span class="string">&quot;xxxxx&quot;</span>;</span><br><span class="line">    <span class="comment">// 用户用于加密签名字符串和OSS用来验证签名字符串的密钥，必须保密</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCESS_KEY_SECRET</span> <span class="operator">=</span> <span class="string">&quot;xxxxx&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过文件上传图片</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 上传结果地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">uploadFileByFile</span><span class="params">(File file)</span> &#123;</span><br><span class="line"><span class="comment">//        // NIO 方式</span></span><br><span class="line"><span class="comment">//        byte[] fileByte = Files.readAllBytes(new File(file.getPath()).toPath());</span></span><br><span class="line"><span class="comment">//        // 其他方式</span></span><br><span class="line"><span class="comment">//        byte[] fileByte = Files.readAllBytes(Paths.get(file.getPath()));</span></span><br><span class="line"><span class="comment">//        return uploadFileByByte(fileByte, file);</span></span><br><span class="line">        URL url;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlStr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        String[] split = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(ENDPOINT, ACCESS_KEY_ID, ACCESS_KEY_SECRET);</span><br><span class="line">            <span class="comment">// 获取文件名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getName();</span><br><span class="line">            ossClient.putObject(BUCKET_NAME, fileName, file);</span><br><span class="line">            <span class="comment">// 设置过期时间</span></span><br><span class="line">            url = ossClient.generatePresignedUrl(BUCKET_NAME, fileName, <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">3600</span> * <span class="number">24</span> * <span class="number">365</span> * <span class="number">10</span>));</span><br><span class="line">            log.info(<span class="string">&quot;原始图片地址：&#123;&#125;&quot;</span>, url);</span><br><span class="line">            urlStr = url.toString();</span><br><span class="line"><span class="comment">//            byte[] fileByte = Files.readAllBytes(new File(file.getPath()).toPath());</span></span><br><span class="line"><span class="comment">//            PutObjectRequest putObjectRequest = new PutObjectRequest(BUCKET_NAME, &quot;test&quot;, new ByteArrayInputStream(fileByte));</span></span><br><span class="line"><span class="comment">//            // 不设置过期时间</span></span><br><span class="line"><span class="comment">//            PutObjectResult putObjectResult = ossClient.putObject(putObjectRequest);</span></span><br><span class="line"><span class="comment">//            // 去除过期时间参数地址</span></span><br><span class="line"><span class="comment">//            split = urlStr.split(&quot;\\?&quot;);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> urlStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过字节数组上传图片</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> binaryBytes 字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName    文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 上传结果地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">uploadFileByByte</span><span class="params">(<span class="type">byte</span>[] binaryBytes, String fileName)</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(binaryBytes);</span><br><span class="line">        <span class="keyword">return</span> uploadFileByInputStream(inputStream, fileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过输入流上传图片</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 输入流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName    文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 上传结果地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">uploadFileByInputStream</span><span class="params">(InputStream inputStream, String fileName)</span> &#123;</span><br><span class="line">        URL url;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlStr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        String[] split = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(ENDPOINT, ACCESS_KEY_ID, ACCESS_KEY_SECRET);</span><br><span class="line"><span class="comment">//            String fileName = UUID.randomUUID().toString() + &quot;.jpeg&quot;;</span></span><br><span class="line">            ossClient.putObject(BUCKET_NAME, fileName, inputStream);</span><br><span class="line">            <span class="comment">// 设置过期时间</span></span><br><span class="line">            url = ossClient.generatePresignedUrl(BUCKET_NAME, fileName, <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">3600</span> * <span class="number">24</span> * <span class="number">365</span> * <span class="number">10</span>));</span><br><span class="line">            log.info(<span class="string">&quot;原始图片地址：&#123;&#125;&quot;</span>, url);</span><br><span class="line">            urlStr = url.toString();</span><br><span class="line"><span class="comment">//            byte[] fileByte = Files.readAllBytes(new File(file.getPath()).toPath());</span></span><br><span class="line"><span class="comment">//            PutObjectRequest putObjectRequest = new PutObjectRequest(BUCKET_NAME, &quot;test&quot;, new ByteArrayInputStream(fileByte));</span></span><br><span class="line"><span class="comment">//            // 不设置过期时间</span></span><br><span class="line"><span class="comment">//            PutObjectResult putObjectResult = ossClient.putObject(putObjectRequest);</span></span><br><span class="line"><span class="comment">//            // 去除过期时间参数地址</span></span><br><span class="line"><span class="comment">//            split = urlStr.split(&quot;\\?&quot;);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> urlStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="上传"><a class="header-anchor" href="#上传"></a>上传</h2>
<p>这里我们写一个上传接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;文件上传&quot;, notes = &quot;支持多图上传&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(value = &quot;/upload&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">uploadTest</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> List&lt;MultipartFile&gt; file)</span> &#123;</span><br><span class="line">    List&lt;String&gt; uploadList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(file.size());</span><br><span class="line">    file.forEach(t -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> OssUtils.uploadFileByInputStream(t.getInputStream(), t.getOriginalFilename());</span><br><span class="line">            uploadList.add(url);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> uploadList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a class="header-anchor" href="#测试"></a>测试</h2>
<p>不废话了，直接看图就好了<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1618848130/blog/oss-upload.png" alt=""></p>
<h2 id="问题"><a class="header-anchor" href="#问题"></a>问题</h2>
<ol>
<li>对于上传获取到的文件地址是一个会过期的地址，并不是一个固定不变的地址，如上截图所示，我偷懒直接将地址链接出的相关参数删去，拿到了一个永久存储的访问连接地址。但这里需要注意，这需要在你的 OSS 管理后台去设置你的文件存储的过期策略。这里就不进行截图演示了（主要是我没有登录系统的账号密码，逃 ~）</li>
<li>对于上传的文件我没有自定义文件名，这里有个问题是当用户上传 OSS 服务中已经存在的文件名的文件时，新上传的会覆盖旧文件，因此这个地方需要根据实际的业务场景选择合适的方式。在 <mark>OssUtils</mark> 工具类中我已经注释掉了将文件名重命名的代码，你可以在此处按照你的业务进行更改</li>
<li>第三个问题就是结合上面的两点的汇总方案，其实呢，对于一般的系统，这些静态资源就存永久的连接地址即可。但目前新的系统对用户的资料等也有了 “稍微” 高一点的保护，就是这些资源都是有时效性的，获取的地址就是我们上传拿到的原始地址，而我们存放在数据库中当然也不会是之前那种永久的连接地址，而是对应图片的一个唯一标识信息（可以是重命名后的文件名或者其他能够唯一标识资源你的字段），然后用户访问这些资源时，用存放在数据库中的唯一标识去 OSS 服务上查询对应的资源，然后加载这个地址去显示。</li>
</ol>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmFsaXl1bi5jb20vcHJvZHVjdC8zMTgxNS5odG1s">阿里云对象存储 OSS<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucWluaXUuY29tL3Byb2R1Y3RzL2tvZG8=">对象存储 Kodo<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmh1YXdlaWNsb3VkLmNvbS9vYnMvaW5kZXguaHRtbA==">华为云对象存储服务 OBS<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>OSS</category>
      </categories>
      <tags>
        <tag>OSS</tag>
      </tags>
  </entry>
  <entry>
    <title>迷宫如意琳琅图籍</title>
    <url>/2020/12/10/play-maze/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/incoder/image/upload/v1611486360/blog/G2.png" alt=""></p>
<span id="more"></span>
<p>故宫博物院出品，奥秘之家设计制作（曾推出线下实景地铁逃脱游戏，2018联合《唐人街探案 2》推出《侦探笔记》的互动解密游戏，以及配合电影开发Crimaster），到手快一年了还没有完全解锁线上的关卡，倒不是玩不下去，而是懒，刷 B 站多香，动啥脑子，哈哈哈。言归正传，本篇记录自己解锁线上关卡的步骤，持续更新</p>
<h2 id="进度"><a class="header-anchor" href="#进度"></a>进度</h2>
<ol start="0">
<li>初 ------------------ 100%
<ul>
<li>✅ 梦入紫禁</li>
<li>✅ 太和异象</li>
<li>✅ 十八棵槐</li>
</ul>
</li>
<li>壹 ------------------ 23%
<ul>
<li>万寿盛筵</li>
<li>殿前观礼</li>
<li>礼乐度量</li>
<li>一等画师</li>
<li>腰牌买卖</li>
<li>慈宁画样</li>
</ul>
</li>
<li>贰 ------------------ 0%
<ul>
<li>宫女禾心</li>
<li>嘉祉初遇</li>
<li>淑芳听戏</li>
<li>戏里玄机</li>
<li>上元之约</li>
</ul>
</li>
<li>叁 ------------------ 0%
<ul>
<li>结伴寻宝</li>
<li>皇十五子</li>
<li>档房探秘</li>
<li>一路狂奔</li>
<li>逢凶化吉</li>
<li>五行八卦</li>
<li>夜探御园</li>
</ul>
</li>
<li>肆 ------------------ 0%
<ul>
<li>琳琅宝藏</li>
<li>花叶之谜</li>
<li>宫中怪人</li>
<li>图籍作者</li>
<li>祸不单行</li>
<li>五蕴皆空</li>
</ul>
</li>
<li>伍 ------------------ 0%
<ul>
<li>将破未破</li>
<li>孤注一掷</li>
</ul>
</li>
<li>隐 ------------------ 0%
<ul>
<li>多年以后</li>
</ul>
</li>
<li>众 ------------------ 0%
<ul>
<li>众筹专属</li>
</ul>
</li>
</ol>
<h2 id="初"><a class="header-anchor" href="#初"></a>初</h2>
<h3 id="梦入紫禁"><a class="header-anchor" href="#梦入紫禁"></a>梦入紫禁</h3>
<h3 id="太和异象"><a class="header-anchor" href="#太和异象"></a>太和异象</h3>
<h3 id="十八棵槐"><a class="header-anchor" href="#十八棵槐"></a>十八棵槐</h3>
<h2 id="壹"><a class="header-anchor" href="#壹"></a>壹</h2>
<h3 id="万寿盛筵"><a class="header-anchor" href="#万寿盛筵"></a>万寿盛筵</h3>
<h3 id="殿前观礼"><a class="header-anchor" href="#殿前观礼"></a>殿前观礼</h3>
<h3 id="礼乐度量"><a class="header-anchor" href="#礼乐度量"></a>礼乐度量</h3>
<h3 id="一等画师"><a class="header-anchor" href="#一等画师"></a>一等画师</h3>
<h3 id="腰牌买卖"><a class="header-anchor" href="#腰牌买卖"></a>腰牌买卖</h3>
<h3 id="慈宁画样"><a class="header-anchor" href="#慈宁画样"></a>慈宁画样</h3>
<h2 id="贰"><a class="header-anchor" href="#贰"></a>贰</h2>
<h3 id="宫女禾心"><a class="header-anchor" href="#宫女禾心"></a>宫女禾心</h3>
<h3 id="嘉祉初遇"><a class="header-anchor" href="#嘉祉初遇"></a>嘉祉初遇</h3>
<h3 id="淑芳听戏"><a class="header-anchor" href="#淑芳听戏"></a>淑芳听戏</h3>
<h3 id="戏里玄机"><a class="header-anchor" href="#戏里玄机"></a>戏里玄机</h3>
<h3 id="上元之约"><a class="header-anchor" href="#上元之约"></a>上元之约</h3>
<h2 id="叁"><a class="header-anchor" href="#叁"></a>叁</h2>
<h3 id="结伴寻宝"><a class="header-anchor" href="#结伴寻宝"></a>结伴寻宝</h3>
<h3 id="皇十五子"><a class="header-anchor" href="#皇十五子"></a>皇十五子</h3>
<h3 id="档房探秘"><a class="header-anchor" href="#档房探秘"></a>档房探秘</h3>
<h3 id="一路狂奔"><a class="header-anchor" href="#一路狂奔"></a>一路狂奔</h3>
<h3 id="逢凶化吉"><a class="header-anchor" href="#逢凶化吉"></a>逢凶化吉</h3>
<h3 id="五行八卦"><a class="header-anchor" href="#五行八卦"></a>五行八卦</h3>
<h3 id="夜探御园"><a class="header-anchor" href="#夜探御园"></a>夜探御园</h3>
<h2 id="肆"><a class="header-anchor" href="#肆"></a>肆</h2>
<h3 id="琳琅宝藏"><a class="header-anchor" href="#琳琅宝藏"></a>琳琅宝藏</h3>
<h3 id="花叶之谜"><a class="header-anchor" href="#花叶之谜"></a>花叶之谜</h3>
<h3 id="宫中怪人"><a class="header-anchor" href="#宫中怪人"></a>宫中怪人</h3>
<h3 id="图籍作者"><a class="header-anchor" href="#图籍作者"></a>图籍作者</h3>
<h3 id="祸不单行"><a class="header-anchor" href="#祸不单行"></a>祸不单行</h3>
<h3 id="五蕴皆空"><a class="header-anchor" href="#五蕴皆空"></a>五蕴皆空</h3>
<h2 id="伍"><a class="header-anchor" href="#伍"></a>伍</h2>
<h3 id="将破未破"><a class="header-anchor" href="#将破未破"></a>将破未破</h3>
<h3 id="孤注一掷"><a class="header-anchor" href="#孤注一掷"></a>孤注一掷</h3>
<h2 id="隐"><a class="header-anchor" href="#隐"></a>隐</h2>
<h3 id="多年以后"><a class="header-anchor" href="#多年以后"></a>多年以后</h3>
<h2 id="众"><a class="header-anchor" href="#众"></a>众</h2>
<h3 id="众筹专属"><a class="header-anchor" href="#众筹专属"></a>众筹专属</h3>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ol>
<li>奥秘之家官网：<span class="exturl" data-url="aHR0cDovL3d3dy5pdGFvdHVvLmNvbS8=">http://www.itaotuo.com/<i class="fa fa-external-link-alt"></i></span></li>
<li>《唐人街探案 2》之《侦探笔记》：<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI2NzM0MTQ2NA==">https://www.zhihu.com/question/267341464<i class="fa fa-external-link-alt"></i></span></li>
<li>《唐人街探案 3》之《侦探笔记》：<span class="exturl" data-url="aHR0cHM6Ly96aG9uZ2Nob3UubW9kaWFuLmNvbS9pdGVtLzkwMzE1Lmh0bWw=">https://zhongchou.modian.com/item/90315.html<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Play</category>
      </categories>
      <tags>
        <tag>迷宫</tag>
      </tags>
  </entry>
  <entry>
    <title>搞定 m.2 接口 SSD</title>
    <url>/2020/12/10/play-ssd/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/incoder/image/upload/v1611489458/blog/dell-ssd.jpg" alt=""></p>
<span id="more"></span>
<p>公司原装配置电脑磁盘性能太差，实在是不能满足我的日常骚操作，然后就自己买了一个 m.2 接口的 SSD 硬盘，毕竟电脑之前已经有系统了，而且也已经安装好了开发环境，如果现在在新的 SSD 上直接安装新的系统，那么需要将之前的开发环境再折腾一遍，实在是伤不起。那么有没有别的方式。你别说哦，还真的有，方法是用一些工具对现有系统进行 clone 到新的 SSD 磁盘上。这都很好办，比如：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGlza3Rvb2wuY24=">傲梅分区助手<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGlza2dlbml1cy5jbg==">DiskGenius<i class="fa fa-external-link-alt"></i></span> 都有系统迁移功能，可参考文章下方的参考地址，内有视频教程</p>
<blockquote>
<p>注意：要设置好设置默认系统启动引导为新的磁盘</p>
</blockquote>
<h2 id="问题"><a class="header-anchor" href="#问题"></a>问题</h2>
<p>一开始，我觉得这么简单的操作能有什么问题，迁移完系统，并设置好系统引导，然而我发现并不能按照预期使用 SSD 来启动，试了好几遍，调整了 BIOS 的启动选项，依旧不能解决。后来我将原系统的磁盘拆下来，只留 SSD 磁盘，开机就能按照预期启动了，正常后在把原系统磁盘再装回去，同时记得检查下系统引导，确保还依旧是使用 SSD 系统盘</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGlza3Rvb2wuY24vamlhb2NoZW5nL21pZ3JhdGUtc3lzdGVtLmh0bWw=">SSD系统迁移工具：轻松迁移系统到SSD<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGlza3Rvb2wuY24vamlhb2NoZW5nLW5ldy8yMDE5L2hvdy10by1taWdyYXRlLXN5c3RlbS5odG1sdg==">使用分区助手快速将Windows系统迁移到新磁盘<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Play</category>
      </categories>
      <tags>
        <tag>SSD</tag>
      </tags>
  </entry>
  <entry>
    <title>Api 文档管理系统 RAP1环境搭建</title>
    <url>/2018/03/27/rap1/</url>
    <content><![CDATA[<p>前后端分离的路上，一款强大的API管理工具，可以降低沟通成本，大大提高开发效率，节省的时间，让我们去做更有意义的事情。</p>
<p>API管理工具有很多，选择适合自身需求的就是最好</p>
<p>这里以<span class="exturl" data-url="aHR0cHM6Ly90aHguZ2l0aHViLmlv">阿里妈妈<i class="fa fa-external-link-alt"></i></span>出品的<span class="exturl" data-url="aHR0cHM6Ly90aHguZ2l0aHViLmlvL1JBUA==">RAP<i class="fa fa-external-link-alt"></i></span>产品；目前RAP分为： <s><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoeC9SQVA=">RAP1<i class="fa fa-external-link-alt"></i></span></s>，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoeC9yYXAyLWRlbG9z">RAP2<i class="fa fa-external-link-alt"></i></span></p>
<span id="more"></span>
<blockquote>
<p>虽然RAP1不再添加新功能，只做维护工作，介于RAP2目前还不是很成熟，本篇文章先讲RAP1的搭建过程(虽然官方<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoeC9SQVAvd2lraQ==">Wiki<i class="fa fa-external-link-alt"></i></span>已经有很详细的部署教程，但在部署过程中还是遇到一些问题，因此就记录下来)</p>
</blockquote>
<p>如果你不需要搭建，可以直接访问RAP1提供的服务<span class="exturl" data-url="aHR0cDovL3JhcGFwaS5vcmc=">http://rapapi.org<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="项目构建"><a class="header-anchor" href="#项目构建"></a>项目构建</h2>
<ul>
<li>系统环境：Windows 10 x64</li>
<li>应用工具：<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZHM=">Git<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9pZGVhL2Rvd25sb2Fk">IDEA<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly93d3cuamF2YS5jb20vemhfQ04vZG93bmxvYWQvbWFudWFsLmpzcA==">JDK1.8+<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly90b21jYXQuYXBhY2hlLm9yZy9kb3dubG9hZC04MC5jZ2k=">Tomcat8+<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly93d3cubXlzcWwuY29tL2NuL2Rvd25sb2Fkcw==">MySQL<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9yZWRpcy5pby9kb3dubG9hZA==">Redis3+<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>这里Git，IDEA，JDK1.8，Tomcat8，MySQL不再赘述安装步骤以及环境配置</p>
<h3 id="安装基本工具"><a class="header-anchor" href="#安装基本工具"></a>安装基本工具</h3>
<h4 id="Redis"><a class="header-anchor" href="#Redis"></a>Redis</h4>
<p>由于Redis 官方并未支持Windows系统，因此借助MicrosoftArchive团队所提供的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdEFyY2hpdmUvcmVkaXMvcmVsZWFzZXM=">Windows Redis安装包<i class="fa fa-external-link-alt"></i></span>，这里下载最新的<code>Redis-x64-3.2.100.msi</code></p>
<ul>
<li>
<p>以管理员身份运行安装包<code>Redis-x64-3.2.100.msi</code></p>
<ol>
<li>添加环境变量<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517089/blog/gitpages-redis-env-var.png" alt="env"></li>
<li>默认<code>6379</code>端口<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517270/blog/gitpages-redis-port.png" alt="port"></li>
<li>检查Redis服务，是否已经启动<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517284/blog/gitpages-redis-serve.png" alt="serve"></li>
</ol>
<blockquote>
<p>其他默认即可，不要设置Memory Limit</p>
</blockquote>
</li>
</ul>
<h2 id="构建项目"><a class="header-anchor" href="#构建项目"></a>构建项目</h2>
<h3 id="获取源代码"><a class="header-anchor" href="#获取源代码"></a>获取源代码</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:thx/RAP.git</span><br><span class="line">git checkout release</span><br></pre></td></tr></table></figure>
<blockquote>
<p>确保您正确的切换到release分支，否则会出现少包，因为master分支引用一些不对外公开的内部组件，不提供给外部用户使用</p>
</blockquote>
<h3 id="导入到IDEA"><a class="header-anchor" href="#导入到IDEA"></a>导入到IDEA</h3>
<p>IDEA==&gt;Open==&gt;RAP</p>
<h3 id="初始化数据库"><a class="header-anchor" href="#初始化数据库"></a>初始化数据库</h3>
<p>执行脚本文件：RAP\src\main\resources\database\<code>initialize.sql</code></p>
<h3 id="修改配置文件"><a class="header-anchor" href="#修改配置文件"></a>修改配置文件</h3>
<p>文件：RAP\src\main\resources\database\<code>config.properties</code><br>
修改：数据库<code>用户名</code>及<code>密码</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517302/blog/gitpages-rap1-update-database-config.png" alt="update"></p>
<h2 id="启动项目"><a class="header-anchor" href="#启动项目"></a>启动项目</h2>
<ol>
<li>Edit config<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517326/blog/gitpages-rap1-tomcat-config.png" alt="config"></li>
<li>Create Tomcat<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517350/blog/gitpages-rap1-tomcat-create.png" alt="create"></li>
<li>Deploy war<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517364/blog/gitpages-rap1-tomcat-deploy.png" alt="deploy"></li>
<li>Deploy success<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517384/blog/gitpages-rap1-deploy-success.png" alt="success"></li>
</ol>
<p>注意成功部署后，请<code>注册</code>新账号登录</p>
<p>至此，RAP1的本机部署已经完成。</p>
<h2 id="其他"><a class="header-anchor" href="#其他"></a>其他</h2>
<ul>
<li><span class="exturl" data-url="aHR0cDovL3RoeC5naXRodWIuaW8vUkFQL3N0dWR5Lmh0bWw=">RAP1学习中心<i class="fa fa-external-link-alt"></i></span><br>
部分同学无法查看视频，请异步至<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoeC9SQVAvaXNzdWVzLzkzNQ==">issues<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoeC9SQVAvd2lraQ==">RAP1 Wiki<i class="fa fa-external-link-alt"></i></span>文档</li>
<li><span class="exturl" data-url="aHR0cDovL21vY2tqcy5jb20=">Mockjs<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaW5jb2Rlci5vcmcvMjAxOC8wMy8yNy9yYXAy">RAP2环境搭建教程<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Api</category>
      </categories>
      <tags>
        <tag>RAP</tag>
      </tags>
  </entry>
  <entry>
    <title>Api 文档管理系统 RAP2环境搭建</title>
    <url>/2018/03/27/rap2/</url>
    <content><![CDATA[<p>RAP2是采用前后端分离的形式，因此搭建完整的RAP2需要 <strong>服务端：</strong><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoeC9yYXAyLWRlbG9z">rap2-delos<i class="fa fa-external-link-alt"></i></span>，<strong>客户端：</strong><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoeC9yYXAyLWRvbG9yZXM=">rap2-dolores<i class="fa fa-external-link-alt"></i></span> 同时部署</p>
<p>部署RAP2需要亲具有Node+Linux+MySQL的运维知识，如果亲对此不是很了解，建议用<span class="exturl" data-url="aHR0cDovL3JhcDIudGFvYmFvLm9yZw==">http://rap2.taobao.org<i class="fa fa-external-link-alt"></i></span> 线上版本就可以</p>
<p>由于 <strong>客户端：</strong><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoeC9yYXAyLWRvbG9yZXM=">rap2-dolores<i class="fa fa-external-link-alt"></i></span> 是建立在 <strong>服务端：</strong><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoeC9yYXAyLWRlbG9z">rap2-delos<i class="fa fa-external-link-alt"></i></span> 基础上，因此先搭建服务端应用</p>
<span id="more"></span>
<p>个人贡献 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoeC9yYXAyLWRlbG9zL2lzc3Vlcy8xMTk=">📖 issues 119<i class="fa fa-external-link-alt"></i></span></p>
<div class="note danger"><ul>
<li>截至 2018-08-01 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoeC9yYXAyLWRlbG9z">delos<i class="fa fa-external-link-alt"></i></span> 并没有发布 Tag版本，应该还处于功能开发前期阶段吧。本教程是在CentOS机器上实战部署</li>
<li>然而安装部署并不是顺利，因此记录踩过的坑（别问我为啥不用Docker，因为我司分配的机器无法满足Docker的最低内核版本），安装环境介绍：Redis，delos，dolores均在一台服务器，MySQL使用已存在的服务</li>
<li>本篇文章最后更新于 2018-08-01，因此后续的项目部署相关，<strong>请参考官方部署教程</strong></li>
</ul>
</div>
<h2 id="安装基本工具"><a class="header-anchor" href="#安装基本工具"></a>安装基本工具</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZHM=">Git<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuL2Rvd25sb2Fk">Node 8.9.4+<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9yZWRpcy5pby9kb3dubG9hZA==">Redis 4.0+<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubXlzcWwuY29tL2NuL2Rvd25sb2Fkcw==">MySQL 5.7+<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>以上基本工具请根据自身需要，下载对应系统安装包，请自行解决安装配置等问题，这里不做过多说明</p>
<blockquote>
<p>Redis 安装可参考<a href="https://incoder.org/2018/05/15/linux-build">Linux 常用应用安装</a>；<br>
Redis 最好用<strong>非安全</strong>模式启动</p>
</blockquote>
<h2 id="服务端delos环境搭建"><a class="header-anchor" href="#服务端delos环境搭建"></a>服务端delos环境搭建</h2>
<h3 id="构建项目"><a class="header-anchor" href="#构建项目"></a>构建项目</h3>
<blockquote>
<p>构建项目前，请确认Node，Redis，MySQL服务均能正常使用</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/thx/rap2-delos.git</span><br></pre></td></tr></table></figure>
<h3 id="环境配置"><a class="header-anchor" href="#环境配置"></a>环境配置</h3>
<h4 id="创建数据库"><a class="header-anchor" href="#创建数据库"></a>创建数据库</h4>
<ul>
<li>
<p>Mac or Linux</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>e <span class="string">&#x27;CREATE DATABASE IF NOT EXISTS RAP2_DELOS_APP DEFAULT CHARSET utf8 COLLATE utf8_general_ci&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Windows 环境</p>
<p>进入mysql命令后执行</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> RAP2_DELOS_APP <span class="keyword">DEFAULT</span> CHARSET utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="配置文件"><a class="header-anchor" href="#配置文件"></a>配置文件</h4>
<p>目录：rap2-delos/src/config<br>
文件：<code>config.dev.ts</code>;其中dev，表示开发环境，其他同理<br>
修改：<code>config.dev.ts</code>文件中<code>db</code>对象中<code>username</code>，<code>password</code>参数与<strong>本地</strong>或者<strong>开发环境</strong>的数据库信息匹配</p>
<h3 id="启动项目"><a class="header-anchor" href="#启动项目"></a>启动项目</h3>
<h4 id="安装项目依赖包"><a class="header-anchor" href="#安装项目依赖包"></a>安装项目依赖包</h4>
<p>项目根目录下执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装项目所需依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment"># 全局安装PM2</span></span><br><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure>
<h4 id="安装TypeScript编译包"><a class="header-anchor" href="#安装TypeScript编译包"></a>安装TypeScript编译包</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install typescript -g</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果下载缓慢，请使用<span class="exturl" data-url="aHR0cHM6Ly9ucG0udGFvYmFvLm9yZw==">淘宝npm镜像<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h4 id="初始化数据库"><a class="header-anchor" href="#初始化数据库"></a>初始化数据库</h4>
<p>项目根目录下执行(该过程比较慢，耐心等待初始化完成)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run create-db</span><br></pre></td></tr></table></figure>
<h4 id="编译启动项目"><a class="header-anchor" href="#编译启动项目"></a>编译启动项目</h4>
<p>执行mocha测试用例和js代码规范检查</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run check</span><br></pre></td></tr></table></figure>
<ul>
<li>开发模式<br>
启动开发模式的服务器 监视并在发生代码变更时自动重启(第一次运行比较慢，请耐心等待)  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
</li>
<li>生产模式<br>
启动生产模式服务器  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>看到浏览器中如下提示，表示<strong>服务端delos</strong>已经部署成功</p>
<blockquote>
<p>RAP2后端服务已启动，请从前端服务(rap2-dolores)访问。 RAP2 back-end server is started, please visit via front-end service (rap2-dolores).</p>
</blockquote>
<p>或者在程序控制台出现如下Log，表示<strong>服务端delos</strong>已经部署成功<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517437/blog/gitpages-rap2-delos-success.png" alt="delos"></p>
<h3 id="常见问题"><a class="header-anchor" href="#常见问题"></a>常见问题</h3>
<h4 id="部署问题"><a class="header-anchor" href="#部署问题"></a>部署问题</h4>
<ol>
<li>
<p>Windows下执行 <code>npm run build</code>，提示<code>'rm' 不是内部或外部命令，也不是可运行的程序或批处理文件</code></p>
<p>原因：<code>rm</code> 是Linux下命令，<br>
解决方法：Windows系统可使用 <code>git bash</code> 打开该项目，执行该命令</p>
</li>
<li>
<p>执行 <code>npm run create-db</code> 命令，提示<br>
<code>Unable to connect to the database:&#123; SequelizeAccessDeniedError: Access denied for user 'root'@'localhost' (using password:NO)&#125;</code></p>
<p>原因：未修改 <code>rap2-delos/src/config</code> 目录下数据库配置文件，或者是与文件中的数据库信息与之连接的数据库信息不匹配<br>
解决方法：修改 <code>config.dev.ts</code> 文件数据库配置信息</p>
<blockquote>
<p>如果修改正确无误后，执行 <code>npm run create-db</code> 依旧出错，那么查看该项目中是否已经存在 <code>dist</code> 目录，如果有，请按照如上修改对应的数据库配置信息</p>
</blockquote>
</li>
<li>
<p>执行 <code>npm run dev</code> 命令，提示 <code>Error: listen EADDRINUSE :::8080</code><br>
原因：8080端口被占用<br>
解决方法：杀掉占用8080端口的应用</p>
</li>
<li>
<p>执行 <code>npm install</code> 命令，提示 <code>hiredis</code> 编译无法通过<br>
原因：无权限操作<code>rap2-delos/node_modules/hiredis</code>路径<br>
解决方法：<code>sudo npm install</code></p>
<blockquote>
<p>如果提示<code>sudo: npm: command not found</code>，请参考 <span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzE0NzI3NTUvc3Vkby1ucG0tY29tbWFuZC1ub3QtZm91bmQ=">stackoverflow-npm<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDk3NjY1OC9vbi1lYzItc3Vkby1ub2RlLWNvbW1hbmQtbm90LWZvdW5kLWJ1dC1ub2RlLXdpdGhvdXQtc3Vkby1pcy1vaw==">stackoverflow-node<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
</li>
<li>
<p>执行 <code>npm run dev</code> 可以正常启动，<code>npm start</code> 命令无法正常启动服务<br>
原因：请使用 <code>pm2 logs</code> 查看日志具体定位<br>
示例：由于Redis的安全模式，不能正常使用</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ReplyError: Ready check failed: DENIED Redis is running <span class="keyword">in</span> protected mode because protected mode is enabled, no <span class="built_in">bind</span> address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: </span><br><span class="line"></span><br><span class="line">1) Just <span class="built_in">disable</span> protected mode sending the <span class="built_in">command</span> <span class="string">&#x27;CONFIG SET protected-mode no&#x27;</span> from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet <span class="keyword">if</span> you <span class="keyword">do</span> so. Use CONFIG REWRITE to make this change permanent. </span><br><span class="line">2) Alternatively you can just <span class="built_in">disable</span> the protected mode by editing the Redis configuration file, and setting the protected mode option to <span class="string">&#x27;no&#x27;</span>, and <span class="keyword">then</span> restarting the server. </span><br><span class="line">3) If you started the server manually just <span class="keyword">for</span> testing, restart it with the <span class="string">&#x27;--protected-mode no&#x27;</span> option. </span><br><span class="line">4) Setup a <span class="built_in">bind</span> address or an authentication password. </span><br><span class="line">NOTE: You only need to <span class="keyword">do</span> one of the above things <span class="keyword">in</span> order <span class="keyword">for</span> the server to start accepting connections from the outside.</span><br></pre></td></tr></table></figure>
<p>解决方法： 使用<code>--protected-mode no</code>方式启动</p>
</li>
</ol>
<h2 id="客户端dolores环境搭建"><a class="header-anchor" href="#客户端dolores环境搭建"></a>客户端dolores环境搭建</h2>
<h3 id="构建项目-v2"><a class="header-anchor" href="#构建项目-v2"></a>构建项目</h3>
<h4 id="获取源代码"><a class="header-anchor" href="#获取源代码"></a>获取源代码</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/thx/rap2-dolores.git</span><br></pre></td></tr></table></figure>
<h3 id="环境配置-v2"><a class="header-anchor" href="#环境配置-v2"></a>环境配置</h3>
<h4 id="配置文件-v2"><a class="header-anchor" href="#配置文件-v2"></a>配置文件</h4>
<p>目录：rap2-dolores/src/config<br>
文件：<code>config.dev.ts</code>；其中dev，表示开发环境，其他同理<br>
修改：<code>config.dev.ts</code> 配置文件 <code>serve</code> 的地址，更改为 <strong>服务端</strong>（<code>rap2-delos</code>）部署成功后的地址，默认：<code>'http://localhost:8080'</code></p>
<h3 id="启动项目-v2"><a class="header-anchor" href="#启动项目-v2"></a>启动项目</h3>
<h4 id="安装项目依赖包-v2"><a class="header-anchor" href="#安装项目依赖包-v2"></a>安装项目依赖包</h4>
<p>项目根目录下执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果下载缓慢，请使用<span class="exturl" data-url="aHR0cHM6Ly9ucG0udGFvYmFvLm9yZw==">淘宝npm镜像<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h4 id="编译启动项目-v2"><a class="header-anchor" href="#编译启动项目-v2"></a>编译启动项目</h4>
<ul>
<li>开发模式<br>
自动监视改变后重新编译  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
备注：测试用例  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
</li>
<li>生产模式<br>
编译React生产包  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
用serve命令或nginx服务器路由到编译产出的build文件夹作为静态服务器即可  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">serve -s ./build -p 80</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>看到浏览器中出现登录页面，表示部署成功<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517454/blog/gitpages-rap2-dolores-success.png" alt="dolores"></p>
<h3 id="常见问题-v2"><a class="header-anchor" href="#常见问题-v2"></a>常见问题</h3>
<h4 id="部署问题-v2"><a class="header-anchor" href="#部署问题-v2"></a>部署问题</h4>
<ol>
<li>
<p>执行<code>npm run dev</code>，提示</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">return</span> process.dlopen(module,path._makeLong(filename))</span><br><span class="line">...</span><br><span class="line">...node_modules\node-sass\vendor\win32-x64-57\binding.node is not a valid Win32 application...</span><br></pre></td></tr></table></figure>
<p>原因：项目依赖包<code>node-sass</code>没有安装完全<br>
解决方法：<code>npm install node-sass</code></p>
</li>
<li>
<p>项目运行起来，但一直停留在加载动画那里</p>
<p>浏览器控制台输出：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET http://127.0.0.1:8080/account/info  ==&gt;&gt;</span><br><span class="line">Failed to load http://127.0.0.1:8080/account/info</span><br></pre></td></tr></table></figure>
<p>原因：未修改<code>rap2-delos/src/config</code>目录下服务端连接地址,或者修改结果与<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoeC9yYXAyLWRvbG9yZXM=">rap2-dolores<i class="fa fa-external-link-alt"></i></span>实际提供服务地址不匹配<br>
解决方法：修改<code>config.dev.ts</code>文件serve配置信息</p>
<blockquote>
<p>如果Windows系统修改正确无误后，依旧出错，查看hosts(路径：C:\Windows\System32\drivers\etc)中127.0.0.1的IP前是否有<code>#</code>，如果有请取消注释</p>
</blockquote>
</li>
</ol>
<h2 id="其他"><a class="header-anchor" href="#其他"></a>其他</h2>
<h3 id="MySQL-运行问题"><a class="header-anchor" href="#MySQL-运行问题"></a>MySQL 运行问题</h3>
<ul>
<li>错误一<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517475/blog/gitpages-rap2-mysql.png" alt="mysql"><br>
原因：MySQL 集成命令没有加入系统的环境变量<br>
解决方法：将安装的MySQL Service路径加入系统变量<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517495/blog/gitpages-rap2-mysql-path.png" alt="path"></li>
<li>错误二<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1525517523/blog/gitpages-rap2-mysql-create.png" alt="create"><br>
原因：没有数据库链接权限<br>
解决方法：先登录用root数据库，密码具体看自己数据库当时设置的密码</li>
</ul>
<h3 id="如何获取更新"><a class="header-anchor" href="#如何获取更新"></a>如何获取更新</h3>
<p>目前请选择 <code>master</code> 分支源码，后续其他分支请看相应分支说明文档。在开发环境中git pull来获取最新的源码更新，每一期更新都会有对应的update.md请关注并按照上面的指示进行升级工作。</p>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tzZGIwNDY4NDczL2FydGljbGUvZGV0YWlscy81MjEyNjAwOQ==">Redis如何后台启动<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS95c29jZWFuL3AvOTA3NDc4Ny5odG1s">Redis配置文件介绍<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY2h5aW5ncC9wL3BtMi1kb2N1bWVudGF0aW9uLmh0bWw=">PM2实用入门指南<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Api</category>
      </categories>
      <tags>
        <tag>RAP</tag>
      </tags>
  </entry>
  <entry>
    <title>Realm 数据库快速上手</title>
    <url>/2018/04/24/realm/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/incoder/image/upload/v1525517554/blog/gitpages-realm-mobile-db.png" alt="realm-db"></p>
<span id="more"></span>
<p>Android 供了多种选项来保存永久性应用数据。</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvdG9waWNzL2RhdGEvZGF0YS1zdG9yYWdlLmh0bWw/aGw9emgtY24jcHJlZg==">Shared preferences<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvdG9waWNzL2RhdGEvZGF0YS1zdG9yYWdlLmh0bWw/aGw9emgtY24jZmlsZXNJbnRlcm5hbA==">Internal file storage<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvdG9waWNzL2RhdGEvZGF0YS1zdG9yYWdlLmh0bWw/aGw9emgtY24jZmlsZXNFeHRlcm5hbA==">External file storage<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvdG9waWNzL2RhdGEvZGF0YS1zdG9yYWdlLmh0bWw/aGw9emgtY24jZGI=">Databases<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvdG9waWNzL2RhdGEvZGF0YS1zdG9yYWdlLmh0bWw/aGw9emgtY24jbmV0dw==">Network<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>其中数据库存储是一种必备技能，而衍生的mobile db也是层出不穷，本节主要介绍全平台(除Android,iOS,macOS外还支持web,桌面应用)<span class="exturl" data-url="aHR0cHM6Ly9yZWFsbS5pbw==">Realm<i class="fa fa-external-link-alt"></i></span>数据库在Android上的使用</p>
<h2 id="快速上手"><a class="header-anchor" href="#快速上手"></a>快速上手</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vc3R1ZGlvL2luZGV4Lmh0bWw/aGw9emgtY24=">Android Studio 1.5.1+<i class="fa fa-external-link-alt"></i></span></li>
<li>JDK1.7+</li>
<li>Android API 9+</li>
<li>Realm 默认情况下使用内部存储（internal storage)，一般来说，这个文件位于<code>/data/data/&lt;packagename&gt;/files/</code>，文件名：<code>default.realm</code></li>
</ul>
<h3 id="集成"><a class="header-anchor" href="#集成"></a>集成</h3>
<ul>
<li>
<p>在项目的 build.gradle 文件中添加如下 class path 依赖</p>
  <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&quot;io.realm:realm-gradle-plugin:5.0.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在 app 的 build.gradle 文件中应用 realm-android 插件</p>
  <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;realm-android&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="初始化"><a class="header-anchor" href="#初始化"></a>初始化</h3>
<ul>
<li>
<p>默认初始化</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate();</span><br><span class="line">    <span class="comment">// 默认Realm的配置文件</span></span><br><span class="line">    Realm.init(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>自定义初始化</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate();</span><br><span class="line">    <span class="comment">// 自定义配置Realm</span></span><br><span class="line">    initRealm();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initRealm</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RealmConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RealmConfiguration</span>.Builder()</span><br><span class="line">        .name(<span class="string">&quot;myrealm.realm&quot;</span>)          <span class="comment">// 命名文件名：myrealm.realm</span></span><br><span class="line">        .inMemory()                     <span class="comment">// 一个非持久化的、存在于内存中的 Realm 实例</span></span><br><span class="line">        .encryptionKey(getKey())        <span class="comment">// 数据库加密key</span></span><br><span class="line">        .schemaVersion(<span class="number">2</span>)               <span class="comment">// 数据库结构版本号</span></span><br><span class="line">        .modules(<span class="keyword">new</span> <span class="title class_">MySchemaModule</span>())  <span class="comment">// 数据库结构对象</span></span><br><span class="line">        .migration(<span class="keyword">new</span> <span class="title class_">MyMigration</span>())   <span class="comment">// 数据库迁移</span></span><br><span class="line">        .build();</span><br><span class="line">    Realm.setDefaultConfiguration(config);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>Realm 实例是线程单例化的，也就是说多次在同一线程调用静态构建器会返回同一 Realm 实例</li>
<li>使用同样的名称同时创建“内存中的”Realm 和常规的（持久化）Realm 是不允许的</li>
</ol>
</blockquote>
</li>
</ul>
<h3 id="字段类型"><a class="header-anchor" href="#字段类型"></a>字段类型</h3>
<p>Realm 支持以下字段类型：<code>boolean</code>、<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>、<code>String</code>、<code>Date</code>和<code>byte []</code>。整数类型 <code>short</code>、<code>int</code> 和 <code>long</code> 都被映射到 Realm 内的相同类型（实际上为 <code>long</code> ）。</p>
<ul>
<li>@Required修饰类型和空值（null）
<blockquote>
<p>Realm强制禁止空值（null）被存储<br>
只有<code>Boolean</code>,<code>Byte</code>,<code>Short</code>,<code>Integer</code>,<code>Long</code>,<code>Float</code>,<code>Double</code>,<code>String</code>,<code>byte[]</code>,<code>Date</code>可被修饰</p>
</blockquote>
</li>
<li>@Ignore标识一个字段不应该被保存到 Realm</li>
<li>@Index为字段增加搜索索引
<blockquote>
<p>仅支持索引的属性类型包括：<code>String</code>,<code>byte</code>,<code>short</code>,<code>int</code>,<code>long</code>,<code>boolean</code>和<code>Date</code></p>
</blockquote>
</li>
<li>@PrimaryKey
<blockquote>
<p>必须为字符串（<code>String</code>）或整数（<code>short</code>,<code>int</code>,<code>long</code>）以及它们的包装类型（<code>Short</code>,<code>Int</code>,<code>Long</code>）</p>
</blockquote>
</li>
</ul>
<h3 id="声明Realm数据模型"><a class="header-anchor" href="#声明Realm数据模型"></a>声明Realm数据模型</h3>
<h4 id="RealmObject"><a class="header-anchor" href="#RealmObject"></a>RealmObject</h4>
<p>可以把RealmObject 当作POJO使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">RealmObject</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="RealmModel"><a class="header-anchor" href="#RealmModel"></a>RealmModel</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RealmClass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">RealmModel</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="关系"><a class="header-anchor" href="#关系"></a>关系</h3>
<h4 id="多对一"><a class="header-anchor" href="#多对一"></a>多对一</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Contact</span> <span class="keyword">extends</span> <span class="title class_">RealmObject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Email email;</span><br><span class="line">    <span class="comment">// Other fields…</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Email</span> <span class="keyword">extends</span> <span class="title class_">RealmObject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> active;</span><br><span class="line">    <span class="comment">// ... setters and getters left out</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="多对多"><a class="header-anchor" href="#多对多"></a>多对多</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Contact</span> <span class="keyword">extends</span> <span class="title class_">RealmObject</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> RealmList&lt;Email&gt; emails;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Email</span> <span class="keyword">extends</span> <span class="title class_">RealmObject</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> active;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CRUD"><a class="header-anchor" href="#CRUD"></a>CRUD</h3>
<ul>
<li>所有的写操作（添加、修改和删除对象），必须包含在写入事务（transaction）中</li>
<li>在提交期间，所有更改都将被写入磁盘，并且，只有当所有更改可以被持久化时，提交才会成功。通过取消一个写入事务，所有更改将被丢弃。</li>
<li>益于 Realm 的 MVCC 架构，当正在进行一个写入事务时读取操作并不会被阻塞！这意味着，除非你需要从多个线程进行并发写入操作，否则，你可以尽量使用更大的写入事务来做更多的事情而不是使用多个更小的写入事务。</li>
</ul>
<h4 id="增"><a class="header-anchor" href="#增"></a>增</h4>
<ul>
<li>
<p>事务执行</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Realm</span> <span class="variable">realm</span> <span class="operator">=</span> Realm.getDefaultInstance();</span><br><span class="line">realm.executeTransaction(<span class="keyword">new</span> <span class="title class_">Realm</span>.Transaction() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Realm realm)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> realm.createObject(User.class);</span><br><span class="line">        user.setName(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;john@corporation.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>异步事务</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Realm</span> <span class="variable">realm</span> <span class="operator">=</span> Realm.getDefaultInstance();</span><br><span class="line">realm.executeTransactionAsync(<span class="keyword">new</span> <span class="title class_">Realm</span>.Transaction() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Realm bgRealm)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> bgRealm.createObject(User.class);</span><br><span class="line">        user.setName(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;john@corporation.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="keyword">new</span> <span class="title class_">Realm</span>.Transaction.OnSuccess() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Transaction was a success.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="keyword">new</span> <span class="title class_">Realm</span>.Transaction.OnError() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable error)</span> &#123;</span><br><span class="line">        <span class="comment">// Transaction failed and was automatically canceled.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>OnSuccess 和 OnError 并不是必须重载的，重载了的回调函数会在事务成功或者失败时在被调用发生的线程执行。</p>
</blockquote>
</li>
</ul>
<h4 id="删"><a class="header-anchor" href="#删"></a>删</h4>
<h4 id="改"><a class="header-anchor" href="#改"></a>改</h4>
<h4 id="查"><a class="header-anchor" href="#查"></a>查</h4>
<h2 id="Realm进阶"><a class="header-anchor" href="#Realm进阶"></a>Realm进阶</h2>
<h2 id="Realm云"><a class="header-anchor" href="#Realm云"></a>Realm云</h2>
]]></content>
      <categories>
        <category>DataBase</category>
        <category>Realm</category>
      </categories>
      <tags>
        <tag>Realm</tag>
      </tags>
  </entry>
  <entry>
    <title>RxJava 入门</title>
    <url>/2018/10/02/rxjava/</url>
    <content><![CDATA[<p>RxJava – Reactive Extensions for the JVM – a library for composing <strong>asynchronous</strong> and <strong>event-based</strong> programs using <strong>observable</strong> sequences for the Java VM.（一个在 Java VM 上使用<mark class="label info">可观测</mark>的序列( <strong>观察者模式</strong> )来组成<mark class="label info">异步</mark>的、<mark class="label info">基于事件</mark>的程序的库）.</p>
<p>在实际开发过程中，RxJava已是一个不可或缺的组件，因此对于RxJava的学习和思考，记录分享是很重要的一个环节</p>
<p>本系列文章主要：</p>
<ol>
<li><a href="https://incoder.org/2018/10/02/rxjava/">RxJava 入门</a></li>
<li>RxJava 实际应用</li>
<li>RxJava 源码剖析</li>
</ol>
<span id="more"></span>
<p>目前来说，RxJava有两个版本，RxJava1 与 RxJava2 两个版本之间虽然存在很多不同，但它们的本质是相同，由于对于RxJava1 <strong>已废弃</strong>，因此建议没有学习或者是使用过，可直接上手学习RxJava2(在学习过程中部分地方还是会有RxJava1相关的说明，但这不是重点)</p>
<p>文章使用RxJava版本如下:</p>
<ul>
<li><code>implementation 'io.reactivex:rxjava:1.3.0'</code></li>
<li><code>implementation 'io.reactivex.rxjava2:rxjava:2.2.1'</code></li>
<li>项目示例：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Jvb3RDbHVzdGVyL3JjLWNsdXN0ZXItbmV0d29yaw==">rc-cluster-network<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<blockquote>
<p>由于一个项目中RxJava1与RxJava2并不能共存，因此实际参考项目中仅RxJava2示例</p>
</blockquote>
<h2 id="RxJava-基础"><a class="header-anchor" href="#RxJava-基础"></a>RxJava 基础</h2>
<h3 id="RxJava1-VS-RxJava2"><a class="header-anchor" href="#RxJava1-VS-RxJava2"></a>RxJava1 VS RxJava2</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1538815280/blog/RxJava1_vs_RxJava2.png" alt="rxjava1 vs rxjava2"></p>
<blockquote>
<p>以上是列举出不同版本间主要的变换，其它更细节部分，请查看官方<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1JlYWN0aXZlWC9SeEphdmEvd2lraS9XaGF0J3MtZGlmZmVyZW50LWluLTIuMA==">Wiki<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="关键词"><a class="header-anchor" href="#关键词"></a>关键词</h3>
<h4 id="RxJava1"><a class="header-anchor" href="#RxJava1"></a>RxJava1</h4>
<ul>
<li>Observable (可观察者，即被观察者)</li>
<li>Observer (观察者)</li>
<li>subscribe (订阅)</li>
<li>事件</li>
</ul>
<blockquote>
<p>Observable和Observer通过subscribe()方法实现订阅关系，从而Observable可以在需要的时候发出事件来通知Observer</p>
</blockquote>
<h4 id="RxJava2"><a class="header-anchor" href="#RxJava2"></a>RxJava2</h4>
<ul>
<li>Observable (可观察者，即被观察者)</li>
<li>Observer (观察者)</li>
<li>ObservableEmitter (发射器)</li>
<li>事件</li>
</ul>
<blockquote>
<p>RxJava2中<code>Subscrber</code>被<code>ObservableEmitter</code>取代，<code>Observer</code>中多了一个回调方法 <code>onSubscribe()</code>，传递参数为<code>Disposable</code></p>
</blockquote>
<ul>
<li>ObservableEmitter：Emitter是发射器的意思，这个就是用来发出事件，它可以发出三种类型的事件，通过调用<code>emitter</code>的<code>onNext(T value)</code>，<code>onComplete()</code>和<code>onError(Throwable e)</code>就可以分别发出<code>next</code>事件，<code>complete</code>事件和<code>error</code>事件</li>
<li>Disposable：字面意思是一次性用品，用完即可丢弃。在RxJava中可以理解成两根管道间的阀门，当调用它的的<code>dispose()</code>方法时，它就将两根管道切断，从而导致下游收不到事件，即相当于<code>Subsciption</code></li>
</ul>
<h3 id="基本实现"><a class="header-anchor" href="#基本实现"></a>基本实现</h3>
<h4 id="Create-Observable"><a class="header-anchor" href="#Create-Observable"></a>Create Observable</h4>
<p><img src="https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/legend.png" alt="operators"></p>
<h5 id="RxJava1-v2"><a class="header-anchor" href="#RxJava1-v2"></a>RxJava1</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Observable&lt;String&gt; observable = Observable.unsafeCreate(<span class="keyword">new</span> <span class="title class_">Observable</span>.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(Subscriber&lt;? <span class="built_in">super</span> String&gt; subscriber)</span> &#123;</span><br><span class="line">        subscriber.onNext(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">&quot;RxJava1&quot;</span>);</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>1.2.7版本后，Observable的<code>create()</code>方法已被废弃，如果没有特殊需求，可以使用<code>unsafeCreate()</code>代替，构造Obaservable实例</p>
</blockquote>
<h5 id="RxJava2-v2"><a class="header-anchor" href="#RxJava2-v2"></a>RxJava2</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Observable&lt;String&gt; observable = Observable.create(<span class="keyword">new</span> <span class="title class_">ObservableOnSubscribe</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; emitter)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        emitter.onNext(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        emitter.onNext(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        emitter.onNext(<span class="string">&quot;RxJava2&quot;</span>);</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>unsafeCreate()/create()</code>方法是RxJava最基本创建时间序列的方法。基于这个方法，RxJava还提供了一些方法来快捷创建事件队列</p>
<ul>
<li>just(T…)：将传入的参数依次发送出来  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Observable</span> <span class="variable">observable</span> <span class="operator">=</span> Observable.just(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>, <span class="string">&quot;RxJava&quot;</span>);</span><br><span class="line"><span class="comment">// 将会依次调用：</span></span><br><span class="line"><span class="comment">// onNext(&quot;Hello&quot;);</span></span><br><span class="line"><span class="comment">// onNext(&quot;World&quot;);</span></span><br><span class="line"><span class="comment">// onNext(&quot;RxJava&quot;);</span></span><br><span class="line"><span class="comment">// onCompleted();</span></span><br></pre></td></tr></table></figure>
</li>
<li>from(T[])/from(Iierabble&lt;? extends T&gt;)：将传入的数组或Iterable拆分成具体对象后，依次发送出来  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] words = &#123;<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>, <span class="string">&quot;RxJava&quot;</span>&#125;;</span><br><span class="line"><span class="type">Observable</span> <span class="variable">observable</span> <span class="operator">=</span> Observable.from(words);</span><br><span class="line"><span class="comment">// 将会依次调用：</span></span><br><span class="line"><span class="comment">// onNext(&quot;Hello&quot;);</span></span><br><span class="line"><span class="comment">// onNext(&quot;World&quot;);</span></span><br><span class="line"><span class="comment">// onNext(&quot;RxJava&quot;);</span></span><br><span class="line"><span class="comment">// onCompleted();</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="Flowable"><a class="header-anchor" href="#Flowable"></a>Flowable</h5>
<p>Flowable是RxJava2中新增的类，专门应对背压（Backpressure）问题，但这个概念并不是RxJava2中引入的概念。</p>
<p>出现Flowable的原因：即生产者（被观察者发送事件）的速度与消费者（观察者接收所有事件）的速度不匹配，从而导致观察者无法及时响应/处理所有发送过来的事件问题，最终导致缓冲区溢出，事件丢失 &amp; OOM等问题。</p>
<p>一般情况，被观察者发送事件速度 ＞ 观察者接收事件速度。比如：点击过快造成等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flowable.create(<span class="keyword">new</span> <span class="title class_">FlowableOnSubscribe</span>&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">subscribe</span><span class="params">(FlowableEmitter&lt;String&gt; emitter)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        emitter.onNext(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        emitter.onNext(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        emitter.onNext(<span class="string">&quot;RxJava2&quot;</span>);</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, BackpressureStrategy.ERROR)</span><br><span class="line">        .subscribeOn(Schedulers.computation())</span><br><span class="line">        .observeOn(Schedulers.newThread())</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">// 相当于onNext</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;accept&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Throwable&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">// 相当于onError</span></span><br><span class="line">                System.out.println(<span class="string">&quot;accept&quot;</span> + throwable.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p>Flowable并不是订阅就开始发送数据，而是需等到执行<code>Subscription.request()</code>才开始发送数据</p>
<h4 id="Create-Observer"><a class="header-anchor" href="#Create-Observer"></a>Create Observer</h4>
<h5 id="RxJava1-v3"><a class="header-anchor" href="#RxJava1-v3"></a>RxJava1</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> <span class="title class_">Observer</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCompleted</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Completed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Error&quot;</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNext</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Next&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>除了<code>Observer</code>接口之外，RxJava内置了一个实现<code>Observer</code>的抽象类<code>Subscriber</code>，<code>Subscriber</code>对<code>Observer</code>接口进行了一些扩展，但它们的基本使用方式是完全一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> <span class="title class_">Subscriber</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCompleted</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Completed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Error&quot;</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNext</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Next&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>实际，在RxJava的subscribe过程中，<code>Observer</code>也总是会先被转成一个<code>Subscriber</code>再使用。对于使用者来说<code>Observer</code>与<code>Subscriber</code>的主要区别是：</p>
<ol>
<li>onStart()：这是<code>Subscriber</code>增加的方法。它会再subscribe刚开始，而事件还未发送之前被调用，可以用于做一些准备工作，例如：数据的重置等操作。这是一个可选方法，默认情况下它的实现为空。</li>
</ol>
<blockquote>
<p>注意：<br>
对于准备工作有线程要求，<code>onStart()</code>就不适用，因为它总是再subscribe所发生的线程被调用，而不能指定线程。要指定线程来准备工作，可以使用<code>doOnSubscribe()</code>方法</p>
</blockquote>
<ol start="2">
<li>unsubscribe()：<code>Subscriber</code>所实现的另一个接口<code>Subscription</code>的方法，用于取消订阅。在这个方法被调用后，<code>Subscriber</code>将不再接收事件。</li>
</ol>
<blockquote>
<p>注意：</p>
<ul>
<li>一般需要在调用<code>unsubscribe()</code>方法前，需要使用<code>isUnsubscribed()</code>先判断状态。</li>
<li>不再使用的时候尽快在合适的地方调用<code>unsubscribe()</code>来解除引用关系，以避免内存泄漏</li>
</ul>
</blockquote>
<h5 id="RxJava2-v3"><a class="header-anchor" href="#RxJava2-v3"></a>RxJava2</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> <span class="title class_">Observer</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSubscribe</span><span class="params">(Disposable d)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Subscribe: &quot;</span> + d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNext</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Next: &quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Error: &quot;</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onComplete</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Complete !&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="Subscribe"><a class="header-anchor" href="#Subscribe"></a>Subscribe</h4>
<p>创建好<code>Observable</code>和<code>Observer</code>之后，再用<code>subscribe()</code>方法将它们联结起来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">observable.subscribe(observer);</span><br><span class="line"><span class="comment">// 或者(仅支持RxJava1)</span></span><br><span class="line">observable.subscribe(subscriber);</span><br></pre></td></tr></table></figure>
<h4 id="chain-calls"><a class="header-anchor" href="#chain-calls"></a>chain calls</h4>
<p>以上三步是使用RxJava进行异步操作的基本过程，创建<code>被观察者</code>，创建<code>观察者</code>，<code>被观察者</code>订阅<code>观察者</code>，我们可以通过链式调用形式完成操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Observable.unsafeCreate(<span class="keyword">new</span> <span class="title class_">Observable</span>.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(Subscriber&lt;? <span class="built_in">super</span> String&gt; subscriber)</span> &#123;</span><br><span class="line">        subscriber.onNext(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">&quot;RxJava1&quot;</span>);</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(<span class="keyword">new</span> <span class="title class_">Observer</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCompleted</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Completed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Error&quot;</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNext</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Next&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="简化订阅"><a class="header-anchor" href="#简化订阅"></a>简化订阅</h4>
<p>除了<code>subscribe(Observer)</code>和<code>subscribe(Subscriber)（仅支持RxJava1）</code>，<code>subscribe()</code>还支持不完整的简化订阅回调</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RxJava1</span></span><br><span class="line">Action1&lt;String&gt; onNextAction = <span class="keyword">new</span> <span class="title class_">Action1</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;onNext&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Action1&lt;Throwable&gt; onErrorAction = <span class="keyword">new</span> <span class="title class_">Action1</span>&lt;Throwable&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;onError&quot;</span> + throwable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">Action0</span> <span class="variable">onCompletedAction</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Action0</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;completed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RxJava2</span></span><br><span class="line">Consumer&lt;String&gt; onNextAction = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;onNext&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">        </span><br><span class="line">Consumer&lt;Throwable&gt; onErrorAction = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Throwable&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;onError&quot;</span> + throwable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">        </span><br><span class="line"><span class="type">Action</span> <span class="variable">onCompleteAction</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Action</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;complete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 来定义 onNext()</span></span><br><span class="line">observable.subscribe(onNextAction);</span><br><span class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 和 onErrorAction 来定义 onNext() 和 onError()</span></span><br><span class="line">observable.subscribe(onNextAction, onErrorAction);</span><br><span class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction、 onErrorAction 和 onCompletedAction 来定义 onNext()、 onError() 和 onCompleted()</span></span><br><span class="line">observable.subscribe(onNextAction, onErrorAction, onCompletedAction/onCompleteAction);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="RxJava-线程"><a class="header-anchor" href="#RxJava-线程"></a>RxJava 线程</h2>
<p>在RxJava的默认规则中，事件的发出和消费都是在同一个线程(在哪个线程条用<code>subscriber()</code>，就在哪个线程生产事件；在哪个线程生产事件，就在哪个线程消费事件)，也就是说，以上RxJava基本操作，实现出来的只是一个<code>同步</code>的观察者模式。而观察者模式本身的目的是“后台处理，前台回调”的<code>异步</code>机制，因此在RxJava中通过<code>Scheduler</code>来对线程进行管理</p>
<h3 id="Scheduler-API"><a class="header-anchor" href="#Scheduler-API"></a>Scheduler API</h3>
<p>Scheduler相当于线程控制器，RxJava通过它指定代码应该运行在什么样的线程，其中RxJava中内置了几个Scheduler</p>
<ul>
<li>Schedulers.computation()：计算所使用的<code>Scheduler</code>。这个计算值的是CPU密集型计算，即不会被I/O操作等限制性能的操作。不要把I/O操作放在<code>computation()</code>中，否则I/O操作的等待时间会浪费CPU。</li>
<li>Schedulers.form(Executor)：</li>
<li>Schedulers.immediate()：直接在当前线程运行，相当于不指定线程，这也是默认的Scheduler.</li>
<li><span class="exturl" data-url="aHR0cDovL1NjaGVkdWxlcnMuaW8=">Schedulers.io<i class="fa fa-external-link-alt"></i></span>()：I/O操作（读写文件，读写数据库，网络信息交换等）所使用的Scheduler。行为模式和newThread()差不多，区别在于io()的内部实现是一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下io()比newThread()更高效</li>
<li>Schedulers.newThread()：总是启用新线程，并在新线程执行操作</li>
<li>Schedulers.single()『仅RxJava2中存在』：</li>
<li>Schedulers.test()『仅RxJava1中存在』：顾名思义，这是一个测试</li>
<li>Schedulers.trampoline()：</li>
<li>AndoroidSchedulers.mainThread()：指定操作在Android的主线程</li>
</ul>
<p>有了Scheduler，我们可以使用<code>subscribeOn()</code>和<code>observeOn()</code>方法来对线程进行控制</p>
<ul>
<li>
<p>subscribeOn()：指定subscribe()所发生的线程，即Observable.OnSubscribe被激活时所处的线程，或者叫做事件的产生的线程</p>
</li>
<li>
<p>observeOn()：指定Subscriber所运行的线程。或者叫做事件的消费线程</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RxJava2</span></span><br><span class="line">Observable.create(<span class="keyword">new</span> <span class="title class_">ObservableOnSubscribe</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; emitter)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        emitter.onNext(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        emitter.onNext(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        emitter.onNext(<span class="string">&quot;RxJava2&quot;</span>);</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">        <span class="comment">// 指定 subscribe() 发生在 IO 线程</span></span><br><span class="line">        .subscribeOn(Schedulers.io())</span><br><span class="line">        <span class="comment">// 指定 Subscriber 的回调发生在主线程</span></span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="操作符"><a class="header-anchor" href="#操作符"></a>操作符</h2>
<p>说RxJava好用，还有一个原因是RxJava提供了大量的操作符，这些操作符保证了在面都复杂的逻辑下，依旧可以是逻辑清晰的链式调用</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1538815494/blog/RxJava_action.png" alt="RxJava_action"></p>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<p>本篇文章作为RxJava系列的学习的入门，不会讲解相关操作的原理等<br>
学习目的</p>
<ul>
<li>了解RxJava1与RxJava2之间的不同点，</li>
<li>了解RxJava的线程管理，</li>
<li>掌握完成RxJava的基本操作，</li>
<li>清楚RxJava操作符，以及分别适用于什么样的场景</li>
</ul>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<p>文章中部分原话引用了参考学习文章的原话，在这里向那些无私分享的大佬致敬</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9nYW5rLmlvL3Bvc3QvNTYwZTE1YmUyZGNhOTMwZTAwZGExMDgz">给 Android 开发者的 RxJava 详解<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vbmIvMTQzMDI2OTI=">RxJava系列教程<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>RxJava</category>
      </categories>
      <tags>
        <tag>RxJava</tag>
      </tags>
  </entry>
  <entry>
    <title>琅嬛福地</title>
    <url>/2021/03/06/scenically/</url>
    <content><![CDATA[<p>在金庸武侠《天龙八部》中，“琅嬛福地”存放了无崖子和李秋水搜罗天下各门各派的武功，江湖人士练成这里的一门武功绝学，就能在江湖中有自己的一席之地。而这里存放了我计算机相关学习、实践应用，以及经常使用的一些网站资源</p>
<span id="more"></span>
<h2 id="计算机网络"><a class="header-anchor" href="#计算机网络"></a>计算机网络</h2>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="https://i0.hdslb.com/bfs/face/abb12931aed341d6dcc67dd13162fddb35240622.jpg@96w_96h_1c.webp"></object>
<p>方方方已经存在了</p><p>计算机网络（谢希仁第七版）.</p>
<a href="https://www.bilibili.com/video/BV1yE411G7Ma"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://i1.hdslb.com/bfs/face/1814653848d0a645c053efa7a7b40b9c53929d38.jpg@96w_96h_1c.webp"></object>
<p>韩立刚</p><p>韩立刚计算机网络 谢希仁 第7版.</p>
<a href="https://www.bilibili.com/video/BV1gV411h7r7"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://i2.hdslb.com/bfs/face/507c26c8bca9a4b96ff7fb820da36c05960ea7ca.jpg@96w_96h_1c.webp"></object>
<p>王道论坛</p><p>2019 王道考研 计算机网络.</p>
<a href="https://www.bilibili.com/video/BV19E411D78Q"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://i0.hdslb.com/bfs/face/member/noface.jpg@96w_96h_1c.webp"></object>
<p>湖科大教书匠</p><p>计算机网络微课堂（陆续更新中......）.</p>
<a href="https://www.bilibili.com/video/BV1c4411d7jb"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://i2.hdslb.com/bfs/face/872982590cd7c2de9f5a3f595059a71fb9c95004.jpg@96w_96h_1c.webp"></object>
<p>中科大-郑老师</p><p>中科大郑烇老师全套《计算机网络（自顶向下方法 第7版，James F.Kurose，Keith W.Ross）》课程.</p>
<a href="https://www.bilibili.com/video/BV1JV411t7ow"></a>
</div></div>
<h2 id="数据结构与算法"><a class="header-anchor" href="#数据结构与算法"></a>数据结构与算法</h2>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="https://i2.hdslb.com/bfs/face/48aa2e4e420c660b88fe3deef44975c296fd91bd.gif"></object>
<p>临风笑笑生</p><p>【郝斌】-数据结构入门.</p>
<a href="https://www.bilibili.com/video/BV11s41167h6"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://i2.hdslb.com/bfs/face/c38f4b346eed167f55183f1dc398376326c8ecc4.jpg@96w_96h_1c.webp"></object>
<p>星球杯25</p><p>数据结构-浙江大学.</p>
<a href="https://www.bilibili.com/video/BV1JW411i731"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://i0.hdslb.com/bfs/face/4335c48c1a30a3d4e862c21eeb5f71b1218567ec.jpg@96w_96h_1c.webp"></object>
<p>87师兄</p><p>数据结构与算法基础（青岛大学-王卓）.</p>
<a href="https://www.bilibili.com/video/BV1nJ411V7bd"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://i2.hdslb.com/bfs/face/7ea5132de4ecdc8b594a98c11d9f224f0e741c0b.jpg@96w_96h_1c.webp"></object>
<p>尚硅谷</p><p>尚硅谷Java数据结构与java算法（Java数据结构与算法）.</p>
<a href="https://www.bilibili.com/video/BV1E4411H73v"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://i2.hdslb.com/bfs/face/55ea7d0f3b2038cec6b99d44068b3579f27065e5.jpg@128w_128h_1o.webp"></object>
<p>大雪菜</p><p>LeetCode 的大神，刷题讲解.</p>
<a href="https://space.bilibili.com/7836741"></a>
</div></div>
<h2 id="操作系统"><a class="header-anchor" href="#操作系统"></a>操作系统</h2>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="https://i1.hdslb.com/bfs/face/bc288c3544209fb2bdadaf45015721555175df17.jpg@96w_96h_1c.webp"></object>
<p>绿导师原谅你了</p><p>2020 南京大学 “操作系统：设计与实现” (蒋炎岩).</p>
<a href="https://www.bilibili.com/video/BV1N741177F5"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://i1.hdslb.com/bfs/face/f81c108b4e7ced4b8e16c9a0d4ee3370e17e12bf.jpg@96w_96h_1c.webp"></object>
<p>星球杯25</p><p>操作系统_清华大学(向勇、陈渝).</p>
<a href="https://www.bilibili.com/video/BV1js411b7vg"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://i0.hdslb.com/bfs/face/51d41d81499b7913458145045e13107bf152b694.jpg@96w_96h_1c.webp"></object>
<p>FCCJK</p><p>操作系统（哈工大李治军老师）32讲（全）超清.</p>
<a href="https://www.bilibili.com/video/BV1d4411v7u7"></a>
</div></div>
<h2 id="计算机组成原理"><a class="header-anchor" href="#计算机组成原理"></a>计算机组成原理</h2>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="https://i0.hdslb.com/bfs/face/51d41d81499b7913458145045e13107bf152b694.jpg@96w_96h_1c.webp"></object>
<p>绿导师原谅你了</p><p>计算机组成原理（哈工大刘宏伟）.</p>
<a href="https://www.bilibili.com/video/BV1t4411e7LH"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://i0.hdslb.com/bfs/face/member/noface.jpg@96w_96h_1c.webp"></object>
<p>东南偏南2018</p><p>计算机组成原理 清华大学刘卫东 全58讲 国家精品课程 1080P 更完.</p>
<a href="https://www.bilibili.com/video/BV1c4411w7nd"></a>
</div></div>
<h2 id="编译原理"><a class="header-anchor" href="#编译原理"></a>编译原理</h2>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="https://i0.hdslb.com/bfs/face/8ae1f165fef1fff75d8fced295a5f87b0f9d2e92.jpg@96w_96h_1c.webp"></object>
<p>执念缘不浅</p><p>编译原理（哈工大）.</p>
<a href="https://www.bilibili.com/video/BV1t4411e7LH"></a>
</div></div>
<h2 id="资源"><a class="header-anchor" href="#资源"></a>资源</h2>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="https://tse3-mm.cn.bing.net/th/id/OIP.RomlWHLG15NaBmLbJAHtvwAAAA?w=171&h=180&c=7&o=5&dpr=2&pid=1.7"></object>
<p>阿里云开发者藏经阁</p><p>各种实战经验，顶级技术电子书.</p>
<a href="https://developer.aliyun.com/ebook"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://tse3-mm.cn.bing.net/th/id/OIP.RomlWHLG15NaBmLbJAHtvwAAAA?w=171&h=180&c=7&o=5&dpr=2&pid=1.7"></object>
<p>阿里云开发者实验室</p><p>免费云资源，真实云环境，丰富实践场景.</p>
<a href="https://developer.aliyun.com/adc/labs"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="https://tse3-mm.cn.bing.net/th/id/OIP.RomlWHLG15NaBmLbJAHtvwAAAA?w=171&h=180&c=7&o=5&dpr=2&pid=1.7"></object>
<p>阿里云开发者学习中心</p><p>各种学习路线图，热门技术训练营.</p>
<a href="https://developer.aliyun.com/learning"></a>
</div></div>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvMkxLUDUzVlZBaGdsLVI4SDVZTmFUUQ==">聊一聊我在B站上自学编程的经历吧<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Resources</category>
      </categories>
      <tags>
        <tag>DevTool</tag>
      </tags>
  </entry>
  <entry>
    <title>非对称加密——RSA</title>
    <url>/2018/07/03/security-rsa/</url>
    <content><![CDATA[<p>这是常用加密技术的系列文章，主要包含<code>非对称</code>，<code>对称</code>，<code>JWT</code>三类常用技术的应用</p>
<h2 id="RSA"><a class="header-anchor" href="#RSA"></a>RSA</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvUlNBJUU1JThBJUEwJUU1JUFGJTg2JUU2JUJDJTk0JUU3JUFFJTk3JUU2JUIzJTk1">RSA<i class="fa fa-external-link-alt"></i></span>：RSA加密算法是一种 <strong>非对称</strong> 加密算法。在公开密钥加密和电子商业中RSA被广泛使用。RSA是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。RSA就是他们三人姓氏开头字母拼在一起组成的。</p>
<span id="more"></span>
<h3 id="RSA加密解密"><a class="header-anchor" href="#RSA加密解密"></a>RSA加密解密</h3>
<p>公钥 <strong>加密</strong> 私钥 <strong>解密</strong>，持有公钥（多人持有，<strong>客户端</strong>）可以对数据加密，但是只有持有私钥（一人持有，<strong>服务端</strong>）才可以解密并查看数据</p>
<h3 id="RSA加签验签"><a class="header-anchor" href="#RSA加签验签"></a>RSA加签验签</h3>
<p>私钥 <strong>加签</strong> 公钥 <strong>验签</strong>，持有私钥（一人持有，<strong>服务端</strong>）可以加签，持有公钥（多人持有，<strong>客户端</strong>）可以验签</p>
<h3 id="RSA过程示意图"><a class="header-anchor" href="#RSA过程示意图"></a>RSA过程示意图</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1530793864/blog/security-rsa.png" alt="security-rsa"></p>
<p>如上图，具体表述两个场景过程</p>
<h4 id="结果不需加密"><a class="header-anchor" href="#结果不需加密"></a>结果不需加密</h4>
<p>场景：返回的数据不需要加密(例如：绑定银行卡的时候)</p>
<ul>
<li>客户端<code>Client A</code>发送使用服务端<code>Serve publicKey</code> <strong>加密</strong> 的密文<code>cipher A(包含用户的银行卡号，手机号等重要信息)</code>到服务器</li>
<li>服务器<code>Serve</code> 通过 <code>Serve privateKey</code><strong>解密</strong></li>
<li>服务端业务处理完成，直接返回数据(一些普通信息，比如状态码code，提示信息msg，提示操作是成功还是失败)给客户端<code>Client A</code></li>
</ul>
<h4 id="结果需加密"><a class="header-anchor" href="#结果需加密"></a>结果需加密</h4>
<p>场景：返回的数据需要加密(例如：用户登录)</p>
<ul>
<li>客户端<code>Client B</code>发送使用服务端<code>Serve publicKey</code> <strong>加密</strong> 的密文<code>cipher B(包含用户名和密码等重要信息)</code>以及客户端<code>Client B</code>的<code>Client B publicKey</code>到服务器</li>
<li>服务器<code>Serve</code> 通过 <code>Serve privateKey</code><strong>解密</strong></li>
<li>服务端业务处理完成，直接返回数据(一般为token，token使用客户端<code>Client B</code>的<code>Client B publicKey</code>加密)给客户端<code>Client B</code></li>
<li>客户端<code>Client B</code>使用<code>Client B privateKey</code>进行 <strong>解密</strong> 获取相应的用户信息等</li>
</ul>
<h2 id="密钥对"><a class="header-anchor" href="#密钥对"></a>密钥对</h2>
<p>在使用RSA加密解密之前，首先要生成密钥对。所谓的密钥对，指的是公钥和私钥。RSA算法的密钥可以通过两个途径生成，一是借助<code>openssl</code>命令终端，二是使用<code>JDK</code>生成。<br>
本篇采用<code>JDK</code>方式生成密钥对，<code>openssl</code>方式可自行尝试</p>
<h3 id="JDK"><a class="header-anchor" href="#JDK"></a>JDK</h3>
<h4 id="Serve端密钥对"><a class="header-anchor" href="#Serve端密钥对"></a>Serve端密钥对</h4>
<h4 id="Client端密钥对"><a class="header-anchor" href="#Client端密钥对"></a>Client端密钥对</h4>
<h5 id="Android密钥对"><a class="header-anchor" href="#Android密钥对"></a>Android密钥对</h5>
<h5 id="Web密钥对"><a class="header-anchor" href="#Web密钥对"></a>Web密钥对</h5>
<h5 id="iOS密钥对"><a class="header-anchor" href="#iOS密钥对"></a>iOS密钥对</h5>
<h3 id="OpenSSL"><a class="header-anchor" href="#OpenSSL"></a>OpenSSL</h3>
<p>略…</p>
<h2 id="RSA加密"><a class="header-anchor" href="#RSA加密"></a>RSA加密</h2>
<h2 id="RSA解密"><a class="header-anchor" href="#RSA解密"></a>RSA解密</h2>
<h2 id="RSA缺点"><a class="header-anchor" href="#RSA缺点"></a>RSA缺点</h2>
<p>虽然RSA是一种较高级别加密机制，但也存在一些缺点</p>
<ol>
<li>产生密钥很麻烦，受到素数产生技术的限制，因而难以做到一次一密。</li>
<li>安全性，RSA的安全性依赖于大数的因子分解，但并没有从理论上证明破译RSA的难度与大数分解难度等价，而且密码学界多数人士倾向于因子分解不是NP问题。</li>
<li>速度太慢，由于<code>RSA</code>的分组长度太大，为保证安全性，n 至少也要 <code>600 bit</code> 以上，使运算代价很高，尤其是速度较慢，较对称密码算法慢几个数量级；且随着大数分解技术的发展，这个长度还在增加，不利于数据格式的标准化。</li>
</ol>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<p>参考学习文章</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poc2h1bGluL2FydGljbGUvZGV0YWlscy83MTU3MzU0Mg==">一张图了解RSA加解密与加验签<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbG92ZXlvdS9wLzcyOTk1MjQuaHRtbA==">RSA加密解密及RSA加签验签<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mZjliZDg5N2U5NmE=">RSA加解密和加签验签<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yODNmZmY0M2E5NDg=">RSA加密解密样例<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1c3RwemIvYXJ0aWNsZS9kZXRhaWxzLzcyNzM0NTc4">RSA加密解密实现<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】• 面向服务的架构</title>
    <url>/2019/06/19/soa/</url>
    <content><![CDATA[<p>在学习过程中，我们首先需要将学习知识的基本概念搞清楚，而搞清楚概念最权威的方式是查阅 <strong><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3Jn">英文版 • 维基百科<i class="fa fa-external-link-alt"></i></span></strong> ，或者是对应知识的官方文档上面查找相关的知识。这样学习才能学习到知识的精华，而不是阅读经过别人转译过的文章。因此，这篇文章仅是本人在学习 SOA 基本概念时，对维基百科知识的一个汇总翻译记录，<font color=#FF0000>不建议朋友把这篇文章当做你的学习资料</font>，具体请查阅<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VydmljZS1vcmllbnRlZF9hcmNoaXRlY3R1cmU=">Service-oriented architecture<i class="fa fa-external-link-alt"></i></span>。</p>
<p>面向服务的架构（SOA）是一种<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU29mdHdhcmVfZGVzaWdu">软件设计<i class="fa fa-external-link-alt"></i></span>风格。 SOA 服务通过<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQXBwbGljYXRpb25fY29tcG9uZW50cw==">应用组件<i class="fa fa-external-link-alt"></i></span>，通过网络<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tbXVuaWNhdGlvbnNfcHJvdG9jb2w=">通信协议<i class="fa fa-external-link-alt"></i></span>的方式向其他组件提供服务。SOA 的基本原则是独立于厂商，独立于产品以及独立于技术<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。服务是一种功能的离散独立单元，可以远程访问并独立运行与更新，例如在线查询信用卡账单。</p>
<span id="more"></span>
<p>一个服务在诸多 SOA 定义中有 4 个属性<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>：</p>
<ol>
<li>它逻辑上代表具有指定结果的业务活动</li>
<li>它是自包含的</li>
<li>它对于消费者来说是<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmxhY2tfYm94">黑盒<i class="fa fa-external-link-alt"></i></span>（不可见）</li>
<li>它可能包含其他基础服务<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></li>
</ol>
<p>不同的服务可以联合起来构建大型的<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU29mdHdhcmVfYXBwbGljYXRpb25z">软件应用<i class="fa fa-external-link-alt"></i></span><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>，SOA 遵循模块化<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTW9kdWxhcl9wcm9ncmFtbWluZw==">编程思想<i class="fa fa-external-link-alt"></i></span>，SOA 集成了分布式，独立维护和独立部署的软件组件，它通过技术和标准促使组件通过网络进行通信和协作，尤其是通过 IP 网络</p>
<h2 id="概览"><a class="header-anchor" href="#概览"></a>概览</h2>
<p>在 SOA 中，服务的使用是描述怎样通过<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWV0YWRhdGE=">元数据<i class="fa fa-external-link-alt"></i></span><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWVzc2FnZV9wYXNzaW5n">传递消息<i class="fa fa-external-link-alt"></i></span>和解析消息的协议。该元数据描述了服务的功能特性和服务质量特征。SOA 目标旨在允许用户将大块的功能组合在一起来去构成一个应用，形成纯粹由现有服务构建并以临时方式组合的应用程序。一个服务会向调用者提供一个简单的接口，它抽象出作为黑盒子的底层复杂性。其他用户可以在不了解其内部实现的情况下访问这些独立服务<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>。</p>
<h2 id="定义概念"><a class="header-anchor" href="#定义概念"></a>定义概念</h2>
<p>相关的流行语服务导向促进了<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VydmljZS1vcmllbnRhdGlvbg==">面向服务<i class="fa fa-external-link-alt"></i></span>间的<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTG9vc2VfY291cGxpbmc=">松耦合<i class="fa fa-external-link-alt"></i></span>。SOA 将功能分为不同的单元或服务，哪些开发人员可以通过网络访问，以便允许用户在应用程序的生产中组合和重用它们。这些服务及其相应的消费者通过明确定义的共享格式，传递数据或通过协调两个或更多服务之间的活动来互相通信</p>
<p>2009 年 10 月发布了关于 SOA 的宣言，其中提出了 6 个核心价值，如下所示</p>
<ol>
<li><strong>商业价值</strong>比技术战略更重要</li>
<li><strong>战略目标</strong>比项目特定的利益更重要</li>
<li><strong>内在的互操作</strong>性比定制集成更重要</li>
<li><strong>共享服务</strong>比特定用途实现更重要</li>
<li><strong>灵活性</strong>比优化更重要</li>
<li><strong>演进式</strong>比追求初始化完美更重要</li>
</ol>
<p>SOA 可看作是连续统一体的一部分，其范围从旧的<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGlzdHJpYnV0ZWRfY29tcHV0aW5n">分布式计算<i class="fa fa-external-link-alt"></i></span>概念和<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTW9kdWxhcl9wcm9ncmFtbWluZw==">模块化编程<i class="fa fa-external-link-alt"></i></span><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup> <sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup>，通过 SOA，以及 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWFzaHVwXyh3ZWJfYXBwbGljYXRpb25faHlicmlkKQ==">mashups<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2FhUw==">SaaS<i class="fa fa-external-link-alt"></i></span> 和<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2xvdWRfY29tcHV0aW5n">云计算<i class="fa fa-external-link-alt"></i></span>的当前实践（有些人认为是 SOA 的后代）<sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup></p>
<h2 id="原理"><a class="header-anchor" href="#原理"></a>原理</h2>
<p>尽管许多行业已发布了自己的原则，但没有与 SOA 确切相关的行业标准，其中一些<sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup> <sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup> <sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup> <sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup>包括以下内容</p>
<h3 id="标准地服务契约"><a class="header-anchor" href="#标准地服务契约"></a><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3RhbmRhcmRpemVkX3NlcnZpY2VfY29udHJhY3Q=">标准地服务契约<i class="fa fa-external-link-alt"></i></span></h3>
<p>服务遵循标准通信协议，有一组给定服务中的一个或多个服务描述文档共同定义</p>
<h3 id="服务自治"><a class="header-anchor" href="#服务自治"></a><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3cvaW5kZXgucGhwP3RpdGxlPVNlcnZpY2VfcmVmZXJlbmNlX2F1dG9ub215JmFjdGlvbj1lZGl0JnJlZGxpbms9MQ==">服务自治<i class="fa fa-external-link-alt"></i></span></h3>
<p>服务之间的关系被最小化到它们只知道存在的等级</p>
<h3 id="服务松耦合"><a class="header-anchor" href="#服务松耦合"></a><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3cvaW5kZXgucGhwP3RpdGxlPVNlcnZpY2VfbG9jYXRpb25fdHJhbnNwYXJlbmN5JmFjdGlvbj1lZGl0JnJlZGxpbms9MQ==">服务松耦合<i class="fa fa-external-link-alt"></i></span></h3>
<p>无论网络位于何处，都可以从网络中的任何位置调用服务</p>
<h3 id="服务长寿"><a class="header-anchor" href="#服务长寿"></a><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3cvaW5kZXgucGhwP3RpdGxlPVNlcnZpY2VfbG9uZ2V2aXR5JmFjdGlvbj1lZGl0JnJlZGxpbms9MQ==">服务长寿<i class="fa fa-external-link-alt"></i></span></h3>
<p>服务应该设计为长寿，在可能的情况下，如果不需要新功能，服务应该避免强迫消费者进行更改。如果今天能调用的服务，到明天也应该能调用统一的服务</p>
<h3 id="服务抽象化"><a class="header-anchor" href="#服务抽象化"></a><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VydmljZV9hYnN0cmFjdGlvbg==">服务抽象化<i class="fa fa-external-link-alt"></i></span></h3>
<p>服务充当黑盒，它们内在的逻辑对消费者是隐藏的</p>
<h3 id="服务自治-v2"><a class="header-anchor" href="#服务自治-v2"></a><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VydmljZV9hdXRvbm9teV9wcmluY2lwbGU=">服务自治<i class="fa fa-external-link-alt"></i></span></h3>
<p>服务是独立的，从设计时和运行时的角度控制它们封装的功能</p>
<h3 id="服务无状态化"><a class="header-anchor" href="#服务无状态化"></a><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VydmljZV9zdGF0ZWxlc3NuZXNzX3ByaW5jaXBsZQ==">服务无状态化<i class="fa fa-external-link-alt"></i></span></h3>
<p>服务是无状态的，即返回请求的值或提供异常，从而最大限度的减少资源使用</p>
<h3 id="服务粒度"><a class="header-anchor" href="#服务粒度"></a><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VydmljZV9ncmFudWxhcml0eV9wcmluY2lwbGU=">服务粒度<i class="fa fa-external-link-alt"></i></span></h3>
<p>确保服务具有足够的规模和范围的原则。服务向用户提供的功能必修三相关的</p>
<h3 id="服务规范化"><a class="header-anchor" href="#服务规范化"></a>服务规范化</h3>
<p>服务被分解或合并作为最小化冗余。在某些情况下，可能无法完成，这些是需要性能优化，访问和聚合的情况<sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup></p>
<h3 id="服务可组合性"><a class="header-anchor" href="#服务可组合性"></a><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VydmljZV9jb21wb3NhYmlsaXR5X3ByaW5jaXBsZQ==">服务可组合性<i class="fa fa-external-link-alt"></i></span></h3>
<p>服务可用于组成其他服务</p>
<h3 id="服务发现"><a class="header-anchor" href="#服务发现"></a><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VydmljZV9kaXNjb3Zlcnk=">服务发现<i class="fa fa-external-link-alt"></i></span></h3>
<p>服务补充了交流元数据，通过它可以有效地发现和解释它们</p>
<h3 id="服务可重用性"><a class="header-anchor" href="#服务可重用性"></a><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VydmljZV9yZXVzYWJpbGl0eV9wcmluY2lwbGU=">服务可重用性<i class="fa fa-external-link-alt"></i></span></h3>
<p>将逻辑分为多个服务，以促进代码的复用</p>
<h3 id="服务封装"><a class="header-anchor" href="#服务封装"></a>服务<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW5jYXBzdWxhdGlvbl8oY29tcHV0ZXJfc2NpZW5jZSk=">封装<i class="fa fa-external-link-alt"></i></span></h3>
<p>许多最初未在 SOA 下计划的服务可能会被封装或成为 SOA 的一部分</p>
<h2 id="模式"><a class="header-anchor" href="#模式"></a>模式</h2>
<p>每个SOA构建块都可以扮演以下三种角色中的任何一种：</p>
<h3 id="服务提供者"><a class="header-anchor" href="#服务提供者"></a>服务提供者</h3>
<p>它创建 Web 服务并将其信息提供给服务注册。每个提供者都会讨论大量的方法，以及为什么要公开哪些服务，哪些更重要：安全性或易用性，提供服务的价格等等。提供者还必须决定应该为给定的代理服务列出服务的类别<sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup>以及使用该服务需要那种协议</p>
<h3 id="服务代理，服务注册或服务存储"><a class="header-anchor" href="#服务代理，服务注册或服务存储"></a>服务代理，服务注册或服务存储</h3>
<p>其主要功能是使用任何潜在的请求者都能获取有关 Web 服务的信息。实施的人决定代理的范围。公开的代理随处可见，但私有的代理只能向有限的公开代理开放。UDDI 是一种早期的，不再主动支持的 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2ViX1NlcnZpY2VzX0Rpc2NvdmVyeQ==">Web 服务发现<i class="fa fa-external-link-alt"></i></span>。</p>
<h3 id="服务消费者"><a class="header-anchor" href="#服务消费者"></a>服务消费者</h3>
<p>它使用各种查找操作在代理注册中查找，然后绑定到服务提供者以调用其中一个 Web 服务。无论服务消费者需要哪种服务，它们都必须通过代理，将其与相应的服务绑定，然后使用它。如果服务提供多种服务，它们可以访问多种服务。</p>
<p>服务消费者-提供者关系由<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3RhbmRhcmRpemVkX3NlcnZpY2VfY29udHJhY3Q=">标准化服务契约<i class="fa fa-external-link-alt"></i></span><sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup>管理，其中包括业务部分，功能部分和技术部分。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VydmljZV9jb21wb3NhYmlsaXR5X3ByaW5jaXBsZQ==">服务组合模式<i class="fa fa-external-link-alt"></i></span>有两种广泛的高级架构风格：<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VydmljZV9jaG9yZW9ncmFwaHkjU2VydmljZV9jaG9yZW9ncmFwaHlfYW5kX3NlcnZpY2Vfb3JjaGVzdHJhdGlvbg==">服务编排<i class="fa fa-external-link-alt"></i></span>。不受特定体系结构风格约束的较低级别的企业集成模式在 SOA 设计中任然具有相关性和合格性<sup class="footnote-ref"><a href="#fn16" id="fnref16">[16]</a></sup> <sup class="footnote-ref"><a href="#fn17" id="fnref17">[17]</a></sup> <sup class="footnote-ref"><a href="#fn18" id="fnref18">[18]</a></sup>。</p>
<h2 id="实现方法"><a class="header-anchor" href="#实现方法"></a>实现方法</h2>
<p>SOA 可以通过 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2ViX3NlcnZpY2U=">Web 服务<i class="fa fa-external-link-alt"></i></span><sup class="footnote-ref"><a href="#fn19" id="fnref19">[19]</a></sup>实现。这样做是为了使功能模块可以通过独立于平台和编程语言的标准协议访问。这些服务既可以代表新应用程序，也可以代表现有遗留系统的包装，使其具备网络功能。<sup class="footnote-ref"><a href="#fn20" id="fnref20">[20]</a></sup></p>
<p>实现通用使用 Web 服务标准构建 SOA。一个例子是 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU09BUA==">SOAP<i class="fa fa-external-link-alt"></i></span>，它在 2003 年从 W3C<sup class="footnote-ref"><a href="#fn21" id="fnref21">[21]</a></sup> 推荐 1.2 版本后获得广泛的行业认可。这些标准（也称为 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl93ZWJfc2VydmljZV9zcGVjaWZpY2F0aW9ucw==">Web 服务规范<i class="fa fa-external-link-alt"></i></span>）还提供了更强的互操作性以及对锁定到专有供应商软件的一些保护。但是，也可以使用任何其他基于服务的技术（如 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSmluaQ==">Jini<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ09SQkE=">CORBA<i class="fa fa-external-link-alt"></i></span> 或者 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUmVwcmVzZW50YXRpb25hbF9TdGF0ZV9UcmFuc2Zlcg==">REST<i class="fa fa-external-link-alt"></i></span>）实现 SOA</p>
<p>架构可以独立于特定技术运行，因此可以使用多种技术实现，包括：</p>
<ul>
<li>基于 WSDL 和 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU09BUA==">SOAP<i class="fa fa-external-link-alt"></i></span> 的 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2ViX3NlcnZpY2Vz">Web 服务<i class="fa fa-external-link-alt"></i></span></li>
<li>消息传递，例如，使用 ActiveMQ, JMS, RabbitMQ</li>
<li>RESTful HTTP，具有 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUmVwcmVzZW50YXRpb25hbF9zdGF0ZV90cmFuc2Zlcg==">Representational 状态转移<i class="fa fa-external-link-alt"></i></span>（REST），构成自己的基于约束的架构风格</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvT1BDX1VuaWZpZWRfQXJjaGl0ZWN0dXJl">OPC-UA<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2luZG93c19Db21tdW5pY2F0aW9uX0ZvdW5kYXRpb24=">WCF<i class="fa fa-external-link-alt"></i></span>（Microsoft 的 Web 服务实现，构成 WCF 的一部分）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQXBhY2hlX1RocmlmdA==">Apache Thrift<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR1JQQw==">gRPC<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU09SQ0VS">SORCER<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>实现可以使用这些协议中的一个或多个，例如，可以使用文件系统机制来遵循符合 SOA 概念的进程间定义的接口规范来传递数据。关键是具有已定义接口的独立服务，可以调用它们以标准方式执行其任务，而无需预先知道调用应用程序的服务，并且没有应用程序具有或需要知道服务如何实际执行其任务。SOA 支持开发通过松耦合和可<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW50ZXJvcGVyYWJsZQ==">互操作<i class="fa fa-external-link-alt"></i></span>的服务构建的应用程序</p>
<p>这些服务独立于底层平台和编程语言的正式定义（或契约，例如 WSDL）进行互操作。接口定义<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW5mb3JtYXRpb25faGlkaW5n">隐藏了实施<i class="fa fa-external-link-alt"></i></span>特定语言的服务实现。因此，基于 SOA 的系统可以独立于开发技术和平台（例如Java，.NET等）运行。例如，运行在.NET平台上的 C# 和 用 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSmF2YV9QbGF0Zm9ybSxfRW50ZXJwcmlzZV9FZGl0aW9u">JavaEE<i class="fa fa-external-link-alt"></i></span> 平台上运行的 Java 编写的服务都可以公共复合应用程序（或客户端）使用。在任一平台上运行的应用程序也可以使用在另一个平台上运行的服务作为重用的 Web 服务。托管环境还可以包括 COBOL 遗留系统并将其作为软件服务提供。<sup class="footnote-ref"><a href="#fn22" id="fnref22">[22]</a></sup></p>
<p>诸如 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQlBFTA==">BPEL<i class="fa fa-external-link-alt"></i></span> 之类的<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSGlnaC1sZXZlbF9wcm9ncmFtbWluZ19sYW5ndWFnZQ==">高级编程语言<i class="fa fa-external-link-alt"></i></span>以及诸如 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV1MtQ0RM">WS-CDL<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV1MtQ29vcmRpbmF0aW9u">WS-Coordination<i class="fa fa-external-link-alt"></i></span> 之类的规范通过提供一种定义和支持将细粒度服务编排成更粗粒度的业务服务的方法来扩展服务的概念，架构师可以将其合并到<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tcG9zaXRlX2FwcGxpY2F0aW9ucw==">复合应用<i class="fa fa-external-link-alt"></i></span>程序或<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW50ZXJwcmlzZV9wb3J0YWw=">门户<i class="fa fa-external-link-alt"></i></span>中实现的工作流和业务流中。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VydmljZS1vcmllbnRlZF9tb2RlbGluZw==">面向服务的建模<i class="fa fa-external-link-alt"></i></span>是一个 SOA 架构，可识别指导 SOA 从业者对其面向服务的资产进行概念化，分析，设计和构建的各种规程。<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VydmljZS1vcmllbnRlZF9tb2RlbGluZyNTZXJ2aWNlLW9yaWVudGVkX21vZGVsaW5nX2ZyYW1ld29yaw==">面向服务的建模框架（SOMF）<i class="fa fa-external-link-alt"></i></span>提供了一种建模语言和一个工作架构映射，描述了有助于成功的面向服务的建模方法的各种组件。它说明了识别服务开发方案的“做什么”方面的主要元素。该模型使从业者能够制定<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUHJvamVjdF9wbGFu">项目计划<i class="fa fa-external-link-alt"></i></span>并确定面向服务的计划的里程碑。SOMF 还提供了一种通用的建模符号，已解决业务和 IT 组织之间的一致性问题。</p>
<h2 id="组织利益"><a class="header-anchor" href="#组织利益"></a>组织利益</h2>
<p>一些<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW50ZXJwcmlzZV9hcmNoaXRlY3Q=">企业架构师<i class="fa fa-external-link-alt"></i></span>认为，SOA 可以帮助企业更快，更经济地响应不断变化的市场条件。<sup class="footnote-ref"><a href="#fn23" id="fnref23">[23]</a></sup>这种体系结构促进了宏（服务）级别的重用，而不是微（类）级别的重用。它还可以简化现有 IT（传统）资产的互联和使用。</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1561944855/blog/elements_of_soa.png" alt="SOA的元素，由Dirk Krafzig，Karl Banke和Dirk Slama撰写 "></p>
<p>使用SOA，我们的想法是组织可以从整体上看待问题。企业拥有更多地整体控制权。从理论上讲，不会有大量的开发人员使用任何工具集让他们满意，但他们将编码为业务中设定标准。他们还可以开发企业级 SOA，封装面向业务的基础架构。SOA 被描述为汽车驾驶员提供效率的高速公路系统。关键在于，如果每个人都有车，但在任何地方都没有高速公路，那么事情就会受到限制和混乱，无论是视图快速或有效地到达任何地方。IBM Web 服务副总裁 Michael Liebow 表示 SOA 是“建设的高速公路”。<sup class="footnote-ref"><a href="#fn25" id="fnref25">[25]</a></sup></p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1561944919/blog/soa_meta-model.svg" alt="SOA元模型，The Linthicum Group，2007"></p>
<p><font color=#FF0000>在某些方面，SOA可以被视为架构演变而不是革命</font>。它捕获了以前软件架构的许多<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmVzdF9wcmFjdGljZQ==">最佳实践<i class="fa fa-external-link-alt"></i></span>。例如，在通信系统中，很少开发使用真正静态绑定与网络中的其他设备通信的解决方案。通过采用 SOA 方法，此类系统可以将自己定位为强调定义明确，高度可互操作的接口的重要性。SOA 的其他前身包括<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tcG9uZW50LWJhc2VkX3NvZnR3YXJlX2VuZ2luZWVyaW5n">基于组件的软件工程<i class="fa fa-external-link-alt"></i></span>和远程对象的面向对象分析和设计（OOAD），例如，在 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ09SQkE=">CORBA<i class="fa fa-external-link-alt"></i></span> 中。</p>
<p>服务包括仅通过正式定义的页面可用的独立功能单元。服务可以是某种易于生产和改进的“纳米企业”。服务也可以是作为子下属服务的协调工作而构建的“大型企业”。SOA 的成熟部署有效地定义了组织的 API。</p>
<p>将服务实施视为大型项目的单独项目的原因包括：</p>
<ol>
<li>分离将业务概念推广到业务，即服务可以快速独立地从组织中常见的较大且移动较慢的项目中提供。业务开始了解回调服务的系统和简化的用户界面。这提倡<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQWdpbGl0eQ==">敏捷<i class="fa fa-external-link-alt"></i></span>。也就是说，它促进了业务创新并加快了产品上市时间<sup class="footnote-ref"><a href="#fn26" id="fnref26">[26]</a></sup>。</li>
<li>分离促进了服务于消费项目的脱钩。这样可以鼓励良好的设计，因为服务的设计不需要知道消费者是谁。</li>
<li>服务的文档和测试文件未嵌入较大项目的详细信息中。当服务需要在后续需要重用时，这很重要。</li>
</ol>
<p>SOA 承诺间接简化测试。服务是自治的，无状态的，具有完全记录的接口，并且与实现的关注点是分开的。如果组织拥有适当定义的测试数据，则会构建响应的存根，以便在构建服务时对测试数据做出反应。可以构建测试环境，其中原始和超出范围的服务是存根，而网格的其余ubuf 是完整服务的测试部署。由于每个接口都有完整的文档，并附有完整的回归测试文档，因此可以轻松识别测试服务中的问题。测试演变为仅仅验证测试服务是否根据其文档运行，并发现环境中所有服务的文档和测试用例存在的差距。管理<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQWdpbGl0eQ==">幂等<i class="fa fa-external-link-alt"></i></span>服务的数据状态是唯一的复杂性。</p>
<p>实例可能有助于将服务记录到有用的级别。Java community Process 中的一些 API 文档提供了良好的示例。由于这些是详尽无遗漏的，工作人员通常只使用重要的子集。JSR-89 的 ossjsa.pdf 文件中举例说明了这样做一个文件<sup class="footnote-ref"><a href="#fn27" id="fnref27">[27]</a></sup>。</p>
<h2 id="批评"><a class="header-anchor" href="#批评"></a>批评</h2>
<p>SOA 已与 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2ViX3NlcnZpY2U=">Web 服务<i class="fa fa-external-link-alt"></i></span>混淆<sup class="footnote-ref"><a href="#fn28" id="fnref28">[28]</a></sup>，但是，Web 服务只是实现构成 SOA 风格的模式的一种选择。在非本机或二进制形式的远程过程调用（RPC）的情况下，应用程序可能运行的更慢并且需要更多地处理能力，从而增加了成本。大多数实现都会产生这些开销，但 SOA 可以使用技术实现（例如，<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSmF2YV9CdXNpbmVzc19JbnRlZ3JhdGlvbg==">Java Business Integration（JBI）<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2luZG93c19Db21tdW5pY2F0aW9uX0ZvdW5kYXRpb24=">Windows Communication Foundation（WCF）<i class="fa fa-external-link-alt"></i></span>和 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGF0YV9kaXN0cmlidXRpb25fc2VydmljZQ==">data distribution service（DDS）<i class="fa fa-external-link-alt"></i></span>），它们不依赖与远程过程调用或通过 XML 进行转换。与此同时，新兴的开源 XML 解析技术（如 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVlRELVhNTA==">VTD-XML<i class="fa fa-external-link-alt"></i></span>）和各种 XML 兼容的二进制格式有望显著提高 SOA 性能。使用 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSlNPTg==">JSON<i class="fa fa-external-link-alt"></i></span> 而不是 XML 实现的服务不会受到这种性能的问题的影响<sup class="footnote-ref"><a href="#fn29" id="fnref29">[29]</a></sup> <sup class="footnote-ref"><a href="#fn30" id="fnref30">[30]</a></sup> <sup class="footnote-ref"><a href="#fn31" id="fnref31">[31]</a></sup>。</p>
<p>有状态服务要求消费者和提供者共享相同的特定于消费者的上下文，该上下文包含在提供者和消费者之间交换的消息中或由其引入。如果服务提供者需要为每个消费者保留共享上下文，则此约束的缺点是它可能会降低服务提供者的整体可伸缩性。它还增加了服务提供者和消费者之间的耦合，使交换服务提供者更加困难<sup class="footnote-ref"><a href="#fn32" id="fnref32">[32]</a></sup>。最终，一些批评者认为 SOA 服务仍然受到他们所代表的应用程序的限制<sup class="footnote-ref"><a href="#fn33" id="fnref33">[33]</a></sup>。</p>
<p>SOA 的体系结构面临的主要挑战是管理元数据。基于 SOA 的环境包括许多彼此之间进行通信以执行任务的服务。由于设计可能涉及多个服务一起工作，因此应用程序可能会产生数百万条消息。进一步的服务可能属于不同的组织甚至是竞争公司，造成巨大的信任问题。因此 SOA 治理进入了事务的计划<sup class="footnote-ref"><a href="#fn34" id="fnref34">[34]</a></sup>。</p>
<p>SOA 面临的另一个主要问题是缺乏统一的测试架构。没有工具可以提供在 SOA 的体系结构中测试这些服务所需的功能。困难的主要原因是：<sup class="footnote-ref"><a href="#fn35" id="fnref35">[35]</a></sup></p>
<ul>
<li>异质性和解决方案的复杂性</li>
<li>由于自主服务的集成，大量的测试组合</li>
<li>包含来自不同和竞争供应商的服务</li>
<li>由于新功能和服务的可用性，<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGxhdGZvcm1fYXNfYV9zZXJ2aWNl">平台<i class="fa fa-external-link-alt"></i></span>不断变化</li>
</ul>
<p>请参阅 <span class="exturl" data-url="aHR0cDovL2Ryb3BzLmRhZ3N0dWhsLmRl">drops.dagstuhl.de<i class="fa fa-external-link-alt"></i></span><sup class="footnote-ref"><a href="#fn36" id="fnref36">[36]</a></sup>，了解有关<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VydmljZS1vcmllbnRlZF9tb2RlbGluZw==">软件服务工程<i class="fa fa-external-link-alt"></i></span>的其他挑战，部分解决方案和研究路线图</p>
<h2 id="扩展和变体"><a class="header-anchor" href="#扩展和变体"></a>扩展和变体</h2>
<h3 id="事件驱动的体系结构"><a class="header-anchor" href="#事件驱动的体系结构"></a>事件驱动的体系结构</h3>
<p>主要文章：<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXZlbnQtZHJpdmVuX2FyY2hpdGVjdHVyZQ==">事件驱动的架构<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Web2-0"><a class="header-anchor" href="#Web2-0"></a>Web2.0</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVGltX08lMjdSZWlsbHk=">Tim O’Reilly<i class="fa fa-external-link-alt"></i></span> 创造了“<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2ViXzIuMA==">Web2.0<i class="fa fa-external-link-alt"></i></span>”一词来描述一种快速增长的基于网络的应用程序<sup class="footnote-ref"><a href="#fn37" id="fnref37">[37]</a></sup>。经历了广泛报道的主题涉及 Web2.0与 SOA 体系机构之间的关系。</p>
<p>SOA 是将应用程序逻辑封装在具有统一定义的接口的服务中并通过发现机制公开可用的哲学。复杂性-隐藏和重用的概念，以及松耦合服务的概念，激发了研究人员详细阐述两种哲学，SOA 和 Web2.0及其各自应用之间的相似性。一些人认为 Web2.0和 SOA 具有显著不同的元素，因此不能被视为“平行哲学”，而其他人认为这两个概念是互补的，并将 Web2.0视为全球 SOA<sup class="footnote-ref"><a href="#fn38" id="fnref38">[38]</a></sup>。</p>
<p>Web2.0和 SOA 的理念满足了不同的用户需求，从而暴露了设计方面的差异以及实际应用中使用的技术。但是，截止 2008 年，用例展示了结合 Web2.0和 SOA 技术和原则的潜力<sup class="footnote-ref"><a href="#fn38" id="fnref38:1">[38:1]</a></sup>。</p>
<h3 id="微服务"><a class="header-anchor" href="#微服务"></a>微服务</h3>
<p>主要文章：<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWljcm9zZXJ2aWNlcw==">微服务<i class="fa fa-external-link-alt"></i></span></p>
<p>微服务是对用于构建<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGlzdHJpYnV0ZWRfY29tcHV0aW5n">分布式软件系统<i class="fa fa-external-link-alt"></i></span>的面向服务的体系结构的现代解释。微服务架构<sup class="footnote-ref"><a href="#fn39" id="fnref39">[39]</a></sup>中的服务是通过<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tcHV0ZXJfbmV0d29yaw==">网络<i class="fa fa-external-link-alt"></i></span>互相通信以实现目标的<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUHJvY2Vzc18oY29tcHV0aW5nKQ==">过程<i class="fa fa-external-link-alt"></i></span>。这些服务使用技术不可知<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tbXVuaWNhdGlvbnNfcHJvdG9jb2w=">协议<i class="fa fa-external-link-alt"></i></span><sup class="footnote-ref"><a href="#fn40" id="fnref40">[40]</a></sup>，这有助于封装语言和框架的选择，使他们的选择成为服务内部的一个问题。<font color=#FF0000>微服务是 SOA 的一种新的实现方法</font>，自 2014 年（以及 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGV2T3Bz">DevOps<i class="fa fa-external-link-alt"></i></span> 推出以后）开始流行，并且强调持续部署和其他的=敏捷实践<sup class="footnote-ref"><a href="#fn41" id="fnref41">[41]</a></sup>。</p>
<p>微服务没有一个共同商定的定义。在文献中可以找到以下特征和原理：</p>
<ul>
<li>细粒度接口（可独立部署的服务）</li>
<li>业务驱动的开发（例如域驱动设计）</li>
<li>IDEAL 云应用架构</li>
<li>多语言编程和持久化存储</li>
<li>轻量级容器部署</li>
<li>分散的持续交付</li>
<li>DevOps 提供全面的服务监控</li>
</ul>
<h2 id="其他"><a class="header-anchor" href="#其他"></a>其他</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTG9vc2VfY291cGxpbmc=">松耦合<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvT0FTSVNfU09BX1JlZmVyZW5jZV9Nb2RlbA==">OASIS SOA 参考模型<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VydmljZV9ncmFudWxhcml0eV9wcmluY2lwbGU=">服务粒度原则<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU09BX2dvdmVybmFuY2U=">SOA 治理<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU29mdHdhcmVfYXJjaGl0ZWN0dXJl">软件架构<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VydmljZS1vcmllbnRlZF9jb21tdW5pY2F0aW9ucw==">面向服务的通信<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VydmljZS1vcmllbnRlZF9kZXZlbG9wbWVudF9vZl9hcHBsaWNhdGlvbnM=">面向服务的应用程序开发<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2VydmljZS1vcmllbnRlZF9kaXN0cmlidXRlZF9hcHBsaWNhdGlvbnM=">面向服务的分布式应用程序<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>“<span class="exturl" data-url="aHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTYwMjA2MTMyNTQyL2h0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvYmI4MzMwMjIuYXNweA==">Chapter 1: Service Oriented Architecture (SOA)<i class="fa fa-external-link-alt"></i></span>”. <span class="exturl" data-url="aHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbQ==">msdn.microsoft.com<i class="fa fa-external-link-alt"></i></span>. Archived from <span class="exturl" data-url="aHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9iYjgzMzAyMi5hc3B4">the original<i class="fa fa-external-link-alt"></i></span> on February 6, 2016. Retrieved September 21, 2016. <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>“<span class="exturl" data-url="aHR0cHM6Ly9wdWJsaWNhdGlvbnMub3Blbmdyb3VwLm9yZy9zdGFuZGFyZHMvc29h">Service-Oriented Architecture Standards - The Open Group<i class="fa fa-external-link-alt"></i></span>”. <span class="exturl" data-url="aHR0cDovL3d3dy5vcGVuZ3JvdXAub3Jn">www.opengroup.org<i class="fa fa-external-link-alt"></i></span>. <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>“<span class="exturl" data-url="aHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTYwODE5MTQxMzAzL2h0dHA6Ly9vcGVuZ3JvdXAub3JnL3NvYS9zb3VyY2UtYm9vay9zb2Evc29hLmh0bQ==">What Is SOA?<i class="fa fa-external-link-alt"></i></span>”. <span class="exturl" data-url="aHR0cDovL3d3dy5vcGVuZ3JvdXAub3Jn">www.opengroup.org<i class="fa fa-external-link-alt"></i></span>. Archived from <span class="exturl" data-url="aHR0cDovL3d3dy5vcGVuZ3JvdXAub3JnL3NvYS9zb3VyY2UtYm9vay9zb2Evc29hLmh0bQ==">the original<i class="fa fa-external-link-alt"></i></span> on August 19, 2016. Retrieved September 21, 2016. <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>Velte, Anthony T. (2010). Cloud Computing: A Practical Approach. McGraw Hill. <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW50ZXJuYXRpb25hbF9TdGFuZGFyZF9Cb29rX051bWJlcg==">ISBN<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3BlY2lhbDpCb29rU291cmNlcy85NzgtMC0wNy0xNjI2OTQtMQ==">978-0-07-162694-1<i class="fa fa-external-link-alt"></i></span>. <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p>“<span class="exturl" data-url="aHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMDgxMjA5MTIwOTE2L2h0dHA6Ly93d3ctMTI4LmlibS5jb20vZGV2ZWxvcGVyd29ya3MvbGlicmFyeS93cy1taWdyYXRlc29hLw==">Migrating to a service-oriented architecture, Part 1<i class="fa fa-external-link-alt"></i></span>”. December 9, 2008. Archived from the original on December 9, 2008. Retrieved September 21, 2016. <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p>Michael Bell (2008). “Introduction to Service-Oriented Modeling”. Service-Oriented Modeling: Service Analysis, Design, and Architecture. Wiley &amp; Sons. p. 3. <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW50ZXJuYXRpb25hbF9TdGFuZGFyZF9Cb29rX051bWJlcg==">ISBN<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3BlY2lhbDpCb29rU291cmNlcy85NzgtMC00NzAtMTQxMTEtMw==">978-0-470-14111-3<i class="fa fa-external-link-alt"></i></span>. <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p>Thomas Erl (June 2005). About the Principles. <span class="exturl" data-url="aHR0cDovL1NlcnZpY2VvcmllbnRhdGlvbi5vcmc=">Serviceorientation.org<i class="fa fa-external-link-alt"></i></span> <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn8" class="footnote-item"><p>“<span class="exturl" data-url="aHR0cDovL2Fwc2Jsb2cuYnVydG9uZ3JvdXAuY29tLzIwMDkvMDEvc29hLWlzLWRlYWQtbG9uZy1saXZlLXNlcnZpY2VzLmh0bWw=">Application Platform Strategies Blog: SOA is Dead; Long Live Services<i class="fa fa-external-link-alt"></i></span>”. <span class="exturl" data-url="aHR0cDovL0Fwc2Jsb2cuYnVydG9uZ3JvdXAuY29t">Apsblog.burtongroup.com<i class="fa fa-external-link-alt"></i></span>. January 5, 2009. Retrieved August 13, 2012. <a href="#fnref8" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn9" class="footnote-item"><p>Yvonne Balzer <span class="exturl" data-url="aHR0cDovL3d3dy0xMjguaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy93ZWJzZXJ2aWNlcy9saWJyYXJ5L3dzLWltcHJvdmVzb2Ev">Improve your SOA project plans<i class="fa fa-external-link-alt"></i></span>, IBM, July 16, 2004 <a href="#fnref9" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn10" class="footnote-item"><p>Microsoft Windows Communication Foundation team (2012). “<span class="exturl" data-url="aHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2JiOTcyOTU0LmFzcHg=">Principles of Service Oriented Design<i class="fa fa-external-link-alt"></i></span>”. <span class="exturl" data-url="aHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbQ==">msdn.microsoft.com<i class="fa fa-external-link-alt"></i></span>. Retrieved September 3, 2012. <a href="#fnref10" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn11" class="footnote-item"><p>Principles by <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVGhvbWFzX0VybA==">Thomas<i class="fa fa-external-link-alt"></i></span> Erl of SOA Systems Inc. <span class="exturl" data-url="aHR0cDovL3NvYXByaW5jaXBsZXMuY29t">eight specific service-orientation principles<i class="fa fa-external-link-alt"></i></span> <a href="#fnref11" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn12" class="footnote-item"><p>M. Hadi Valipour; Bavar AmirZafari; Kh. Niki Maleki; Negin Daneshpour (2009). “A brief survey of software architecture concepts and service oriented architecture”. 2009 2nd IEEE International Conference on Computer Science and Information Technology. pp. 34–38. <span class="exturl" data-url="aHR0cHM6Ly9kb2kub3JnLzEwLjExMDklMkZJQ0NTSVQuMjAwOS41MjM1MDA0">doi:10.1109/ICCSIT.2009.5235004<i class="fa fa-external-link-alt"></i></span>. <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW50ZXJuYXRpb25hbF9TdGFuZGFyZF9Cb29rX051bWJlcg==">ISBN<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3BlY2lhbDpCb29rU291cmNlcy85NzgtMS00MjQ0LTQ1MTktNg==">978-1-4244-4519-6<i class="fa fa-external-link-alt"></i></span>. <a href="#fnref12" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn13" class="footnote-item"><p>Tony Shan (2004). “Building a service-oriented e Banking platform”. IEEE International Conference on Services Computing, 2004. (SCC 2004). Proceedings. 2004. pp. 237–244. <span class="exturl" data-url="aHR0cHM6Ly9kb2kub3JnLzEwLjExMDklMkZTQ0MuMjAwNC4xMzU4MDEx">doi:10.1109/SCC.2004.1358011<i class="fa fa-external-link-alt"></i></span>. <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW50ZXJuYXRpb25hbF9TdGFuZGFyZF9Cb29rX051bWJlcg==">ISBN<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3BlY2lhbDpCb29rU291cmNlcy85NzgtMC03Njk1LTIyMjUtOA==">978-0-7695-2225-8.2004<i class="fa fa-external-link-alt"></i></span> <a href="#fnref13" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn14" class="footnote-item"><p>Duan, Yucong; Narendra, Nanjangud; Du, Wencai; Wang, Yongzhi; Zhou, Nianjun. “<span class="exturl" data-url="aHR0cDovL2llZWV4cGxvcmUuaWVlZS5vcmcvZG9jdW1lbnQvNjkyODkxNS8=">Exploring Cloud Service Brokering from an Interface Perspective<i class="fa fa-external-link-alt"></i></span>”. <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSUVFRQ==">IEEE<i class="fa fa-external-link-alt"></i></span>. <a href="#fnref14" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn15" class="footnote-item"><p>Duan, Yucong. “<span class="exturl" data-url="aHR0cDovL2llZWV4cGxvcmUuaWVlZS5vcmcvZG9jdW1lbnQvNjI5OTM3NS8=">A Survey on Service Contract<i class="fa fa-external-link-alt"></i></span>”. <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSUVFRQ==">IEEE<i class="fa fa-external-link-alt"></i></span>. <a href="#fnref15" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn16" class="footnote-item"><p>Olaf Zimmermann, Cesare Pautasso, Gregor Hohpe, Bobby Woolf (2016). “<span class="exturl" data-url="aHR0cDovL2llZWV4cGxvcmUuaWVlZS5vcmcvZG9jdW1lbnQvNzM2ODAwNy8=">A Decade of Enterprise Integration Patterns<i class="fa fa-external-link-alt"></i></span>”. IEEE Software. 33 (1): 13–19. <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGlnaXRhbF9vYmplY3RfaWRlbnRpZmllcg==">doi<i class="fa fa-external-link-alt"></i></span>:<span class="exturl" data-url="aHR0cHM6Ly9kb2kub3JnLzEwLjExMDklMkZNUy4yMDE2LjEx">10.1109/MS.2016.11<i class="fa fa-external-link-alt"></i></span>. <a href="#fnref16" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn17" class="footnote-item"><p>Rotem-Gal-Oz, Arnon (2012). SOA Patterns. Manning Publications. <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW50ZXJuYXRpb25hbF9TdGFuZGFyZF9Cb29rX051bWJlcg==">ISBN<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3BlY2lhbDpCb29rU291cmNlcy85NzgtMTkzMzk4ODI2OQ==">978-1933988269<i class="fa fa-external-link-alt"></i></span>. <a href="#fnref17" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn18" class="footnote-item"><p>K. Julisch et al., <span class="exturl" data-url="aHR0cDovL3NvYWRlY2lzaW9ucy5vcmcvZG93bmxvYWQvQ29tcGxpYW5jZUJ5RGVzaWduLUFBTS5wZGY=">Compliance by Design – Bridging the Chasm between Auditors and IT Architects<i class="fa fa-external-link-alt"></i></span>. Computers &amp; Security, Elsevier. Volume 30, Issue 6-7, Sep.-Oct. 2011. <a href="#fnref18" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn19" class="footnote-item"><p>Brandner, M., Craes, M., Oellermann, F., Zimmermann, O., Web Services-Oriented Architecture in Production in the Finance Industry, Informatik-Spektrum 02/2004, Springer-Verlag, 2004 <a href="#fnref19" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn20" class="footnote-item"><p>“<span class="exturl" data-url="aHR0cDovL3d3dy5pYm0uY29tL3N1cHBvcnQva25vd2xlZGdlY2VudGVyL2VuL1NTRVFUUF82LjEuMC9jb20uaWJtLndlYnNwaGVyZS5iYXNlLmlzZXJpZXMuZG9jL2luZm8vaXNlcmllcy9hZS9jd2JzX3NvYXdicy5odG1s">www.ibm.com<i class="fa fa-external-link-alt"></i></span>”. Retrieved September 10, 2016. <a href="#fnref20" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn21" class="footnote-item"><p>“<span class="exturl" data-url="aHR0cDovL3d3dy53My5vcmcvMjAwMy8wNi9zb2FwMTItcHJlc3NyZWxlYXNl">SOAP Version 1.2 の公開について (W3C 勧告)<i class="fa fa-external-link-alt"></i></span>” (in Japanese). <span class="exturl" data-url="aHR0cDovL1czLm9yZw==">W3.org<i class="fa fa-external-link-alt"></i></span>. Retrieved August 13, 2012. <a href="#fnref21" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn22" class="footnote-item"><p>Okishima, Haruhiru (2006). “. <span class="exturl" data-url="aHR0cDovL3d3dy5mdWppdHN1LmNvbS9nbG9iYWwvZG9jdW1lbnRzL2Fib3V0L3Jlc291cmNlcy9wdWJsaWNhdGlvbnMvZnN0ai9hcmNoaXZlcy92b2w0Mi0zL3BhcGVyMTgucGRm">“Case Study of System Architecture that use COBOL assets”<i class="fa fa-external-link-alt"></i></span>” (PDF). <a href="#fnref22" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn23" class="footnote-item"><p>Christopher Koch <span class="exturl" data-url="aHR0cDovL3d3dy5jaW8uY29tLmF1L2luZGV4LnBocC9pZDsxMzUwMTQwNzA4">A New Blueprint For The Enterprise<i class="fa fa-external-link-alt"></i></span>, CIO Magazine, March 1, 2005 <a href="#fnref23" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn24" class="footnote-item"><p>Enterprise SOA. Prentice Hall, 2005 <a href="#fnref24" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn25" class="footnote-item"><p>Elizabeth Millard (January 2005). “Building a Better Process”. Computer User. Page 20. <a href="#fnref25" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn26" class="footnote-item"><p>Brayan Zimmerli (November 11, 2009) <span class="exturl" data-url="aHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAxMTA1MDYzNTQ1L2h0dHA6Ly93d3cuYnJheWFuLmNvbS9wcm9qZWN0cy9CZW5lZml0c09mU09BL2RlZmF1bHQuaHRt">Business Benefits of SOA<i class="fa fa-external-link-alt"></i></span>, University of Applied Science of Northwestern Switzerland, School of Business <a href="#fnref26" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn27" class="footnote-item"><p>J<span class="exturl" data-url="aHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTEwNzI2MDcwODEwL2h0dHBzOi8vY2RzLnN1bi5jb20vaXMtYmluL0lOVEVSU0hPUC5lbmZpbml0eS9XRlMvQ0RTLUNEU19EZXZlbG9wZXItU2l0ZS9lbl9VUy8tL1VTRC9WaWV3UHJvZHVjdERldGFpbC1TdGFydD9Qcm9kdWN0UmVmPTc4NTQtb3NzX3NlcnZpY2VfYWN0aXZhdGlvbi0xLjAtZnItc3BlYy1vdGgtSlNwZWMlNDBDRFMtQ0RTX0RldmVsb3Blcg==">SR-000089 OSS Service Activation API Specification 1.0 Final Release<i class="fa fa-external-link-alt"></i></span>. <span class="exturl" data-url="aHR0cDovL3N1bi5jb20=">sun.com<i class="fa fa-external-link-alt"></i></span> <a href="#fnref27" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn28" class="footnote-item"><p>Joe McKendrick. “<span class="exturl" data-url="aHR0cDovL3d3dy56ZG5ldC5jb20vYmxvZy9zZXJ2aWNlLW9yaWVudGVkL2JyYXktc29hLXRvby1jb21wbGV4LWp1c3QtdmVuZG9yLWJzLzU5Nw==">Bray: SOA too complex; ‘just vendor BS’<i class="fa fa-external-link-alt"></i></span>”. ZDNet. <a href="#fnref28" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn29" class="footnote-item"><p>Jimmy Zhang (February 20, 2008) “<span class="exturl" data-url="aHR0cDovL3htbC5zeXMtY29uLmNvbS9yZWFkLzQ1MzA4Mi5odG0=">Index XML Documents with VTD-XML<i class="fa fa-external-link-alt"></i></span>”. XML Journal. <a href="#fnref29" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn30" class="footnote-item"><p>Jimmy Zhang (August 5, 2008) “<span class="exturl" data-url="aHR0cDovL3NvYS5zeXMtY29uLmNvbS9yZWFkLzI1MDUxMi5odG0=">i-Technology Viewpoint: The Performance Woe of Binary XML<i class="fa fa-external-link-alt"></i></span>”. Microservices Journal. <a href="#fnref30" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn31" class="footnote-item"><p>Jimmy Zhang (January 9, 2008) “<span class="exturl" data-url="aHR0cDovL3d3dy5kZXZ4LmNvbS94bWwvQXJ0aWNsZS8zNjM3OQ==">Manipulate XML Content the Ximple Way<i class="fa fa-external-link-alt"></i></span>”. <span class="exturl" data-url="aHR0cDovL2RldnguY29t">devx.com<i class="fa fa-external-link-alt"></i></span>. <a href="#fnref31" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn32" class="footnote-item"><p>“<span class="exturl" data-url="aHR0cDovL3d3dy5qcG1vcmdlbnRoYWwuY29tL21vcmdlbnRoYWwvP3A9MzE=">The Reason SOA Isn’t Delivering Sustainable Software<i class="fa fa-external-link-alt"></i></span>”. <span class="exturl" data-url="aHR0cDovL2pwbW9yZ2VudGhhbC5jb20=">jpmorgenthal.com<i class="fa fa-external-link-alt"></i></span>. June 19, 2009. Retrieved June 27, 2009. <a href="#fnref32" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn33" class="footnote-item"><p>“<span class="exturl" data-url="aHR0cDovL3d3dy56ZG5ldC5jb20vYXJ0aWNsZS9zb2Etc2VydmljZXMtc3RpbGwtdG9vLWNvbnN0cmFpbmVkLWJ5LWFwcGxpY2F0aW9ucy10aGV5LXJlcHJlc2VudC8=">SOA services still too constrained by applications they represent<i class="fa fa-external-link-alt"></i></span>”. <span class="exturl" data-url="aHR0cDovL3pkbmV0LmNvbQ==">zdnet.com<i class="fa fa-external-link-alt"></i></span>. June 27, 2009. Retrieved June 27, 2009. <a href="#fnref33" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn34" class="footnote-item"><p>“<span class="exturl" data-url="aHR0cHM6Ly93d3cub3Blbmdyb3VwLm9yZy9zb2Evc291cmNlLWJvb2svc29hX3JlZmFyY2gvZ292ZXJuYW5jZS5odG0=">Governance Layer<i class="fa fa-external-link-alt"></i></span>”. <span class="exturl" data-url="aHR0cDovL3d3dy5vcGVuZ3JvdXAub3Jn">www.opengroup.org<i class="fa fa-external-link-alt"></i></span>. Retrieved September 22, 2016. <a href="#fnref34" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn35" class="footnote-item"><p>“<span class="exturl" data-url="aHR0cDovL3dzbzIuY29tL2xpYnJhcnkvYXJ0aWNsZXMvMjAxNC8wNC9ob3ctdG8tZWZmaWNpZW50bHktdGVzdC1zZXJ2aWNlLW9yaWVudGVkLWFyY2hpdGVjdHVyZS8=">How to Efficiently Test Service Oriented Architecture | WSO2 Inc<i class="fa fa-external-link-alt"></i></span>”. <span class="exturl" data-url="aHR0cDovL3dzbzIuY29t">wso2.com<i class="fa fa-external-link-alt"></i></span>. Retrieved September 22, 2016. <a href="#fnref35" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn36" class="footnote-item"><p><span class="exturl" data-url="aHR0cDovL2Ryb3BzLmRhZ3N0dWhsLmRlL29wdXMvdm9sbHRleHRlLzIwMDkvMjA0Ni9wZGYvMDkwMjFfYWJzdHJhY3RzX2NvbGxlY3Rpb24uMjA0Ni5wZGY=">http://drops.dagstuhl.de/opus/volltexte/2009/2046/pdf/09021_abstracts_collection.2046.pdf<i class="fa fa-external-link-alt"></i></span> <a href="#fnref36" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn37" class="footnote-item"><p>“<span class="exturl" data-url="aHR0cDovL3d3dy5vcmVpbGx5bmV0LmNvbS9wdWIvYS9vcmVpbGx5L3RpbS9uZXdzLzIwMDUvMDkvMzAvd2hhdC1pcy13ZWItMjAuaHRtbA==">What Is Web 2.0<i class="fa fa-external-link-alt"></i></span>”. Tim O’Reilly. September 30, 2005. Retrieved June 10, 2008. <a href="#fnref37" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn38" class="footnote-item"><p>Christoph Schroth &amp; Till Janner (2007). “<span class="exturl" data-url="aHR0cDovL3d3dy5hbGV4YW5kcmlhLnVuaXNnLmNoL1B1Ymxpa2F0aW9uZW4vMzcyNzA=">Web 2.0 and SOA: Converging Concepts Enabling the Internet of Services<i class="fa fa-external-link-alt"></i></span>”. IT Professional 9 (2007), Nr. 3, pp. 36–41, IEEE Computer Society. Retrieved February 23, 2008. <a href="#fnref38" class="footnote-backref">↩︎</a> <a href="#fnref38:1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn39" class="footnote-item"><p>Dragoni, Nicola; Giallorenzo, Saverio; Alberto Lluch Lafuente; Mazzara, Manuel; Montesi, Fabrizio; Mustafin, Ruslan; Safina, Larisa (2016). “Microservices: yesterday, today, and tomorrow”. <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQXJYaXY=">arXiv<i class="fa fa-external-link-alt"></i></span>:<span class="exturl" data-url="aHR0cHM6Ly9hcnhpdi5vcmcvYWJzLzE2MDYuMDQwMzZ2MQ==">1606.04036v1<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9hcnhpdi5vcmcvYXJjaGl2ZS9jcy5TRQ==">cs.SE<i class="fa fa-external-link-alt"></i></span>. <a href="#fnref39" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn40" class="footnote-item"><p>James Lewis and Martin Fowler. “<span class="exturl" data-url="aHR0cDovL21hcnRpbmZvd2xlci5jb20vYXJ0aWNsZXMvbWljcm9zZXJ2aWNlcy5odG1s">Microservices<i class="fa fa-external-link-alt"></i></span>”. <a href="#fnref40" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn41" class="footnote-item"><p>Balalaie, A.; Heydarnoori, A.; Jamshidi, P. (May 1, 2016). “<span class="exturl" data-url="aHR0cDovL2llZWV4cGxvcmUuaWVlZS5vcmcvbHBkb2NzL2VwaWMwMy93cmFwcGVyLmh0bT9hcm51bWJlcj03NDM2NjU5">Microservices Architecture Enables DevOps: Migration to a Cloud-Native Architecture<i class="fa fa-external-link-alt"></i></span>”. IEEE Software. 33 (3): 42–52. <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGlnaXRhbF9vYmplY3RfaWRlbnRpZmllcg==">doi<i class="fa fa-external-link-alt"></i></span>:<span class="exturl" data-url="aHR0cHM6Ly9kb2kub3JnLzEwLjExMDklMkZNUy4yMDE2LjY0">10.1109/MS.2016.64<i class="fa fa-external-link-alt"></i></span>. <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSGFuZGxlX1N5c3RlbQ==">hdl<i class="fa fa-external-link-alt"></i></span>:<span class="exturl" data-url="aHR0cHM6Ly9oZGwuaGFuZGxlLm5ldC8xMDA0NCUyRjElMkY0MDU1Nw==">10044/1/40557<i class="fa fa-external-link-alt"></i></span>. <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW50ZXJuYXRpb25hbF9TdGFuZGFyZF9TZXJpYWxfTnVtYmVy">ISSN<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly93d3cud29ybGRjYXQub3JnL2lzc24vMDc0MC03NDU5">0740-7459<i class="fa fa-external-link-alt"></i></span>. <a href="#fnref41" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>Translation</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>SOA</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（十）Mybatis 常用标签</title>
    <url>/2020/03/24/springboot10/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/incoder/image/upload/v1585186336/blog/MyBatis.jpg" alt=""></p>
<span id="more"></span>
<p>关于 Mybatis 作为在国内普遍使用的 ORM 框架，我们在使用上要掌握常用的标签</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1585238573/blog/mybatis-label.png" alt="mybatis-label"></p>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9teWJhdGlzLm9yZy9teWJhdGlzLTMvemgvc3FsbWFwLXhtbC5odG1s">官方教程《XML 映射器》<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9teWJhdGlzLm9yZy9teWJhdGlzLTMvemgvZHluYW1pYy1zcWwuaHRtbA==">官方教程《动态 SQL》<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vempmamF2YS9wLzg4ODY0MzIuaHRtbA==">Mybatis常用标签<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（一） 初识</title>
    <url>/2019/06/23/springboot1/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/incoder/image/upload/v1561900597/blog/springboot.jpg" alt=""></p>
<span id="more"></span>
<p>从本篇文章开始，记录学习 SpringBoot 框架在实践，源码方面的知识，本节是第一篇，因此不涉及相关复杂知识的学习。众所周知，随着微服务的广泛流行，Spring 系列的 SpringBoot 和 SpringCloud 的应用也更受欢迎，那么请跟随我的脚本来一步步解开 SpringBoot 她神秘的面纱</p>
<p>熟悉后端服务开发的小伙伴，在使用 SpringBoot 时一定会有这样的感受，咦，以前繁琐的配置，现在都不用再去配置一大堆东西了，以前跑起来一个 demo，感觉真是千辛万苦，错一步就 game over，以前服务基本都是已 war 包的形式运行在 Tomcat 中，而现在，你基本不需要手动写太多的代码，一个应用服务就可以运行起来，其次现在应用基本已 jar 包方式直接运行，虽然本质还是运行在 Tomcat 中，但现在 jar 包中已经有了服务运行的基础环境，可以直接使用 jar 相关的运行命令就可以运行起服务。好了，废话了这么多，先看看我们如何运行起一个 DEMO 应用。</p>
<h2 id="环境及版本"><a class="header-anchor" href="#环境及版本"></a>环境及版本</h2>
<ul>
<li>SpringBoot Version：2.1.6.RELEASE</li>
<li>System：macOS Mojave</li>
<li>JDK Version：1.8</li>
<li>Gradle：5.4.1</li>
<li>IDE：IntelliJ IDEA</li>
</ul>
<blockquote>
<p>本系列应用使用如上环境，其次应用包管理，小伙伴可以选择自己熟悉的 Maven 进行管理，而这里都使用 Gradle 进行管理</p>
</blockquote>
<h2 id="Demo"><a class="header-anchor" href="#Demo"></a>Demo</h2>
<h3 id="Spring-Initializr"><a class="header-anchor" href="#Spring-Initializr"></a><span class="exturl" data-url="aHR0cHM6Ly9zdGFydC5zcHJpbmcuaW8=">Spring Initializr<i class="fa fa-external-link-alt"></i></span></h3>
<p>为了让开发者快速上手，官方提供了一建生成 SpringBoot 项目，你按需选择你需要的依赖即可。操作步骤如下截图<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1561906733/blog/spring-initializr.png" alt="spring-initializ"></p>
<h3 id="IDEA-Init"><a class="header-anchor" href="#IDEA-Init"></a>IDEA Init</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1616526451/blog/spring-init.png" alt=""></p>
<p>IDEA分为四步完成初始</p>
<ol>
<li>选择 Spring Initializr 初始化向导</li>
<li>填写项目坐标信息，构建工具，版本，报名等</li>
<li>选择需要的组件（会自动添加依赖）</li>
<li>选择项目存放路径</li>
</ol>
<h2 id="Spring-运行"><a class="header-anchor" href="#Spring-运行"></a>Spring 运行</h2>
<h3 id="命令"><a class="header-anchor" href="#命令"></a>命令</h3>
<h4 id="macOS-or-Linux"><a class="header-anchor" href="#macOS-or-Linux"></a>macOS or Linux</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 项目路径下(spring-start)</span></span><br><span class="line">gradlew bootRun</span><br></pre></td></tr></table></figure>
<h4 id="Windows"><a class="header-anchor" href="#Windows"></a>Windows</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 项目路径下(spring-start)</span></span><br><span class="line">./gradlew bootRun</span><br></pre></td></tr></table></figure>
<h3 id="运行说明"><a class="header-anchor" href="#运行说明"></a>运行说明</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1562167001/blog/spring-running-logo.png" alt="spring-running-logo"></p>
<h2 id="Spring-打包"><a class="header-anchor" href="#Spring-打包"></a>Spring 打包</h2>
<h3 id="jar-分析"><a class="header-anchor" href="#jar-分析"></a>jar 分析</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1561259381/blog/springboot-deploy-jar-unzip.png" alt="springboot-deploy-jar-unzip"></p>
<p>目录说明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project/</span><br><span class="line">├── BOOT-INF/                                                                   </span><br><span class="line">│   ├── classes                                 # 当前项目结果文件放置在 classes 路径下</span><br><span class="line">│   │   │   └── application.properties          # 项目中配置文件</span><br><span class="line">│   │   ├── org/                                # 项目中 java 路径下，编译成 class 文件路径</span><br><span class="line">│   │   ├── static/                             # 项目中 resources 路径下的静态文件夹</span><br><span class="line">│   │   └── templates/                          # 项目中 resources 路径下的模板文件夹</span><br><span class="line">│   └── lib/                                    # 项目所依赖的第三方 jar（Tomcat，SpringBoot 等）</span><br><span class="line">├── META-INF/                                                                   </span><br><span class="line">│   └── MANIFEST.MF                             # 清单文件，用于描述可执行 jar 的一些基本信息</span><br><span class="line">└── org/springframework/boot/loader/            # jar 包启动相关的引导</span><br><span class="line">    ├── archive/</span><br><span class="line">    ├── data</span><br><span class="line">    ├── ExectableArchiveLauncher.class</span><br><span class="line">    ├── jar/</span><br><span class="line">    ├── JarLauncher.class</span><br><span class="line">    ├── LaunchedURLClassLoader.class</span><br><span class="line">    ├── LaunchedURLClassLoader$UseFastConnectionExceptionsEnumeration.class</span><br><span class="line">    ├── Launcher.class</span><br><span class="line">    ├── MainMethodRunner.class</span><br><span class="line">    ├── PropertiesLauncher.class</span><br><span class="line">    ├── PropertiesLauncher$1.class</span><br><span class="line">    ├── PropertiesLauncher$ArchiveEntryFilter.class</span><br><span class="line">    ├── PropertiesLauncher$PrefixMatchingArchiveFilter.class</span><br><span class="line">    ├── PropertiesLauncher$ArchiveEntryFilter.class</span><br><span class="line">    ├── util/</span><br><span class="line">    └── WarLauncher.class</span><br></pre></td></tr></table></figure>
<h4 id="MANIFEST-MF"><a class="header-anchor" href="#MANIFEST-MF"></a>MANIFEST.MF</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Manifest-Version: 1.0                                       # 清单版本号</span><br><span class="line">Start-Class: org.incoder.start.SpringbootStartApplication   # 项目 main 方法所在的类</span><br><span class="line">Spring-Boot-Classes: BOOT-INF/classes/                      # 项目相关代码在打包后 jar 中的路径</span><br><span class="line">Spring-Boot-Lib: BOOT-INF/lib/                              # 项目中所依赖的第三方 jar 在打包后 jar 中的路径</span><br><span class="line">Spring-Boot-Version: 2.1.6.RELEASE                          # 项目  SpringBoot 版本</span><br><span class="line">Main-Class: org.springframework.boot.loader.JarLauncher     # 当前 jar 文件的执行入口类（main 方法所在的类）</span><br><span class="line">回车换行（在清单文件中，必须有，否则会出错）</span><br></pre></td></tr></table></figure>
<h4 id="org-springframework-……目录"><a class="header-anchor" href="#org-springframework-……目录"></a>org/springframework/……目录</h4>
<p>项目中引入的第三方 jar 中并不包含<code>org/springframework/boot/loader</code>内容，那这个目录是从哪里来的呢？</p>
<p>寻找最终发现是项目中我们的<code>build.gradle</code>文件中，引入的<code>org.springframework.boot:spring-boot-gradle-plugin</code>依赖，而这个依赖位于<code>classpath</code>下，说明引入的这个插件 <strong>仅仅</strong> 是在项目构建时才起作用，当项目进行打包后，并不会把插件包打入到项目的依赖库中，也就是<code>BOOT-INF/lib/</code>路径下</p>
<p>如何去研究在<code>org/springframework/boot/loader</code>下的源码内容呢？<br>
最好的方式是在项目的依赖中导入<code>org.springframework.boot:spring-boot-loader</code>依赖</p>
<blockquote>
<p>原则上，在项目开发过程中是不需要引入<code>org.springframework.boot:spring-boot-loader</code>依赖，这里只是为了方便阅读源码进行学习</p>
</blockquote>
<h2 id="Spring-其他"><a class="header-anchor" href="#Spring-其他"></a>Spring 其他</h2>
<h3 id="配置文件格式"><a class="header-anchor" href="#配置文件格式"></a>配置文件格式</h3>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvLnByb3BlcnRpZXM=">properties<i class="fa fa-external-link-alt"></i></span></li>
<li><strong>推荐</strong> <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWUFNTA==">yml<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<blockquote>
<p>配置文件学习可参考 <a href="https://incoder.org/2019/07/28/springboot4/">SpringBoot（四）配置文件</a></p>
</blockquote>
<h3 id="常用命令"><a class="header-anchor" href="#常用命令"></a>常用命令</h3>
<h4 id="gradle-tasks"><a class="header-anchor" href="#gradle-tasks"></a>gradle tasks</h4>
<p>表示获取当前工程可用的 gradle tasks 命令</p>
<h5 id="Application-tasks"><a class="header-anchor" href="#Application-tasks"></a>Application tasks</h5>
<ul>
<li>bootRun：Runs this project as a Spring Boot application.（以 bootJar 的形式运行当前项目）</li>
</ul>
<h5 id="Build-tasks"><a class="header-anchor" href="#Build-tasks"></a>Build tasks</h5>
<ul>
<li>bootJar：Assembles an executable jar archive containing the main classes and their dependencies.（装配一个可执行的 jar（自包含的 jar 包，不依赖其他容器） 归档，这个归档 jar 中包含了所需的依赖以及主类等）</li>
</ul>
<h5 id="Run-jar"><a class="header-anchor" href="#Run-jar"></a>Run jar</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar jar-name.jar</span><br></pre></td></tr></table></figure>
<h5 id="Other"><a class="header-anchor" href="#Other"></a>Other</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压 jar 到当前 start 目录下</span></span><br><span class="line">unzip start-0.0.1-SNAPSHOT.jar -d ./start</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 源码构建</title>
    <url>/2020/12/31/springboot11/</url>
    <content><![CDATA[<p>前两天刚刚学习了 Gradle 构建 SpringBoot 项目，再查看官方文档时，得知 SpringBoot 从 <span class="exturl" data-url="aHR0cHM6Ly9zcHJpbmcuaW8vYmxvZy8yMDIwLzA2LzA4L21pZ3JhdGluZy1zcHJpbmctYm9vdC1zLWJ1aWxkLXRvLWdyYWRsZQ==">Spring Boot 2.3.0.M1<i class="fa fa-external-link-alt"></i></span> 版本开始完全切换到使用 Gradle 来构建项目，那么本篇文章就来实践，基于源码来编译构建 SpringBoot，话不多说，本次构建构建是 2020 年的最后一次发布的版本 2.4.1</p>
<span id="more"></span>
<h2 id="环境"><a class="header-anchor" href="#环境"></a>环境</h2>
<ul>
<li>OS：macOS 11.1</li>
<li>JDK：JDK1.8</li>
<li>Gradle：6.7.1-bin</li>
<li>IDE：IntelliJ IDEA Community 2020.3</li>
</ul>
<p>Gradle 版本通过 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1wcm9qZWN0cy9zcHJpbmctYm9vdC9ibG9iL21hc3Rlci9ncmFkbGUvd3JhcHBlci9ncmFkbGUtd3JhcHBlci5wcm9wZXJ0aWVz">https://github.com/spring-projects/spring-boot/blob/master/gradle/wrapper/gradle-wrapper.properties<i class="fa fa-external-link-alt"></i></span> 文件可知，使用的 6.7.1-bin，那么本地也使用该版本编译，对于 Gradle 的安装可参考 <a href="https://incoder.org/2020/12/10/gradle1/#Gradle-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE">Gradle（一）基础</a> 文章</p>
<h2 id="获取源码"><a class="header-anchor" href="#获取源码"></a>获取源码</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里使用 cnpmjs 来提高 clone 速度</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com.cnpmjs.org/spring-projects/spring-boot.git</span><br></pre></td></tr></table></figure>
<h2 id="编译构建"><a class="header-anchor" href="#编译构建"></a>编译构建</h2>
<p>使用 IDEA 打开项目，会自动创建索引以及，下载项目的依赖，由于依赖的 jar 比较多，建议使用 <span class="exturl" data-url="aHR0cHM6Ly9tYXZlbi5hbGl5dW4uY29tLw==">阿里云<i class="fa fa-external-link-alt"></i></span> 镜像，关于 Gradle 怎么修改依赖镜像源，可参考 <a href="https://incoder.org/2020/02/27/fuck-gfw/#Gradle">专治各种网络不服</a> 文章，阿里云镜像能加速大部分的 jar，但有一部分在阿里云上并没有，你可以通过手动方式导入到本地</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（三） JDWP远程调用</title>
    <url>/2019/07/11/springboot3/</url>
    <content><![CDATA[<p>在 SpringBoot 系列的第二篇文章中，已经详细分析了 SpringBoot 的启动过程，那么这篇文章，我们通过源码调试的方式来验证我们的分析，首先我们在控制台中输入 <code>java</code> 命令，可用输出 JDK 给我们提供了一些命令，其中<code>-agentlib</code>命令就是本篇文章所介绍，用于我们进行源码调试</p>
<span id="more"></span>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1562858657/blog/springboot-java-agentlib.png" alt="springboot-java-agentlib"><br>
我们继续查看<code>-agentlib</code>详细的命令说明，输入<code>java -agentlib:jdwp=help</code> 查看帮助文档<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1562859131/blog/springboot-java-agentlib-help.png" alt="springboot-java-agentlib-help"></p>
<h2 id="远程"><a class="header-anchor" href="#远程"></a>远程</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 在远程机器上添加代理模式的方式启动</span><br><span class="line"># 使用 socket 协议来进行远程调试，当服务启动就开始在 <span class="number">6666</span> 端口等待连接</span><br><span class="line">java -agentlib:jdwp=transport=dt_socket,server=y,address=<span class="number">6666</span> -jar start-<span class="number">1.0</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<h2 id="本机"><a class="header-anchor" href="#本机"></a>本机</h2>
<p>在本机上，我们直接使用 IDEA 编辑器，新建一个 Remote 应用服务，运行，创建步骤如下 9 步骤<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1562860397/blog/springboot-java-remote.png" alt="springboot-java-remote"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（二） 启动分析JarLauncher</title>
    <url>/2019/07/05/springboot2/</url>
    <content><![CDATA[<p>我们在开发过程中，使用 <mark class="label info">java -jar you-jar-name.jar</mark> 命令来启动应用，它是如何启动？以及它如何去寻找 <code>.class</code> 文件并执行这些文件？本节就带着这两个问题，让我们一层层解开 SpringBoot 项目的 jar 启动过程，废话不多说，跟着我的脚步一起去探索 <mark class="label danger">spring-boot-load</mark> 的秘密。</p>
<p>在 <a href="https://incoder.org/2019/06/23/springboot1/">SpringBoot（一）初识</a> 已经解释了为什么在编译后的 jar 中根目录存在 <strong><font color="red">org/springframework/boot/loader</font></strong> 内容，以及为了方便学习研究，我们需要在项目的依赖中导入 <mark class="label success">org.springframework.boot:spring-boot-loader</mark> 依赖。同时我们在解压的 <mark class="label info">you-jar-name.jar</mark> 文件中，查看对应的清单文件 <mark class="label primary">MANIFEST.MF</mark> 内容，其中明确指出了应用的入口 <strong><mark class="label ">org.springframework.boot.loader.JarLauncher</mark></strong> 因此我们就从 <strong><font color="red">JarLauncher</font></strong> 开始一步步深入</p>
<span id="more"></span>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1562394534/blog/spring-boot-loader-jarlauncher.png" alt="spring-boot-loader-jarlauncher"></p>
<h2 id="结构"><a class="header-anchor" href="#结构"></a>结构</h2>
<p>先用Diagrams来表述 <strong><font color="red">JarLauncher</font></strong> 类之间的结构及方法等相关信息<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1562399159/blog/jarlauncher.png" alt="jarlauncher"></p>
<p>从Diagrams可知</p>
<ul>
<li>继承关系：JarLauncher <mark>extends</mark> ExecutableArchiveLauncher <mark>extends</mark> Launcher</li>
<li>启动入口：JarLauncher <mark class="label success">main</mark> 方法</li>
</ul>
<blockquote>
<p>关于图上图标含义，这里就不再赘述，烦请移步 <span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9oZWxwL2lkZWEvc3ltYm9scy5odG1s">IntelliJ IDEA Icon reference<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="流程分析"><a class="header-anchor" href="#流程分析"></a>流程分析</h2>
<h3 id="jar规范"><a class="header-anchor" href="#jar规范"></a>jar规范</h3>
<p>对于 Java 标准的 jar 文件来说，规定在一个 jar 文件中，我们必须要将指定 <mark class="label success">main.class</mark> 的类直接放置在文件的顶层目录中（也就是说，它不予许被嵌套），否则将无法加载，对于 BOOT-INF/class/ 路径下的 <code>class</code> 因为不在顶层目录，因此也是无法直接进行加载， 而对于 BOOT-INF/lib/ 路径的 jar 属于嵌套的（Fatjar），也是不能直接加载，因此 Spring 要想启动加载，就需要自定义实现自己的类加载器去加载。</p>
<blockquote>
<p>关于 jar <strong>官方标准</strong>说明请移步</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzgvZG9jcy90ZWNobm90ZXMvZ3VpZGVzL2phci9qYXIuaHRtbCNTaWduZWRfSkFSX0ZpbGU=">JAR File Specification<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSkFSXyhmaWxlX2Zvcm1hdCk=">JAR (file format)<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</blockquote>
<h3 id="源码分析"><a class="header-anchor" href="#源码分析"></a>源码分析</h3>
<h4 id="main-方法"><a class="header-anchor" href="#main-方法"></a>main 方法</h4>
<p>根据清单文件 <mark class="label primary">MANIFEST.MF</mark> 中  <mark class="label warning">Main-Class</mark> 的描述，我们知道入口类就是 <strong><font color="red">JarLauncher</font></strong>；先看下这个类的 javadoc 介绍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Launcher&#125; for JAR based archives. This launcher assumes that dependency jars are</span></span><br><span class="line"><span class="comment"> * included inside a &#123;<span class="doctag">@code</span> /BOOT-INF/lib&#125; directory and that application classes are</span></span><br><span class="line"><span class="comment"> * included inside a &#123;<span class="doctag">@code</span> /BOOT-INF/classes&#125; directory.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 用于基于JAR的归档。这个启动程序假设依赖jar包含在&#123;<span class="doctag">@code</span> /BOOT-INF/lib&#125;目录中，</span></span><br><span class="line"><span class="comment"> * 应用程序类包含在&#123;<span class="doctag">@code</span> /BOOT-INF/classes&#125;目录中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Phillip Webb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Andy Wilkinson</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>紧接着，要进行源码分析，那肯定是找到入口，一步步深入，那么对于 <strong><font color="red">JarLauncher</font></strong> 就是它的 <mark class="label success">main</mark> 方法了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// launch 方法是调用父类 Launcher 的 launch 方法</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">JarLauncher</span>().launch(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那我们去看一看 Launcher 的 <mark class="label success">launch</mark> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Launch the application. This method is the initial entry point that should be</span></span><br><span class="line"><span class="comment"> * called by a subclass &#123;<span class="doctag">@code</span> public static void main(String[] args)&#125; method.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 启动一个应用，这个方法应该被初始的入口点，这个入口点应该是一个Launcher的子类的 </span></span><br><span class="line"><span class="comment"> * public static void main(String[] args)这样的方法调用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args the incoming arguments</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception if the application fails to launch</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">launch</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 1. 注册一些 URL的属性</span></span><br><span class="line">    JarFile.registerUrlProtocolHandler();</span><br><span class="line">    <span class="comment">// 2. 创建类加载器（LaunchedURLClassLoader），加载得到集合要么是BOOT-INF/classes/</span></span><br><span class="line">    <span class="comment">//    或者BOOT-INF/lib/的目录或者是他们下边的class文件或者jar依赖文件</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> createClassLoader(getClassPathArchives());</span><br><span class="line">    <span class="comment">// 3. 启动给定归档文件和完全配置的类加载器的应用程序</span></span><br><span class="line">    launch(args, getMainClass(), classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="getClassPathArchives-方法"><a class="header-anchor" href="#getClassPathArchives-方法"></a>getClassPathArchives 方法</h4>
<mark class="label success">launch</mark> 方法的第一步的相关内容比较简单，这里不做过多说明，主要后面两步，我们先看第二步，创建一个类加载器（ClassLoader），其中 getClassPathArchives() 方法是一个抽象方法，具体的实现有（<mark>ExecutableArchiveLauncher</mark> 和 <mark class="label default">PropertiesLauncher</mark> ，因为我们研究的 <font color="red">JarLauncher</font> 是继承 <mark>ExecutableArchiveLauncher</mark> ，因此我们这里看 <mark>ExecutableArchiveLauncher</mark> 类中 getClassPathArchives() 方法的实现）我们要看看这个方法中它做了什么
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> List&lt;Archive&gt; <span class="title function_">getClassPathArchives</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 得到一个Archive的集合（BOOT-INF/classes/）和（BOOT-INF/lib/）目录所有的文件</span></span><br><span class="line">    <span class="comment">//     a. this.archive 中当前类的 archive 是怎么来的？</span></span><br><span class="line">    <span class="comment">//     b. getNestedArachives()是如何获得一个嵌套的 jar 归档？</span></span><br><span class="line">    <span class="comment">//     c. this::isNestedArchive 这个方法引用它做了什么？</span></span><br><span class="line">    List&lt;Archive&gt; archives = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="built_in">this</span>.archive.getNestedArchives(<span class="built_in">this</span>::isNestedArchive));</span><br><span class="line">    <span class="comment">// 一个事后处理的方法</span></span><br><span class="line">    postProcessClassPathArchives(archives);</span><br><span class="line">    <span class="keyword">return</span> archives;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<mark class="label primary">this.archive</mark> 位于当前类 <mark>ExecutableArchiveLauncher</mark> 的构造方法中
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ExecutableArchiveLauncher</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用 createArchive() 方法得到Archive</span></span><br><span class="line">        <span class="built_in">this</span>.archive = createArchive();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// 紧接着我们查看 createArchive() 方法都做了什么                //</span></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Launcher.class 中的 createArchive()方法</span></span><br><span class="line"><span class="comment">// 得到我们运行文件的Archive相关的信息</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Archive <span class="title function_">createArchive</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ProtectionDomain</span> <span class="variable">protectionDomain</span> <span class="operator">=</span> getClass().getProtectionDomain();</span><br><span class="line">    <span class="type">CodeSource</span> <span class="variable">codeSource</span> <span class="operator">=</span> protectionDomain.getCodeSource();</span><br><span class="line">    <span class="type">URI</span> <span class="variable">location</span> <span class="operator">=</span> (codeSource != <span class="literal">null</span>) ? codeSource.getLocation().toURI() : <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> (location != <span class="literal">null</span>) ? location.getSchemeSpecificPart() : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (path == <span class="literal">null</span>) &#123;</span><br><span class="line">	    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Unable to determine code source archive&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回我们要执行的jar文件的绝对路径(java -jar xxx.jar中 xxx.jar的绝对路径)</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    <span class="keyword">if</span> (!root.exists()) &#123;</span><br><span class="line">	    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Unable to determine code source archive from &quot;</span> + root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (root.isDirectory() ? <span class="keyword">new</span> <span class="title class_">ExplodedArchive</span>(root) : <span class="keyword">new</span> <span class="title class_">JarFileArchive</span>(root));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于 getNestedArachives() 方法，它是 Archive 的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns nested &#123;<span class="doctag">@link</span> Archive&#125;s for entries that match the specified filter.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 返回与过滤器相匹配的嵌套归档文件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filter the filter used to limit entries</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> nested archives</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException if nested archives cannot be read</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Archive&gt; <span class="title function_">getNestedArchives</span><span class="params">(EntryFilter filter)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// 紧接着我们查看 getNestedArchives() 的实现                   //</span></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的参数 EntryFilter类型中有一个 matches(Entry entry) 方法，</span></span><br><span class="line"><span class="comment">// 这也是this::isNestedArchive所对应的实际方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Archive&gt; <span class="title function_">getNestedArchives</span><span class="params">(EntryFilter filter)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    List&lt;Archive&gt; nestedArchives = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Entry entry : <span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (filter.matches(entry)) &#123;</span><br><span class="line">            nestedArchives.add(getNestedArchive(entry));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Collections.unmodifiableList(nestedArchives);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而 <mark class="label primary">this::isNestedArchive</mark> 方法引用，我们查看 <code>isNestedArchive</code> 抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine if the specified &#123;<span class="doctag">@link</span> JarEntry&#125; is a nested item that should be added</span></span><br><span class="line"><span class="comment"> * to the classpath. The method is called once for each entry.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 确定指定的&#123;<span class="doctag">@link</span> JarEntry&#125;是否是应该添加到类路径的嵌套项。对每个条目调用该方法一次</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> entry the jar entry</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the entry is a nested item (jar or folder)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">isNestedArchive</span><span class="params">(Archive.Entry entry)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// 紧接着我们查看 isNestedArchive() 实现                      //</span></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JarLauncher.class 中的 isNestedArchive()方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isNestedArchive</span><span class="params">(Archive.Entry entry)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果是目录判断是不是BOOT-INF/classes/目录</span></span><br><span class="line">    <span class="keyword">if</span> (entry.isDirectory()) &#123;</span><br><span class="line">        <span class="keyword">return</span> entry.getName().equals(BOOT_INF_CLASSES);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果是文件判断文件的前缀是不是BOOT-INF/lib/开头</span></span><br><span class="line">    <span class="keyword">return</span> entry.getName().startsWith(BOOT_INF_LIB);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="createClassLoader-方法"><a class="header-anchor" href="#createClassLoader-方法"></a>createClassLoader 方法</h4>
<p>把符合条件的 Archives 作为参数传入到 createClassLoader() 方法，创建一个类加载器，我们跟进去，查看 createClassLoader() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a classloader for the specified archives.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 创建一个所指定归档文件的类加载器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> archives the archives</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the classloader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception if the classloader cannot be created</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> ClassLoader <span class="title function_">createClassLoader</span><span class="params">(List&lt;Archive&gt; archives)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    List&lt;URL&gt; urls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(archives.size());</span><br><span class="line">    <span class="comment">// 遍历传进来的 archives，将每一个 Archive 的 URL（归档文件在磁盘上的完整路径）添加到 urls 集合中</span></span><br><span class="line">    <span class="keyword">for</span> (Archive archive : archives) &#123;</span><br><span class="line">        urls.add(archive.getUrl());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="keyword">return</span> createClassLoader(urls.toArray(<span class="keyword">new</span> <span class="title class_">URL</span>[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a classloader for the specified URLs.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 创建指定 URL 的类加载器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> urls the URLs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the classloader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception if the classloader cannot be created</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> ClassLoader <span class="title function_">createClassLoader</span><span class="params">(URL[] urls)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 这里的 LaunchedURLClassLoader 是 SpringBoot loader 给我们提供的一个全新的类加载器</span></span><br><span class="line">    <span class="comment">// 参数 urls 是 class 文件或者资源配置文件的路径地址</span></span><br><span class="line">    <span class="comment">// 参数 getClass().getClassLoader() 是应用类加载器</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LaunchedURLClassLoader</span>(urls, getClass().getClassLoader());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new &#123;<span class="doctag">@link</span> LaunchedURLClassLoader&#125; instance.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> urls the URLs from which to load classes and resources</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parent the parent class loader for delegation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LaunchedURLClassLoader</span><span class="params">(URL[] urls, ClassLoader parent)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(urls, parent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>super() 方法是调用父类的方法，这样一层层跟进去，最终到了 JDK 的 <code>ClassLoader</code> 类，它也是所有类加载器的顶类</p>
<h4 id="launch-方法"><a class="header-anchor" href="#launch-方法"></a>launch 方法</h4>
<mark class="label success">launch</mark> 方法的第二个参数，getMainClass() 是一个抽象方法
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the main class that should be launched.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the name of the main class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception if the main class cannot be obtained</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title function_">getMainClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// 紧接着我们查看 getMainClass() 实现                         //</span></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> String <span class="title function_">getMainClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Manifest</span> <span class="variable">manifest</span> <span class="operator">=</span> <span class="built_in">this</span>.archive.getManifest();</span><br><span class="line">    <span class="type">String</span> <span class="variable">mainClass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (manifest != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取到 Manifest 文件中属性为`Start-Class`对应的值，也就是当前项目工程启动的类的完整路径</span></span><br><span class="line">        mainClass = manifest.getMainAttributes().getValue(<span class="string">&quot;Start-Class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mainClass == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;No &#x27;Start-Class&#x27; manifest entry specified in &quot;</span> + <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mainClass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着我们看 <mark class="label success">launch</mark> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Launch the application given the archive file and a fully configured classloader.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 加载指定存档文件和完全配置的类加载器的应用程序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args the incoming arguments</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mainClass the main class to run</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classLoader the classloader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception if the launch fails</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">launch</span><span class="params">(String[] args, String mainClass, ClassLoader classLoader)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 将应用的加载器换成了自定义的 LaunchedURLClassLoader 加载器，然后入到线程类加载器中</span></span><br><span class="line">    <span class="comment">// 最终在未来的某个地方，通过线程的上下文中取出类加载进行加载</span></span><br><span class="line">    Thread.currentThread().setContextClassLoader(classLoader);</span><br><span class="line">    <span class="comment">// 创建一个主方法运行器运行</span></span><br><span class="line">    createMainMethodRunner(mainClass, args, classLoader).run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create the &#123;<span class="doctag">@code</span> MainMethodRunner&#125; used to launch the application.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 创建一个 MainMethodRunner 用于启动这个应用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mainClass the main class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args the incoming arguments</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classLoader the classloader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the main method runner</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> MainMethodRunner <span class="title function_">createMainMethodRunner</span><span class="params">(String mainClass, String[] args, ClassLoader classLoader)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MainMethodRunner</span>(mainClass, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回一个 <code>MainMethodRunner</code> 对象，我们紧接着去看看这个对象，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Utility class that is used by &#123;<span class="doctag">@link</span> Launcher&#125;s to call a main method. The class</span></span><br><span class="line"><span class="comment"> * containing the main method is loaded using the thread context class loader.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 被 Launcher 使用来调用 main 方法的辅助类，使用线程类加载来加载包含 main 方法的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Phillip Webb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Andy Wilkinson</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainMethodRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mainClassName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] args;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new &#123;<span class="doctag">@link</span> MainMethodRunner&#125; instance.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mainClass the main class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args incoming arguments</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MainMethodRunner</span><span class="params">(String mainClass, String[] args)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mainClassName = mainClass;</span><br><span class="line">        <span class="built_in">this</span>.args = (args != <span class="literal">null</span>) ? args.clone() : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关键方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取到当前线程上下文的类加载器，实际就是 springboot 自定义的加载器（LaunchedURLClassLoader）</span></span><br><span class="line">        <span class="comment">// 加载 this.mainClassName所对应的类，实际也就是清单文件中对应 Start-Class 属性的类</span></span><br><span class="line">        Class&lt;?&gt; mainClass = Thread.currentThread().getContextClassLoader().loadClass(<span class="built_in">this</span>.mainClassName);</span><br><span class="line">        <span class="comment">// 通过反射获取到 main 方法和参数</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">mainMethod</span> <span class="operator">=</span> mainClass.getDeclaredMethod(<span class="string">&quot;main&quot;</span>, String[].class);</span><br><span class="line">        <span class="comment">// 调用目标方法运行</span></span><br><span class="line">        <span class="comment">// invoke 方法参数一：是被调用方法所在对象，这里为 null，原因是我们所调用的目标方法是一个静态方法</span></span><br><span class="line">        <span class="comment">// invoke 方法参数二：被调用方法所接收的参数</span></span><br><span class="line">        mainMethod.invoke(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="built_in">this</span>.args &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到此为止，invoke 方法成功调用，那么我们项目中的main 方法就执行了，这时我们的所编写的 springboot 应用就正式的启动了。那么关于 springboot 的 loader 加载过程已经分析完</p>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1604881134/blog/summary-jarlauncher.jpg" alt="summary-jarlauncher"></p>
<p>从 jar 规范的角度出发，我们深入分析了 springboot 项目启动的整个过程，这个过程到底对不对，我们口说无凭，需要实际检验我们分析<br>
首先，我们先思考，项目的应用启动入口是不是必须是 <mark class="label success">main.class</mark> 方法，以及为什么要默认这么做？<br>
其次，我们再思考，在编辑器中通过图标运行启动程序（或者是通过命令启动程序），比较将程序编译成 jar 包，然后通过命令启动程序他们之间是否相同，如果不同请解释为什么？</p>
<h3 id="问题一"><a class="header-anchor" href="#问题一"></a>问题一</h3>
<p>项目的应用启动入口可以不是 <mark class="label success">main.class</mark> 方法，只是为什么会默认为 <mark class="label success">main.class</mark> 方法，原因是在 springboot 的 MainMethodRunner类的 run 方法中，是固定写死的 <mark class="label success">main</mark> ，为什么要这么写，答案是，我们可以在编辑器中已右键或其他图标启动的方式快速启动 springboot 项目（就像是在运行一个 Java 的 <mark class="label success">main</mark> 方法一样，不再向之前需要乱七八糟各种的配置）。</p>
<h3 id="问题二"><a class="header-anchor" href="#问题二"></a>问题二</h3>
<p>答案是不相同，我们可以在项目的应用启动 <mark class="label success">main.class</mark> 方法中，打印出加载类 <mark class="label info">System.out.println(项目启动加载类 + SpringbootStartApplication.class.getClassLoader());</mark> ，这样就可以检验我们的分析是否正确。分别使用两种不同的方式</p>
<ul>
<li>方式一：在编辑器中之间运行（右键，或者控制台输入命令<code>gradle bootRun</code>）或者使用 IDEA 上的运行应用运行按钮，结果如下  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">项目启动加载类sun.misc.Launcher$AppClassLoader@18b4aac2</span><br></pre></td></tr></table></figure>
</li>
<li>方式二：先编译成 jar 包，然后通过 <mark class="label info">java -jar build-name.jar</mark> 命令运行  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">项目启动加载类org.springframework.boot.loader.LaunchedURLClassLoader@439f5b3d</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>通过打印出来的信息，可以验证我们的分析，方式一的运行，实际上是应用类加载器启动，而方式二是 <mark class="label danger">spring-boot-load</mark> 包中自定义的 <code>LaunchedURLClassLoader</code> 来启动项目</p>
<p>在实际的生产开发中，有时我们的分析需要进行验证（或者找问题），而此时服务又部署在生成环境或者非本机上，通常用的方式是看应用的日志输出，在日志中去定位问题，而有时我们需要断点的方式去找问题，那该如何去操作呢？对于这个问题，在实际开发中是有方法去处理，请看下篇<a href="https://incoder.org/2019/07/11/springboot3/">《SpringBoot（三） JDWP远程调用》</a></p>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9jZWFzZXIud2FuZy8yMDE5LzA2LzA3L3NwcmluZ19ib290X2FuZF9jbG91ZC9zcHJpbmdfYm9vdF9jbG91ZCgyKVNwcmluZ19Cb290JUU2JTg5JTkzJUU1JThDJTg1JUU2JTk2JTg3JUU0JUJCJUI2JUU3JUJCJTkzJUU2JTlFJTg0JUU2JUI3JUIxJUU1JTg1JUE1JUU1JTg4JTg2JUU2JTlFJTkwJUU2JUJBJTkwJUU3JUEwJTgxJUU4JUFFJUIyJUU4JUE3JUEzLw==">spring_boot_cloud(2)Spring_Boot打包文件结构深入分析源码讲解<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jZWFzZXIud2FuZy8=">校验者•CeaserWang<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（四）配置文件</title>
    <url>/2019/07/28/springboot4/</url>
    <content><![CDATA[<p>关于 SpringBoot 配置文件，在之前的文章中已经提到<a href="https://incoder.org/2019/06/23/springboot1/#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F">配置文件格式</a>，主要是两种格式的配置，这里并没有哪个配置写法一定优于另一种写法，对于配置文件名（application.yml 或者 application.properties），可以更改，为了减少不必要的麻烦，不建议修改，本篇文章以 yml 文件作为示例</p>
<span id="more"></span>
<p>本篇文章示例代码见：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Jvb3RDbHVzdGVyL3JjLWNsdXN0ZXItc3ByaW5nYm9vdC90cmVlL21hc3Rlci9zcHJpbmdib290LWNvbmZpZw==">springboot-config<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="YAML"><a class="header-anchor" href="#YAML"></a>YAML</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWUFNTA==">YAML<i class="fa fa-external-link-alt"></i></span>是JSON的超集，因此是用于指定分层配置数据的便捷格式。只要在类路径上有SnakeYAML库，SpringApplication类就会自动支持YAML作为属性的替代 。</p>
<h3 id="语法规则"><a class="header-anchor" href="#语法规则"></a>语法规则</h3>
<ul>
<li>大小写敏感</li>
<li>缩进（只能使用空格，空格数量不重要）表示层级</li>
<li>注释用 <code>#</code> 符号</li>
</ul>
<h3 id="数据结构"><a class="header-anchor" href="#数据结构"></a>数据结构</h3>
<ol>
<li>不可再分的单个的值，如数字，字符串等。 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">env:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">crate-date:</span> <span class="number">2020</span></span><br><span class="line"><span class="attr">is-mac:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ~表示NULL值</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">~</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行字符串可以使用 | 保留换行符，也可以使用 &gt; 折叠换行</span></span><br><span class="line"><span class="comment"># + 表示保留文字块末尾的换行，- 表示删除字符串末尾的换行</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">|-</span></span><br><span class="line"><span class="string">  hello world $&#123;crate-date&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="comment"># 单引号</span></span><br><span class="line"><span class="comment"># 会转义特殊字符，特殊字符最终只是一个普通的字符串数据</span></span><br><span class="line"><span class="comment"># 输出：mac \n catalina</span></span><br><span class="line"><span class="attr">name1:</span> <span class="string">&#x27;mac \n catalina&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 双引号</span></span><br><span class="line"><span class="comment"># 不会转义字符串里面的特殊字符，特殊字符会作为本身想表示的意思</span></span><br><span class="line"><span class="comment"># 输出：mac</span></span><br><span class="line"><span class="comment"># catalina</span></span><br><span class="line"><span class="attr">name2:</span> <span class="string">&quot;mac \n catalina&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li>数组，一组按次序排列的值 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这种写法，必须有两层结构，而且第二层（language 名字）是必须满足 Java 属性字段命名规则</span></span><br><span class="line"><span class="attr">list:</span></span><br><span class="line">  <span class="attr">language:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;object-c&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;swift&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="comment"># 或者行内写法</span></span><br><span class="line"><span class="attr">list-program-languages:</span> <span class="string">object-c,</span> <span class="string">swift,</span> <span class="string">c</span></span><br><span class="line"><span class="comment"># SpEL 获取数组</span></span><br><span class="line"><span class="attr">el:</span></span><br><span class="line">  <span class="attr">list:</span> <span class="string">object-c,</span> <span class="string">swift,</span> <span class="string">c</span></span><br></pre></td></tr></table></figure>
</li>
<li>对象，键值对的集合 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对象</span></span><br><span class="line"><span class="attr">object:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Jerry</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者行内写法</span></span><br><span class="line"><span class="attr">persons:</span> &#123; <span class="attr">name:</span> <span class="string">Jerry</span>, <span class="attr">age:</span> <span class="number">20</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Map</span></span><br><span class="line"><span class="attr">map-object:</span></span><br><span class="line">  <span class="attr">map:</span></span><br><span class="line">    <span class="attr">key1:</span> <span class="string">value1</span></span><br><span class="line">    <span class="attr">key2:</span> <span class="string">value2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者行内写法</span></span><br><span class="line"><span class="attr">mapObjects.maps:</span> &#123; <span class="attr">key1:</span> <span class="string">value1</span>,<span class="attr">key2:</span> <span class="string">value2</span> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li>随机数 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机数</span></span><br><span class="line"><span class="attr">secret:</span> <span class="string">$&#123;random.value&#125;</span></span><br><span class="line"><span class="attr">number:</span> <span class="string">$&#123;random.int&#125;</span></span><br><span class="line"><span class="attr">bignumber:</span> <span class="string">$&#123;random.long&#125;</span></span><br><span class="line"><span class="attr">uuid:</span> <span class="string">$&#123;random.uuid&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>默认值，占位符获取之前配置的值，如果没有可以是用:指定默认值<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bootapp.name:</span> <span class="string">SpringBoot</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">$&#123;bootapp.name&#125;是一个spring应用程序</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<div class="note warning"><ol>
<li><code>:</code> 号后面有一个<font color="red">空格</font></li>
<li>对于复杂的数据结构（对象，List，Map），需要配套 <mark>@ConfigurationProperties</mark> 定义对应的对象</li>
</ol>
</div>
<h2 id="配置"><a class="header-anchor" href="#配置"></a>配置</h2>
<p>为了在配置自定义属性时，向配置 SpringBoot 属性自动提示的功能，导入如下的包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- @ConfigurationProperties annotation processing (metadata for IDEs)</span></span><br><span class="line"><span class="comment">         生成spring-configuration-metadata.json类，需要引入此类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者在 gradle 配置文件中添加依赖</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">compileOnly <span class="string">&#x27;org.springframework.boot:spring-boot-configuration-processor&#x27;</span></span><br><span class="line">annotationProcessor <span class="string">&quot;org.springframework.boot:spring-boot-configuration-processor&quot;</span></span><br></pre></td></tr></table></figure>
<p>如果任然无法自动提示，请查看你的编辑器 IDEA 中是否开启了 <code>Annonation Processing</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1566701581/blog/idea-annotation-processors.png" alt="idea-annotation-processors"></p>
<h3 id="定义配置"><a class="header-anchor" href="#定义配置"></a>定义配置</h3>
<h4 id="默认配置"><a class="header-anchor" href="#默认配置"></a>默认配置</h4>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWwvY29tbW9uLWFwcGxpY2F0aW9uLXByb3BlcnRpZXMuaHRtbA==">Common application properties<i class="fa fa-external-link-alt"></i></span>，是 SpringBoot 官方提供的一些默认配置属性说明，如果需要更改，只需要在 application.yml 文件中重写该属性即可，比如重新设置服务的启动端口为 9090</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9090</span></span><br></pre></td></tr></table></figure>
<h4 id="自定义配置"><a class="header-anchor" href="#自定义配置"></a>自定义配置</h4>
<p>首先在 application.yml 文件中根据上面所述的规则写法进行自定义字段的声明</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">myConfig:</span></span><br><span class="line">  <span class="attr">maps:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">value</span></span><br></pre></td></tr></table></figure>
<h3 id="配置的使用"><a class="header-anchor" href="#配置的使用"></a>配置的使用</h3>
<table>
<thead>
<tr>
<th></th>
<th>@Value</th>
<th>@ConfigurationProperties</th>
<th>@PropertySource</th>
</tr>
</thead>
<tbody>
<tr>
<td>使用场景</td>
<td>单一属性注入，注解写在类的属性上</td>
<td>批量注入，注解写在类上</td>
<td>加载自定义配置文件，用于静态类获取配置文件中定义的信息</td>
</tr>
<tr>
<td>松散语法</td>
<td>不支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR-303 数据校验 @Validated</td>
<td>不支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>复杂类型（数组，Map，对象等）</td>
<td>不完全支持（数组支持行内定义）</td>
<td>支持</td>
<td>支持</td>
</tr>
</tbody>
</table>
<h4 id="ConfigurationProperties"><a class="header-anchor" href="#ConfigurationProperties"></a>ConfigurationProperties</h4>
<p><mark>@ConfigurationProperties</mark> 注解是 SpringBoot提供的一种使用属性的注入方法，不仅可以方便的把配置文件中属性值与所注解类绑定，还支持松散绑定，JSR-303 数据校验等功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 <span class="doctag">@ConfigurationProperties</span> 配置属性必须是小写，多单词之间可用&#x27;-&#x27;连接</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Jerry xu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> : 2020/3/29  16:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigListBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里不能再用 <span class="doctag">@Value</span>(&quot;&quot;) 去加载，修饰当前的字段，</span></span><br><span class="line"><span class="comment">     * 必须指定其属性名和配置文件中定义的名称一致</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; language;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Value"><a class="header-anchor" href="#Value"></a>Value</h4>
<p><mark>@Value</mark> 注解支持直接从配置文件中读取值，同时支持 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy80LjIueC9zcHJpbmctZnJhbWV3b3JrLXJlZmVyZW5jZS9odG1sL2V4cHJlc3Npb25zLmh0bWw=">SpEL<i class="fa fa-external-link-alt"></i></span> 表达式，但是不支持复杂数据类型和数据验证</p>
<p>使用 <mark>@Value</mark> 获取配置文件中定义的值，通常其类是被 <mark>@Controller</mark>，<mark>@Service</mark>，<mark>@Component</mark> 等注解修饰，如果是一般普通的类（如一些工具类）并 <strong><font color="red">不能</font></strong> 只接获取到配置文件中定义的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GradleDataBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;env&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String env;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;crate-date&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer createDate;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;is-mac&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isMac;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;email&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name1&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name1;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;list-program-languages&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; programLanguages;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用el表达式，获取定义数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;&#x27;$&#123;el.list&#125;&#x27;.split(&#x27;,&#x27;)&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; programList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;number&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer number;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;bignumber&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long bigNumber;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;uuid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String uuid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="PropertySource"><a class="header-anchor" href="#PropertySource"></a>PropertySource</h4>
<p><mark>@PropertySource</mark> 注解加载自定义配置文件，由于 <mark>@PropertySource</mark> 指定的文件会优先加载，所以如果在 applocation.properties 文件中存在相同的属性配置，会覆盖前者中对应的值，且 <mark>@PropertySource</mark> 不支持 yml 文件注入</p>
<h3 id="多环境配置"><a class="header-anchor" href="#多环境配置"></a>多环境配置</h3>
<p>在实际的开发中，不同环境对应不同的配置，因此我们需要根据环境来配置不同的项目配置信息，SpringBoot 也是支持我们进行多环境的配置，通常情况下，我们命名为 <code>application-&#123;profile&#125;.properties/yml</code> ，其中<br>
<code>&#123;profile&#125;</code>表示不同的环境，比如：dev（开发），prod（线上） 等</p>
<p>关于具体的多环境配置，可以参考文章 <a href="https://incoder.org/2020/02/02/springboot5/">SpringBoot（五）多环境配置</a></p>
<h2 id="配置文件加载顺序"><a class="header-anchor" href="#配置文件加载顺序"></a>配置文件加载顺序</h2>
<p>Spring Boot 启动会扫描以下位置的配置文件（application.properties 或 application.yml） 作为Spring Boot 的默认配置文件</p>
<ol>
<li>-file:./config/</li>
<li>-file:./</li>
<li>-classpath:/config/</li>
<li>-classpath:/</li>
</ol>
<p>加载顺序可以查看下图<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1585239269/blog/application-sort.png" alt="application-sort"></p>
<p>优先级从高到低，高优先级的配置会覆盖低优先级的配置</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdWppYW55YW5nYmovYXJ0aWNsZS9kZXRhaWxzLzEwODgxMDcyNg==">介绍两种SpringBoot读取yml文件中配置数组的方法<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdWppYW55YW5nYmovYXJ0aWNsZS9kZXRhaWxzLzExMTM1MjcwMw==">Spring的@Value可以注入复杂类型吗？今天教你通过@value注入自定义类型<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWwvaG93dG8tcHJvcGVydGllcy1hbmQtY29uZmlndXJhdGlvbi5odG1s">Properties and Configuration<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（五）多环境配置</title>
    <url>/2020/02/02/springboot5/</url>
    <content><![CDATA[<p>在 SpringBoot 项目中，常用的包管理分别为 maven 和 gradle，在不同包管理下我们如何实现多环境的项目配置，这是实际项目开发过程汇总必备的一项技能，可以大大提高我们开发部署效率，同时也避免了人为的频繁改动配置造成的问题等，有些人可能会问了，maven 不是用的好好的嘛，干嘛还要用 gradle，首先我们可以看现在主流开源项目在提供引入方式时都是有提供了 gradle 依赖方式，以及 gradle 支持编写脚本，在很大程度上让管理更加便捷和人性化</p>
<span id="more"></span>
<p>废话不多说，我们直接来看代码吧，首先我们先来看看使用 maven 来进行多环境的配置</p>
<h2 id="maven"><a class="header-anchor" href="#maven"></a>maven</h2>
<h3 id="pom-xml-文件"><a class="header-anchor" href="#pom-xml-文件"></a>pom.xml 文件</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml &lt;project&gt;标签下配置环境变量名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 本地开发环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正式环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>false<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- pom.xml &lt;project&gt;标签下配置打包根据环境导入的文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件加载配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>application*.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>application.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>application-$&#123;profileActive&#125;.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="application-yml-文件"><a class="header-anchor" href="#application-yml-文件"></a>application*.yml 文件</h3>
<p>根据上面我们的配置，我们首先排除 <font color=red>resources</font> 目录下的所有 <code>application*.yml</code> 文件，然后再导入 <code>application.yml</code>，<code>application-$&#123;profileActive&#125;.yml</code> 文件，那么通常在 <code>application.yml</code> 文件中我们放置一些与环境无关的配置，在 <code>application-$&#123;profileActive&#125;.yml</code> 文件中根据不同环境配置不同的属性（比如：数据库连接，日志等级等配置）</p>
<p>根据 SpringBoot 加载资源文件的顺序，如果我们在 <code>application-$&#123;profileActive&#125;.yml</code> 文件中配置了与 <code>application*.yml</code> 文件相同的属性，那么 <code>application-$&#123;profileActive&#125;.yml</code> 会覆盖掉 <code>application*.yml</code> 文件中相同属性配置</p>
<h4 id="application-yml"><a class="header-anchor" href="#application-yml"></a>application.yml</h4>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 动态激活运行的环境，默认是 dev</span></span><br><span class="line"><span class="comment">#     当然你也可以在你的 pom.xml 文件中进行默认激活的环境更改</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">@profileActive@</span></span><br></pre></td></tr></table></figure>
<h2 id="gradle"><a class="header-anchor" href="#gradle"></a>gradle</h2>
<h3 id="编译打包"><a class="header-anchor" href="#编译打包"></a>编译打包</h3>
<h2 id="部署"><a class="header-anchor" href="#部署"></a>部署</h2>
<p>关于应用的部署，可以参考<a href="https://incoder.org/2019/11/19/deploy-springboot/">IDEA 之 SpringBoot 应用部署</a>，这里不再过多进行说明</p>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzLzIuMS42LlJFTEVBU0UvcmVmZXJlbmNlL2h0bWwv">SpringBoot 2.1.6.RELEASE 官方指南<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc3ByaW5nY2xvdWQuY2Mvc3ByaW5nLWJvb3QuaHRtbA==">SpringBoot 中文指南<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdyYWRsZS5vcmcvY3VycmVudC91c2VyZ3VpZGUvbWlncmF0aW5nX2Zyb21fbWF2ZW4uaHRtbCNtaWdtdm46cHJvZmlsZXNfYW5kX3Byb3BlcnRpZXM=">Gradle Builds From Apache Maven<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMTQvMDgvMTgvZ3JhZGxlLXByYWN0aWNlLmh0bWw=">灵活强大的构建系统 Gradle<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（六）日志管理</title>
    <url>/2020/02/22/springboot6/</url>
    <content><![CDATA[<p>日志是我们项目开发过程中必不可少的一个方面， 当我们项目引入了 <code>spring-boot-starter-web</code> 这个 jar 包，会自动引入相关的一些日志相关的 jar 包，比如，其实在项目中可供我们选择的 jar 包有很多，比如 <code>log4j</code>，<code>log4j2</code>，<code>logback</code>（现在使用最多），<code>slfj</code>等，在具体使用时并不会直接去使用<code>log4j</code>，<code>log4j2</code>而是使用<code>slfj</code>作为门面，具体的实现是通过可插拔的方式提供。<code>logback</code>实际是在<code>log4j</code>之后作者重新写的一个日志框架。本篇文章主要讲<code>logback</code>在项目中的应用</p>
<span id="more"></span>
<h2 id="logback-spring-xml"><a class="header-anchor" href="#logback-spring-xml"></a>logback-spring.xml</h2>
<p>文件名使用 <code>logback-spring.xml</code>，位于 resource 路径下</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（七）注解</title>
    <url>/2020/02/25/springboot7/</url>
    <content><![CDATA[<p>SpringBoot 与 SpringCloud 微服务技术栈体系本质就是围绕注解来展开，这些注解在微服务框架中扮演非常重要的角色，每个注解都有他的应用场景，通过一些注解的组合让 SpringBoot 与 SpringCloud 开发变的简单和高效，本篇文章我们就来汇总 SpringBoot 相关的注解</p>
<p>本篇文章基于如下版本</p>
<ul>
<li>Spring：5.1.8 RELEASE</li>
<li>SpringBoot：2.1.6 RELEASE</li>
</ul>
<span id="more"></span>
<blockquote>
<p>由于本篇包含众多注解，请配合 <code>Ctrl</code> + <code>F</code> （或 <code>⌘</code> + <code>F</code>）使用<br>
<font color=green>绿色</font> ：<strong>基础</strong> 的注解<br>
<font color=red>红色</font> ：<strong>常用</strong> 的注解</p>
</blockquote>
<p>由于 SpringBoot 的基础是 Spring，SpringBoot 相关部分注解都是在 Spring 的基础注解上的再组合，因此我们先来学习 Spring 的相关基础注解，在注解中大部分注解的修饰中包含已下几个注解，这里统一来说明下</p>
<h2 id="Java-相关"><a class="header-anchor" href="#Java-相关"></a>Java 相关</h2>
<h3 id="Documented"><a class="header-anchor" href="#Documented"></a>@Documented</h3>
<p>在默认情况下Documented注解表明这个注释是由 javadoc 记录的也有类似的记录工具。 如果一个类型声明被注释了文档化，它的注释成为公共API的一部分</p>
<ul>
<li>路径：java.lang.annotation</li>
<li>引入：JDK 1.5 开始引入</li>
</ul>
<h3 id="Inherited"><a class="header-anchor" href="#Inherited"></a>@Inherited</h3>
<p>说明子类可以继承父类中的该注解，注释类型是自动继承的。</p>
<ul>
<li>如果注释类型声明中存在继承的元注释，并且用户在类声明中查询该注释类型，并且该类声明中没有该类型的注释，则将自动查询该类的超类以获取注释类型。重复此过程，直到找到该类型的注释，或到达类层次结构（对象）的顶部为止。</li>
<li>如果没有超类对此类型进行注释，则查询将指示所讨论的类没有此类注释。</li>
</ul>
<blockquote>
<p>请注意，如果带注释的类型用于 <strong>注释除类之外</strong> 的任何内容，则此元注释类型无效。还要注意，此元注释仅使注释从超类继承；已实现的接口上的注释无效</p>
</blockquote>
<ul>
<li>路径：java.lang.annotation</li>
<li>引入：JDK 1.5 开始引入</li>
</ul>
<h3 id="Retention"><a class="header-anchor" href="#Retention"></a>@Retention</h3>
<p>注解的保留位置，RetentionPolicy 是提供的策略枚举</p>
<ol>
<li>SOURCE：注解将被编译器丢弃，比如：@Override，@SupressWarnings</li>
<li>CLASS：注释将由编译器记录在类文件中，但不必在运行时由VM保留。这是默认的行为</li>
<li>RUNTIME：注释由编译器记录在类文件中，并由在运行时由VM保留，因此可以通过反射方式读取它们，比如	@Deprecated</li>
</ol>
<blockquote>
<p>@Retention(RetentionPolicy.RUNTIME)   // 作用于运行期</p>
</blockquote>
<ul>
<li>路径：java.lang.annotation</li>
<li>引入：JDK 1.5 开始引入</li>
</ul>
<h3 id="Target"><a class="header-anchor" href="#Target"></a>@Target</h3>
<p>用于描述注解的使用范围（即：被描述的注解可以用在什么地方），ElementType 是提供的策略枚举</p>
<ol>
<li>ANNOTATION_TYPE：用于注释类型</li>
<li>CONSTRUCTOR：用于描述构造器</li>
<li>FIELD：用于描述字段（包括枚举常量）</li>
<li>LOCAL_VARIABLE：用于描述局部变量</li>
<li>METHOD：用于描述方法</li>
<li>PACKAGE：用于描述包</li>
<li>PARAMETER：用于描述参数</li>
<li>TYPE：用于描述类、接口(包括注解类型) 或enum声明</li>
<li>TYPE_PARAMETER：用于参数类型</li>
<li>TYPE_USE：用于使用类型</li>
</ol>
<blockquote>
<p>@Target(ElementType.ANNOTATION_TYPE)   // 作用于注释类型</p>
</blockquote>
<ul>
<li>路径：java.lang.annotation</li>
<li>引入：JDK 1.5 开始引入</li>
</ul>
<h2 id="Spring-相关"><a class="header-anchor" href="#Spring-相关"></a>Spring 相关</h2>
<h3 id="context-annotation"><a class="header-anchor" href="#context-annotation"></a>context.annotation</h3>
<p>路径：org.springframework.context.annotation</p>
<h4 id="Bean"><a class="header-anchor" href="#Bean"></a>@Bean</h4>
<ul>
<li>引入：Spring 3.0 开始引入</li>
</ul>
<h4 id="ComponentScan"><a class="header-anchor" href="#ComponentScan"></a>@ComponentScan</h4>
<p>一个组合注解，默认会装配标识了@Controller，@Service，@Repository，@Component 注解到 Spring 容器中</p>
<ul>
<li>引入：Spring 3.1 开始引入</li>
</ul>
<blockquote>
<p>@ComponentScan 与 @ComponentScans</p>
</blockquote>
<h4 id="Conditional"><a class="header-anchor" href="#Conditional"></a>@Conditional</h4>
<p>可以根据代码中设置的条件装载不同的 bean，在设置条件注解之前，先要把装载的 bean 类去实现 Condition 接口，然后对该实现接口的类设置是否装载的条件。</p>
<p>SpringBoot 注解中的 @ConditionalOnProperty，@ConditionalOnBean 等以 @Conditional* 开头的注解，都是通过集成了@Conditional 来实现相应功能</p>
<ul>
<li>引入：Spring 4.0 开始引入</li>
</ul>
<h4 id="Configuration"><a class="header-anchor" href="#Configuration"></a>@Configuration</h4>
<p>用于自定义配置类，可替换 XML 配置文件，被注解的类内部包含有一个或多个被 @Bean 注解的方法，这些方法会将被 AnnotationConfigApplicationContext 或  AnnotationConfigWebApplicationContext 类进行扫描，并用于构建 bean 定义，初始化 Spring 容器</p>
<ul>
<li>引入：Spring 3.0 开始引入</li>
</ul>
<h4 id="DependsOn"><a class="header-anchor" href="#DependsOn"></a>@DependsOn</h4>
<h4 id="Description"><a class="header-anchor" href="#Description"></a>@Description</h4>
<h4 id="EnableAspectJAutoProxy"><a class="header-anchor" href="#EnableAspectJAutoProxy"></a>@EnableAspectJAutoProxy</h4>
<h4 id="EnableLoadTimeWeaving"><a class="header-anchor" href="#EnableLoadTimeWeaving"></a>@EnableLoadTimeWeaving</h4>
<h4 id="EnableMBeanExport"><a class="header-anchor" href="#EnableMBeanExport"></a>@EnableMBeanExport</h4>
<h4 id="Import"><a class="header-anchor" href="#Import"></a>@Import</h4>
<p>通过导入的方式实现把实例加入 SpringIOC 容器中。可以在需要时将没有被 Spring 容器管理的类导入至 Spring 容器中</p>
<ul>
<li>引入：Spring 3.0 开始引入</li>
</ul>
<h4 id="ImportResource"><a class="header-anchor" href="#ImportResource"></a>@ImportResource</h4>
<p>和 @Import 类似，区别就是 @ImportResource 导入的是配置文件</p>
<ul>
<li>引入：Spring 3.0 开始引入</li>
</ul>
<h4 id="Lazy"><a class="header-anchor" href="#Lazy"></a>@Lazy</h4>
<h4 id="Primary"><a class="header-anchor" href="#Primary"></a>@Primary</h4>
<h4 id="Profile"><a class="header-anchor" href="#Profile"></a>@Profile</h4>
<h4 id="PropertySource"><a class="header-anchor" href="#PropertySource"></a>@PropertySource</h4>
<blockquote>
<p>@PropertySource 与 @PropertySources</p>
</blockquote>
<h4 id="Role"><a class="header-anchor" href="#Role"></a>@Role</h4>
<h4 id="Scope"><a class="header-anchor" href="#Scope"></a>@Scope</h4>
<h3 id="stereotype"><a class="header-anchor" href="#stereotype"></a>stereotype</h3>
<p>路径：org.springframework.stereotype</p>
<h4 id="Component"><a class="header-anchor" href="#Component"></a>@Component</h4>
<p>是一个元注解，意思是可以注解其他类注解，比如：@Controller @Service @Repository 带此注解的类被看做组件，当使用基于注解的配置和类路径扫描的时候，这些类就会被实例化。其他类级别的注解也可以被认定为是一种特殊类型的组件，比如@Controller（注入服务），@Service（注入 DAO），@Repository（实现 DAO 访问）。</p>
<p>@Component 泛指组件，当组件不好归类时，我们可以使用这个注解进行标注，作用相当于 XML 配置，<code>&lt;bean id=&quot;&quot; class=&quot;&quot; &gt;</code></p>
<ul>
<li>引入：Spring 2.5 开始引入</li>
</ul>
<h4 id="Controller"><a class="header-anchor" href="#Controller"></a>@Controller</h4>
<h4 id="Indexed"><a class="header-anchor" href="#Indexed"></a>@Indexed</h4>
<h4 id="Repository"><a class="header-anchor" href="#Repository"></a>@Repository</h4>
<h4 id="Service"><a class="header-anchor" href="#Service"></a>@Service</h4>
<!-- ## SpringMVC 相关

### @PathVariable

### @RequestMapping

### @RequestParam -->
<h2 id="SpringBoot-相关"><a class="header-anchor" href="#SpringBoot-相关"></a>SpringBoot 相关</h2>
<h3 id="spring-boot"><a class="header-anchor" href="#spring-boot"></a>spring-boot</h3>
<p>spring-boot:2.1.6.RELEASE</p>
<h4 id="SpringBootConfiguration"><a class="header-anchor" href="#SpringBootConfiguration"></a>@SpringBootConfiguration</h4>
<p>路径：org.springframework.boot</p>
<h4 id="context-properties"><a class="header-anchor" href="#context-properties"></a>context.properties</h4>
<p>路径：org.springframework.boot.context.properties</p>
<h5 id="ConfigurationProperties"><a class="header-anchor" href="#ConfigurationProperties"></a>@ConfigurationProperties</h5>
<h5 id="ConfigurationPropertiesBinding"><a class="header-anchor" href="#ConfigurationPropertiesBinding"></a>@ConfigurationPropertiesBinding</h5>
<h5 id="DeprecatedConfigurationProperty"><a class="header-anchor" href="#DeprecatedConfigurationProperty"></a>@DeprecatedConfigurationProperty</h5>
<h5 id="EnableConfigurationProperties"><a class="header-anchor" href="#EnableConfigurationProperties"></a>@EnableConfigurationProperties</h5>
<h5 id="NestedConfigurationProperty"><a class="header-anchor" href="#NestedConfigurationProperty"></a>@NestedConfigurationProperty</h5>
<h4 id="convert"><a class="header-anchor" href="#convert"></a>convert</h4>
<p>路径：org.springframework.boot.convert</p>
<h5 id="DataSizeUnit"><a class="header-anchor" href="#DataSizeUnit"></a>@DataSizeUnit</h5>
<h5 id="Delimiter"><a class="header-anchor" href="#Delimiter"></a>@Delimiter</h5>
<h5 id="DurationFormat"><a class="header-anchor" href="#DurationFormat"></a>@DurationFormat</h5>
<h5 id="DurationUnit"><a class="header-anchor" href="#DurationUnit"></a>@DurationUnit</h5>
<h4 id="jackson"><a class="header-anchor" href="#jackson"></a>jackson</h4>
<p>路径：org.springframework.boot.jackson</p>
<h5 id="JsonComponent"><a class="header-anchor" href="#JsonComponent"></a>@JsonComponent</h5>
<h4 id="web-server"><a class="header-anchor" href="#web-server"></a>web.server</h4>
<p>路径：org.springframework.boot.web.server</p>
<h5 id="LocalServerPort"><a class="header-anchor" href="#LocalServerPort"></a>@LocalServerPort</h5>
<h4 id="web-servlet"><a class="header-anchor" href="#web-servlet"></a>web.servlet</h4>
<p>路径：org.springframework.boot.web.servlet</p>
<h5 id="ServletComponentScan"><a class="header-anchor" href="#ServletComponentScan"></a>@ServletComponentScan</h5>
<h3 id="spring-boot-autoconfigure"><a class="header-anchor" href="#spring-boot-autoconfigure"></a>spring-boot-autoconfigure</h3>
<p>spring-boot-autoconfigure:2.1.6.RELEASE</p>
<p>org.springframework.boot.autoconfigure</p>
<h4 id="AutoConfigurationPackage"><a class="header-anchor" href="#AutoConfigurationPackage"></a>@AutoConfigurationPackage</h4>
<h4 id="AutoConfigureAfter"><a class="header-anchor" href="#AutoConfigureAfter"></a>@AutoConfigureAfter</h4>
<h4 id="AutoConfigureBefore"><a class="header-anchor" href="#AutoConfigureBefore"></a>@AutoConfigureBefore</h4>
<h4 id="AutoConfigureOrder"><a class="header-anchor" href="#AutoConfigureOrder"></a>@AutoConfigureOrder</h4>
<h4 id="EnableAutoConfiguration"><a class="header-anchor" href="#EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4>
<h4 id="ImportAutoConfiguration"><a class="header-anchor" href="#ImportAutoConfiguration"></a>@ImportAutoConfiguration</h4>
<h4 id="SpringBootApplication"><a class="header-anchor" href="#SpringBootApplication"></a>@SpringBootApplication</h4>
<p>表示一个配置类，它声明一个或多个 Bean 方法并且会触发自动配置以及组件扫描，这是一个很便捷的注解，@SpringBootApplication 相当于同时使用 @Configuration、 @EnableAutoConfiguration、 @ComponentScan这三个注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span>             <span class="comment">// 当前注解所修饰的对象范围：用于描述类，接口，enum声明</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>   <span class="comment">// 作用于运行期</span></span><br><span class="line"><span class="meta">@Documented</span>                           <span class="comment">// 生成文档</span></span><br><span class="line"><span class="meta">@Inherited</span>                            <span class="comment">// 继承</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">		@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>引入：SpringBoot 1.2.0开始引入</li>
</ul>
<h4 id="SpringBootConfiguration-v2"><a class="header-anchor" href="#SpringBootConfiguration-v2"></a>@SpringBootConfiguration</h4>
<h4 id="condition"><a class="header-anchor" href="#condition"></a>condition</h4>
<p>路径：org.springframework.boot.autoconfigure.condition</p>
<h5 id="ConditionalOnBean"><a class="header-anchor" href="#ConditionalOnBean"></a>@ConditionalOnBean</h5>
<h5 id="ConditionalOnClass"><a class="header-anchor" href="#ConditionalOnClass"></a>@ConditionalOnClass</h5>
<h5 id="ConditionalOnCloudPlatform"><a class="header-anchor" href="#ConditionalOnCloudPlatform"></a>@ConditionalOnCloudPlatform</h5>
<h5 id="ConditionalOnExpression"><a class="header-anchor" href="#ConditionalOnExpression"></a>@ConditionalOnExpression</h5>
<h5 id="ConditionalOnJava"><a class="header-anchor" href="#ConditionalOnJava"></a>@ConditionalOnJava</h5>
<h5 id="ConditionalOnJndi"><a class="header-anchor" href="#ConditionalOnJndi"></a>@ConditionalOnJndi</h5>
<h5 id="ConditionalOnMissingBean"><a class="header-anchor" href="#ConditionalOnMissingBean"></a>@ConditionalOnMissingBean</h5>
<h5 id="ConditionalOnMissingClass"><a class="header-anchor" href="#ConditionalOnMissingClass"></a>@ConditionalOnMissingClass</h5>
<h5 id="ConditionalOnNotWebApplication"><a class="header-anchor" href="#ConditionalOnNotWebApplication"></a>@ConditionalOnNotWebApplication</h5>
<h5 id="ConditionalOnProperty"><a class="header-anchor" href="#ConditionalOnProperty"></a>@ConditionalOnProperty</h5>
<h5 id="ConditionalOnResource"><a class="header-anchor" href="#ConditionalOnResource"></a>@ConditionalOnResource</h5>
<h5 id="ConditionalOnSingleCandidate"><a class="header-anchor" href="#ConditionalOnSingleCandidate"></a>@ConditionalOnSingleCandidate</h5>
<h5 id="ConditionalOnWebApplication"><a class="header-anchor" href="#ConditionalOnWebApplication"></a>@ConditionalOnWebApplication</h5>
<h4 id="data"><a class="header-anchor" href="#data"></a>data</h4>
<p>路径：org.springframework.boot.autoconfigure.data</p>
<h5 id="ConditionalOnRepositoryType"><a class="header-anchor" href="#ConditionalOnRepositoryType"></a>@ConditionalOnRepositoryType</h5>
<h4 id="domain"><a class="header-anchor" href="#domain"></a>domain</h4>
<p>路径：org.springframework.boot.autoconfigure.domain</p>
<h5 id="EntityScan"><a class="header-anchor" href="#EntityScan"></a>@EntityScan</h5>
<h4 id="flyway"><a class="header-anchor" href="#flyway"></a>flyway</h4>
<p>路径：org.springframework.boot.autoconfigure.flyway</p>
<h5 id="FlywayDataSource"><a class="header-anchor" href="#FlywayDataSource"></a>@FlywayDataSource</h5>
<h4 id="liquibase"><a class="header-anchor" href="#liquibase"></a>liquibase</h4>
<p>路径：org.springframework.boot.autoconfigure.liquibase</p>
<h5 id="LiquibaseDataSource"><a class="header-anchor" href="#LiquibaseDataSource"></a>@LiquibaseDataSource</h5>
<h4 id="quartz"><a class="header-anchor" href="#quartz"></a>quartz</h4>
<p>路径：org.springframework.boot.autoconfigure.quartz</p>
<h5 id="QuartzDataSource"><a class="header-anchor" href="#QuartzDataSource"></a>@QuartzDataSource</h5>
<h2 id="SpringCloud-相关"><a class="header-anchor" href="#SpringCloud-相关"></a>SpringCloud 相关</h2>
<h2 id="JPA-注解"><a class="header-anchor" href="#JPA-注解"></a>JPA 注解</h2>
<h3 id="Column"><a class="header-anchor" href="#Column"></a>@Column</h3>
<h3 id="Entity"><a class="header-anchor" href="#Entity"></a>@Entity</h3>
<h3 id="GeneratedValue"><a class="header-anchor" href="#GeneratedValue"></a>@GeneratedValue</h3>
<h3 id="Id"><a class="header-anchor" href="#Id"></a>@Id</h3>
<h3 id="JoinColumn"><a class="header-anchor" href="#JoinColumn"></a>@JoinColumn</h3>
<h3 id="JsonIgnore"><a class="header-anchor" href="#JsonIgnore"></a>@JsonIgnore</h3>
<h3 id="MappedSuperClass"><a class="header-anchor" href="#MappedSuperClass"></a>@MappedSuperClass</h3>
<h3 id="NoRepositoryBean"><a class="header-anchor" href="#NoRepositoryBean"></a>@NoRepositoryBean</h3>
<h3 id="OneToOne、-OneToMany、-ManyToOne"><a class="header-anchor" href="#OneToOne、-OneToMany、-ManyToOne"></a>@OneToOne、@OneToMany、@ManyToOne</h3>
<h3 id="SequenceGeneretor"><a class="header-anchor" href="#SequenceGeneretor"></a>@SequenceGeneretor</h3>
<h3 id="Transient"><a class="header-anchor" href="#Transient"></a>@Transient</h3>
<h2 id="异常"><a class="header-anchor" href="#异常"></a>异常</h2>
<h3 id="ControllerAdvice"><a class="header-anchor" href="#ControllerAdvice"></a>@ControllerAdvice</h3>
<h3 id="ExceptionHandler"><a class="header-anchor" href="#ExceptionHandler"></a>@ExceptionHandler</h3>
<h2 id="其他注解"><a class="header-anchor" href="#其他注解"></a>其他注解</h2>
<h3 id="Autowired"><a class="header-anchor" href="#Autowired"></a>@Autowired</h3>
<h3 id="Inject"><a class="header-anchor" href="#Inject"></a>@Inject</h3>
<h3 id="JsonBackReference"><a class="header-anchor" href="#JsonBackReference"></a>@JsonBackReference</h3>
<h3 id="PathVariable"><a class="header-anchor" href="#PathVariable"></a>@PathVariable</h3>
<h3 id="Qualifier"><a class="header-anchor" href="#Qualifier"></a>@Qualifier</h3>
<h3 id="RepositoryRestResourcepublic"><a class="header-anchor" href="#RepositoryRestResourcepublic"></a>@RepositoryRestResourcepublic</h3>
<h3 id="RequestMapping"><a class="header-anchor" href="#RequestMapping"></a>@RequestMapping</h3>
<h3 id="Resource"><a class="header-anchor" href="#Resource"></a>@Resource</h3>
<h3 id="ResponseBody"><a class="header-anchor" href="#ResponseBody"></a>@ResponseBody</h3>
<h3 id="RestController"><a class="header-anchor" href="#RestController"></a>@RestController</h3>
<h3 id="Value"><a class="header-anchor" href="#Value"></a>@Value</h3>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMyNDI1MTgwMg==">Spring Boot 注解如何系统的学习<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kaW5nbWUubmV0LzIwMTkvMDEvc3ByaW5nYm9vdC9zcHJpbmdib290MDMtYXV0by1jb25maWcv">SpringBoot 系列（三）Spring Boot 自动配置<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZDFhMTkwN2U1MWQ0NTU3MmMwNjAwOWMjaGVhZGluZy0xOA==">Spring boot 2.x注解Annotation大全<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（八）SpringApplication 源码分析</title>
    <url>/2020/02/26/springboot8/</url>
    <content><![CDATA[<p>正如我们看到的 SpringBoot 应用启动入口类，main() 方法中一行简单 <code>SpringApplication.run(MyApplication.class, args);</code> 就可以将 SpringBoot 应用给启动了。那么它肯定是在<code>SpringApplication</code>中做了大量的工作，才能将应用启动，因此本篇文章我们来一起看看这个核心的类</p>
<p>SpringApplication 类可以从 Java 的 main 方法中引导和启动 Spring 的应用，默认情况下它会按照如下的启动步骤</p>
<ol>
<li>创建一个恰当的 ApplicationContext 实例（取决于你的 classpath 路径）</li>
<li>注册一个 CommandLinePropertySource 将命令行参数作为 Spring 的属性（换句话说，可以通过命令行来传递当前应用所需要的一些属性）</li>
<li>刷新应用的 Context（内容上下文），并加载所有单例的 beans</li>
<li>触发每个 CommandLineRunner beans</li>
</ol>
<span id="more"></span>
<p>大多数情况下，我们在 main() 方法中直接使用静态的 run(Class, String[]) 方法启动加载应用，对于一些高级的配置，我们可以创建一个 <code>SpringApplication</code> 实例，在运行之前进行自定义的配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">SpringApplication</span> <span class="variable">application</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(MyApplication.class);</span><br><span class="line">    <span class="comment">// ... customize application settings here</span></span><br><span class="line">    application.run(args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>SpringApplication</code> 可以读取不同来源的 bean 信息，通常推荐我们使用被 <code>@Configuration</code> 修饰的单例类来启动应用，然而你也可以在多种来源去设置你的 source</p>
<ul>
<li>使用<code>AnnotatedBeanDefinitionReader</code>加载完全限定类名</li>
<li>使用<code>XmlBeanDefinitionReader</code>读取本地 XML 资源，或者使用<code>GroovyBeanDefinitionReader</code> 读取 Groovy 脚本去加载</li>
<li>使用<code>ClassPathBeanDefinitionScanner</code>扫描得到包的名字</li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（九）普通类如何获取配置文件中的值</title>
    <url>/2020/06/26/springboot9/</url>
    <content><![CDATA[<p>在之前的 SpringBoot 学习中，我们知道，可以在项目的 <code>application.yml</code> 文件或 <code>application.properties</code> 文件中获取到一些我们项目中的一些静态值。但对于一些非 Spring 所管理的类（比如一些工具类）该如何获取到定义在配置文件中的值呢？而这些工具类中的配置值和对应项目运行的环境有关，我们如果固定写在代码内，每次打包时去更改，显然这种做法不够好，那么本篇文章就来实践一些非 Spring 类如何获取配置的值</p>
<span id="more"></span>
<p>在<a href="https://incoder.org/2019/07/28/springboot4">《SpringBoot（四）配置文件》</a> 文章中提到，在使用 <code>@Value</code> 注解时，当时提到说 “使用 <code>@Value</code> 获取配置文件中定义的值，通常其类是被 <font color="red"><code>@Controller</code>，<code>@Service</code> ，<code>@Component</code></font> 等注解修饰，如果是一般普通的类（如一些工具类）并 <strong>不能</strong> 只接获取到配置文件中定义的值”，显然我们直接按照之前的套路，在<code>application.yml</code>等配置文件中添加自定义的配置，使用 <code>@Value</code> 注解在我们的普通类中是无法获取到的，其实要解决这个问题很简单，那就是将当前的普通类变成一个被 Spring 所接管的类（普通类上使用 <code>@Component</code> 来修饰），这样我们就可以使用了</p>
<p>就这？你以为就结束了，那我还写个啥笔记，你在操作完发现你依然拿不到在配置文件中定义的静态值，接下来让我一步步来告诉你怎么来写，和为啥会这么做的原因</p>
<h3 id="配置文件"><a class="header-anchor" href="#配置文件"></a>配置文件</h3>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1YW50YWkzMzM0L2FydGljbGUvZGV0YWlscy8xMDQ1MDQyMDg=">工具类用单例模式还是静态方法<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bm55enlxL2FydGljbGUvZGV0YWlscy8xMDI0NTc0MzQ=">springboot 工具类加载配置对象<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW5nd2FuZzIwMTYvYXJ0aWNsZS9kZXRhaWxzLzEwNjE0ODg4MA==">静态方法(工具类)中调用Spring管理的Bean<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxOTg0NDQyNw==">spring实现静态注入<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NTg0ODc4L2FydGljbGUvZGV0YWlscy85MTQzODY0OA==">工具类该用单例模式，还是用静态的方式<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p6eTIwNDYvYXJ0aWNsZS9kZXRhaWxzLzg5OTQ4MTI0">单例模式工具类中Spring 注入为空 的一些小问题<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud（一）Security OAuth2</title>
    <url>/2020/07/11/springcloud1/</url>
    <content><![CDATA[<h2 id="什么是-OAuth2"><a class="header-anchor" href="#什么是-OAuth2"></a>什么是 OAuth2</h2>
<p>用于 REST/APIs 的代理授权框架（<strong>delegated authorization</strong> framework），基于令牌 Token 的授权，在无需暴露用户密码的情况下，使应用能获取对用户数据的有限访问权限，做到解耦认证和授权</p>
<p>OAuth 是一个开放标准，该标准允许用户让第三方应用访问该用户在某一网站上存储的私密资源（如：头像，照片，视频等），而在这个过程中无线将用户名和密码提供给第三方应用。实现这一功能是通过提供一个令牌（token），而不是用户名和密码来访问他们存放在特定服务提供者的数据</p>
<span id="more"></span>
<h2 id="什么是-Spring-Security"><a class="header-anchor" href="#什么是-Spring-Security"></a>什么是 Spring Security</h2>
<p>Spring Security 是为基于 Spring 的应用程序提供声明书安全保护的安全性框架。Spring Security 提供了完整的安全性解决方案，它能够在 Web 请求级别和方法调用级别处理身份认证和授权。因为基于 Spring 框架，所以 Spring Security 充分利用了依赖注入（Dependency Injection，DI）和面向切面的技术</p>
<p>最初，Spring Security 被称为 Acegi Security。Acegi 是一个强大的安全框架，但是它存在一个严重的问题，那就是需要大量的 XML 配置。到了 2.0 版本，Acegi Security 更名为 Spring Security，2.0版本所带来的不仅仅是名字的变化。为了在 Spring 中配置安全性，Spring Security 引入一个全新的、与安全性相关的 XML 命名空间。这个新的命名空间联通注解和一些合理的默认设置，将典型的安全性配置从几百行 XML 减少到十几行。Spring Security 3.0 融入了 SpEL，这将进一步简化  路安全性配置</p>
<p>Spring Security 从两个角度来解决安全问题。</p>
<ul>
<li>它使用 Servlet 规范中的 Filter 保护 Web 请求并限制 URL 级别的访问</li>
<li>它还能够使用 Spring AOP 保护方法调用——借助于对象代理和使用通知，能够确保只有具备适当权限的用户才能访问安全保护的方法</li>
</ul>
<h2 id="Spring-Security-OAuth-现状"><a class="header-anchor" href="#Spring-Security-OAuth-现状"></a>Spring Security OAuth 现状</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLXNlY3VyaXR5LW9hdXRo">Spring Security OAuth<i class="fa fa-external-link-alt"></i></span> 的模块已被废弃，后续功能已经迁移到 Spring Security 5.2.x 中，但不会再提供 Authorization Server 的功能。</p>
<p>为此，随着 Spring Security5.2 发布，Spring 官方强烈鼓励用户开始将其旧版 OAuth2 客户端和资源服务器应用迁移到 Spring Security5.2 中的新支持</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1wcm9qZWN0cy9zcHJpbmctc2VjdXJpdHkvd2lraS9PQXV0aC0yLjAtRmVhdHVyZXMtTWF0cml4">具体的功能列表<i class="fa fa-external-link-alt"></i></span>请移步查看</p>
<h2 id="OAuth2-主要角色"><a class="header-anchor" href="#OAuth2-主要角色"></a>OAuth2 主要角色</h2>
<ol>
<li>客户应用（Client Application）：通常是一个 Web 或无线应用，它需要访问用户的受保护资源</li>
<li>资源服务器（Resource Server）：是一个 Web 站点或者 Web service API，用户的受保护数据保存于此</li>
<li>授权服务器（Authorized Server）：在客户应用成功认证并获得授权之后，向客户应用颁发访问令牌 Access Token</li>
<li>资源拥有者（Resource Owner）：资源的拥有人，想要分享某些资源给第三方应用</li>
<li>客户凭证（Client Credentials）：客户的 clientId 和密码用于认证客户</li>
<li>令牌（Tokens）：授权服务器在接收到客户请求后，颁发的访问令牌
<ul>
<li>授权码（Authorization Code Token）：仅用于授权码授权类型，用于交换获取访问令牌和刷新令牌</li>
<li>刷新令牌（Refresh Token）：用于去授权服务器获取一个新的访问令牌</li>
<li><strong>访问令牌（Access Token）</strong>：用于代表一个用户或服务直接去访问受保护的资源</li>
<li>Bearer Token：不管谁拿到 Token 都可以访问资源，像现钞</li>
<li>Proof of Possession(PoP) Token：可以校验 client 是否对 Token 有明确的拥有权</li>
</ul>
</li>
<li>作用域（Scopes）：客户请求访问令牌时，由资源拥有者额外指定的细分权限</li>
</ol>
<h2 id="OAuth2-误解"><a class="header-anchor" href="#OAuth2-误解"></a>OAuth2 误解</h2>
<ul>
<li>OAuth 并没有支持 <strong>HTTP 以外的协议</strong></li>
<li>OAuth 并不是一个 <strong>认证协议</strong></li>
<li>OAuth 并没有定义 <strong>授权处理机制</strong></li>
<li>OAuth 并没有定义 <strong>Token 格式</strong></li>
<li>OAuth 2.0 并没有定义 <strong>加密方法</strong></li>
<li>OAuth 2.0 并不是 <strong>单个</strong> 协议</li>
<li>OAuth 2.0 仅是 <strong>授权框架</strong>，仅用于授权代理</li>
</ul>
<h3 id="OAuth2-运行流程"><a class="header-anchor" href="#OAuth2-运行流程"></a>OAuth2 运行流程</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1594815003/blog/OAuth2.png" alt="来自 RFC 6749"></p>
<p>从上面的流转过程，经过下面六个步骤，客户端就能获取到访问资源的令牌，其中第二步是关键，用户要怎样才能给予客户端授权（客户端获取授权的四种模式）</p>
<ol>
<li>（A）用户打开客户端后，客户端要求用户给予权限</li>
<li>（B）用户同意给予客户端权限</li>
<li>（C）客户端使用上一步获取的授权，向认证服务器申请令牌</li>
<li>（D）认证服务器对客户端进行认证后，确认无误，同意发放令牌</li>
<li>（E）客户端使用令牌，向资源服务器申请获取资源</li>
<li>（F）资源服务器确认令牌无误，同意向客户端开放资源</li>
</ol>
<h3 id="Access-Token"><a class="header-anchor" href="#Access-Token"></a>Access Token</h3>
<p>Access Token，顾名思义，就是用来访问受保护资源要用到的令牌。客户端要访问资源服务器上受保护的资源，就必须要有 Access Token 作为通行证。Access Token 由授权服务器生成。客户端再获取了用户授权后才能想授权服务器申请 Access Token</p>
<p>An access token is a string representing an authorization issued to the client. … Tokens represent specific scopes and durations of access, granted by the resource owner, and enforced by the resource server and authorization server.</p>
<p>从官方的定义来看（RFC 6749 #section-1.4），Access Token 是一个字符串，至少要提供关于 <strong>客户端的基本信息（通常是客户端的 ID）</strong> 和该客户端获得的权限，权限有一组 scopes 表示，并且 Access Token 是有有效期的</p>
<p>关于 Access Token 的具体格式一个字符串标识符呢，还是自包含内容的信息呢，在 OAth2（RFC6749） 中并没有规定</p>
<h3 id="Refresh-Token"><a class="header-anchor" href="#Refresh-Token"></a>Refresh Token</h3>
<p>Refresh Token 也是有授权服务器生成，当一个 Access Token 过期或者失效时，客户端可以使用 Refresh Token 来获取一个新的 Access Token，这个新的 Access Token 拥有 scopes 范围小于等原来的那个 Access Token 权限</p>
<p>Refresh Token 是可选项，如果授权服务器生成了 Refresh Token，它会与 Access Token 一起返回给客户端，我们一起来看一看整个流程</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1594806547/blog/refresh-token.png" alt="refresh-token"></p>
<ol>
<li>（A）客户端通过向服务器镜像身份验证来请求访问令牌，授权服务器并显示授权</li>
<li>（B）授权服务器对客户端进行身份验证并验证权限授予，如果有效，则颁发访问令牌和刷新令牌</li>
<li>（C）客户端携带令牌向资源服务器发出受保护的资源请求</li>
<li>（D）资源服务器验证访问令牌，如果有效，返回受保护的资源给客户端</li>
<li>（E）重复步骤（C）和（D），直到访问令牌过期，如果客户知道访问令牌已过期，则跳至步骤（G）；否则，它将发出另一个受保护的资源请求</li>
<li>（F）由于访问令牌无效，因此资源服务器返回无效的令牌错误</li>
<li>（G）客户端通过与进行身份验证来请求新的访问令牌，授权服务器并显示刷新令牌，客户端身份验证要求基于客户端类型和授权策略</li>
<li>（H）授权服务器对客户端进行身份验证并验证刷新令牌，如果有效，则发出新的访问令牌（并且，新的刷新令牌是可选）</li>
</ol>
<h2 id="OAuth2-授权模式"><a class="header-anchor" href="#OAuth2-授权模式"></a>OAuth2 授权模式</h2>
<p>关于 OAuth 的授权方式，可以在<code>spring-security-oauth2-autoconfigure-2.1.2.RELEASE.jar</code> jar 文件中</p>
<ul>
<li>类：<code>org.springframework.boot.autoconfigure.security.oauth2.authserver.OAuth2AuthorizationServerConfiguration.BaseClientDetailsConfiguration</code></li>
<li>方法：<code>oauth2ClientDetails()</code></li>
<li>参数设置：<code>.setAuthrizedGrantTypes()</code> 中 list 包含
<ul>
<li><code>authorization_code</code></li>
<li><code>password</code></li>
<li><code>client_credentials</code></li>
<li><code>implicit</code></li>
<li><code>refresh_token</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>由于标准的 OAuth2 协议中，授权模式并 <strong>不包括</strong> <code>refresh_token</code>，但在 Spring Security 的实现中将其归为一种，因此如果需要实现 <code>access_token</code>的刷新，就需要这样一种授权模式</p>
</blockquote>
<h3 id="授权码模式"><a class="header-anchor" href="#授权码模式"></a>授权码模式</h3>
<p>授权码（authorization_code）模式是功能最完整，流程最严谨的授权模式。它的特点就是通过客户端的服务器与授权服务器进行交互，国内常见的第三方平台登录功能基本都是使用这种模式</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1594806818/blog/auth-code.png" alt="授权码模式"></p>
<ol>
<li>（A）用户访问客户端，后者将前者导向到认证服务器</li>
<li>（B）用户选择是否给予客户端授权</li>
<li>（C）假设用户给予授权，认证服务器将用户导向客户端事先指定的“重定向 URI”，同时附上一个授权码</li>
<li>（D）客户端收到授权码，附上早先的“重定向 URI”，向认证服务器申请令牌，这一步是在客户端的后台的服务器上完成，对用户不可见</li>
<li>（E）认证服务器核对了授权码和重定向 URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）</li>
</ol>
<h3 id="密码模式"><a class="header-anchor" href="#密码模式"></a>密码模式</h3>
<p>密码（password）模式是用户把账号和密码直接告诉客户端，客户端使用这些信息向授权服务器申请令牌。这需要用户对客户端高度信任，例如客户端和服务提供商是同一家公司</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1594806820/blog/password.png" alt="密码模式"></p>
<ol>
<li>（A）用户向客户端提供用户名和密码</li>
<li>（B）客户端将用户名和密码发给认证服务器，向后者请求令牌</li>
<li>（C）认证服务器确认无误后，向客户端提供访问令牌</li>
</ol>
<h3 id="客户端模式"><a class="header-anchor" href="#客户端模式"></a>客户端模式</h3>
<p>客户端（client_credentials）模式是指客户端使用自己的名义而不是用户的名义向服务提供者申请权限。严格来说，客户端模式并不能算作 OAuth 协议要解决的问题的一种解决方案，但是，对于开发者而言，在一些前后端分离应用或者为移动端提供的认证授权服务器上使用的这种模式还是非常方便</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1594806819/blog/client.png" alt="客户端模式"></p>
<ol>
<li>（A）客户端向认证服务器进行身份认证，并要求一个访问令牌</li>
<li>（B）认证服务器确认无误后，向客户端提供访问令牌</li>
</ol>
<h3 id="简化模式"><a class="header-anchor" href="#简化模式"></a>简化模式</h3>
<p>简化（implicit）模式不需要客户端服务器参与，直接在浏览器中向授权服务器申请令牌，一般若网站是纯静态页面，则可以采用这种方式</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1594806820/blog/implicit.png" alt="简化模式"></p>
<ol>
<li>（A）客户端将用户导向认证服务器</li>
<li>（B）用户决定是否给予客户端授权</li>
<li>（C）假设用户给予授权，认证服务器将用户导向客户端指定的“重定向 URI”，并在 URI 的 Hash 部分包含了访问令牌</li>
<li>（D）浏览器向资源服务器发出请求，其中不包括上一步收到的 Hash 值</li>
<li>（E）资源服务器返回一个网页，其中包含的代码可以获取 Hash 值中的令牌</li>
<li>（F）浏览器执行上一步获得的脚步，提取出令牌</li>
<li>（G）浏览器将令牌发给客户端</li>
</ol>
<h2 id="OAuth2-OIDC-相关开源项目"><a class="header-anchor" href="#OAuth2-OIDC-相关开源项目"></a>OAuth2/OIDC 相关开源项目</h2>
<ul>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5rZXljbG9hay5vcmc=">Redhat Keycloak（Java）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYXBlcmVvLm9yZy9wcm9qZWN0L2Nhcw==">Apereo CAS（Java）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pZGVudGl0eXNlcnZlci5pbw==">IdentityServer（C#）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pdHJlaWQtY29ubmVjdC9PcGVuSUQtQ29ubmVjdC1KYXZhLVNwcmluZy1TZXJ2ZXI=">OpenId-Connect-Java-Spring-Server<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25ld25pbC9vYXV0aDItZmFtaWx5LWJhcnJlbA==">OAuth2全家桶项目<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vbmtleWsvb2F1dGgyLXNoaXJv">OAuth2全家桶项目<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vbmtleWsvb2F1dGgyLXNoaXJv">Apache Oltu + Shiro 实现 OAuth2 服务器<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFlbGR1bmcuY29tL3NwcmluZy1zZWN1cml0eS1vYXV0aC1qd3Q=">Using JWT<i class="fa fa-external-link-alt"></i></span> with <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JhZWxkdW5nL3NwcmluZy1zZWN1cml0eS1vYXV0aA==">Spring Security OAuth<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="OAuth2-相关书籍"><a class="header-anchor" href="#OAuth2-相关书籍"></a>OAuth2 相关书籍</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWFubmluZy5jb20vYm9va3Mvb2F1dGgtMi1pbi1hY3Rpb24=">OAuth2 in Action<i class="fa fa-external-link-alt"></i></span>：主要讲述 OAuth2 协议的原理知识</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucGFja3RwdWIuY29tL3ZpcnR1YWxpemF0aW9uLWFuZC1jbG91ZC9vYXV0aC0yMC1jb29rYm9vaw==">OAuth 2.0 Cookbook<i class="fa fa-external-link-alt"></i></span>：主要讲述 OAuth2 相关实践</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0cy5zcHJpbmcuaW8vc3ByaW5nLXNlcmN1cml0eS1vYXV0aC9kb2NzL29hdXRoMi5odG1s">Developer Guide<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BkYXJ1dGsvdGhlLXNpbXBsZXN0LWd1aWRlLXRvLW9hdXRoLTItMC04YzcxYmQ5YTE1YmI=">OAuth 2.0 最简向导<i class="fa fa-external-link-alt"></i></span> 文章【需翻墙】</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pbnNpZ2h0cy50aG91Z2h0d29ya3MuY24vdHJhZGl0aW9uYWwtd2ViLWFwcC1hdXRoZW50aWNhdGlvbi8=">传统 Web 应用中的身份验证技术<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zcHJpbmcuaW8vYmxvZy8yMDE5LzExLzE0L3NwcmluZy1zZWN1cml0eS1vYXV0aC0yLTAtcm9hZG1hcC11cGRhdGU=">Spring Security OAuth 2.0 Roadmap Update<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIub2t0YS5jb20v">Okta Developer Platform<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY3NDk=">RFC6749 - The OAuth 2.0 Authorization Framework<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>OAuth2</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud（三）Security OAuth2 源码分析</title>
    <url>/2020/07/25/springcloud3/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>OAuth2</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud（二）Security OAuth2 的 四种授权模式</title>
    <url>/2020/07/12/springcloud2/</url>
    <content><![CDATA[<p>在上一篇文章中，我们了解了 Security OAuth2 相关的一些基础知识，和整个四种授权模式的交互过程，那么本篇是对四种模式的实践，废话不多说，我们直接开始，SpringCloud 相关的实践代码均托管在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Jvb3RDbHVzdGVyL3JjLWNsdXN0ZXItc3ByaW5nY2xvdWQ=">rc-cluster-springcloud<i class="fa fa-external-link-alt"></i></span>项目的中，项目使用的一些依赖版本如下</p>
<span id="more"></span>
<ul>
<li>gradle：6.1.1</li>
<li>SpringBoot：2.2.6.RELEASE</li>
<li>SpringCloud：Hoxton.SR4</li>
<li>JDK：1.8</li>
</ul>
<h2 id="实践"><a class="header-anchor" href="#实践"></a>实践</h2>
<p>在实践阶段为了方便，我将资源服务器和授权服务器整合在一个服务上，在后续扩展部分，会提供实际生产环境中的常用做法，先看项目的包依赖</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;org.springframework.cloud:spring-cloud-starter-oauth2&#x27;</span></span><br></pre></td></tr></table></figure>
<p>下面的两点，不管是什么模式的授权方式，写法都是一样</p>
<ol>
<li>业务 API <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务 API</span></span><br><span class="line"><span class="comment"> * 为了方便我直接将 UserInfo 对象放在了 Controller 类中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/api/userinfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;UserInfo&gt; <span class="title function_">getUserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">        <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> user.getUsername() + <span class="string">&quot;@gmail.com&quot;</span>;</span><br><span class="line">        <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInfo</span>();</span><br><span class="line">        userInfo.setName(user.getUsername());</span><br><span class="line">        userInfo.setEmail(email);</span><br><span class="line">        <span class="comment">// TODO 不同的授权选择不同的模式</span></span><br><span class="line">        <span class="comment">// 授权码模式</span></span><br><span class="line">        userInfo.setGrantType(<span class="string">&quot;authorization_code&quot;</span>);</span><br><span class="line">        <span class="comment">// 客户端模式</span></span><br><span class="line">        userInfo.setGrantType(<span class="string">&quot;client_credentials&quot;</span>);</span><br><span class="line">        <span class="comment">// 密码模式</span></span><br><span class="line">        userInfo.setGrantType(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="comment">// 简化模式</span></span><br><span class="line">        userInfo.setGrantType(<span class="string">&quot;implicit&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String email;</span><br><span class="line">        <span class="keyword">private</span> String grantType;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> email;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.email = email;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getGrantType</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> grantType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGrantType</span><span class="params">(String grantType)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.grantType = grantType;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>资源服务 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 资源服务器</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : Jerry xu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2020/7/17  23:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OAuth2ResourceServer</span> <span class="keyword">extends</span> <span class="title class_">ResourceServerConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用来配置对资源的访问控制规则</span></span><br><span class="line"><span class="comment">    * 默认设置下，所有非 /oauth/** 路经下的资源都是被保护的</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> http http</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .requestMatchers()</span><br><span class="line">                <span class="comment">// 对 /api/** 路经下的资源进行了保护</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/api/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="权码模式"><a class="header-anchor" href="#权码模式"></a>权码模式</h3>
<h4 id="代码实现"><a class="header-anchor" href="#代码实现"></a>代码实现</h4>
<h5 id="授权服务器配置"><a class="header-anchor" href="#授权服务器配置"></a>授权服务器配置</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OAuth2AuthorizationServer</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BCryptPasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于配置客户端信息（id，secret，grant_type 等信息），要求至少配置一个客户端、</span></span><br><span class="line"><span class="comment">     * 默认不支持 Resource Owner Password 授权类型，</span></span><br><span class="line"><span class="comment">     * 如果要使用该类型，需要在 AuthorizationServerEndpointsConfigurer 中提供 AuthenticationManager 用于用户认证</span></span><br><span class="line"><span class="comment">     * 授权模式系统默认提供如下方式，请查看：&#123;<span class="doctag">@link</span> OAuth2AuthorizationServerConfiguration.BaseClientDetailsConfiguration#oauth2ClientDetails()&#125;方法</span></span><br><span class="line"><span class="comment">     * &lt;ol&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;authorization_code：授权码模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;password：密码模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;client_credentials：客户端模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;implicit：简化模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;refresh_token：刷新 token 模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ol&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clients clients</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 在内存中，用于演示，不适用于实际生产环境</span></span><br><span class="line">        clients.inMemory()</span><br><span class="line">                <span class="comment">// withClient + secret 这两个就是凭证</span></span><br><span class="line">                .withClient(<span class="string">&quot;clientapp&quot;</span>)</span><br><span class="line">                .secret(passwordEncoder.encode(<span class="string">&quot;112233&quot;</span>))</span><br><span class="line">                <span class="comment">// 重定向地址，用于授权成功后跳转</span></span><br><span class="line">                .redirectUris(<span class="string">&quot;http://localhost:9001/callback&quot;</span>)</span><br><span class="line">                <span class="comment">// 授权码模式</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;authorization_code&quot;</span>)</span><br><span class="line">                <span class="comment">// 权限细分</span></span><br><span class="line">                .scopes(<span class="string">&quot;read_userinfo&quot;</span>, <span class="string">&quot;read_contacts&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Security-Web安全配置"><a class="header-anchor" href="#Security-Web安全配置"></a>Security Web安全配置</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BCryptPasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.requestMatchers()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/oauth/authorize&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf()</span><br><span class="line">                .disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">&quot;jerry&quot;</span>)</span><br><span class="line">                .password(passwordEncoder().encode(<span class="string">&quot;xyz&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="测试"><a class="header-anchor" href="#测试"></a>测试</h4>
<p>整个过程请看视频</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vaW5jb2Rlci92aWRlby91cGxvYWQvdjE1OTQ5MTA0NzcvYmxvZy92aWRlby9hdXRoLm1wNA==">https://res.cloudinary.com/incoder/video/upload/v1594910477/blog/video/auth.mp4<i class="fa fa-external-link-alt"></i></span></p>
<ol>
<li>获取授权 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 浏览器请求地址</span><br><span class="line">http://localhost:8080/oauth/authorize?client_id=clientapp&amp;redirect_uri=http://localhost:9001/callback&amp;response_type=code&amp;scope=read_userinfo</span><br></pre></td></tr></table></figure>
</li>
<li>使用授权码获取 Token<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1594911902/blog/authcode.png" alt=""></li>
<li>请求资源服务（业务请求）<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1594912116/blog/biz-request.png" alt=""></li>
</ol>
<p>如果你没有安装 <span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdG1hbi5jb20=">Postman<i class="fa fa-external-link-alt"></i></span>，对使用 <code>curl</code> 命令比较熟悉，那么可替换上面第 2，3 步操作</p>
<ul>
<li>使用授权码获取 Token  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请自行更换 code 参数的值</span></span><br><span class="line">curl -X POST --user clientapp:112233 http://localhost:8080/oauth/token -H <span class="string">&quot;content-type: application/x-www-form-urlencoded&quot;</span> -d <span class="string">&quot;code=8uYpdo&amp;grant_type=authorization_code&amp;redirect_uri=http://localhost:9001/callback&amp;scope=read_userinfo&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li>请求资源服务（业务请求）  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请自行更换 authorization 参数</span></span><br><span class="line">curl -X GET http://localhost:8080/api/userinfo -H <span class="string">&quot;authorization: Bearer 36cded80-b6f5-43b7-bdfc-594788a24530&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1594949675/blog/curl-auth.png" alt=""></p>
<h3 id="客户端模式"><a class="header-anchor" href="#客户端模式"></a>客户端模式</h3>
<h4 id="代码实现-v2"><a class="header-anchor" href="#代码实现-v2"></a>代码实现</h4>
<h5 id="授权服务器配置-v2"><a class="header-anchor" href="#授权服务器配置-v2"></a>授权服务器配置</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OAuth2AuthorizationServer</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BCryptPasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于配置客户端信息（id，secret，grant_type 等信息），要求至少配置一个客户端、</span></span><br><span class="line"><span class="comment">     * 默认不支持 Resource Owner Password 授权类型，</span></span><br><span class="line"><span class="comment">     * 如果要使用该类型，需要在 AuthorizationServerEndpointsConfigurer 中提供 AuthenticationManager 用于用户认证</span></span><br><span class="line"><span class="comment">     * 授权模式系统默认提供如下方式，请查看：&#123;<span class="doctag">@link</span> OAuth2AuthorizationServerConfiguration.BaseClientDetailsConfiguration#oauth2ClientDetails()&#125;方法</span></span><br><span class="line"><span class="comment">     * &lt;ol&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;authorization_code：授权码模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;password：密码模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;client_credentials：客户端模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;implicit：简化模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;refresh_token：刷新 token 模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ol&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clients clients</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 在内存中，用于演示，不适用于实际生产环境</span></span><br><span class="line">        clients.inMemory()</span><br><span class="line">                <span class="comment">// withClient + secret 这两个就是凭证</span></span><br><span class="line">                .withClient(<span class="string">&quot;clientapp&quot;</span>)</span><br><span class="line">                .secret(passwordEncoder.encode(<span class="string">&quot;112233&quot;</span>))</span><br><span class="line">                <span class="comment">// 重定向地址，用于授权成功后跳转</span></span><br><span class="line">                .redirectUris(<span class="string">&quot;http://localhost:9001/callback&quot;</span>)</span><br><span class="line">                <span class="comment">// 客户端模式</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;client_credentials&quot;</span>)</span><br><span class="line">                <span class="comment">// 权限细分</span></span><br><span class="line">                .scopes(<span class="string">&quot;read_userinfo&quot;</span>, <span class="string">&quot;read_contacts&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Security-Web安全配置-v2"><a class="header-anchor" href="#Security-Web安全配置-v2"></a>Security Web安全配置</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BCryptPasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.requestMatchers()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/oauth/authorize&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf()</span><br><span class="line">                .disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">&quot;jerry&quot;</span>)</span><br><span class="line">                .password(passwordEncoder().encode(<span class="string">&quot;xyz&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="测试-v2"><a class="header-anchor" href="#测试-v2"></a>测试</h4>
<p>整个过程请看视频</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vaW5jb2Rlci92aWRlby91cGxvYWQvdjE1OTQ5MTA0NzcvYmxvZy92aWRlby9hdXRoLm1wNA==">https://res.cloudinary.com/incoder/video/upload/v1594910477/blog/video/auth.mp4<i class="fa fa-external-link-alt"></i></span></p>
<ol>
<li>获取授权 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 浏览器请求地址</span><br><span class="line">http://localhost:8080/oauth/authorize?client_id=clientapp&amp;redirect_uri=http://localhost:9001/callback&amp;response_type=code&amp;scope=read_userinfo</span><br></pre></td></tr></table></figure>
</li>
<li>使用授权码获取 Token<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1594911902/blog/authcode.png" alt=""></li>
<li>请求资源服务（业务请求）<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1594912116/blog/biz-request.png" alt=""></li>
</ol>
<p>如果你没有安装 <span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdG1hbi5jb20=">Postman<i class="fa fa-external-link-alt"></i></span>，对使用 <code>curl</code> 命令比较熟悉，那么可替换上面第 2，3 步操作</p>
<ul>
<li>使用授权码获取 Token  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请自行更换 code 参数的值</span></span><br><span class="line">curl -X POST --user clientapp:112233 http://localhost:8080/oauth/token -H <span class="string">&quot;content-type: application/x-www-form-urlencoded&quot;</span> -d <span class="string">&quot;code=8uYpdo&amp;grant_type=authorization_code&amp;redirect_uri=http://localhost:9001/callback&amp;scope=read_userinfo&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li>请求资源服务（业务请求）  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请自行更换 authorization 参数</span></span><br><span class="line">curl -X GET http://localhost:8080/api/userinfo -H <span class="string">&quot;authorization: Bearer 36cded80-b6f5-43b7-bdfc-594788a24530&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1594949675/blog/curl-auth.png" alt=""></p>
<h3 id="简化模式"><a class="header-anchor" href="#简化模式"></a>简化模式</h3>
<h4 id="代码实现-v3"><a class="header-anchor" href="#代码实现-v3"></a>代码实现</h4>
<h5 id="授权服务器配置-v3"><a class="header-anchor" href="#授权服务器配置-v3"></a>授权服务器配置</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OAuth2AuthorizationServer</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BCryptPasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于配置客户端信息（id，secret，grant_type 等信息），要求至少配置一个客户端、</span></span><br><span class="line"><span class="comment">     * 默认不支持 Resource Owner Password 授权类型，</span></span><br><span class="line"><span class="comment">     * 如果要使用该类型，需要在 AuthorizationServerEndpointsConfigurer 中提供 AuthenticationManager 用于用户认证</span></span><br><span class="line"><span class="comment">     * 授权模式系统默认提供如下方式，请查看：&#123;<span class="doctag">@link</span> OAuth2AuthorizationServerConfiguration.BaseClientDetailsConfiguration#oauth2ClientDetails()&#125;方法</span></span><br><span class="line"><span class="comment">     * &lt;ol&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;authorization_code：授权码模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;password：密码模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;client_credentials：客户端模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;implicit：简化模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;refresh_token：刷新 token 模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ol&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clients clients</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 在内存中，用于演示，不适用于实际生产环境</span></span><br><span class="line">        clients.inMemory()</span><br><span class="line">                <span class="comment">// withClient + secret 这两个就是凭证</span></span><br><span class="line">                .withClient(<span class="string">&quot;clientapp&quot;</span>)</span><br><span class="line">                .secret(passwordEncoder.encode(<span class="string">&quot;112233&quot;</span>))</span><br><span class="line">                <span class="comment">// 重定向地址，用于授权成功后跳转</span></span><br><span class="line">                .redirectUris(<span class="string">&quot;http://localhost:9001/callback&quot;</span>)</span><br><span class="line">                <span class="comment">// 授权码模式</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;authorization_code&quot;</span>)</span><br><span class="line">                <span class="comment">// 权限细分</span></span><br><span class="line">                .scopes(<span class="string">&quot;read_userinfo&quot;</span>, <span class="string">&quot;read_contacts&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Security-Web安全配置-v3"><a class="header-anchor" href="#Security-Web安全配置-v3"></a>Security Web安全配置</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BCryptPasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.requestMatchers()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/oauth/authorize&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf()</span><br><span class="line">                .disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">&quot;jerry&quot;</span>)</span><br><span class="line">                .password(passwordEncoder().encode(<span class="string">&quot;xyz&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="测试-v3"><a class="header-anchor" href="#测试-v3"></a>测试</h4>
<p>整个过程请看视频</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vaW5jb2Rlci92aWRlby91cGxvYWQvdjE1OTQ5MTA0NzcvYmxvZy92aWRlby9hdXRoLm1wNA==">https://res.cloudinary.com/incoder/video/upload/v1594910477/blog/video/auth.mp4<i class="fa fa-external-link-alt"></i></span></p>
<ol>
<li>获取授权 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 浏览器请求地址</span><br><span class="line">http://localhost:8080/oauth/authorize?client_id=clientapp&amp;redirect_uri=http://localhost:9001/callback&amp;response_type=code&amp;scope=read_userinfo</span><br></pre></td></tr></table></figure>
</li>
<li>使用授权码获取 Token<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1594911902/blog/authcode.png" alt=""></li>
<li>请求资源服务（业务请求）<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1594912116/blog/biz-request.png" alt=""></li>
</ol>
<p>如果你没有安装 <span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdG1hbi5jb20=">Postman<i class="fa fa-external-link-alt"></i></span>，对使用 <code>curl</code> 命令比较熟悉，那么可替换上面第 2，3 步操作</p>
<ul>
<li>使用授权码获取 Token  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请自行更换 code 参数的值</span></span><br><span class="line">curl -X POST --user clientapp:112233 http://localhost:8080/oauth/token -H <span class="string">&quot;content-type: application/x-www-form-urlencoded&quot;</span> -d <span class="string">&quot;code=8uYpdo&amp;grant_type=authorization_code&amp;redirect_uri=http://localhost:9001/callback&amp;scope=read_userinfo&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li>请求资源服务（业务请求）  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请自行更换 authorization 参数</span></span><br><span class="line">curl -X GET http://localhost:8080/api/userinfo -H <span class="string">&quot;authorization: Bearer 36cded80-b6f5-43b7-bdfc-594788a24530&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1594949675/blog/curl-auth.png" alt=""></p>
<h4 id="测试-v4"><a class="header-anchor" href="#测试-v4"></a>测试</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/oauth/authorize?client_id=clientapp&amp;redirect_uri=http://localhost:9001/callback&amp;response_type=token&amp;scope=read_userinfo&amp;state=abc</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:9001/callback#access_token=60fbfadc-f801-4514-a5fb-52c6fd42f6cb&amp;token_type=bearer&amp;state=abc&amp;expires_in=119</span><br></pre></td></tr></table></figure>
<h3 id="密码模式"><a class="header-anchor" href="#密码模式"></a>密码模式</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1wcm9qZWN0cy9zcHJpbmctYm9vdC9pc3N1ZXMvMTExMzYjaXNzdWVjb21tZW50LTM4MTMzODYwNQ==">https://github.com/spring-projects/spring-boot/issues/11136#issuecomment-381338605<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="代码实现-v4"><a class="header-anchor" href="#代码实现-v4"></a>代码实现</h4>
<h5 id="授权服务器配置-v4"><a class="header-anchor" href="#授权服务器配置-v4"></a>授权服务器配置</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OAuth2AuthorizationServer</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BCryptPasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于配置客户端信息（id，secret，grant_type 等信息），要求至少配置一个客户端、</span></span><br><span class="line"><span class="comment">     * 默认不支持 Resource Owner Password 授权类型，</span></span><br><span class="line"><span class="comment">     * 如果要使用该类型，需要在 AuthorizationServerEndpointsConfigurer 中提供 AuthenticationManager 用于用户认证</span></span><br><span class="line"><span class="comment">     * 授权模式系统默认提供如下方式，请查看：&#123;<span class="doctag">@link</span> OAuth2AuthorizationServerConfiguration.BaseClientDetailsConfiguration#oauth2ClientDetails()&#125;方法</span></span><br><span class="line"><span class="comment">     * &lt;ol&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;authorization_code：授权码模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;password：密码模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;client_credentials：客户端模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;implicit：简化模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *     &lt;li&gt;refresh_token：刷新 token 模式&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ol&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clients clients</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 在内存中，用于演示，不适用于实际生产环境</span></span><br><span class="line">        clients.inMemory()</span><br><span class="line">                <span class="comment">// withClient + secret 这两个就是凭证</span></span><br><span class="line">                .withClient(<span class="string">&quot;clientapp&quot;</span>)</span><br><span class="line">                .secret(passwordEncoder.encode(<span class="string">&quot;112233&quot;</span>))</span><br><span class="line">                <span class="comment">// 重定向地址，用于授权成功后跳转</span></span><br><span class="line">                .redirectUris(<span class="string">&quot;http://localhost:9001/callback&quot;</span>)</span><br><span class="line">                <span class="comment">// 授权码模式</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;authorization_code&quot;</span>)</span><br><span class="line">                <span class="comment">// 权限细分</span></span><br><span class="line">                .scopes(<span class="string">&quot;read_userinfo&quot;</span>, <span class="string">&quot;read_contacts&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Security-Web安全配置-v4"><a class="header-anchor" href="#Security-Web安全配置-v4"></a>Security Web安全配置</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BCryptPasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.requestMatchers()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/oauth/authorize&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf()</span><br><span class="line">                .disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">&quot;jerry&quot;</span>)</span><br><span class="line">                .password(passwordEncoder().encode(<span class="string">&quot;xyz&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="测试-v5"><a class="header-anchor" href="#测试-v5"></a>测试</h4>
<p>整个过程请看视频</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vaW5jb2Rlci92aWRlby91cGxvYWQvdjE1OTQ5MTA0NzcvYmxvZy92aWRlby9hdXRoLm1wNA==">https://res.cloudinary.com/incoder/video/upload/v1594910477/blog/video/auth.mp4<i class="fa fa-external-link-alt"></i></span></p>
<ol>
<li>获取授权 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 浏览器请求地址</span><br><span class="line">http://localhost:8080/oauth/authorize?client_id=clientapp&amp;redirect_uri=http://localhost:9001/callback&amp;response_type=code&amp;scope=read_userinfo</span><br></pre></td></tr></table></figure>
</li>
<li>使用授权码获取 Token<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1594911902/blog/authcode.png" alt=""></li>
<li>请求资源服务（业务请求）<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1594912116/blog/biz-request.png" alt=""></li>
</ol>
<p>如果你没有安装 <span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdG1hbi5jb20=">Postman<i class="fa fa-external-link-alt"></i></span>，对使用 <code>curl</code> 命令比较熟悉，那么可替换上面第 2，3 步操作</p>
<ul>
<li>使用授权码获取 Token  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请自行更换 code 参数的值</span></span><br><span class="line">curl -X POST --user clientapp:112233 http://localhost:8080/oauth/token -H <span class="string">&quot;content-type: application/x-www-form-urlencoded&quot;</span> -d <span class="string">&quot;code=8uYpdo&amp;grant_type=authorization_code&amp;redirect_uri=http://localhost:9001/callback&amp;scope=read_userinfo&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li>请求资源服务（业务请求）  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请自行更换 authorization 参数</span></span><br><span class="line">curl -X GET http://localhost:8080/api/userinfo -H <span class="string">&quot;authorization: Bearer 36cded80-b6f5-43b7-bdfc-594788a24530&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1594949675/blog/curl-auth.png" alt=""></p>
<h2 id="扩展"><a class="header-anchor" href="#扩展"></a>扩展</h2>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5pb2NvZGVyLmNuL1NwcmluZy1TZWN1cml0eS9PQXV0aDItbGVhcm5pbmctc3RvcmUvP3NlbGY=">芋道 Spring Security OAuth2 存储器<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9saWFvZGFucWkubWUvMjAxOS8xMC8yNC9vYXV0aC1ncmFudC10eXBlLw==">浅谈 OAuth 2.0 (二) - 授权类型<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2xpbnlpc2h1aS50b3AvMjAxOTExMTcwMS5odG1s">Spring Security OAuth2<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>OAuth2</tag>
      </tags>
  </entry>
  <entry>
    <title>构建基础SSM框架</title>
    <url>/2018/05/20/ssm/</url>
    <content><![CDATA[<h2 id="SSM结构"><a class="header-anchor" href="#SSM结构"></a>SSM结构</h2>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1528039004/blog/ssm-structure.png" alt="SSM"></p>
<span id="more"></span>
<h2 id="SSM框架整合"><a class="header-anchor" href="#SSM框架整合"></a>SSM框架整合</h2>
<p>所谓的SSM即：Spring，SpringMVC，Mybatis</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zcHJpbmcuaW8=">Spring<i class="fa fa-external-link-alt"></i></span>：一个轻量级的框架，有很多的拓展功能，最主要的我们一般项目使用的就是IOC和AOP。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1s">SpringMVC<i class="fa fa-external-link-alt"></i></span>：Spring实现的一个Web层，相当于Struts的框架，但是比Struts更加灵活和强大.</li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5teWJhdGlzLm9yZy9teWJhdGlzLTM=">Mybatis<i class="fa fa-external-link-alt"></i></span>：一个持久层的框架，在使用上相比Hibernate更加灵活，可以控制SQL的编写，使用 XML或注解进行相关的配置.</li>
</ul>
<h2 id="实战项目"><a class="header-anchor" href="#实战项目"></a>实战项目</h2>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1528647074/blog/ssm-practice.png" alt="ssm-practice"></p>
<p>项目功能：</p>
<ol>
<li>Spring,SpringMVC,Mybatis框架整合</li>
<li>Create Features</li>
<li>Retrieve Features</li>
<li>Update Features</li>
<li>Delete Features</li>
</ol>
<blockquote>
<p>项目示例：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Jvb3RDbHVzdGVyL3JjLXNzbS90cmVlL2V4YW1wbGU=">rc-ssm<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="其他"><a class="header-anchor" href="#其他"></a>其他</h2>
<h3 id="ajax之PUT请求"><a class="header-anchor" href="#ajax之PUT请求"></a>ajax之PUT请求</h3>
<p>客户端ajax方式发送PUT请求，Tomcat默认不会对请求进行处理；<br>
Tomcat：</p>
<ol>
<li>将请求体中的数据，封装成一个map</li>
<li>request.getParameter(“fileName”)就会从这个map中取值</li>
<li>springMVC封装POJO对象时，会把POJO中的属性的值，request.getParameter(“fileName”)</li>
</ol>
<p>解决方式：</p>
<ul>
<li>
<p>方式一：Ajax发送POST请求<br>
Ajax中type:“POST”<br>
data: $(“”).serialize()+“&amp;_method=PUT”</p>
</li>
<li>
<p>方式二：web配置中添加HttpPutFormContentFilter过滤器<br>
1.HttpPutFormContentFilter将请求体中的数据解析包装成一个map<br>
2.request被重新包装，request.getParameter()被重写，从自己封装的map中取出数据</p>
</li>
</ul>
<h3 id="获取属性的值"><a class="header-anchor" href="#获取属性的值"></a>获取属性的值</h3>
<p>prop修改和读取DOM原生属性的值<br>
attr修改和读取自定义属性的值</p>
]]></content>
      <categories>
        <category>Frame</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>复盘 2019 —— 安全上车</title>
    <url>/2020/01/22/summary-2019/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试……" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ddaae9fefc9aca0002060c6a7e5d2c55520e8016b92c2591925517b8b3173e0c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这里需要密码才能访问</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Summary</category>
      </categories>
      <tags>
        <tag>Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 同步 Fork 项目</title>
    <url>/2018/08/01/syncing-a-fork/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2l0aHViLmNvbQ==">Github<i class="fa fa-external-link-alt"></i></span> 全球最大的同性交友网站，这里拥有最前沿的IT技术创新，拥有最流行的开源项目，等等…，总之这里是我的知识仓库，每天都会在上面寻找，学习知识</p>
<p>扯远了，本篇解决对于fork的项目，如何进行源项目的更新和同步问题</p>
<span id="more"></span>
<h2 id="远程仓库"><a class="header-anchor" href="#远程仓库"></a>远程仓库</h2>
<ol>
<li>查看fork项目的远程仓库信息 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)</span><br><span class="line">origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)</span><br></pre></td></tr></table></figure>
</li>
<li>设置源项目仓库地址 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</span><br></pre></td></tr></table></figure>
</li>
<li>检查远程地址信息 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)</span><br><span class="line">origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)</span><br><span class="line">upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)</span><br><span class="line">upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="同步源仓库信息"><a class="header-anchor" href="#同步源仓库信息"></a>同步源仓库信息</h2>
<ol>
<li>获取源仓库更新 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch upstream</span><br><span class="line">remote: Counting objects: 75, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (53/53), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 62 (delta 27), reused 44 (delta 9)</span><br><span class="line">Unpacking objects: 100% (62/62), <span class="keyword">done</span>.</span><br><span class="line">From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY</span><br><span class="line">* [new branch]      master     -&gt; upstream/master</span><br></pre></td></tr></table></figure>
</li>
<li>查看本地master分支 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li>合并源仓库更新到本地master分支 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge upstream/master</span><br><span class="line">Updating a422352..5fdff0f</span><br><span class="line">Fast-forward</span><br><span class="line">README                    |    9 -------</span><br><span class="line">README.md                 |    7 ++++++</span><br><span class="line">2 files changed, 7 insertions(+), 9 deletions(-)</span><br><span class="line">delete mode 100644 README</span><br><span class="line">create mode 100644 README.md</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="同步源仓库branch"><a class="header-anchor" href="#同步源仓库branch"></a>同步源仓库branch</h2>
<p>在git中master实质是一个特殊的branch，其它的branch的同步和master同步操作并不一样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看项目的所有分支</span></span><br><span class="line">git branch -v</span><br><span class="line"><span class="comment"># 当前项目在master分支，origin/HEAD类似指针，表示项目默认分支是origin/master</span></span><br><span class="line"><span class="comment"># origin/dev，origin/i18n，origin/ivan/feat-custom-lang，origin/master这四个分支是fork项目目前拥有分支</span></span><br><span class="line"><span class="comment"># upstream/dev，upstream/i18n，upstream/master表示源仓库项目所拥有的分支</span></span><br><span class="line">* master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/dev</span><br><span class="line">  remotes/origin/i18n</span><br><span class="line">  remotes/origin/ivan/feat-custom-lang</span><br><span class="line">  remotes/origin/master</span><br><span class="line">  remotes/upstream/dev</span><br><span class="line">  remotes/upstream/i18n</span><br><span class="line">  remotes/upstream/master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到dev分支，同步源仓库dev分支到fork项目的dev分支</span></span><br><span class="line">git checkout -b dev upstream/dev</span><br><span class="line"><span class="comment"># 推送修改到fork项目dev分支</span></span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果源仓库分支已被删除，那么可以在fork项目中删除源仓库已被删除的分支</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除指定分支，并推送到远程仓库</span></span><br><span class="line">git push origin --delete branch_name</span><br></pre></td></tr></table></figure>
<h2 id="同步源仓库tag"><a class="header-anchor" href="#同步源仓库tag"></a>同步源仓库tag</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取源仓库的tag</span></span><br><span class="line">git fetch upstream --tags</span><br><span class="line"><span class="comment"># 将新的的tag推送到fork项目</span></span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cDovL3dpa2kuamlrZXh1ZXl1YW4uY29tL3Byb2plY3QvZ2l0aHViLWJhc2ljcy9mb3JrLXN5bmNlZC5odG1s">同步你的 Fork 仓库<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vYXJ0aWNsZXMvY29uZmlndXJpbmctYS1yZW1vdGUtZm9yLWEtZm9yay8=">Configuring a remote for a fork<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vYXJ0aWNsZXMvc3luY2luZy1hLWZvcms=">Syncing a fork<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Syncing</tag>
      </tags>
  </entry>
  <entry>
    <title>时间（一）之基础概念</title>
    <url>/2020/04/07/time1/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p><strong>时间</strong>是一种尺度，在物理定义是标量，借着时间，事件发生之先后可以按 过去-现在-未来 之序列得以确定（时间点），也可以衡量事件持续的期间以及事件之间和间隔长短（时间段） —— 维基百科</p>

</blockquote>
<span id="more"></span>
<div class="cleanslate w24tz-current-time w24tz-middle" style="display: inline-block !important; visibility: hidden !important; min-width:300px !important; min-height:145px !important;"><p><a href="//24timezones.com/%E6%9D%AD%E5%B7%9E/%E6%97%B6%E9%97%B4" style="text-decoration: none" class="clock24" id="tz24-1586261878-c1501-eyJob3VydHlwZSI6IjI0Iiwic2hvd2RhdGUiOiIxIiwic2hvd3NlY29uZHMiOiIxIiwiY29udGFpbmVyX2lkIjoiY2xvY2tfYmxvY2tfY2I1ZThjNmY3NjBkMDNhIiwidHlwZSI6ImRiIiwibGFuZyI6InpoIn0=" title="杭州 時間" target="_blank" rel="nofollow" herf="https://24timezones.com/clock-widget/digital"></a></p><div id="clock_block_cb5e8c6f760d03a"></div></div>
<script type="text/javascript" src="//w.24timezones.com/l.js" async></script>
<h2 id="单位"><a class="header-anchor" href="#单位"></a>单位</h2>
<p>时间的基本国际单位是<font color=red><strong>秒</strong></font>。定义一秒为 <em>铯-133原子</em> 基态两个超精细能级间跃迁辐射振荡9,192,631,770周所持续的时间，其起点为世界时1958年的开始</p>
<h2 id="时区"><a class="header-anchor" href="#时区"></a>时区</h2>
<p>时区(Time Zone)是地球上的区域使用同一个时间定义。1884年在华盛顿召开国际经度会议时，为了克服时间上的混乱，规定将全球划分为24个时区（东西各 12 个时区）。造成时间上的混乱是由于世界各个国家位于地球不同位置上，因此不同国家，特别是东西跨度大的国家日出、日落时间必定有所偏差(这个偏差我们通常叫做时差)</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1586272206/blog/time-zone.png" alt="图片来自维基百科"></p>
<h3 id="理论时区"><a class="header-anchor" href="#理论时区"></a>理论时区</h3>
<p>理论时区以被 15 整除的经线为中心，向东喜两侧延伸 7.5°，即每 15°划分为一个时区。理论时区的时间采用其中央经线（或标准经线）的地方时。所以每差一个时区，区时相差一个小时，相差多少个时区，就相差多少小时</p>
<h3 id="法定时区"><a class="header-anchor" href="#法定时区"></a>法定时区</h3>
<p>为了避开国界线，有的时区的形状并不规则，而且比较大的国家以国家内部行政分机型为时区界线。例如，中国跨5个时区，但为了使用方便简单并且全国统一使用一个区时，实际上在中国使用东8区的区时一般称为北京时间作为标准时间</p>
<h2 id="GMT"><a class="header-anchor" href="#GMT"></a>GMT</h2>
<p>格林尼治平均时间（英语：Greenwich Mean Time，GMT）是指位于英国伦敦郊区的皇家格林尼治天文台当地的平太阳时，因为本初子午线被定义为通过那里的经线。<br>
自1924年2月5日开始，格林尼治天文台负责每隔一小时向全世界发放调时信息。<br>
格林尼治标准时间的正午是指当平太阳横穿格林尼治子午线时（也就是在格林尼治上空最高点时）的时间。由于地球每天的自转是有些不规则的，而且正在缓慢减速，因此格林尼治平时 <strong>基于天文观测本身的缺陷</strong>，已经被原子钟报时的<font color=red>协调世界时（UTC）所取代</font>。</p>
<h2 id="UTC"><a class="header-anchor" href="#UTC"></a>UTC</h2>
<p>协调世界时（英语：Coordinated Universal Time，法语：Temps Universel Coordonné，简称UTC）是最主要的世界时间标准，其以原子时秒长为基础，在时刻上尽量接近于格林威治标准时间。</p>
<p>中华人民共和国采用ISO 8601:2000的国家标准GB/T 7408-2005《数据元和交换格式 信息交换 日期和时间表示法》中亦称之为协调世界时。</p>
<p>协调世界时是世界上调节时钟和时间的主要时间标准，它与0度经线的平太阳时相差不超过1秒，并不遵守夏令时（<strong>由实验室用足够精确的铯原子钟导出的时间作为原子时，原子时的精确度极高，精度可以达到每2000万年才误差1秒</strong>）。协调世界时是最接近格林威治标准时间（GMT）的几个替代时间系统之一。对于大多数用途来说，UTC时间被认为能与GMT时间互换，但GMT时间已不再被科学界所确定。</p>
<h2 id="DST"><a class="header-anchor" href="#DST"></a>DST</h2>
<p>夏时制（英文：Daylight Saving Time），又称夏令时、日光节约时间，是一种在夏季月份牺牲正常的日出时间，而将时间调快的做法。通常使用夏时制的地区，会在接近春季开始的时候，将时间调快一小时，并在秋季调回正常时间。目前中国已经弃用DST</p>
<h2 id="ISO-8601"><a class="header-anchor" href="#ISO-8601"></a>ISO-8601</h2>
<p>国际标准ISO 8601，是国际标准化组织的日期和时间的表示方法，全称为《数据存储和交换形式·信息交换·日期和时间的表示方法》。目前是2004年12月1日发行的第三版“ISO8601:2004”以替代1998年的第一版“ISO8601:1998”与2000年的第二版“ISO8601:2000”。</p>
<h2 id="计算机中的时间"><a class="header-anchor" href="#计算机中的时间"></a>计算机中的时间</h2>
<h3 id="JSR-310"><a class="header-anchor" href="#JSR-310"></a>JSR-310</h3>
<p>JSR（Java Specification Requests）是Java 规范提案。是指向JCP(Java Community Process)提出新增一个标准化技术规范的正式请求。任何人都可以提交JSR，以向Java平台增添新的API和服务。JSR已成为Java界的一个重要标准。310 是一个编号，在 JDK8 中通过这个标准提供了新的改进日期时间的 API</p>
<p>相信做 Java 开发，对于JDK 的时间 API（小于JDK8版本）肯定都是吐槽不少，主要问题体现在以下几个方面</p>
<ol>
<li>
<p>最开始，Date 既要承载日期信息，又要做日期之间的转换，还要做不同日期格式的显示，职责较繁杂<br>
而后 JDK1.1 开始，将三项职责分开了</p>
<ol>
<li>使用 Calendar 类实现日期和时间字段之间的转换</li>
<li>使用 DateFormat 类来格式化和分析日期字符串</li>
<li>Date 只用来承载日期和时间信息</li>
</ol>
<p>尽管已经区分了各自的职责，但在使用时任然是很不方便</p>
</li>
<li>
<p>谜之 year 和 month</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义的月是 0-11表示 1-12 月</span></span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2020</span>, <span class="number">4</span>, <span class="number">8</span>);</span><br><span class="line"><span class="comment">// 输出结果：Sat May 08 00:00:00 CST 3920</span></span><br><span class="line"><span class="comment">// 年竟然是 3920 = 2020 + 1900</span></span><br><span class="line"><span class="comment">// 月竟然是 May = 4 + 1</span></span><br><span class="line">System.out.println(date);</span><br><span class="line"></span><br><span class="line"><span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">calendar.set(<span class="number">2020</span>, <span class="number">4</span>, <span class="number">8</span>);</span><br><span class="line"><span class="comment">// 输出结果：Fri May 08 11:27:11 CST 2020</span></span><br><span class="line"><span class="comment">// 年输出：和预想一致</span></span><br><span class="line"><span class="comment">// 月输出：还和 Date 一样是输入月份 +1 </span></span><br><span class="line">System.out.println(calendar.getTime());</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Date 与 Calendar 类中的所有属性是可变的，线程不安全</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算两个日期之间的天数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Calendar</span> <span class="variable">birth</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">    birth.set(<span class="number">1975</span>, Calendar.MAY, <span class="number">26</span>);</span><br><span class="line">    <span class="type">Calendar</span> <span class="variable">now</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">    System.out.println(daysBetween(birth, now));</span><br><span class="line">    <span class="comment">// 连续计算两个 Date 实例的话，第二次会取得 0，因为 Calendar 状态是可变的</span></span><br><span class="line">    System.out.println(daysBetween(birth, now)); <span class="comment">// 显示 0？</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">daysBetween</span><span class="params">(Calendar begin, Calendar end)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">daysBetween</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(begin.before(end)) &#123;</span><br><span class="line">        begin.add(Calendar.DAY_OF_MONTH, <span class="number">1</span>);</span><br><span class="line">        daysBetween++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> daysBetween;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>JSR 310的规范领导者 Stephen Colebourne，同时也是 <span class="exturl" data-url="aHR0cHM6Ly93d3cuam9kYS5vcmcvam9kYS10aW1lLw==">Joda-Time<i class="fa fa-external-link-alt"></i></span> 的创建者，JSR 310是在Joda-Time的基础上建立的，参考了绝大部分的API</p>
</blockquote>
<h3 id="2038年问题"><a class="header-anchor" href="#2038年问题"></a>2038年问题</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1586313844/blog/year_2038_problem.gif" alt="图片来自维基百科"></p>
<p>现时大部分使用UNIX的系统都是32位的，即它们会以32位有符号整数表示时间类型time_t。因此它可以表示136年的秒数。表示协调世界时间1901年12月13星期五20时45分52秒至2038年1月19日3时14分07秒（二进制：01111111 11111111 11111111 11111111，0x7FFF:FFFF），在下一秒二进制数字会是10000000 00000000 00000000 00000000（0x8000:0000），这是负数，因此各系统会把时间误解作1901年12月13日20时45分52秒（亦有可能回归到1970年）。这时可能会令软件发生问题，导致系统瘫痪</p>
<p>当前的解决方案<br>
把系统由32位转为64位系统。在64位系统下，此时间最多可以表示到292,277,026,596年12月4日15时30分08秒</p>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JTk3JUI2JUU5JTk3JUI0">时间 • 维基百科<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JTk3JUI2JUU1JThDJUJB">时区 • 维基百科<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvVU5JWCVFNiU5NyVCNiVFOSU5NyVCNA==">UNIX时间 • 维基百科<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDE=">ISO 8601 • 维基百科<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JUEwJUJDJUU2JTlFJTk3JUU1JUIwJUJDJUU2JUIyJUJCJUU2JUE4JTk5JUU2JUJBJTk2JUU2JTk5JTgyJUU5JTk2JTkz">格林尼治标准时间（GMT） •  维基百科<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JThEJThGJUU4JUIwJTgzJUU0JUI4JTk2JUU3JTk1JThDJUU2JTk3JUI2">协调世界时（UTC） • 维基百科<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhb2xvbmcxL2FydGljbGUvZGV0YWlscy8yMDc0MjYxMw==">计算机世界中的时间概念<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qY3Aub3JnL2VuL2pzci9kZXRhaWw/aWQ9MzEw">JSR 310: Date and Time API<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3Rocm93YWJsZS5jbHViLzIwMjAvMDMvMDIvamF2YS1qc3IzMTAtaW4tYWN0aW9uLw==">JSR310-新日期API(完结篇)-生产实战<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>JDK8</category>
      </categories>
      <tags>
        <tag>JDK8</tag>
        <tag>Time</tag>
      </tags>
  </entry>
  <entry>
    <title>时间（二）之核心类</title>
    <url>/2020/04/08/time2/</url>
    <content><![CDATA[<p>上一篇<a href="https://incoder.org/2020/04/07/time1/">时间（一）</a>文章，我们已经了解学习了时间相关的一些概念和时间相关的其他知识，那么本篇文章开始我们深入在计算机领域中关于时间的相关核心类的知识，先来让我们看看 JSR-310（JDK8+） 和之前（JDK7 之前）的比较</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1586423539/blog/java-time-vs.png" alt=""></p>
<span id="more"></span>
<h2 id="JDK7"><a class="header-anchor" href="#JDK7"></a>JDK7</h2>
<h3 id="Date"><a class="header-anchor" href="#Date"></a>Date</h3>
<p>Date 是 Java 最早提供用来封装日期时间的类，由于不易于国际化且参数计算不符合日常认知或不正确，很多获取年、月、日、小时等数据的方法都已废弃（@Deprecated），被 Calendar 类的方法替代</p>
<p>Date 类有两个关键的成员变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记录当前时间戳</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">long</span> fastTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If cdate is null, then fastTime indicates the time in millis.</span></span><br><span class="line"><span class="comment"> * If cdate.isNormalized() is true, then fastTime and cdate are in</span></span><br><span class="line"><span class="comment"> * synch. Otherwise, fastTime is ignored, and cdate indicates the</span></span><br><span class="line"><span class="comment"> * time.</span></span><br><span class="line"><span class="comment"> * cdate 对象是 BaseCalendar.Date 类，继承自 sun.util.calendar.CalendarDate 包含很多已计算好的日期时间相关变量，如 dayOfWeek(所在星期的第几天)，leapYear(是否闰年)等</span></span><br><span class="line"><span class="comment"> * 如果 cdate 对象为空，用 fastTime 变量代表精确到毫秒的时间</span></span><br><span class="line"><span class="comment"> * 如果 cdate.isNormalized() 方法返回 true，则 fastTime 和 cdate 已经同步过</span></span><br><span class="line"><span class="comment"> * 如果 cdate.isNormalized() 方法返回 false，则忽略 fastTime 的值，使用 cdate 代表时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> BaseCalendar.Date cdate;</span><br></pre></td></tr></table></figure>
<p>Date 类提供了两个构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无参构造方法，创建当前时间的 Date 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Date</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>(System.currentTimeMillis());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个 Unix 时间戳，创建特定的时间 Date 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Date</span><span class="params">(<span class="type">long</span> date)</span>&#123;</span><br><span class="line">    fastTime = date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他通过年月日创建的构造方法已被 Calendar.set() 和 DateFormat.parse() 等方法替代</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>静态方法 <code>System.currentTimeMillis()</code> 返回 UTC 时间从 <font color=#FF0000>1970-01-01 00:00:00</font> 到现在的总<strong>毫秒</strong>数，返回类型为 <strong>long</strong>，也是我们最常见获取当前时间的方法</p>
</blockquote>
<p><code>java.sql.Date</code>，<code>java.sql.Time</code>，<code>java.sql.Timestamp</code> 类都继承自 <code>java.util.Date</code> 类，是专门用于数据库连接的，由于是继承关系，从数据结构来看它们和父类的区别不大。</p>
<p>主要区别在于 <code>Timestamp</code> 类可以表示至纳秒级，其 <code>fastTime</code> 字段从秒之后被截断，毫秒至纳秒精度保持在特有的 <code>nanos</code> 字段中，需要注意 <code>Timestamp</code> 类的纳秒进度可能是 <font color=#FF0000>假的</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.sql.Timestamp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a Timestamp object</span></span><br><span class="line"><span class="comment"> * using a milliseconds time value. The</span></span><br><span class="line"><span class="comment"> * integral seconds are stored in the underlying date value; the</span></span><br><span class="line"><span class="comment"> * fractional seconds are stored in the nanos field of</span></span><br><span class="line"><span class="comment"> * the Timestamp object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> time milliseconds since January 1, 1970, 00:00:00 GMT.</span></span><br><span class="line"><span class="comment"> *        A negative number is the number of milliseconds before</span></span><br><span class="line"><span class="comment"> *         January 1, 1970, 00:00:00 GMT.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> java.util.Calendar</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Timestamp</span><span class="params">(<span class="type">long</span> time)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>((time/<span class="number">1000</span>)*<span class="number">1000</span>);</span><br><span class="line">    nanos = (<span class="type">int</span>)((time%<span class="number">1000</span>) * <span class="number">1000000</span>);</span><br><span class="line">    <span class="keyword">if</span> (nanos &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        nanos = <span class="number">1000000000</span> + nanos;</span><br><span class="line">        <span class="built_in">super</span>.setTime(((time/<span class="number">1000</span>)-<span class="number">1</span>)*<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出，在 <code>fastTime</code> 字段强行截断后，进行毫秒值直接乘以 1000000 的操作后赋给了 nanos 字段，成为了 “只能表示到毫秒的纳秒级精度” 。当然，还可以通过 <code>setNanos(int n)</code> 方法给纳秒数赋精确值。</p>
<p>虽然从数据结构上看没有什么特别，但如果涉及到 Timestamp 类的父子类型转换或时间比较，就需要注意这里的“坑”</p>
<ol>
<li>
<p>equals() 方法的不对称性 <code>java.sql.Timestamp</code> 类和其父类 <code>java.util.Date</code> 的 equals() 方法是不符合对称性</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Data</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="type">Timestamp</span> <span class="variable">timestamp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timestamp</span>(date.getTime());</span><br><span class="line">    System.out.println(date.equals(timestamp));</span><br><span class="line">    System.out.println(timestamp.equals(date));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>时间比较类方法的 “异常” 现象如下，两个有毫秒之差的时间点，<code>after()</code> 方法返回不符合客观事实</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">current</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">Date</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timestamp</span>(current);</span><br><span class="line">    <span class="type">Date</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timestamp</span>(current + <span class="number">1</span>);</span><br><span class="line">    System.out.println(t2.after(t1));</span><br><span class="line">    System.out.println(t2.compareTo(t1) &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>如果在不确定类型的情况下进行时间的比较，尽量使用 <font color=#FF0000>compareTo()</font> 方法，可以保证正确性</p>
<h3 id="Calendar"><a class="header-anchor" href="#Calendar"></a>Calendar</h3>
<p>Calendar 类是一个日历抽象类，提供了一组对年月日时分秒星期等日期信息操作的函数，并针对不同国家和地区的日历提供了相应的子类，即本地化（比如：公历【GregorianCalendar】，佛历【BuddhistCalendar】，日本历【JapaneseImperialCalendar】等）</p>
<p>从 JDK1.1 版本开始，在处理日期和时间时系统推荐使用 Calendar 类进行实现。在设计上，Calendar 类的功能要比 Date 类强大太多，而且在实现方式上也比 Date 类要复杂些</p>
<p>Calendar 类可以通过静态工厂方法或 new 子类的方式来获得实例</p>
<ol>
<li>
<p>getInstance() 方法，有四个重载方法，参数是时区和地区，如果不传会取服务器默认的时区和地区（地区的出现是专门为了区分泰国和日本）</p>
<ul>
<li>getInstance()</li>
<li>getInstance(TimeZone zone)</li>
<li>getInstance(Locale aLocale)</li>
<li>getInstance(TimeZone zone, Locale aLocale)</li>
</ul>
</li>
<li>
<p>新建子类对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>();</span><br></pre></td></tr></table></figure>
<p>Calendar 类可以实现带时区的年月日时分秒星期等对 Unix 时间戳的转换，内部通过子类复杂的 computeTime() 方法进行计算。</p>
<ul>
<li>
<p>使用 getTime() 方法返回 java.util.Date 类型的时间</p>
</li>
<li>
<p>使用 getTimeInMillis() 方法返回当前 Unix 时间戳</p>
</li>
<li>
<p>通过 get(int field) 方法获取其他年月日等单独信息</p>
<table>
<thead>
<tr>
<th style="text-align:center">常量</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Calendar.YEAR</td>
<td style="text-align:center">年份</td>
</tr>
<tr>
<td style="text-align:center">Calendar.MONTH</td>
<td style="text-align:center">月份</td>
</tr>
<tr>
<td style="text-align:center">Calendar.DATE</td>
<td style="text-align:center">日期</td>
</tr>
<tr>
<td style="text-align:center">Calendar.DAY_OF_MONTH</td>
<td style="text-align:center">日期，和上面字段意义完全相同</td>
</tr>
<tr>
<td style="text-align:center">Calendar.HOUR</td>
<td style="text-align:center">12 小时制的小时</td>
</tr>
<tr>
<td style="text-align:center">Calendar.HOUR_OR_DAY</td>
<td style="text-align:center">24 小时制的小时</td>
</tr>
<tr>
<td style="text-align:center">Calendar.MINUTE</td>
<td style="text-align:center">分钟</td>
</tr>
<tr>
<td style="text-align:center">Calendar.SECOND</td>
<td style="text-align:center">秒</td>
</tr>
<tr>
<td style="text-align:center">Calendar.DAY_OF_WEEK</td>
<td style="text-align:center">星期几</td>
</tr>
<tr>
<td style="text-align:center">Calendar.DAY_OF_YEAR</td>
<td style="text-align:center">今年的第几天</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>也可以通过多个 set 重载方法设定各种值，同时，add() 方法支持对单个值的加减，从而实现时间推移的计算，传入负数即为减</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">    System.out.println(<span class="string">&quot;当前日期： &quot;</span> + calendar.getTime());</span><br><span class="line">    calendar.add(Calendar.DATE, <span class="number">10</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;日期+10： &quot;</span> + calendar.getTime());</span><br><span class="line">    calendar.add(Calendar.DATE, -<span class="number">5</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;日期-5： &quot;</span> + calendar.getTime());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">当前日期： Fri Apr <span class="number">10</span> <span class="number">15</span>:<span class="number">37</span>:<span class="number">46</span> CST <span class="number">2020</span></span><br><span class="line">日期+<span class="number">10</span>： Mon Apr <span class="number">20</span> <span class="number">15</span>:<span class="number">37</span>:<span class="number">46</span> CST <span class="number">2020</span></span><br><span class="line">日期-<span class="number">5</span>： Wed Apr <span class="number">15</span> <span class="number">15</span>:<span class="number">37</span>:<span class="number">46</span> CST <span class="number">2020</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><code>GregorianCalendar</code> 对象可以直接使用 <code>isLeapYear(int year)</code> 接口判断是否闰年。需要注意两点</p>
<ol>
<li>Calendar 中 MONTH 的范围： 0-11（Calendar.JANUARY - Calendar.DECEMBER），因此为避免使用错，<font color=#FF0000>Calendar.JANUARY</font> 来表示一月</li>
<li>Calendar 中 DAY_OF_WEEK <font color=#FF0000>星期日是 1</font>，并不是我们习惯的星期一是 1</li>
</ol>
<h3 id="SimpleDateFormat"><a class="header-anchor" href="#SimpleDateFormat"></a>SimpleDateFormat</h3>
<p><code>SimpleDateFormat</code> 是一个以语言环境敏感的方式来格式化和分析日期的类，SimpleDateFormat允许选择任何用户自定义的日期时间格式来格式化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    System.out.println(<span class="string">&quot;格式化之前： &quot;</span> + date);</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">ft</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;z yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;格式化之后： &quot;</span> +  ft.format(date));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">格式化之前： Fri Apr <span class="number">10</span> <span class="number">15</span>:<span class="number">55</span>:<span class="number">42</span> CST <span class="number">2020</span></span><br><span class="line">格式化之后： CST <span class="number">2020</span>-<span class="number">04</span>-<span class="number">10</span> <span class="number">15</span>:<span class="number">55</span>:<span class="number">42</span></span><br></pre></td></tr></table></figure>
<h4 id="字符含义"><a class="header-anchor" href="#字符含义"></a>字符含义</h4>
<p>日期和时间格式由日期和时间模式字符串中的日期和时间模式字符串指定，从 <code>A</code> 到 <code>Z</code> 和从 <code>a</code> 到 <code>z</code> 的无引号字母被解释为表示日期或时间字符串组件的模式字母。可以使用单引号<code>'</code>引用文本以避免解释。&quot;<code>''</code>&quot;表示单引号。所有其他字符都不会被解释；它们只是在格式化期间复制到输出字符串中，或者在解析期间与输入字符串匹配。</p>
<p>定义了以下模式字母（所有其他字符<code>A</code> — <code>Z</code> 和 <code>a</code> - <code>z</code> 保留），详细说明见 <code>SimpleDateFormat</code> 类 Java Doc 中注释明</p>
<table>
<thead>
<tr>
<th style="text-align:center">字母</th>
<th style="text-align:center">日期或时间组成</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">G</td>
<td style="text-align:center">Era designator【是一个代号】</td>
<td>Text</td>
<td>AD</td>
</tr>
<tr>
<td style="text-align:center">y（小写）</td>
<td style="text-align:center">Year【年】</td>
<td>Year</td>
<td>1996; 96</td>
</tr>
<tr>
<td style="text-align:center">Y</td>
<td style="text-align:center">Week year【周年】</td>
<td>Year</td>
<td>2009; 09</td>
</tr>
<tr>
<td style="text-align:center">M</td>
<td style="text-align:center">Month in year (context sensitive)【一年中的月份(上下文相关)】</td>
<td>Month</td>
<td>July; Jul; 07</td>
</tr>
<tr>
<td style="text-align:center">L</td>
<td style="text-align:center">Month in year (standalone form)【一年中的月份(独立形式)】</td>
<td>Month</td>
<td>July; Jul; 07</td>
</tr>
<tr>
<td style="text-align:center">w（小写）</td>
<td style="text-align:center">Week in year【一年中的第几周】</td>
<td>Number</td>
<td>27</td>
</tr>
<tr>
<td style="text-align:center">W</td>
<td style="text-align:center">Week in month【每月的周】</td>
<td>Number</td>
<td>2</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td style="text-align:center">Day in year【一年中的一天】</td>
<td>Number</td>
<td>189</td>
</tr>
<tr>
<td style="text-align:center">d（小写）</td>
<td style="text-align:center">Day in month【每月的一天】</td>
<td>Number</td>
<td>10</td>
</tr>
<tr>
<td style="text-align:center">F</td>
<td style="text-align:center">Day of week in month【每月的星期几】</td>
<td>Number</td>
<td>2</td>
</tr>
<tr>
<td style="text-align:center">E</td>
<td style="text-align:center">Day name in week【星期几】</td>
<td>Text</td>
<td>Tuesday; Tue</td>
</tr>
<tr>
<td style="text-align:center">u（小写）</td>
<td style="text-align:center">Day number of week (1 = Monday, …, 7 = Sunday)</br> 【星期几(1 =星期一，…，7 =星期日)】</td>
<td>Number</td>
<td>1</td>
</tr>
<tr>
<td style="text-align:center">a（小写）</td>
<td style="text-align:center">Am/pm marker【上午/下午标记】</td>
<td>Text</td>
<td>PM</td>
</tr>
<tr>
<td style="text-align:center">H</td>
<td style="text-align:center">Hour in day (0-23)【一天中的小时，0-23表示】</td>
<td>Number</td>
<td>0</td>
</tr>
<tr>
<td style="text-align:center">k（小写）</td>
<td style="text-align:center">Hour in day (1-24)【一天中的小时， 1-24表示】</td>
<td>Number</td>
<td>24</td>
</tr>
<tr>
<td style="text-align:center">K</td>
<td style="text-align:center">Hour in am/pm (0-11)【上午/下午 0-11表示】</td>
<td>Number</td>
<td>0</td>
</tr>
<tr>
<td style="text-align:center">h（小写）</td>
<td style="text-align:center">Hour in am/pm (1-12)【上午/下午 1-12表示】</td>
<td>Number</td>
<td>12</td>
</tr>
<tr>
<td style="text-align:center">m（小写）</td>
<td style="text-align:center">Minute in hour【一小时内】</td>
<td>Number</td>
<td>30</td>
</tr>
<tr>
<td style="text-align:center">s（小写）</td>
<td style="text-align:center">Second in minute【分钟】</td>
<td>Number</td>
<td>55</td>
</tr>
<tr>
<td style="text-align:center">S</td>
<td style="text-align:center">Millisecond【毫秒】</td>
<td>Number</td>
<td>978</td>
</tr>
<tr>
<td style="text-align:center">z（小写）</td>
<td style="text-align:center">Time zone【时区】</td>
<td>General time zone</td>
<td>Pacific Standard Time;</br> PST; GMT-08:00</td>
</tr>
<tr>
<td style="text-align:center">Z</td>
<td style="text-align:center">Time zone【时区】</td>
<td>RFC 822 time zone</td>
<td>-0800</td>
</tr>
<tr>
<td style="text-align:center">X</td>
<td style="text-align:center">Time zone【时区】</td>
<td>ISO 8601 time zone</td>
<td>-08; -0800; -08:00</td>
</tr>
</tbody>
</table>
<h4 id="格式化示例"><a class="header-anchor" href="#格式化示例"></a>格式化示例</h4>
<p>给定太平洋时间，2001-07-04 12:08:56，以下示例展示按照自定的格式显示时间</p>
<table>
<thead>
<tr>
<th>日期和时间模式</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>“yyyy.MM.dd G ‘at’ HH:mm:ss z”</td>
<td>2001.07.04 AD at 12:08:56 PDT</td>
</tr>
<tr>
<td>“EEE, MMM d, ''yy”</td>
<td>Wed, Jul 4, '01</td>
</tr>
<tr>
<td>“h:mm a”</td>
<td>12:08 PM</td>
</tr>
<tr>
<td>“hh ‘o’‘clock’ a, zzzz”</td>
<td>12 o’clock PM, Pacific Daylight Time</td>
</tr>
<tr>
<td>“K:mm a, z”</td>
<td>0:08 PM, PDT</td>
</tr>
<tr>
<td>“yyyyy.MMMMM.dd GGG hh:mm aaa”</td>
<td>02001.July.04 AD 12:08 PM</td>
</tr>
<tr>
<td>“EEE, d MMM yyyy HH:mm:ss Z”</td>
<td>Wed, 4 Jul 2001 12:08:56 -0700</td>
</tr>
<tr>
<td>“yyMMddHHmmssZ”</td>
<td>010704120856-0700</td>
</tr>
<tr>
<td>“yyyy-MM-dd’T’HH:mm:ss.SSSZ”</td>
<td>2001-07-04T12:08:56.235-0700</td>
</tr>
<tr>
<td>“yyyy-MM-dd’T’HH:mm:ss.SSSXXX”</td>
<td>2001-07-04T12:08:56.235-07:00</td>
</tr>
<tr>
<td>“YYYY-'W’ww-u”</td>
<td>2001-W27-3</td>
</tr>
</tbody>
</table>
<h3 id="TimeZone"><a class="header-anchor" href="#TimeZone"></a>TimeZone</h3>
<h2 id="JDK8"><a class="header-anchor" href="#JDK8"></a>JDK8+</h2>
<h3 id="Clock"><a class="header-anchor" href="#Clock"></a>Clock</h3>
<h3 id="Instant"><a class="header-anchor" href="#Instant"></a>Instant</h3>
<h3 id="LocalDate"><a class="header-anchor" href="#LocalDate"></a>LocalDate</h3>
<h3 id="LocalTime"><a class="header-anchor" href="#LocalTime"></a>LocalTime</h3>
<h3 id="LocalDateTime"><a class="header-anchor" href="#LocalDateTime"></a>LocalDateTime</h3>
<h3 id="OffsetTime"><a class="header-anchor" href="#OffsetTime"></a>OffsetTime</h3>
<h3 id="OffsetDateTime"><a class="header-anchor" href="#OffsetDateTime"></a>OffsetDateTime</h3>
<h3 id="ZonedDateTime"><a class="header-anchor" href="#ZonedDateTime"></a>ZonedDateTime</h3>
<h3 id="ZoneId"><a class="header-anchor" href="#ZoneId"></a>ZoneId</h3>
<h3 id="Year"><a class="header-anchor" href="#Year"></a>Year</h3>
<h3 id="Month"><a class="header-anchor" href="#Month"></a>Month</h3>
<h3 id="DayOfWeek"><a class="header-anchor" href="#DayOfWeek"></a>DayOfWeek</h3>
<h3 id="MonthDay"><a class="header-anchor" href="#MonthDay"></a>MonthDay</h3>
<h3 id="YearMonth"><a class="header-anchor" href="#YearMonth"></a>YearMonth</h3>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS90ZWNobmV0d29yay9jbi9hcnRpY2xlcy9qYXZhL2pmMTQtZGF0ZS10aW1lLTIxMjUzNjctemhzLmh0bWw/cHJpbnRPbmx5PTE=">Java SE 8 日期和时间<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mvb01RLS1nTE9HTVhwYmxNNGc4VG5aQQ==">循序渐进解读计算机中的时间—应用篇（上）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvTjVLa2t5OU15QTliNzNTTTNOVlZFUQ==">循序渐进解读计算机中的时间—应用篇（下）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3Rocm93YWJsZS5jbHViLzIwMTkvMDEvMDEvamF2YS1qc3IzMTAtdGltZS1hcGk=">JSR310新日期API(二)-日期时间API<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kc2x6dHguZ2l0aHViLmlvL2Jsb2cvMjAxOC8wOS8wNy9KYXZhJUU0JUI4JUFEJUU2JTk3JUE1JUU2JTlDJTlGJUU2JTk3JUI2JUU5JTk3JUI0JUU3JTlCJUI4JUU1JTg1JUIzJUU2JUEwJUI4JUU1JUJGJTgzJUU3JUIxJUJC">Java中日期时间相关核心类<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8yNjc3MjYzMg==">《Java 8 实战》● 第 12 章<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>JDK8</category>
      </categories>
      <tags>
        <tag>JDK8</tag>
        <tag>Time</tag>
      </tags>
  </entry>
  <entry>
    <title>时间（三）之格式化解析和时间计算</title>
    <url>/2020/04/09/time3/</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFlbGR1bmcuY29tL2phdmEtZGF0ZS10by1sb2NhbGRhdGUtYW5kLWxvY2FsZGF0ZXRpbWU=">Convert Date to LocalDate or LocalDateTime and Back<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3Rocm93YWJsZS5jbHViLzIwMTkvMDEvMDUvamF2YS1qc3IzMTAtZGF0ZS10aW1lLWZvcm1hdC1wYXJzZS8=">JSR310新日期API(三)-日期时间格式化与解析<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kc2x6dHguZ2l0aHViLmlvL2Jsb2cvMjAxOC8wOS8wNy9KYXZhJUU0JUI4JUFEJUU2JTk3JUE1JUU2JTlDJTlGJUU2JTk3JUI2JUU5JTk3JUI0JUU3JTlCJUI4JUU1JTg1JUIzJUU2JUEwJUI4JUU1JUJGJTgzJUU3JUIxJUJCLw==">Java中日期时间相关核心类<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>JDK8</category>
      </categories>
      <tags>
        <tag>JDK8</tag>
        <tag>Time</tag>
      </tags>
  </entry>
  <entry>
    <title>时间（四）之主流框架中使用</title>
    <url>/2020/04/10/time4/</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS90ZWNobmV0d29yay9jbi9hcnRpY2xlcy9qYXZhL2pmMTQtZGF0ZS10aW1lLTIxMjUzNjctemhzLmh0bWw/cHJpbnRPbmx5PTE=">Java SE 8 日期和时间<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3Rocm93YWJsZS5jbHViLzIwMTkvMDEvMDEvamF2YS1qc3IzMTAtdGltZS1hcGkv">JSR310新日期API(二)-日期时间API<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kc2x6dHguZ2l0aHViLmlvL2Jsb2cvMjAxOC8wOS8wNy9KYXZhJUU0JUI4JUFEJUU2JTk3JUE1JUU2JTlDJTlGJUU2JTk3JUI2JUU5JTk3JUI0JUU3JTlCJUI4JUU1JTg1JUIzJUU2JUEwJUI4JUU1JUJGJTgzJUU3JUIxJUJCLw==">Java中日期时间相关核心类<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>JDK8</category>
      </categories>
      <tags>
        <tag>JDK8</tag>
        <tag>Time</tag>
      </tags>
  </entry>
  <entry>
    <title>重要说明</title>
    <url>/2022/06/05/top1/</url>
    <content><![CDATA[<p>距离上一次更新文章已经过去了 1 年多了，时间可过的真快。原计划将现在的主站点要进行按照领域划分，将平时工作中遇到的、实践的技术整理到对应的领域，方便快速查找，提供一个沉浸式的学习知识体验，但由于个人也是一个懒癌拖更患者，加之在过去的一年工作中处在新领域，学习了很多技术，很多笔记还没有整理完善，因此没有及时更新博客，同时最近也遇到了站点无法正常访问，经过一系列的排查，发现了是由于开源的 CDN 提供方 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pzZGVsaXZyL2pzZGVsaXZyL2lzc3Vlcy8xODM5Nw==">jsdelivr<i class="fa fa-external-link-alt"></i></span> 被污染了 DNS，因此不得不先更新站点的基础服务，以便能正常访问</p>
<span id="more"></span>
<blockquote>
<p>话说，国内的网络环境真的是一言难尽，不得不说在技术、技术基础设施、技术思想等发展道路上任重道远</p>
</blockquote>
<p>对于个人几个主要的站点，规划如下</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaW5jb2Rlci5vcmc=">incoder.org<i class="fa fa-external-link-alt"></i></span>: 作为分享生活、感悟、个人状态为主的地方，偶尔汇总某些技术等的综合性文章</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9iYWNrZW5kLmluY29kZXIub3Jn">backend.incoder.org<i class="fa fa-external-link-alt"></i></span>: 记录以 Java 为基础的后端开发生态技术领域</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9iYWNrZW5kLmluY29kZXIub3Jn">mobile.incoder.org<i class="fa fa-external-link-alt"></i></span>: 记录以原生开发为基础的移动端开发生态技术</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pbmNvZGVyLmFwcA==">incoder.app<i class="fa fa-external-link-alt"></i></span>: 记录个人开源应用</li>
</ol>
<div class="note info"><p>后续会迁移本站点部分文章到具体的领域站点</p>
</div>]]></content>
      <categories>
        <category>Top</category>
      </categories>
      <tags>
        <tag>Top</tag>
      </tags>
  </entry>
  <entry>
    <title>长沙</title>
    <url>/2020/05/01/travel-cs/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>Memory</category>
        <category>Travel</category>
      </categories>
      <tags>
        <tag>长沙</tag>
      </tags>
  </entry>
  <entry>
    <title>川藏行 —— 人在囧途</title>
    <url>/2020/10/13/travel-cz-feel/</url>
    <content><![CDATA[<p>这次假期安排算是毕业后，除去 2020 年春节因为疫情，假期最长的一个，满脑子写着高兴，以至于我出门前一刻，还在处理工作上的事情，浑浑噩噩的追下午的动车和好友汇合，哪知道这只是囧途的开始，在地铁上我快要困死过去，还好没有坐过站，之前有看一眼车站，但是并没有仔细看具体是哪个站，在我的潜意识里一直认为是东站，当我冲到检票口时，我刷身份证发现进不了站，工作人员说我跑错站，我当时一脸茫然（心想跑错站也没关系，只要它经过东站就可以），赶紧查看我的购票记录，发现自己真是跑错了车站而且还不经过东站，距离发车时间就剩 1 小时了</p>
<span id="more"></span>
<p>计算了下地铁和检票时间，得出现在赶过去时间非常紧，万一中途出现什么状况，我肯定要凉凉，立马决定改签到东站出发的列车，但是我这次购票是用的 12306 行程<strong>积分兑换</strong>的，不能直接在手机上进行改签或退票，于是我就赶忙拖着行李去往 1 楼的人工服务窗口，意外的是我恰巧跑向了东边的人工窗口，到了东边绕了一圈发现今天东边窗口不提供服务，于是乎我又从东边一路小跑到西边窗口，今天并不是周末，但人也是不少在排队，我必须在 1 小时之内改签车票，否则我当时购买的车次发车的话，我必须得在原车票的起点站去改签，而原车站后面到达目的地的时间太晚，我根本赶不上飞机(〒︿〒)</p>
<p>这次看清了对应业务的办理窗口，我找到其中一个进行排队，焦急地等待着，不清楚前面那位朋友是什么状况，办理他一个人的时间足足等了 10 多分钟，一边看着手机查询车次，一边盯着时间，眼看就要到我了，那工作人员却说暂停服务，她要去趟卫生间，我说我很赶时间，她没理会我，此时的我进退两难，去排另一个队，时间明显不够，我也没办法去插队，两眼一直盯着在我前方的窗口，还好还好，工作人员大概耽误了 3 分多钟回到岗位上，帮我办理改签，由于我当时兑换的是动车，现在发车时间最近的一趟是高铁，需要再补 3000+积分，还好我的积分还够，那还等什么，改改改，改签完成后长舒一口气，再晚 10 分钟，我要么去原发车站去改签，要么重新购买在东站购买车票（此时我并不能在手机上购买车票，因为原行程和我从当前位置出发的行程是冲突的，必须得在会员人工窗口办理退票）</p>
<h2 id="12306"><a class="header-anchor" href="#12306"></a>12306</h2>
<h3 id="12306会员积分使用规则"><a class="header-anchor" href="#12306会员积分使用规则"></a>12306会员积分使用规则</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1606645414/blog/12306-member.png" alt="12306会员积分使用规则"></p>
<h3 id="12306车票改签规则"><a class="header-anchor" href="#12306车票改签规则"></a>12306车票改签规则</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1606645414/blog/12306-change-ticket.png" alt="12306车票改签规则"></p>
<h3 id="12306车票退票规则"><a class="header-anchor" href="#12306车票退票规则"></a>12306车票退票规则</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1606645414/blog/12306-refund-ticket.png" alt="12306车票退票规则"></p>
<p>改签完车票后，距离发车时间还有 1 个小时，我赶忙在候车厅二楼找到一个饭馆，去点了些东西，吃着东西，一个电话打断了我囫囵吞枣的状态，说是项目线上环境，某页面数据加载不出来，让我看看是什么原因，是不是我中午出发前改的东西影响了，我一脸问号，因为我改动的并没有涉及到页面加载慢的地方，那边说下午要线上演示，让我抽空看看处理下，我连忙说我尽量。距离检票时间还是有 30 多分钟，我放下了手里的鸡腿，开启手机热点，打开电脑，盯着屏幕今天的提交记录，一遍遍排查，自己的没有做相关的操作，当前我也没有心思定下心来找问题的根源，想着先把超时时间调大些，先保证能加载出来数据，至于慢的问题，我到达目的地后再处理，三下五除二调整后，发布测试，并没有什么用😔，于是继续找到对应 API 服务，把对应的服务接口查询做了下优化处理，想让服务正常使用，处理调试后，发现可以接受，来不及多想，赶忙收拾东西去检票上车，一路狂奔</p>
<p>到达中转站，和好友汇合，终于停下来了，接过带给我的心心念念的的芋泥奶茶，我就不客气的解决掉它，别喝边说着，快一年没见，怎么又长高了，变瘦了，你都偷偷补了啥，她弱弱的回了句，我不挑食的，我一脸尴尬，她知道我挑食，不吃肉（尤其是外面，老妈做的肉，我还是能吃点），我赶忙说到，我在努力克服这个了，现在还是能稍微吃一点的，两人在候机厅断断续续有一搭没一搭的说着今年发生的事情，说着说着，突如其来的语音播报，由于疫情影响，我们所乘航班推迟，还好没有说是取消，不然今天我要囧到家😶，按照要求填写好行程路径，在线领取健康码后（为啥全国的健康码还没统一，一脸嫌弃，不前一阵子说健康码全国通用嘛），延迟 40 分钟左右，终于登上了前往成都的飞机，在一路的折腾，飞机起飞后，夜景也没来得急看我就睡着了，到达成都后才被朋友叫醒</p>
<h2 id="天府之国-成都"><a class="header-anchor" href="#天府之国-成都"></a>天府之国 - 成都</h2>
<p>在这里，每件事或物都能和国宝相连，要是这里生活的话，我居然有我也是“国宝”的错觉，哈哈哈，突然有点厚脸皮了，谁让这家伙那么可爱，第一天就把市区能去的都逛了个七七八八，到底是 3 个年轻人，身体真好，哎，都没有停下来好好看看成都的美女帅哥，都光顾着吃喝和看风景了，话不多说，先来几张图片缓和下气氛，写到这里我又想起了蛋烘糕，想吃，想起了又辣又麻的椒麻鸡，想吃，想起了兔头（真是让人秃头，兔兔那么可爱，为啥要吃兔兔，其实我更喜欢兔子肉，哈哈哈），想吃。啊好难受，都想吃，我觉得我如果待在这个城市，一定能长胖<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1606656901/blog/travel/sc-panda.jpg" alt=""><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1606668747/blog/travel/sc-alley.jpg" alt=""><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1606668748/blog/travel/sc-street.jpg" alt=""><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1606668748/blog/travel/sc-memory.jpg" alt=""><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1606668748/blog/travel/sc-hot-pot.jpg" alt=""><br>
皂片有点多，就放这几张吧，看看就好，后面两天是不是下点小雨，阴蒙蒙的天气就和我当时的心情对应上了，因为我还要修改问题，前面留下的坑，还要去填，真的，真的，真的我不是故意要把工作的事情带到旅途中来的，下次我一定不带电脑了，打死不带，刀架到我脖子也不带。让某位同学一整天都在家里刷剧，真是罪过罪过（虽然你曾经这里待了很久，尝遍了这里美食，看尽了这里的美景，但这不一样，因为和你同看风景，同品美食的是不同的人，不同的心情）</p>
<p>话说回来玉林街道那里好吃的真多，那个谁自己要控制住，不然想瘦真的有点难，话说回来在成都的 3 天虽然有<code>亿</code>点点的不完美，但是正是由于这些不完美，才让我的记忆更加深刻。按照网上所谓的高评分美食，走路老远的路过去，发现吃完并没有想想中那么好吃（我严重怀疑他们是刷单刷出来的）；不看清目的地营业时间，跑去傻傻的在门口不知道该往哪去（告诫我下次做规划这种事情一定提前要有备用计划）；一起搭公交车去很远的地方买甜点，虽然有点小远，但是值得。</p>
<p>不知道下次会是什么时候再去成都了，也不知道下次身边会是谁，能不能像现在一样能聚在一起。我想的可真远，大白天发什么神经，还是过好眼前的，得嘞……珍惜现在拥有的</p>
<p>三天后，一行三人出发，前往西藏拉萨。我们并没有搭乘火车，而是选择了飞机，谁让这价格那么香，还能节省接近 2 天的时间。抵达拉萨后，并没有出现不良的反应</p>
<h2 id="日光之城-拉萨"><a class="header-anchor" href="#日光之城-拉萨"></a>日光之城 - 拉萨</h2>
<p>引入眼帘给我的第一感觉是蓝，蓝的彻彻底底，没加半点人工滤镜渲染，也没 AI 换天，这里随手拍照都能拍到非常好看的图片，不需要修图，这里的云也很配合，像是一种出淤泥而不染的干净，在蓝色背景的映衬下，云朵就像是在你的手边随手都可以去摘下来捧在手里，话不多说，我们先来看拉萨的牌面，大气恢弘的建筑俯瞰整个拉萨市（标准的游客拍照）<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1606698602/blog/travel/lhasa-potala-palace.jpg" alt=""><br>
第一天就头疼的么，不存在的，这里海拔也不过 3600 左右，还是能接受的，只不过快步走或跑步是真的比内陆容易喘气。在高原地带由于氧气稀薄，汽车大部分的燃油都没有充分燃烧，尾气直接排进空气，这种味道会让你欲仙欲死。四天的行程已提前被安排，跟着导游，听他安排</p>
<p>第二天一大早就集结，开始 4 天的行程，行程结束后再回到拉萨市区，迎着朝阳汇聚了来自不同地方 12 个小伙伴，接下来的这几天我们这些人就是一个小群体，彼此互相照顾，所幸我们所在的团队中年龄都不大，都是年轻小伙和年轻姑娘，大家之间也没什么隔阂，很快就能玩耍到一块去，下图是 07：35 这个点，这里的天还没有完全亮<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1606719263/blog/travel/lhasa-white-tower.jpg" alt=""></p>
<p>我们行程的这几天天气非常好，都是蓝天白云，刚开始不停的按下快门，想要记录下这让人心旷神怡的美景，生怕自己错过了最美的时刻，但到后来都有些麻木了，原因是你只要抬头就能看到，根本拍不过来，索性就好好沉浸其中，好好呼吸这有点甘甜的空气<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1606720963/blog/travel/lhasa-nyenchen-tanglha.jpg" alt=""><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1606723559/blog/travel/lhasa-sky.jpg" alt=""></p>
<p>当蓝天配上纳木错的美景，是一种秀色可餐的满足感<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1606723894/blog/travel/lhasa-namtso1.jpg" alt=""><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1606723894/blog/travel/lhasa-namtso2.jpg" alt=""></p>
<p>当蓝天被雄鹰所占领，这就是鹰击长空现实版<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1606724168/blog/travel/lhasa-eagle.jpg" alt=""></p>
<p>当所有的疲惫和不适到了珠峰大本营，都会被抛之脑后，因为我已深深被这傲视群雄的孤独所吸引，第一次与世界最最高峰是这么的近<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1606724979/blog/travel/mount-qomolangma.jpg" alt=""></p>
<blockquote>
<p>照片实在是有点多，继续挖坑后面整理成相册再放出来</p>
</blockquote>
<p>上一次超过 30H 的行程，那会刚毕业，一路上总能听到各式各样千奇百怪的故事，和遇到一些形形色色的路人，因为那时候，在火车上经常没有信号，大家会一起唠唠嗑，我就听着这样乱七八糟的故事和别人经历的事，不想听了就翻开自己带的书，就这样度过那漫长的行程。而现在网络普及，信号增强了，但是人与人的交流好像都被转移到线上了，在一块面对面交流的人少了，故事也都来源于那块屏幕，隔着屏幕说话，科技的初衷是提高我们的生活质量和方便我们的生活，而不是隔断人与人的面对面交流</p>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1606725898/blog/travel/lhasa-future.jpg" alt=""></p>
<blockquote class="blockquote-center">
<p>有形的东西迟早会凋零，但只有回忆是永远不会凋零的</p>

</blockquote>
<ol>
<li>好好学一下摄影和构图吧，总会用得上</li>
<li>要把快乐传染给周围的人</li>
<li>有话就要说，别一个人闷在心里</li>
<li>把想到的感受到的及时记录下来，有时候灵感，想法就是那么昙花一现</li>
<li>多吃点肉吧，不然风一吹朋友就找不到我了</li>
</ol>
]]></content>
      <categories>
        <category>Memory</category>
        <category>Travel</category>
      </categories>
      <tags>
        <tag>成都</tag>
        <tag>拉萨</tag>
      </tags>
  </entry>
  <entry>
    <title>川藏行 —— 行程规划</title>
    <url>/2020/09/13/travel-cz-plan/</url>
    <content><![CDATA[<p>唠叨了很久的《成都》，这次终于要去见一见你了，成都在我的印象中是一个万物皆可辣，但也少不了让你肉跳的麻，那里有让你每天不重样的美食，有看不完的美景，也有能让你安逸的歌谣<span class="exturl" data-url="aHR0cDovL211c2ljLjE2My5jb20vc29uZz9pZD00MzY1MTQzMTImdXNlcmlkPTM0NTA5OTA2">《成都》<i class="fa fa-external-link-alt"></i></span>。早在去年十一就被<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTlFNDExOTdLYz9wPTI=">《盛世中华》<i class="fa fa-external-link-alt"></i></span>视频种草，时隔一年，这个心愿要就要被实现，这次的十一目标不仅是四川，还有西藏的风景，这是双份的快乐。</p>
<p>曾经记一个人是一篇文章，后来记一个人是一首歌，后来记一个人是一门学科，再后来记一个人是一段代码或语言，到现在记一个人是一个城市，因为那是有你的城市，那里有你的故事，好了废话有点多，先来看看这次出行的规划</p>
<span id="more"></span>
<h2 id="四川"><a class="header-anchor" href="#四川"></a>四川</h2>
<p>总计 3 天时间（2020.09.26 —— 2020.09.28），尽管《盛世中华》中的风景很迷人，但并不在此次行程安排中，主要是考虑到这些景点都比较远，且并不是成熟的游玩路线，这次去的地方主要是视频中没有的景点</p>
<h3 id="DAY-1"><a class="header-anchor" href="#DAY-1"></a>DAY 1</h3>
<p>第一天主要是在成都市区内游玩，景点包括：锦里，杜甫草堂博物馆，人民公园，以及四川大学望江校区或者她曾读书的西南财经，其实这都不是重点，重点是去吃各种美食（The Sense 醒食，無早 bowl，老龙亭，还有各种小吃和必吃的火锅），对了还要见一个 3 年多未见的老友（团座）</p>
<h3 id="DAY-2"><a class="header-anchor" href="#DAY-2"></a>DAY 2</h3>
<p>第二天去一个稍微远点的地方，乐山大佛，小时候看《风云》时还以为那尊大佛是电脑特效，后来才知道这是真的，那我可要去那里找一找有没有聂风留下的雪饮刀，和菩提果，修炼我的武功。如果有时间去爬一爬峨眉山，去看看令狐冲是否还在那里带领峨眉派，那里有没有周芷若留下倚天剑的残骸</p>
<h3 id="DAY-3"><a class="header-anchor" href="#DAY-3"></a>DAY 3</h3>
<p>第三天安排上国宝，这圆滚滚的大家伙，好想用手 rua rua 它的毛，行程结束后再去 mars 上推荐的书店（文轩 BOOKS，無早 bookstore），在那里看一看书，吃一吃甜点，品一品生活，晚上可以去建设路，去感受下城市烟火</p>
<h2 id="拉萨"><a class="header-anchor" href="#拉萨"></a>拉萨</h2>
<p>共计 8 天（2020.09.29 —— 2020.10.06），拉萨由于是非常陌生，因此选择跟团游的方式，这样既节省时间又省钱（我只是一个搬砖工人），因此选择了 5 天 4 夜（DAY 2 —— DAY 6）的跟团游玩，极大可能是走马观花式标准的游客方式</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1599987038/blog/travel/%E8%A5%BF%E8%97%8F%E8%B7%AF%E7%BA%BF.png" alt="路线参考"></p>
<ul>
<li>以拉萨为中心，由近及远，最负盛名的纳木错（路程较远，往往需要在湖边村镇留宿一晚）和羊卓雍措（可当他往返）</li>
<li>向南，山南人文线，相对比较小众，山南是西藏的“旧都”，人文圣地估计众多，包括西藏第一个真正意义上的寺院：桑耶寺，常见的路线是 2 天，包含了拉姆拉错，思金拉错以及格鲁三大寺当中最古老的甘丹寺（在拉萨达孜县）</li>
<li>向东去往林芝，这里衔接川滇，海拔较低，森林茂盛，有西藏小江南美陈，全程会路过巴松措，鲁朗林海，雅鲁藏布江（峡谷），南迦巴瓦峰，3 天的行程，再加 2 天可抵达波密，然乌湖</li>
<li>向西南是日喀则，这里是后藏的中心，古今地位仅次于拉萨，除了在此拜访扎什伦布斯之外，跟多人选择来到这得目的是向南 200 公里走进珠峰大本营，去看一下世界第一高峰，常规路线会带上纳木错，往返总计 5 天</li>
<li>向西北，是“西藏的西藏”阿里一线，人迹罕至，痛并快乐，经过纳木错穿越羌塘无人区，抵达狮泉河，冈仁波齐，古格王朝，玛旁雍错，常规路线 7—10 天</li>
</ul>
<blockquote>
<p>贪心路线，从拉萨出，去程走阿里线，回程走日喀则线，一个西部大环线，耗时 13—15 天</p>
</blockquote>
<p>当然上面是整个拉萨可以游玩的框架，而我们小团队并不是和上图完全一致，只是其中的一部分</p>
<h3 id="DAY-1-v2"><a class="header-anchor" href="#DAY-1-v2"></a>DAY 1</h3>
<p>由于是第一次来高原地带，所以第一天就不进行大运动量的活动，就在拉萨市区走一走，了解藏族风土人情，大致包括以下：布达拉宫，文成公主，八廓街，大昭寺，总之看心情和看身体状况来灵活应变</p>
<h3 id="DAY-2-v2"><a class="header-anchor" href="#DAY-2-v2"></a>DAY 2</h3>
<p>行程安排：拉萨 - 念青唐古拉山 - 纳木错圣象天门日出日落 - 住圣象天门<br>
生活住宿：早餐自理，午餐、晚餐含，住营地帐篷或附近民宿（住宿环境别抱太大幻想）<br>
重点关注：纳木错圣象天门</p>
<h3 id="DAY-3-v2"><a class="header-anchor" href="#DAY-3-v2"></a>DAY 3</h3>
<p>行程安排：圣象天门 - 那根拉山口 - 藏北草原 - 东古拉山 - 尼木 - 日喀则<br>
生活住宿：早餐、午餐、晚餐含，住三星酒店<br>
重点关注：藏北草原</p>
<h3 id="DAY-4"><a class="header-anchor" href="#DAY-4"></a>DAY 4</h3>
<p>行程安排：日喀则 - 定日 - 嘉措拉山口/加乌拉山口 - 珠穆朗玛国家公园 - 珠峰大本营 - 民宿/营地帐篷<br>
生活住宿：早餐、午餐、晚餐含，住营地帐篷或附近民宿（住宿环境别抱太大幻想）<br>
重点关注：珠峰大本营的星空</p>
<h3 id="DAY-5"><a class="header-anchor" href="#DAY-5"></a>DAY 5</h3>
<p>行程安排：定日 - 扎什伦布寺 - 日喀则<br>
生活住宿：早餐自理，午餐、晚餐含，住三星酒店<br>
重点关注：日喀则</p>
<h3 id="DAY-6"><a class="header-anchor" href="#DAY-6"></a>DAY 6</h3>
<p>行程安排：日喀则 - 卡若拉冰川 - 羊卓雍措 - 拉萨<br>
生活住宿：早餐、午餐含，晚餐自理，晚上返回拉萨<br>
重点关注：羊卓雍措</p>
<h3 id="DAY-7-——-DAY-8"><a class="header-anchor" href="#DAY-7-——-DAY-8"></a>DAY 7 —— DAY 8</h3>
<p>这两天是自由时光，没有特殊的安排</p>
<h2 id="注意事项"><a class="header-anchor" href="#注意事项"></a>注意事项</h2>
<p>由于此次去往西藏相对比较偏远，加之藏族人民的生活语言等和我们都不一样，生活环境和其他地方相差较大，异常在出行前带好一些必备的用品，</p>
<h3 id="行李指南"><a class="header-anchor" href="#行李指南"></a>行李指南</h3>
<ol>
<li>证件，一次性洗漱用品，水杯等</li>
<li>阿咖酚散与葡萄糖粉，有效缓解高反，晕车药/贴，感冒发烧，消炎等药物</li>
<li>防风防雨的衣服很有必要，羽绒服，保暖衣物等</li>
<li>进藏四件套：帽子，墨镜，防嗮，唇膏</li>
<li>相机等电子设备</li>
<li>带一些速食，比如泡面，辣条，自住小火锅，矿泉水等</li>
</ol>
<blockquote>
<p>可根据自身需要合理的补充</p>
</blockquote>
<h3 id="何时进藏"><a class="header-anchor" href="#何时进藏"></a>何时进藏</h3>
<ol>
<li>6-8 月份为西藏雨季，景色会打折扣</li>
<li>最佳：9-10 月（秋叶），3-4 月（春桃）</li>
</ol>
<h3 id="交通方式"><a class="header-anchor" href="#交通方式"></a>交通方式</h3>
<blockquote>
<p>根据自身条件合理选择</p>
</blockquote>
<ol>
<li>包车：灵活度高，价格贵（±￥1500/天）</li>
<li>拼车：同车人数少，但可能气场不合</li>
<li>自驾：路况复杂且不能高反，要求极高</li>
<li>跟团：12 人左右，靠窗好位置靠抢</li>
<li>大巴：只去成熟景区和各大购物店</li>
</ol>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ol>
<li><span class="exturl" data-url="aHR0cDovL3d3dy55b2hvbWFycy5jb20v">Mars<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTlFNDExOTdLYz9wPTI=">盛世中华<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVNrNHkxeTdaej9mcm9tPXNlYXJjaCZzZWlkPTYxNjEyNjA2NzU1MzczNzcwMzc=">86元打卡成都必吃小吃<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVV6NHkxWDd4Qg==">成都·VLOG·下<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUxUNHkxTDdrSA==">绝对旅行指南 - 成都篇<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXprNHkxeTdoYw==">绝对旅行指南 - 西藏篇<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMU5aNHkxTjdlbg==">跨越山海看珠峰<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Memory</category>
        <category>Travel</category>
      </categories>
      <tags>
        <tag>成都</tag>
        <tag>拉萨</tag>
      </tags>
  </entry>
  <entry>
    <title>忆·黄山</title>
    <url>/2018/05/01/travel-hs/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>黄山归来不看岳</p>

</blockquote>
<p>五岳未归，先品黄山。以前看黄山还是小学课本《黄山》一文介绍黄山的美，黄山的秀丽，黄山的与众不同，这次是亲身去体验黄山的姿态；趁着五一，趁着年轻，趁着…。废话不多讲，先看黄山日出美景</p>
<span id="more"></span>
<iframe src="//player.bilibili.com/player.html?aid=54267769&cid=94930576&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<blockquote>
<p>别问我为啥抖，没有支撑点，全程手持…逃</p>
</blockquote>
<p>这次黄山之行并没有做任何功课，计划到实施前后不超过15天，抱着走一步，看一点的心态去玩，没想到五一节假日，来黄山的人不是很多。</p>
<h2 id="出行方式"><a class="header-anchor" href="#出行方式"></a>出行方式</h2>
<p>杭州 <strong>城西客运站</strong> 做大巴直达黄山景区，票价：￥110，时间：大约4小时左右到达</p>
<h2 id="攻略"><a class="header-anchor" href="#攻略"></a>攻略</h2>
<p>逃，没有…<br>
由于到达黄山游客集散中心已是14：00，由于距离黄山还有10多公里，你可以走路去黄山山脚下，而且16：00之后没有大巴去黄山景区。因此随便找了个地吃完中午饭，就往乘大巴车黄山景区去了（￥12/人），由于上山的入口有好几个，我们也没有去研究，大巴到　<strong>云谷寺</strong> 景区，我们也就下车从这里出发往山上去了，你可以坐缆车去往山顶，我们一行三人，选择了徒步上山，对了门票：￥230/人</p>
<p>一路说说笑笑，也没有预订上山的旅店，我们心真大，刚走了没多久，就看到了两个人被交椅抬着下山了，其中一个应该是摔了，头破血流的样子，还没开始，就…；没多管，一路还是很轻松，毕竟都是年轻人，体力不错，走到 <strong>白鹅岭</strong> 已经开始下雨，雨越下越大，因为在边走边看的路上，我们决定来黄山当然是去 <strong>迎客松</strong> 的景点，然后我们顺着 <strong>白鹅岭</strong> 前往 <strong>白鹅山庄旅游商场</strong> 去避雨，然后是人多的无法挪开脚，此时天色已晚，我们稍作休息，找了半天也没有能睡得地，那床都是人挤人。我们找了个茶馆，吃了些带着的食品，喝了一小时茶，大约20：00左右，我们决定，今晚夜行到 <strong>迎客松</strong></p>
<p>雨后起了大雾，山顶那时雾色正浓，能见度大约在3米。我们三人也紧随其形，在 <strong>光明顶</strong> 片区玩了一会，这里看日出不错，当我们并没有这里等日出，毕竟这里离 <strong>迎客松</strong> 有一小时多的行程，我们要明天早早的在 <strong>迎客松</strong> 那里拍照装逼，拍完照然后回走去最高峰 <strong>莲花峰</strong> ，然而到了 <strong>迎客松</strong> 才发现，并不像电视上看到的，是在山的悬崖边。好了，这会才23：00多，怎么办，还有好几小时，又没有帐篷什么地可住，三人就在这 <strong>迎客松</strong> 前的广场上，发现了超大遮阳伞两把，哈哈哈，我们就用遮阳伞前后堵住，加上自己的雨伞，构建了一个堡垒，这下，我们三可用在里面睡觉了，雨后的山上很潮湿，就这样半将半究的，坚持到4点多。</p>
<p>天快要亮了，要找地儿去拍日出，我答应别人了，要发日出照片给她，往回走去 <strong>莲花峰</strong> 那里并不合适，更重要的是山路也被封，不上上去，只好找到 <strong>玉屏索道</strong> 的另一条路上，这里刚刚好可用看到日出</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1528023909/blog/travel/travel-huangshan-sunrise.jpg" alt="日出"></p>
<p>拍完日出，我们快速折回到 <strong>迎客松</strong> ，那里已经开始有三三两两的人了，我们动作要快，否则等会从索道上来大批人马，嗯，快速装逼完成，迅速撤离战场</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1528023881/blog/travel/travel-huangshan-yks.jpg" alt="迎客松"></p>
]]></content>
      <categories>
        <category>Memory</category>
        <category>Travel</category>
      </categories>
      <tags>
        <tag>黄山</tag>
      </tags>
  </entry>
  <entry>
    <title>行·张家界</title>
    <url>/2018/05/20/travel-zjj/</url>
    <content><![CDATA[<div class="note "><ul>
<li>时间：2018.06.16——2018.06.19</li>
<li>地点：杭州——张家界</li>
<li>目标：武陵源景区，天门山景区，大峡谷景区</li>
</ul>
</div>
<p>听说张家界是人间仙境，鬼斧神工，嗯，今年端午就去一探究竟，慌慌张张，匆匆忙忙做一份旅行攻略，翻遍百度，爬烂谷歌，都没有找到匹配的攻略，哎，可能是我姿势不对？！</p>
<p>张家界，张家界景区共分为四块：<strong>张家界国家森林公园</strong>，<strong>杨家界自然保护区</strong>，<strong>天子山自然保护区</strong>，<strong>索溪峪自然保护区</strong>四大景区，统称为武陵源风景名胜。</p>
<span id="more"></span>
<p><strong>最受欢迎</strong> 的四大景区</p>
<ol>
<li>武陵源景区（森林公园、金鞭溪、袁家界、杨家界、天子山、十里画廊等）</li>
<li>天门山景区（亚州最长的索道、世界公路奇观、玻璃栈道等）</li>
<li>大峡谷风景区（新开发的玻璃桥）</li>
<li>凤凰古城</li>
</ol>
<h2 id="出行准备"><a class="header-anchor" href="#出行准备"></a>出行准备</h2>
<ol>
<li>身份证件等相关证件</li>
<li>数码产品，雨具等</li>
<li>简单洗漱用品及换洗衣物</li>
<li>现金若干（不必太多）</li>
<li>零食（必备：辣条）</li>
</ol>
<h2 id="注意事项"><a class="header-anchor" href="#注意事项"></a>注意事项</h2>
<p>由于是自由行的方式，因此提醒以下几点</p>
<ol>
<li>到达张家界后，<strong>拒绝</strong> 和 <strong>一切</strong> 人搭话，避免一些麻烦，给行程带来不愉快</li>
<li>保管好自己的物品</li>
<li>张家界火车站出站后即可到汽车站乘坐大巴去武陵源景区，50分钟左右，10（森林公园）—12元（武陵源）</li>
<li>大峡谷，天门山景区玻璃桥都需要提前5天在网上预定</li>
</ol>
<h2 id="出行路线"><a class="header-anchor" href="#出行路线"></a>出行路线</h2>
<h3 id="整体路线图"><a class="header-anchor" href="#整体路线图"></a>整体路线图</h3>
<p>路线一：</p>
<ul>
<li>Day1(16):天门山景区</li>
<li>Day2.Day3(17-18):武陵源景区</li>
<li>Day4(19):大峡谷风景区</li>
</ul>
<p>路线二（推荐）</p>
<ul>
<li>Day1.Day2(16-17):武陵源景区</li>
<li>Day2.Day3(18):大峡谷风景区</li>
<li>Day4(19):天门山景区</li>
</ul>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1527342618/blog/gitpages-zjj-road.png" alt="扼要路线图"></p>
<div class="note info"><p>标记说明</p>
<ol>
<li>张家界火车站</li>
<li>武陵源景区</li>
<li>大峡谷风景区</li>
<li>天门山景区</li>
</ol>
</div>
<h3 id="武陵源景区路线"><a class="header-anchor" href="#武陵源景区路线"></a>武陵源景区路线</h3>
<p>门票：245 元+保险费3 元（3天内多次进出有效，含环保车票价）<br>
开放时间：8:00-17:00<br>
Day1：森林公园-金鞭溪-杨家界<br>
Day2：大观台-天子山-十里画廊-索溪湖-武陵源门票站<br>
从森林公园进，从武陵源出，不走回头路。需要在 <strong>丁香榕</strong> 住一宿<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1527324112/blog/gitpages-zjj.gif" alt="武陵源景区"></p>
<h3 id="大峡谷风景区路线"><a class="header-anchor" href="#大峡谷风景区路线"></a>大峡谷风景区路线</h3>
<p>门票：大峡谷（门票122元）+玻璃桥（门票138元）<br>
开放时间：08:00-17:00<br>
Day3：玻璃桥-大峡谷</p>
<h3 id="天门山景区路线"><a class="header-anchor" href="#天门山景区路线"></a>天门山景区路线</h3>
<p>门票：258.00元（含往返索道、环保车）【旺季】<br>
开放时间：08:00~16:00<br>
路线Day4：玻璃栈道-天门山寺-天门洞(坐索道上山顶——走西线——再到天门翻水处坐自动扶梯到天门洞——爬999级阶梯——最终坐环保车返回至市区)<br>
<strong>自备中午餐</strong></p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1528189150/blog/gitpages-zjj-tms.png.jpg" alt="天门山景区路线图"></p>
<h2 id="住宿"><a class="header-anchor" href="#住宿"></a>住宿</h2>
<p>现在还未确定路线，个人推荐路线二；其次，16，17，18号需要住宿，要提前预定旅店</p>
<h2 id="美食"><a class="header-anchor" href="#美食"></a>美食</h2>
<h3 id="胡师傅三下锅"><a class="header-anchor" href="#胡师傅三下锅"></a>胡师傅三下锅</h3>
<p>三下锅，所谓的三下锅其实就是一种很方便的干锅，它是由三种主料做成的，炖着不放汤的火锅，三角坪附近的那个“胡师傅三下锅”味道不错，三下锅50元一份，分量很够吃的，包你吃够吃好！推荐的就是干煸肠子，干煸核桃肉和湘西腊肉三种混在一起炖，吃的同时还可以点一份酸萝卜，又脆又酸。真的是极品哦！（吃过后，发现并没有网上说的这么好吃，就是大烩菜，哈哈哈）</p>
<p>等等。。。</p>
<h2 id="汇总"><a class="header-anchor" href="#汇总"></a>汇总</h2>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1527434516/blog/gitpages-zjj-summary.png" alt="汇总"></p>
<h2 id="游记"><a class="header-anchor" href="#游记"></a>游记</h2>
<p>废话不说，<strong>武陵源景区</strong>不用去，虽说是5A景区，除了山还是山，而且商业气息很重，很多地方都不能步行，需要坐缆车，电梯等交通工具，况且这次去森林公园那边在修路，说是在修高铁，建议直接去 <strong>大峡谷风景区</strong> 和 <strong>天门山景区</strong></p>
<h3 id="武陵源景区"><a class="header-anchor" href="#武陵源景区"></a>武陵源景区</h3>
<p>整个武陵<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1530682536/blog/travel/travel-zjj-wly.jpg" alt="武陵源"></p>
<h3 id="大峡谷风景区"><a class="header-anchor" href="#大峡谷风景区"></a>大峡谷风景区</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1530682775/blog/travel/travel-zjj-dxg.jpg" alt="大峡谷"></p>
<h3 id="天门山景区"><a class="header-anchor" href="#天门山景区"></a>天门山景区</h3>
<iframe src="//player.bilibili.com/player.html?aid=69493845&cid=120447421&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      <categories>
        <category>Memory</category>
        <category>Travel</category>
      </categories>
      <tags>
        <tag>张家界</tag>
      </tags>
  </entry>
  <entry>
    <title>藏经阁</title>
    <url>/2018/07/16/treasure/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>工欲善其事，必先利其器</p>

</blockquote>
<p>记录汇总一些资源库</p>
<span id="more"></span>
<div class="tabs" id="tags"><ul class="nav-tabs"><li class="tab active"><a href="#tags-1">导航页</a></li><li class="tab"><a href="#tags-2">DevTools</a></li><li class="tab"><a href="#tags-3">开发者网站</a></li><li class="tab"><a href="#tags-4">Yun</a></li><li class="tab"><a href="#tags-5">Mirror</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tags-1"><p><strong>快速满足你所需各种资源汇总</strong><br>
<span class="exturl" data-url="aHR0cDovL3d3dy5zaGFuZG93c29ja3MuaW5mbw==">Hi World<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cDovL2NodWFuZ3phb3NoaS5jb20=">创造师导航<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cDovL3NvLnVpZ3JlYXQuY29t">UI设计师导航<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9kZXZkb2NzLmlv">Devdocs<i class="fa fa-external-link-alt"></i></span></p></div><div class="tab-pane" id="tags-2"><p><strong>DevTools</strong></p>
<div class="tabs" id="devtool"><ul class="nav-tabs"><li class="tab active"><a href="#devtool-1">IDE</a></li><li class="tab"><a href="#devtool-2">Plugin</a></li><li class="tab"><a href="#devtool-3">Managed code</a></li><li class="tab"><a href="#devtool-4">Help tool</a></li></ul><div class="tab-content"><div class="tab-pane active" id="devtool-1"><p><strong>集齐宇宙IDE，可以召唤神龙::&gt;_&lt;::</strong><br>
<span class="exturl" data-url="aHR0cDovL3d3dy5qZXRicmFpbnMuY29t">Jetbrains 全家桶<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vc3R1ZGlv">Android Studio<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL3hjb2RlL2lkZQ==">Xcode<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cDovL3d3dy5lY2xpcHNlLm9yZy9kb3dubG9hZHMvZWNsaXBzZS1wYWNrYWdlcw==">Eclipse<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20=">Visual Studio Code<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cDovL3d3dy5zdWJsaW1ldGV4dC5jb20=">Sublime<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2V0cG9zdG1hbi5jb20vYXBwcw==">PostMan<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cDovL3d3dy5uZXRzYXJhbmcuY29tL3Byb2R1Y3RzL3hzaF9vdmVydmlldy5odG1s">Xshell Xftp<i class="fa fa-external-link-alt"></i></span></p></div><div class="tab-pane" id="devtool-2"><p><strong>必备的一些辅助插件，让你效率翻倍</strong></p>
<h2 id="通用"><a class="header-anchor" href="#通用"></a>通用</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvcDNj">Alibaba Java Coding Guidelines<i class="fa fa-external-link-alt"></i></span>：阿里巴巴 Java 代码规范</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tyYXNhL0dyZXBDb25zb2xl">GrepConsole<i class="fa fa-external-link-alt"></i></span>：控制台日志自定义</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3p6ejQwNTAwL0dzb25Gb3JtYXQ=">GsonFormat<i class="fa fa-external-link-alt"></i></span>：json 生成对应的实体 bean</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dlanVuMTIzNDU2L2ludGVsbGlqLWdlbmVyYXRlQWxsU2V0TWV0aG9k">GenerateAllSetter<i class="fa fa-external-link-alt"></i></span>：对象中所有属性生成 set 方法</li>
<li><span class="exturl" data-url="aHR0cDovL2lnbm9yZS5oc3oubW9iaQ==">ignore<i class="fa fa-external-link-alt"></i></span>：文件忽略</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21wbHVzaG5pa292L2xvbWJvay1pbnRlbGxpai1wbHVnaW4=">Lombok<i class="fa fa-external-link-alt"></i></span>：简化实体 bean</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ZzY2gvaWRlYS1tdWx0aW1hcmtkb3du">Markdown Navigator<i class="fa fa-external-link-alt"></i></span>：Markdown 文件支持</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VzdGVpbmJlcmcvcGxhbnR1bWw0aWRlYQ==">PlantUML integration<i class="fa fa-external-link-alt"></i></span>：UML 文件支持</li>
<li><span class="exturl" data-url="aHR0cDovL3lpaWd1eGluZy5naXRodWIuaW8vVHJhbnNsYXRpb25QbHVnaW4=">Translation<i class="fa fa-external-link-alt"></i></span>：语言翻译</li>
</ol>
<h2 id="Android"><a class="header-anchor" href="#Android"></a>Android</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F2YXN0L2FuZHJvaWQtYnV0dGVya25pZmUtemVsZXpueQ==">Android ButterKnife Zelezny<i class="fa fa-external-link-alt"></i></span>：ButterKnife 相关支持</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tvbmlmYXIvYW5kcm9pZC1tYXRlcmlhbC1kZXNpZ24taWNvbi1nZW5lcmF0b3ItcGx1Z2lu">Android Material Design Icon Generator<i class="fa fa-external-link-alt"></i></span>：Material icon 生成</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21jaGFybWFzL2FuZHJvaWQtcGFyY2VsYWJsZS1pbnRlbGxpai1wbHVnaW4=">Android Parcelable code generator<i class="fa fa-external-link-alt"></i></span>：Parcelable 代码生成</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wbHVnaW5zLmpldGJyYWlucy5jb20vcGx1Z2luLzc3NzUtYW5kcm9pZC1wb3N0Zml4LWNvbXBsZXRpb24=">Android Postfix Completion<i class="fa fa-external-link-alt"></i></span>：.toast，.log 等快捷写法</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25pb3JnYWkvQW5kcm9pZC1SZXNvdXJjZS1Vc2FnZS1Db3VudA==">Android Resource Usage Count<i class="fa fa-external-link-alt"></i></span>：资源使用统计</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0hhZWhuY2hlbi9pZGVhLWFuZHJvaWQtc3R1ZGlvLXBsdWdpbg==">Android Studio Prettify<i class="fa fa-external-link-alt"></i></span>：模板代码生成，比如：findViewById</li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5kZXZlbG9wZXJwaGlsLmNvbS9yZW5hbWluZy15b3VyLWdyYWRsZS1idWlsZC1maWxlcw==">ADB Idea<i class="fa fa-external-link-alt"></i></span>：ADB 相关命令</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wbHVnaW5zLmpldGJyYWlucy5jb20vcGx1Z2luLzg2MDMtZXZlbnRidXMzLWludGVsbGlqLXBsdWdpbg==">EventBus3 Intellij Plugin<i class="fa fa-external-link-alt"></i></span>：EventBus 相关支持</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RyYWtlZXQvTGF5b3V0Rm9ybWF0dGVy">LayoutFormatter<i class="fa fa-external-link-alt"></i></span>：格式化 XML 布局</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wbHVnaW5zLmpldGJyYWlucy5jb20vcGx1Z2luLzgzMjItc3Fsc2NvdXQtc3FsaXRlLXN1cHBvcnQt">SQLScout<i class="fa fa-external-link-alt"></i></span>：SQL 相关支持</li>
</ol>
<h2 id="Java"><a class="header-anchor" href="#Java"></a>Java</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS9wcm9kdWN0L2Nsb3VkdG9vbGtpdA==">Alibaba Cloud Toolkit<i class="fa fa-external-link-alt"></i></span>：服务部署工具</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d1c2VhbC9Kc29uVG9Lb3RsaW5DbGFzcw==">JsonToKotlinClass<i class="fa fa-external-link-alt"></i></span>：json 生成 kotlin 对象</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dlanVuMTIzNDU2L015QmF0aXNDb2RlSGVscGVyLVBybw==">MyBatisCodeHelperPro<i class="fa fa-external-link-alt"></i></span>：mybatis 支持及 XML 代码调试</li>
</ol></div><div class="tab-pane" id="devtool-3"><p><strong>常用的代码托管平台，设备可以坏，代码不能丢</strong><br>
<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2l0aHViLmNvbQ==">Github<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2l0bGFiLmNvbQ==">Gitlab<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2l0ZWUuY29t">Gitee<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9jb2RpbmcubmV0">Coding<i class="fa fa-external-link-alt"></i></span></p></div><div class="tab-pane" id="devtool-4"><p><strong>装起逼来，我自己都怕</strong></p>
<h2 id="根据文字生成字符画"><a class="header-anchor" href="#根据文字生成字符画"></a>根据文字生成字符画</h2>
<ol>
<li><span class="exturl" data-url="aHR0cDovL3BhdG9yamsuY29tL3NvZnR3YXJlL3RhYWc=">taag<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5uZXR3b3JrLXNjaWVuY2UuZGUvYXNjaWkv">ascii<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<h2 id="根据图片生成字符画"><a class="header-anchor" href="#根据图片生成字符画"></a>根据图片生成字符画</h2>
<ol>
<li><span class="exturl" data-url="aHR0cDovL2xpZmUuY2hhY3VvLm5ldC9jb252ZXJ0cGhvdG8yY2hhcg==">ConvertPhoto2Char<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGVncmFldmUuY29tL2ltZzJ0eHQucGhw">Img2Txt<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<h2 id="代码生成图片"><a class="header-anchor" href="#代码生成图片"></a>代码生成图片</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9jYXJib24ubm93LnNo">Carbon<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<h2 id="云端应用"><a class="header-anchor" href="#云端应用"></a>云端应用</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly91emVyLm1lLw==">Uzer<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<h2 id="其他"><a class="header-anchor" href="#其他"></a>其他</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZW1vamljb3B5LmNvbS8=">emojicopy<i class="fa fa-external-link-alt"></i></span>：表情</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucHJvY2Vzc29uLmNvbS8=">Processon<i class="fa fa-external-link-alt"></i></span>：在线编辑流程图</li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC5waWNrZnJvbS5uZXQv">Pickfrom<i class="fa fa-external-link-alt"></i></span>：一站式工具平台</li>
</ol></div></div></div></div><div class="tab-pane" id="tags-3"><p><strong>开发者常用的官方网站</strong></p>
<div class="tabs" id="website"><ul class="nav-tabs"><li class="tab active"><a href="#website-1">国际大厂</a></li><li class="tab"><a href="#website-2">团队技术博客</a></li><li class="tab"><a href="#website-3">手机厂商</a></li><li class="tab"><a href="#website-4">应用市场</a></li><li class="tab"><a href="#website-5">小程序</a></li><li class="tab"><a href="#website-6">ROM与论坛</a></li></ul><div class="tab-content"><div class="tab-pane active" id="website-1"><p><strong>一线大厂开发者网站</strong><br>
<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20=">Google Developer<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29t">Apple Developer<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbQ==">Microsoft Developer<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbQ==">Facebook Developer<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIudHdpdHRlci5jb20=">Twitter Developer<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdpdGh1Yi5jb20=">Github Developer<i class="fa fa-external-link-alt"></i></span><br>
<s><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYmFpZHUuY29t">Baidu Developer<i class="fa fa-external-link-alt"></i></span></s><br>
<span class="exturl" data-url="aHR0cHM6Ly9kZXYuYWxpeXVuLmNvbQ==">Alibaba Developer<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cDovL29wZW4ucXEuY29t">Tencent Developer<i class="fa fa-external-link-alt"></i></span></p></div><div class="tab-pane" id="website-2"><p><strong>一线大厂团队博客</strong><br>
<span class="exturl" data-url="aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi8=">IBM 技术社区<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL25ldGZsaXgtdGVjaGJsb2c=">Netflix<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly93d3cudGVjaGllZGVsaWdodC5jb20=">Techie Delight<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9lbmdpbmVlcmluZy5saW5rZWRpbi5jb20vYmxvZw==">Linkedin 技术博客<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9ibG9ncy5kcm9wYm94LmNvbS90ZWNo">Dropbox 技术博客<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLmZiLmNvbQ==">Facebook 技术博客<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cDovL2ptLnRhb2Jhby5vcmc=">淘宝中间件团队<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29t">美团技术博客<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cDovL2Jsb2dzLjM2MC5jbg==">360技术博客<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly90ZWNoLnlvdXphbi5jb20=">有赞技术团队<i class="fa fa-external-link-alt"></i></span></p></div><div class="tab-pane" id="website-3"><p><strong>手机厂商</strong><br>
<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20=">Android Developer<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2lvcw==">iOS Developer<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuc2Ftc3VuZy5jb20=">Samsung Developer<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cDovL2RldmVsb3Blci5odWF3ZWkuY29tL2Nu">Huawei Developer<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9kZXYubWkuY29t">XiaoMi Developer<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly93d3cuaHRjZGV2LmNvbS8=">HTC Developer<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9vcGVuLmZseW1lLmNuLw==">Flyme Developer<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9vcGVuLm9wcG9tb2JpbGUuY29t">Oppo Developer<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9kZXYudml2by5jb20uY24=">Vivo Developer<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cDovL2Rldi4zNjAuY24=">360 Developer<i class="fa fa-external-link-alt"></i></span><br>
<s><span class="exturl" data-url="aHR0cDovL2Rldi5zbWFydGlzYW4uY29t">Smartisan Developer<i class="fa fa-external-link-alt"></i></span></s></p></div><div class="tab-pane" id="website-4"><p><strong>应用市场</strong><br>
<span class="exturl" data-url="aHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20=">Google Play<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20=">App Store<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cDovL2FwcC5taS5jb20=">XiaoMi 应用市场<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cDovL2RldmVsb3Blci5odWF3ZWkuY29tL2NvbnN1bWVyL2NuL2RldnVuaW9uL3VpL3NlcnZlci9hcHBNYXJrZXQuaHRtbA==">Huawei 应用市场<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cDovL3podXNob3UuMzYwLmNu">360 应用市场<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly93d3cuY29vbGFway5jb20=">酷安市场<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cDovL3NqLnFxLmNvbQ==">应用宝<i class="fa fa-external-link-alt"></i></span></p></div><div class="tab-pane" id="website-5"><p><strong>小程序</strong><br>
<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jbi93ZWIvcHJvZ3Jlc3NpdmUtd2ViLWFwcHM=">PWA<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL2NnaS1iaW4vd3g=">微信小程序<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmFsaXBheS5jb20vbWluaS9kZXZlbG9wZXIvZ2V0dGluZy1zdGFydGVk">支付宝小程序<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly93d3cucXVpY2thcHAuY24=">快应用<i class="fa fa-external-link-alt"></i></span></p></div><div class="tab-pane" id="website-6"><p><strong>要折腾，来呀~</strong><br>
<span class="exturl" data-url="aHR0cHM6Ly9saW5lYWdlb3Mub3Jn">LineageOS<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS54ZGEtZGV2ZWxvcGVycy5jb20=">XDA<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly93d3cubW9rZWVkZXYuY29t">Mokee<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly93d3cubW9kYWNvLmNvbQ==">MoDaCo<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cDovL2Jicy5nZmFuLmNvbS9mb3J1bS5waHA=">机锋<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cDovL2Jicy56aGl5b28uY29t">智友<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cDovL3JvbS54aWFvbWkuY24=">MiUi<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9vcGVuZ2FwcHMub3Jn">0pengApps<i class="fa fa-external-link-alt"></i></span></p></div></div></div></div><div class="tab-pane" id="tags-4"><p><strong>国内外云厂商</strong><br>
<span class="exturl" data-url="aHR0cHM6Ly9jb25zb2xlLmNsb3VkLmdvb2dsZS5jb20=">Google Cloud<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29t">Microsoft Azure<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbQ==">Amazon Web Services<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuLmNvbQ==">Aliyun<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbQ==">Tencent Cloud<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGlkaXl1bi5jb20=">DiDi Cloud<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly93d3cubXR5dW4uY29t">MT Cloud<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly93d3cuMTYzeXVuLmNvbQ==">NetEase Cloud<i class="fa fa-external-link-alt"></i></span></p></div><div class="tab-pane" id="tags-5"><p><strong>常用镜像</strong><br>
<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNu">Tsinghua<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cDovL21pcnJvcnMudXN0Yy5lZHUuY24v">LUG<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cDovL3NlcnZpY2VzLmdyYWRsZS5vcmcvZGlzdHJpYnV0aW9ucw==">Gradle<i class="fa fa-external-link-alt"></i></span><br>
<span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC1pbnN0YWxsZXIuY2RuLm1vemlsbGEubmV0L3B1Yi9maXJlZm94L3JlbGVhc2Vz">Firfox<i class="fa fa-external-link-alt"></i></span></p></div></div></div>]]></content>
      <categories>
        <category>Resources</category>
      </categories>
      <tags>
        <tag>DevTool</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序之 Vant实战（一）</title>
    <url>/2021/02/12/wechat-mini1/</url>
    <content><![CDATA[<p>过年正好时间比较集中，可以把之前的一个想法付诸实践，之前一直想给老爸做一个类似于账单管理的应用，方便他每天把客户需要物品记录成一个清单进行管理，其中主要包含已下功能点。其一，支持添加任务列表（账单）；其二，支持任务列表分享（账单）。以上是我的第一期规划功能规划，话不多说我们就一起来跟着我来完成这个小程序的开发吧，本篇主要讲小程序的初始化相关工作</p>
<span id="more"></span>
<p>这是我第一次来开发小程序，虽然之前有开发 Android 客户端的经验，有一定的客户端经验，但是小程序却一直没有去实践，我主要是觉得小程序的使用体验真的很差。但随着现在人们的硬件设备越来越好，并且微信团队在应用底层也做了很多的扩展和优化，现在使用小程序开发轻量级的应用还是很方便且高效</p>
<h2 id="环境及选型"><a class="header-anchor" href="#环境及选型"></a>环境及选型</h2>
<ol>
<li>OS：macOS（11.2.1）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2RldnRvb2xzL2Rvd25sb2FkLmh0bWw=">IDE：WeChat Devtools（1.05.2102010）<i class="fa fa-external-link-alt"></i></span></li>
<li>Node：v15.5.0</li>
<li><span class="exturl" data-url="aHR0cHM6Ly92YW50LWNvbnRyaWIuZ2l0ZWUuaW8vdmFudC13ZWFwcC8jL2ludHJv">Vant：1.6.7<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29t">微信小程序账号<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<blockquote>
<p>关于账号的申请，这里不做讲解，请自行解决</p>
</blockquote>
<h2 id="初始化项目"><a class="header-anchor" href="#初始化项目"></a>初始化项目</h2>
<h3 id="创建项目"><a class="header-anchor" href="#创建项目"></a>创建项目</h3>
<p>不废话，直接看图</p>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1613191822/blog/wechat-create.png" alt=""></p>
<h3 id="项目结构"><a class="header-anchor" href="#项目结构"></a>项目结构</h3>
<p>项目是一个基于云开发的方式，创建完成后会包含云相关的一些操作实例</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">bill</span><br><span class="line">  ├── cloudfunctions/               # 云函数管理【清空当前文件夹下的内容】</span><br><span class="line">  │    │── callback/</span><br><span class="line">  │    │── echo/</span><br><span class="line">  │    │── login/</span><br><span class="line">  │    └── openapi/    </span><br><span class="line">  ├── minprogram/</span><br><span class="line">  │    │── components/              # 组件【清空当前文件夹下内容】</span><br><span class="line">  │    │── images/                  # 图片管理【清空当前文件夹下内容】</span><br><span class="line">  │    │── pages/                   # 页面管理【除 index 页面，其余都删除】</span><br><span class="line">  │    │    │── addFunction/</span><br><span class="line">  │    │    │── chooseLib/</span><br><span class="line">  │    │    │── databaseGuide/</span><br><span class="line">  │    │    │── deployFunctions/</span><br><span class="line">  │    │    │── im/</span><br><span class="line">  │    │    │── index/</span><br><span class="line">  │    │    │    │── index.js</span><br><span class="line">  │    │    │    │── index.json</span><br><span class="line">  │    │    │    │── index.wxml</span><br><span class="line">  │    │    │    │── index.wxss</span><br><span class="line">  │    │    │    └── user-unlogin.png</span><br><span class="line">  │    │    │── openapi/</span><br><span class="line">  │    │    │── storageConsole/</span><br><span class="line">  │    │    └── userConsole/</span><br><span class="line">  │    │── style/                   # 样式管理</span><br><span class="line">  │    │── app.js                   # 项目入口逻辑管理</span><br><span class="line">  │    │── app.json                 # 组件库配置</span><br><span class="line">  │    │── app.wxss                 # 全局样式设置</span><br><span class="line">  │    └── sitemap.json             # </span><br><span class="line">  ├── project.config.json           # 项目配置文件</span><br><span class="line">  └── README.md                     # 项目说明</span><br></pre></td></tr></table></figure>
<h3 id="精简项目"><a class="header-anchor" href="#精简项目"></a>精简项目</h3>
<p>从上面我们可知初始化的项目，包含了一些示例，我们对其精简</p>
<ol>
<li>清空 cloudfunctions 目录下的云函数内容</li>
<li>根据项目结构里的备注，进行删除相关的文件
<ul>
<li>清空 components 文件夹下的组件</li>
<li>清空 images 文件夹中的内容</li>
<li>删除 pages 文件夹下，<strong>除</strong> index 的文件夹</li>
<li>删除 index 文件夹下的 user-unlogin.png 文件</li>
</ul>
</li>
<li>修改文件内容
<ul>
<li>清空 index 文件夹下 index.wxml，index.wxss 文件中的内容</li>
<li>修改 index 文件夹下 index.js 文件内容</li>
<li>清空 minprogram 文件夹下 app.wxss 文件中的样式内容</li>
</ul>
</li>
<li>修改配置
<ul>
<li>移除 app.json 文件中 已经移除掉的 pages 的配置</li>
<li>修改 project.config.json 文件，移除 miniprogram 的配置</li>
</ul>
</li>
</ol>
<h3 id="添加-vant-组件"><a class="header-anchor" href="#添加-vant-组件"></a>添加 vant 组件</h3>
<p>整个步骤，如下截图<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1613403600/blog/wechat-init.png" alt=""></p>
<blockquote>
<p>执行命令根据官方提供的方式和自身喜好选择，我这里使用的是 <code>yarn</code> 命令进行安装相关的依赖</p>
</blockquote>
<h3 id="测验效果"><a class="header-anchor" href="#测验效果"></a>测验效果</h3>
<p>这里以添加 Button 为例来查看是否生效</p>
<ol>
<li>在 pages/index 路径下的 <code>index.json</code> 文件中，添加 vant 的 Button 组件<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;usingComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;van-button&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@vant/weapp/button/index&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>在 pages/index 路径下的 <code>index.wxml</code> 文件中，添加 vant 的相关组件 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>编译，在模拟器中查看效果</li>
</ol>
<blockquote>
<p>对于引用的组件，是公共的，可以写在 <code>app.json</code> 文件中</p>
</blockquote>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yaw==">官方开发文档<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMThWNDExQzdWVg==">微信小程序组件库Vant weapp的使用与weui零基础入门课程<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Wechat</category>
      </categories>
      <tags>
        <tag>Wechat</tag>
        <tag>Vant</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 之 常用应用安装</title>
    <url>/2019/09/25/windows-devtool/</url>
    <content><![CDATA[<p>这是一篇在Windows系统下，持续更新常用开发软件安装汇总，当然一些简单得安装就在这里记录，不废话了</p>
<h2 id="JDK"><a class="header-anchor" href="#JDK"></a>JDK</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS90ZWNobmV0d29yay9qYXZhL2phdmFzZS9kb3dubG9hZHMvaW5kZXguaHRtbA==">官方下载地址<i class="fa fa-external-link-alt"></i></span>，选择需要的版本下载安装包</p>
<p>安装完成，设置环境变量，右击<code>我的电脑</code>–&gt;<code>属性</code>–&gt;<code>高级系统设置</code>–&gt;<code>高级</code>–&gt;<code>环境变量</code></p>
<span id="more"></span>
<ol>
<li>在系统变量里新建 <strong><code>JAVA_HOME</code></strong> 变量，变量值为你的JDK的安装路径，比如：C:\Program Files\Java\jdk1.8.0_60</li>
<li>在系统变量里新建 <strong><code>CLASSPATH</code></strong> 变量 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar</span><br></pre></td></tr></table></figure>
</li>
<li>找到 <strong><code>path</code></strong> 变量（已存在不用新建）添加变量值 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</span><br></pre></td></tr></table></figure>
</li>
<li>保存修改，并启动 CMD 进行验证，输出安装的 Java 版本表示安装成功 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>变量值之间用 <strong><code>;</code></strong> 隔开。注意原来Path的变量值末尾有没有 <strong><code>;</code></strong> 号，如果没有，先输入 <strong><code>;</code></strong> 号再输入</p>
</blockquote>
<h2 id="Git"><a class="header-anchor" href="#Git"></a>Git</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZHM=">官方下载地址<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2dpdGh1Yi1yZWxlYXNlL2dpdC1mb3Itd2luZG93cy9naXQv">清华镜像下载地址<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>关于 Git 的安装没有什么可说的（使用默认配置即可），基本上就是下一步，下一步，到完成</p>
<h2 id="MySQL"><a class="header-anchor" href="#MySQL"></a>MySQL</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy8=">官方下载地址<i class="fa fa-external-link-alt"></i></span></li>
<li>下载<code>MySQL Community Server</code>或者<code>MySQL Installer for Windows</code>都可以，这里我下载的是<code>MySQL Community Server</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1569640711/blog/windows-mysql-download.png" alt=""></li>
</ul>
<p>安装步骤请看截图所示<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1569640478/blog/windows-mysql-install.png" alt="windows-mysql-install"></p>
<h2 id="Tomcat"><a class="header-anchor" href="#Tomcat"></a>Tomcat</h2>
<p><span class="exturl" data-url="aHR0cDovL3RvbWNhdC5hcGFjaGUub3JnLw==">官方网站<i class="fa fa-external-link-alt"></i></span>，选择需要的版本下载</p>
<ul>
<li>官方 Tomcat 镜像：<span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZHMuYXBhY2hlLm9yZy90b21jYXQv">https://downloads.apache.org/tomcat/<i class="fa fa-external-link-alt"></i></span></li>
<li>北京理工大学：<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLmJpdC5lZHUuY24vYXBhY2hlL3RvbWNhdC8=">https://mirrors.bit.edu.cn/apache/tomcat/<i class="fa fa-external-link-alt"></i></span></li>
<li>北京外国语大学：<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLmJmc3UuZWR1LmNuL2FwYWNoZS90b21jYXQv">https://mirrors.bfsu.edu.cn/apache/tomcat/<i class="fa fa-external-link-alt"></i></span></li>
<li>清华大学：<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2FwYWNoZS90b21jYXQv">https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="安装"><a class="header-anchor" href="#安装"></a>安装</h3>
<p>下载对应版本的文件，这里比如 <code>apache-tomcat-9.0.26</code> 版本文件，放入你系统某个位置，最好是英文路径且路径中没有空格或特殊字符，并解压文件</p>
<h3 id="配置"><a class="header-anchor" href="#配置"></a>配置</h3>
<p>Tomcat 和 JDK 一样为了方便使用都需要配置环境变量，右击<code>我的电脑</code>–&gt;<code>属性</code>–&gt;<code>高级系统设置</code>–&gt;<code>高级</code>–&gt;<code>环境变量</code></p>
<ol>
<li>在系统变量里新建 <strong><code>CATALINA_BASE</code></strong> 变量，变量值为你的Tomcat路径，比如：D:\DevTools\apache-tomcat-9.0.26</li>
<li>在系统变量里新建 <strong><code>CATALINA_HOME</code></strong> 变量，变量值为你的Tomcat路径，比如：D:\DevTools\apache-tomcat-9.0.26</li>
<li>找到 <strong><code>path</code></strong> 变量（已存在不用新建）添加变量值 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">;%CATALINA_HOME%\lib;%CATALINA_HOME%\bin;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>变量值之间用 <strong><code>;</code></strong> 隔开。注意原来Path的变量值末尾有没有 <strong><code>;</code></strong> 号，如果没有，先输入 <strong><code>;</code></strong> 号再输入</p>
</blockquote>
</li>
<li>保存修改，并启动 CMD 进行验证 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">statrup</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="乱码"><a class="header-anchor" href="#乱码"></a>乱码</h4>
<p>Tomcat 控制台中中文乱码，需要修改 Tomcat 配置文件 <strong><code>logging.properties</code></strong> 中的字符编码，将默认的 <strong>UTF-8</strong> 改为 <strong>GBK</strong>，文件路径<code>&lt;You Tomcat&gt;\conf</code><br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1569644342/blog/windows-tomcat-encode.png" alt="windows-tomcat-encode"></p>
<h4 id="缓存"><a class="header-anchor" href="#缓存"></a>缓存</h4>
<p>文件路径<code>&lt;You Tomcat&gt;\conf</code>，修改 <strong><code>context.xml</code></strong> 文件，在 <code>&lt;Context&gt;</code> 标签中添加如下配置即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Resources</span> <span class="attr">cachingAllowed</span>=<span class="string">&quot;true&quot;</span> <span class="attr">cacheMaxSize</span>=<span class="string">&quot;100000&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Maven"><a class="header-anchor" href="#Maven"></a>Maven</h2>
<p><span class="exturl" data-url="aHR0cDovL21hdmVuLmFwYWNoZS5vcmc=">官方网站<i class="fa fa-external-link-alt"></i></span></p>
<ul>
<li>官方 Maven 镜像：<span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZHMuYXBhY2hlLm9yZy9tYXZlbi8=">https://downloads.apache.org/maven/<i class="fa fa-external-link-alt"></i></span></li>
<li>北京理工大学：<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLmJpdC5lZHUuY24vYXBhY2hlL21hdmVuLw==">https://mirrors.bit.edu.cn/apache/maven/<i class="fa fa-external-link-alt"></i></span></li>
<li>北京外国语大学：<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLmJmc3UuZWR1LmNuL2FwYWNoZS9tYXZlbi8=">https://mirrors.bfsu.edu.cn/apache/maven/<i class="fa fa-external-link-alt"></i></span></li>
<li>清华大学：<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2FwYWNoZS9tYXZlbi8=">https://mirrors.tuna.tsinghua.edu.cn/apache/maven/<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="安装-v2"><a class="header-anchor" href="#安装-v2"></a>安装</h3>
<p>下载对应版本的文件，这里比如 <code>apache-maven-3.6.3</code> 版本文件，放入你系统某个位置，最好是英文路径且路径中没有空格或特殊字符，并解压文件</p>
<h3 id="配置-v2"><a class="header-anchor" href="#配置-v2"></a>配置</h3>
<p>Maven 和 JDK 一样为了方便使用都需要配置环境变量，右击<code>我的电脑</code>–&gt;<code>属性</code>–&gt;<code>高级系统设置</code>–&gt;<code>高级</code>–&gt;<code>环境变量</code></p>
<ol>
<li>在系统变量里新建 <strong><code>MAVEN_HOME</code></strong> 变量，变量值为你的Tomcat路径，比如：D:\DevTools\apache-maven-3.6.3</li>
<li>找到 <strong><code>path</code></strong> 变量（已存在不用新建）添加变量值 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">;%MAVEN_HOME%\bin;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>变量值之间用 <strong><code>;</code></strong> 隔开。注意原来Path的变量值末尾有没有 <strong><code>;</code></strong> 号，如果没有，先输入 <strong><code>;</code></strong> 号再输入</p>
</blockquote>
</li>
<li>保存修改，并启动 CMD 进行验证 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn -version</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="镜像地址（可选）"><a class="header-anchor" href="#镜像地址（可选）"></a>镜像地址（可选）</h3>
<p>如果你服务所依赖的包都是使用公司内部的私服，或者需要加快依赖的同步速度，那么建议你修改 maven 同步镜像的配置，编辑 <code>&lt;You maven&gt;\conf</code> 路径下 <code>settings.xml</code> 文件，在 <mirrors> 标签下修改镜像地址</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云central仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云jcenter-public仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云google仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/google<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云gradle-plugin仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/gradle-plugin<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云spring仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云spring-plugin插件仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring-plugin<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云grails-core插件仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/grails-core<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云apache-snapshots仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/apache-snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="本地依赖存放地址"><a class="header-anchor" href="#本地依赖存放地址"></a>本地依赖存放地址</h3>
<p>默认，maven 的依赖都存放在 <code>C:Users/&lt;Your name&gt;/.m2/reposittory</code>  路径下，你可以指定 maven 同步的依赖存默认放在你设置的路径下，编辑 <code>&lt;You maven&gt;\conf</code> 路径下 <code>settings.xml</code> 文件，修改<localRepository> 标签的内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:DevTools/maven/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置修改验证"><a class="header-anchor" href="#配置修改验证"></a>配置修改验证</h3>
<p>配置完成，在命令行输入 <code>mvn help:system</code> 测试，查看下载链接里面是否是现在配置的镜像地址，以及下载后的文件是否存放在自定设置的目标地址</p>
<h2 id="CMD"><a class="header-anchor" href="#CMD"></a>CMD</h2>
<h3 id="常用命令"><a class="header-anchor" href="#常用命令"></a>常用命令</h3>
<ol>
<li>IP地址<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure>
</li>
<li>查看端口 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看端口号：netstat -ano | findstr 端口号</span></span><br><span class="line">netstat -ano | findstr 8080</span><br><span class="line"><span class="comment"># 查看占用端口号进程 ：tasklist | findstr 进程号</span></span><br><span class="line">tasklist | findstr 12836</span><br><span class="line"><span class="comment"># kill 指定进程：taskkill -PID 进程号 -F </span></span><br><span class="line">taskkill -PID 12836 -F</span><br></pre></td></tr></table></figure>
截图如下：<br>
<img src="https://res.cloudinary.com/incoder/image/upload/v1569655372/blog/windows-task.png" alt="windows-task"></li>
</ol>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>DevTool</tag>
      </tags>
  </entry>
  <entry>
    <title>Zxing（一）二维码基础知识</title>
    <url>/2019/05/01/zxing1/</url>
    <content><![CDATA[<p>移动端开发，一个避不开的老生常谈功能开发，二维码扫描识别（主要）及二维码生成（辅助），虽然已有现成的开源项目提供了功能，仅仅作为功能的开发集成和调试，其实远远不够，应该在完成功能开发的基础上去学习背后的技术点和原理，让我们更加完整的掌握该技术。废话不多说，本篇是 Zxing 相关技术的第一篇文章，本篇不会涉及到应用相关，仅仅是二维码基础知识的学习记录。</p>
<span id="more"></span>
<h2 id="QRcode"><a class="header-anchor" href="#QRcode"></a>QRcode</h2>
<p>QRcode（全称：Quick Response Code，快速响应矩阵图码）</p>
<ul>
<li>1994 年由<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JTlCJUJCJUU4JUEzJTlE">日本 DENSO WAVE<i class="fa fa-external-link-alt"></i></span>公司发明，</li>
<li>QR 码使用<code>四种</code>标准化编码模式（数字，字母数字，字节（二进制）和汉字）来存储数据</li>
<li>QR 码可以存储更多信息，可在小空间内打印，可以从 360°任一方向读取，可以对变脏和破损的图码有一定的容错能力，并且可以有效处理各种数据，支持数据合并等</li>
<li>QR 码的种类：<span class="exturl" data-url="aHR0cHM6Ly93d3cucXJjb2RlLmNvbS96aC9jb2Rlcy9tb2RlbDEyLmh0bWw=">QR 码（模型1，模型2）<i class="fa fa-external-link-alt"></i></span>；<span class="exturl" data-url="aHR0cHM6Ly93d3cucXJjb2RlLmNvbS96aC9jb2Rlcy9taWNyb3FyLmh0bWw=">Micro QR 码<i class="fa fa-external-link-alt"></i></span>；<span class="exturl" data-url="aHR0cHM6Ly93d3cucXJjb2RlLmNvbS96aC9jb2Rlcy9pcXIuaHRtbA==">iQR 码<i class="fa fa-external-link-alt"></i></span>；<span class="exturl" data-url="aHR0cHM6Ly93d3cucXJjb2RlLmNvbS9lbi9jb2Rlcy9zcXJjLmh0bWw=">SQRC<i class="fa fa-external-link-alt"></i></span>；<span class="exturl" data-url="aHR0cHM6Ly93d3cucXJjb2RlLmNvbS9lbi9jb2Rlcy9mcmFtZXFyLmh0bWw=">Frame QR<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<blockquote>
<p>QR 码（模型1，模型2）:<br>
模型1：最早制作的 QR 码。最高版本为 14（73x73 码元），最多可以处理 1167 位数字<br>
模型2：是模型1的改良版，最高版本为 40（177x177 码元），最多可以处理 7089 位数字，现在我们通常所说的 QR 码一般指模型2<br>
Micro QR 码：该码只有 1 个定位图案，可以在更小的空间内打印，最高版本为 M4（17x17 码元），最多可以因 35 位数字<br>
iQR码：可生成正方形或长方形，可以支持内外翻转，黑白反色，圆点图案（直接打标在部件上）。理论上的最高版本为 61（422x422 码元），最多大约可以处理 4万位数字<br>
SQRC：安全快速响应代码（Secure Quick Response code，简写SQRC）是一种QR代码，在终结符之后包含“私有数据”段而不是指定的填充字节“ec 11”。必须使用加密密钥对此专用数据段进行解密。这可用于存储私人信息和管理公司的内部信息。<br>
Frame QR：FrameQR是具有“画布区域”的QR码，可以灵活使用。在这个代码的中心是画布区域，其中可以灵活地安排图形，字母等，使得可以布置代码而不会丢失插图，照片等的设计</p>
</blockquote>
<h2 id="标准及发展"><a class="header-anchor" href="#标准及发展"></a>标准及发展</h2>
<ul>
<li>1997年10月：AIM（自动识别和流动协会）国际</li>
<li>1999年1月：JIS X 0510</li>
<li>2000年6月
<ul>
<li>ISO / IEC 18004：2000信息技术 - 自动识别和数据捕获技术 - 条形码符号 - QR码（现已撤销）</li>
<li>定义QR码模型1和2符号</li>
</ul>
</li>
<li>2006年9月1日：
<ul>
<li>ISO / IEC 18004：2006信息技术 - 自动识别和数据捕获技术 - QR码2005条形码符号规范（现已撤销）</li>
<li>定义QR码2005符号，QR码模型2的扩展。不指定如何读取QR码模型1符号，或要求符合性。</li>
</ul>
</li>
<li>2015年2月1日：
<ul>
<li>ISO / IEC 18004：2015信息 - 自动识别和数据捕获技术 - QR码条形码符号规范</li>
<li>将QR Code 2005符号重命名为QR Code，并对某些程序和次要更正添加说明</li>
</ul>
</li>
</ul>
<h2 id="结构"><a class="header-anchor" href="#结构"></a>结构</h2>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1556733911/blog/QR_Code_Structure_Example.png" alt="qrcode-structure"></p>
<blockquote>
<p>图片来自<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvUVIlRTclQTIlQkM=">维基百科<i class="fa fa-external-link-alt"></i></span>，Version7</p>
</blockquote>
<p>如图所示，QR码由 5 部分组成</p>
<ol>
<li>版本信息：记录具体的版本信息（仅存在 Version7 以上）
<ul>
<li>version1 是 21x21 的矩阵</li>
<li>最高 version40 是 177x177 的矩阵</li>
<li>计算公式：(V-1)*4+21，V 代表版本号</li>
</ul>
</li>
<li>格式信息：记录使用的<code>掩码</code>和<code>纠错等级</code></li>
<li>数据及容错密钥</li>
<li>数据需求模块</li>
<li>静态区域</li>
</ol>
<h3 id="IEC-18004"><a class="header-anchor" href="#IEC-18004"></a>IEC 18004</h3>
<p><img src="https://res.cloudinary.com/incoder/image/upload/v1556802979/blog/qr-iec-18004.png" alt="qr-iec-18004"><br>
IEC 18004标准中给出了详细的说明</p>
<ul>
<li>位置探测图形、位置探测图形分隔符、定位图形：用于对二维码的定位，对每个QR码来说，位置都是固定存在的，只是大小规格会有所差异；</li>
<li>校正图形：规格确定，校正图形的数量和位置也就确定了；</li>
<li>格式信息：表示改二维码的纠错级别，分为L、M、Q、H；</li>
<li>版本信息：即二维码的规格，QR码符号共有40种规格的矩阵（一般为黑白色），从21x21（版本1），到177x177（版本40），每一版本符号比前一版本 每边增加4个模块。</li>
<li>数据和纠错码字：实际保存的二维码信息，和纠错码字（用于修正二维码损坏带来的错误）</li>
</ul>
<h3 id="掩码"><a class="header-anchor" href="#掩码"></a>掩码</h3>
<p>掩码的作用</p>
<ol>
<li>为了对数据区域进行掩模以利于扫描仪识别，可以避免数据区域出现连续的空白或连续的黑色区，</li>
<li>避免了数据区出现类似定位点样式的正方形出现。掩模图案在整个数据区域的网格内不断重复进行掩模计算（功能图形不进行掩模），数据区上对应掩模黑色模块的单元将会反转。</li>
<li>每个二维码上会有两组相同的格式信息出现，并且带有 BCH 纠错</li>
</ol>
<blockquote>
<p>在计算机科学中，掩码就是一个二进制串，通过和数据进行<code>异或运算</code>来变换数据。在 QR 码中，掩码也是通过异或运算来变换数据矩阵，所以 QR 码掩码就是预先定义好的矩阵</p>
</blockquote>
<h3 id="纠错等级"><a class="header-anchor" href="#纠错等级"></a>纠错等级</h3>
<p>相对而言，容错率愈高，QR 码图形面积愈大，所以一般折中使用 15% 容错能力</p>
<p>|   错误修正容量   |<br>
| — | — |<br>
| L 等级 | 7%的字码可被修正 |<br>
| M 等级 | 15%的字码可被修正 |<br>
| Q 等级 | 25%的字码可被修正 |<br>
| H 等级 | 30%的字码可被修正 |</p>
<h3 id="编码-QR-码步骤"><a class="header-anchor" href="#编码-QR-码步骤"></a>编码 QR 码步骤</h3>
<ol>
<li>数据分析（data analysis）：分析输入数据，根据数据决定要使用的 QR 码版本、容错等级和编码模式</li>
<li>编码数据（data encoding）：根据选择的编码模式，将输入的字符串转变成比特流，插入模式标识码（mode indicator）和终止标识符（terminator），将比特流切分成 8 比特的字节，加入填充字节来满足标准的数据字码数要求</li>
<li>计算容错码（error correction coding）：对步骤二产生的比特流计算容错码，附在比特流之后。高版本的编码方式可能需要将数据流切分成块再分别进行容错码计算</li>
<li>组织数据（structure final message）：根据结构图把步骤三得到的有容错的数据切分，准备填充</li>
<li>填充（module placement in matrix）：把数据和功能性图样根据标准填充到矩阵中</li>
<li>应用数据掩码（data masking）：应用标准中的 8 个数据掩码来变换编码区域的数据，选择最优的掩码应用</li>
<li>填充格式和版本信息（format and version information）：计算格式和版本信息填入矩阵，完成 QR 码</li>
</ol>
<h2 id="附录"><a class="header-anchor" href="#附录"></a>附录</h2>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvUVIlRTclQTIlQkM=">维基百科·QR码·中文<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUVJfY29kZQ==">维基百科·QR码·英文·推荐<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI2MTE4NzgvYXJ0aWNsZS9kZXRhaWxzLzUzMTY3MDA5">二维码（QR code）基本结构及生成原理<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucXJjb2RlLmNvbQ==">QRcode<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb29sc2hlbGwuY24vYXJ0aWNsZXMvMTA1OTAuaHRtbA==">二维码的生成细节和原理<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC84MjA4YWFkNTM3YmI=">为程序员写的Reed-Solomon码解释<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb29sc2hlbGwuY24vYXJ0aWNsZXMvMTA1OTAuaHRtbA==">ISO/IEC 18004:2015·PDF<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb29sc2hlbGwuY24vYXJ0aWNsZXMvMTA1OTAuaHRtbA==">ISO/IEC 18004:2015·PDF<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Zxing</tag>
      </tags>
  </entry>
  <entry>
    <title>Zxing（二）Android 模块应用源码探索</title>
    <url>/2019/05/02/zxing2/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3p4aW5nL3p4aW5n">ZXing（“Zebra Crossing”<i class="fa fa-external-link-alt"></i></span>）用于Java，Android的条形码扫描库。虽然当前开源库仅处于维护模式，意味着更改是由贡献的补丁来驱动，只会考虑错误修复和次要的增强功能</p>
<p>本篇开启 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3p4aW5nL3p4aW5nL3RyZWUvbWFzdGVyL2FuZHJvaWQ=">ZXing项目Android<i class="fa fa-external-link-alt"></i></span> 模块的探索学习之路，那么首先我们要集成该模块到项目中</p>
<span id="more"></span>
<h2 id="模块集成"><a class="header-anchor" href="#模块集成"></a>模块集成</h2>
<ul>
<li>下载官方项目<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3p4aW5nL3p4aW5n">Zxing<i class="fa fa-external-link-alt"></i></span></li>
<li>使用 AS 创建一个新的 Project</li>
</ul>
<blockquote>
<p>编译环境</p>
</blockquote>
<ul>
<li>Android studio：3.4</li>
<li>gradle：5.1.1</li>
<li>SDK：28</li>
<li>JDK：1.8</li>
</ul>
<p>演示项目<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Jvb3RDbHVzdGVyL3JjLWFuZHJvaWQtenhpbmc=">rc-android-zxing<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="导入步骤"><a class="header-anchor" href="#导入步骤"></a>导入步骤</h3>
<ul>
<li>导入 module<br>
<img src="https://raw.githubusercontent.com/RootCluster/rc-android-zxing/zxing/images/import_module.png" alt="import_module"></li>
<li>选择 module<br>
<img src="https://github.com/RootCluster/rc-android-zxing/raw/zxing/images/select_import_module.png" alt="select_import_module"></li>
<li>移除最小及目标版本设置<br>
<img src="https://github.com/RootCluster/rc-android-zxing/raw/zxing/images/remove_min_target_version.png" alt="remove_min_target_version"></li>
<li>添加项目核心依赖<br>
<img src="https://github.com/RootCluster/rc-android-zxing/raw/zxing/images/import_dependencies.png" alt="import_dependencies"><br>
<code>com.google.zxing:android-core:3.3.0</code>：实质是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3p4aW5nL3p4aW5nL3RyZWUvbWFzdGVyL2FuZHJvaWQtY29yZQ==">android-core<i class="fa fa-external-link-alt"></i></span>模块<br>
<code>com.google.zxing:core:3.3.3</code>：实质是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3p4aW5nL3p4aW5nL3RyZWUvbWFzdGVyL2NvcmU=">core<i class="fa fa-external-link-alt"></i></span>模块</li>
<li>删除<code>app</code>module（可选）</li>
</ul>
<h3 id="项目展示"><a class="header-anchor" href="#项目展示"></a>项目展示</h3>
<p><img src="https://github.com/RootCluster/rc-android-zxing/raw/zxing/images/zxing.gif" alt="zxing"></p>
<p>当然你也可以下载官方提供的应用<span class="exturl" data-url="aHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPWNvbS5nb29nbGUuenhpbmcuY2xpZW50LmFuZHJvaWQ=">google play<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="异常问题处理"><a class="header-anchor" href="#异常问题处理"></a>异常问题处理</h3>
<h4 id="相机出现问题"><a class="header-anchor" href="#相机出现问题"></a>相机出现问题</h4>
<h5 id="表现"><a class="header-anchor" href="#表现"></a>表现</h5>
<p>如果你运行的设备是 Android 6.0 以上版本，那么在启动应用程序后，应该会提示你“很遗憾，Android 相机出现问题，你可能需要重启设备”，如下图<br>
<img src="https://github.com/RootCluster/rc-android-zxing/raw/zxing/images/project_problem.png" alt="project_problem"></p>
<h5 id="分析"><a class="header-anchor" href="#分析"></a>分析</h5>
<p>分析运行日志，进行定位<code>CaptureActivity.java</code>类，在初始化相机时，由于没有相机权限，因此无法正常运行应用<br>
<img src="https://github.com/RootCluster/rc-android-zxing/raw/zxing/images/zxing_error_log.png" alt="zxing_error_log"></p>
<h5 id="解决方式"><a class="header-anchor" href="#解决方式"></a>解决方式</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CaptureActivity.jaca</span></span><br><span class="line"><span class="comment">// line 266 &amp;&amp; line 443</span></span><br><span class="line">mHolder = surfaceHolder;</span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.LOLLIPOP_MR1) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ContextCompat.checkSelfPermission(CaptureActivity.<span class="built_in">this</span>,</span><br><span class="line">           android.Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">        <span class="comment">// 先判断有没有权限 ，没有就在这里进行权限的申请</span></span><br><span class="line">        ActivityCompat.requestPermissions(CaptureActivity.<span class="built_in">this</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;Manifest.permission.CAMERA&#125;, CAMERA_OK);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">// 说明已经获取到摄像头权限了</span></span><br><span class="line">             initCamera(surfaceHolder);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        initCamera(surfaceHolder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// line 803</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onRequestPermissionsResult</span><span class="params">(<span class="type">int</span> requestCode</span></span><br><span class="line"><span class="params">        , <span class="meta">@NonNull</span> String[] permissions, <span class="meta">@NonNull</span> <span class="type">int</span>[] grantResults)</span> &#123;</span><br><span class="line">    <span class="comment">// If request is cancelled, the result arrays are empty.</span></span><br><span class="line">    <span class="keyword">if</span> (requestCode == CAMERA_OK) &#123;</span><br><span class="line">        <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span></span><br><span class="line">                &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            <span class="comment">// permission was granted, yay! Do the</span></span><br><span class="line">            <span class="comment">// contacts-related task you need to do.</span></span><br><span class="line">            initCamera(mHolder);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="其他问题"><a class="header-anchor" href="#其他问题"></a>其他问题</h4>
<p>同样我们在<code>EncodeActivity.java</code>文件中加入读取内存卡的权限<code>READ_EXTERNAL_STORAGE</code></p>
<h2 id="项目分析"><a class="header-anchor" href="#项目分析"></a>项目分析</h2>
<h3 id="项目概要"><a class="header-anchor" href="#项目概要"></a>项目概要</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rc-android-zxing</span><br><span class="line">    ├── book/</span><br><span class="line">    ├── camera/</span><br><span class="line">    ├── clipboard/</span><br><span class="line">    ├── encode/</span><br><span class="line">    ├── history/</span><br><span class="line">    ├── result/</span><br><span class="line">    ├── share/   </span><br><span class="line">    ├── wifi/</span><br><span class="line">    ├── AmbientLightManager</span><br><span class="line">    ├── BeepManager</span><br><span class="line">    ├── CaptureActivity</span><br><span class="line">    ├── CaptureActivityHandler</span><br><span class="line">    ├── Contents</span><br><span class="line">    ├── DecodeFormatManager</span><br><span class="line">    ├── DecodeHandler</span><br><span class="line">    ├── DecodeHintManager</span><br><span class="line">    ├── DecodeThread</span><br><span class="line">    ├── FinishListener</span><br><span class="line">    ├── HelpHelper</span><br><span class="line">    ├── InactivityTimer</span><br><span class="line">    ├── Intents</span><br><span class="line">    ├── IntentSource</span><br><span class="line">    ├── LocaleManager</span><br><span class="line">    ├── PreferencesActivity</span><br><span class="line">    ├── PreferencesFragment</span><br><span class="line">    ├── ScanFromWebPageManager</span><br><span class="line">    ├── ViewfinderResultPointCallback</span><br><span class="line">    └── ViewfinderView</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="项目源码"><a class="header-anchor" href="#项目源码"></a>项目源码</h2>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Zxing</tag>
      </tags>
  </entry>
</search>
