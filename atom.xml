<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BladeCode</title>
  
  <subtitle>Life&#39;s a struggle!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.incoder.org/"/>
  <updated>2018-08-01T11:57:24.341Z</updated>
  <id>https://www.incoder.org/</id>
  
  <author>
    <name>Jerry xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git 同步 Fork 项目</title>
    <link href="https://www.incoder.org/2018/08/01/syncing-a-fork/"/>
    <id>https://www.incoder.org/2018/08/01/syncing-a-fork/</id>
    <published>2018-08-01T16:09:50.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.github.com" target="_blank" rel="noopener">Github</a> 全球最大的同性交友网站，这里拥有最前沿的IT技术创新，拥有最流行的开源项目，等等…，总之这里是我的知识仓库，每天都会在上面寻找，学习知识</p><p>扯远了，本篇解决对于fork的项目，如何进行源项目的更新和同步问题</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><ol><li><p>查看fork项目的远程仓库信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)</span><br><span class="line">origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)</span><br></pre></td></tr></table></figure></li><li><p>设置源项目仓库地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</span><br></pre></td></tr></table></figure></li><li><p>检查远程地址信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)</span><br><span class="line">origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)</span><br><span class="line">upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)</span><br><span class="line">upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)</span><br></pre></td></tr></table></figure></li></ol><h2 id="同步源仓库信息"><a href="#同步源仓库信息" class="headerlink" title="同步源仓库信息"></a>同步源仓库信息</h2><ol><li><p>获取源仓库更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git fetch upstream</span><br><span class="line">remote: Counting objects: 75, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (53/53), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 62 (delta 27), reused 44 (delta 9)</span><br><span class="line">Unpacking objects: 100% (62/62), <span class="keyword">done</span>.</span><br><span class="line">From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY</span><br><span class="line"> * [new branch]      master     -&gt; upstream/master</span><br></pre></td></tr></table></figure></li><li><p>查看本地master分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br></pre></td></tr></table></figure></li><li><p>合并源仓库更新到本地master分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git merge upstream/master</span><br><span class="line">Updating a422352..5fdff0f</span><br><span class="line">Fast-forward</span><br><span class="line"> README                    |    9 -------</span><br><span class="line"> README.md                 |    7 ++++++</span><br><span class="line"> 2 files changed, 7 insertions(+), 9 deletions(-)</span><br><span class="line"> delete mode 100644 README</span><br><span class="line"> create mode 100644 README.md</span><br></pre></td></tr></table></figure></li></ol><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><a href="http://wiki.jikexueyuan.com/project/github-basics/fork-synced.html" target="_blank" rel="noopener">同步你的 Fork 仓库</a></li><li><a href="https://help.github.com/articles/configuring-a-remote-for-a-fork/" target="_blank" rel="noopener">Configuring a remote for a fork</a></li><li><a href="https://help.github.com/articles/syncing-a-fork" target="_blank" rel="noopener">Syncing a fork</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.github.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github&lt;/a&gt; 全球最大的同性交友网站，这里拥有最前沿的IT技术创新，拥有最流行的开源项目，等等…，总之这里是我的知识仓库，每天都会在上面寻
      
    
    </summary>
    
      <category term="Git" scheme="https://www.incoder.org/categories/Git/"/>
    
    
      <category term="Syncing" scheme="https://www.incoder.org/tags/Syncing/"/>
    
  </entry>
  
  <entry>
    <title>Linux 之 MySQL</title>
    <link href="https://www.incoder.org/2018/07/23/linux-mysql/"/>
    <id>https://www.incoder.org/2018/07/23/linux-mysql/</id>
    <published>2018-07-23T22:30:10.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>之前粗略的接触了Linux的基础使用和安装，这次准备在自购的服务器上跑些应用，纯属娱乐，废话不说，上来就先仍数据库。<br>数据库常用的<code>Oracle</code>,<code>MySQL</code>,<code>SQL Server</code>,<code>MongoDB</code>等，排名不分先后，自己平时接触最多的也就是<code>MySQL</code>，<code>MongoDB</code>，好<code>MySQL</code>先来一份。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>MySQL是一个开源数据库管理系统，通常作为流行的LEMP（Linux，Nginx，MySQL / MariaDB，PHP / Python / Perl）堆栈的一部分安装。它使用关系数据库和SQL（结构化查询语言）来管理其数据。</p><p><a href="https://www.centos.org" target="_blank" rel="noopener">CentOS 7</a>更喜欢<a href="https://mariadb.org" target="_blank" rel="noopener">MariaDB</a>，它是由原始<code>MySQL</code>开发人员管理的<code>MySQL</code>分支，旨在替代MySQL。如果你在CentOS 7上运行<code>yum install mysql</code>，那么安装的是MariaDB，而不是MySQL。</p><h2 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h2><ul><li>OS: CentOS 7</li><li>DataBase：MySQL 8.0.11</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 获取官方yum源安装包 mysql80-community-release-el7-1.noarch.rpm 是根据官网提供的版本信息</span></span><br><span class="line">wget wget https://dev.mysql.com/get/`mysql80-community-release-el7-1.noarch.rpm`</span><br><span class="line"><span class="comment"># 2. 安装rpm包</span></span><br><span class="line">rpm -ivh mysql80-community-release-el7-1.noarch.rpm</span><br><span class="line"><span class="comment"># 3. 安装mysql-server</span></span><br><span class="line">yum install -y mysql-server</span><br><span class="line"><span class="comment"># 4. 启动mysqld服务</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"><span class="comment"># 5. 查看是否成功启动</span></span><br><span class="line">ps aux|grep mysqld</span><br><span class="line"><span class="comment"># 6. 设置mysqld服务开机自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>由于MySQL从5.7开始不允许在首次安装后，使用空密码进行登录，系统会随机生成一个密码以供管理员首次登录使用，这个密码记录在<code>/var/log/mysqld.log</code>文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 查看系统提供密码</span></span><br><span class="line">cat /var/<span class="built_in">log</span>/mysqld.log|grep <span class="string">'A temporary password'</span></span><br><span class="line"><span class="comment"># 2. 使用获取到的密码登录MySQL</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment"># 3. 切换数据库</span></span><br><span class="line">use mysql;</span><br><span class="line"><span class="comment"># 4. 修改root密码 your_password 替换成你自己的密码就可以了，这个密码是强密码，要求密码包含大小写字母、数字及标点符号，长度大于6</span></span><br><span class="line">alter user <span class="string">'root'</span>@<span class="string">'localhost'</span> identified by <span class="string">'your_password'</span>;</span><br></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>自己平时习惯使用 <a href="https://www.navicat.com.cn" target="_blank" rel="noopener">Navicat</a> 进行数据库操作，因此这里进行配置链接已在云端刚刚安装的MySQL服务<br><img src="https://res.cloudinary.com/incoder/image/upload/v1532362215/blog/linux-mysql.png" alt="linux-mysql"></p><h3 id="ERROR-1130"><a href="#ERROR-1130" class="headerlink" title="ERROR 1130"></a>ERROR 1130</h3><p>按照上图图的配置信息链接MySQL，发现错误提示：<code>ERROR 1130: Host &#39;xxx.xxx.xxx.xxx&#39; is not allowed to connect to this MySQL server</code></p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>不允许从远程登陆MySQL服务，只能在localhost</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换数据库</span></span><br><span class="line">use mysql;</span><br><span class="line"><span class="comment"># 修改user 指定的host 为 %</span></span><br><span class="line">update user <span class="built_in">set</span> host = <span class="string">'%'</span> <span class="built_in">where</span> user = <span class="string">'root'</span>;</span><br><span class="line"><span class="comment"># 成功修改</span></span><br><span class="line">+-----------+------------------+</span><br><span class="line">| host      | user             |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">| %         | root             |</span><br><span class="line">| localhost | mysql.infoschema |</span><br><span class="line">| localhost | mysql.session    |</span><br><span class="line">| localhost | mysql.sys        |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="ERROR-2059"><a href="#ERROR-2059" class="headerlink" title="ERROR 2059"></a>ERROR 2059</h3><p>继续重试链接，错误提示：<code>ERROR 2059: Authentication plugin &#39;caching_sha2_password&#39; cannot be loaded:The specified module could not be found.</code></p><h4 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h4><p>MySQL 8不支持动态修改密码验证方式</p><h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止mysql</span></span><br><span class="line">systemctl stop mysqld.service</span><br><span class="line"><span class="comment"># my.cnf文件中默认有下面的语句，删除前面的#号即可，没有的话就把它添加到my.cnf中 ，默认路径`/etc/my.cnf`</span></span><br><span class="line">default-authentication-plugin=mysql_native_password</span><br><span class="line"><span class="comment"># 切换数据库</span></span><br><span class="line">use mysql</span><br><span class="line"><span class="comment"># 给指定用户设置密码，这里`%`是因为之前已经将远程没有特殊指定，用%代替了localhost</span></span><br><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'your_password'</span>;</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><a href="">安装过程Pdf</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-centos-7" target="_blank" rel="noopener">How To Install MySQL on CentOS 7</a></li><li><a href="https://blog.csdn.net/nyist327/article/details/45074559" target="_blank" rel="noopener">ERROR 1130</a></li><li><a href="https://blog.csdn.net/airt_xiang/article/details/80261674" target="_blank" rel="noopener">ERROR 2059</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前粗略的接触了Linux的基础使用和安装，这次准备在自购的服务器上跑些应用，纯属娱乐，废话不说，上来就先仍数据库。&lt;br&gt;数据库常用的&lt;code&gt;Oracle&lt;/code&gt;,&lt;code&gt;MySQL&lt;/code&gt;,&lt;code&gt;SQL Server&lt;/code&gt;,&lt;code&gt;
      
    
    </summary>
    
      <category term="Linux" scheme="https://www.incoder.org/categories/Linux/"/>
    
    
      <category term="MySQL" scheme="https://www.incoder.org/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>藏经阁</title>
    <link href="https://www.incoder.org/2018/07/16/treasure/"/>
    <id>https://www.incoder.org/2018/07/16/treasure/</id>
    <published>2018-07-16T23:00:10.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><h2>工欲善其事，必先利其器</h2> </blockquote><p>记录汇总一些资源库</p><h2 id="导航页"><a href="#导航页" class="headerlink" title="导航页"></a>导航页</h2><p><a href="http://www.shandowsocks.info" target="_blank" rel="noopener">Hi World</a><br><a href="http://chuangzaoshi.com" target="_blank" rel="noopener">创造师导航</a><br><a href="http://so.uigreat.com" target="_blank" rel="noopener">UI设计师导航</a><br><a href="https://devdocs.io" target="_blank" rel="noopener">Devdocs</a></p><h2 id="开发者网站"><a href="#开发者网站" class="headerlink" title="开发者网站"></a>开发者网站</h2><h3 id="国际大厂"><a href="#国际大厂" class="headerlink" title="国际大厂"></a>国际大厂</h3><p><a href="https://developers.google.com" target="_blank" rel="noopener">Google Developer</a><br><a href="https://developer.apple.com" target="_blank" rel="noopener">Apple Developer</a><br><a href="https://developer.microsoft.com" target="_blank" rel="noopener">Microsoft Developer</a><br><a href="https://developers.facebook.com" target="_blank" rel="noopener">Facebook Developer</a><br><a href="https://developer.twitter.com" target="_blank" rel="noopener">Twitter Developer</a><br><a href="https://developers.github.com" target="_blank" rel="noopener">Github Developer</a><br><a href="https://developer.baidu.com" target="_blank" rel="noopener">Baidu Developer</a><br><a href="https://dev.aliyun.com" target="_blank" rel="noopener">Alibaba Developer</a><br><a href="http://open.qq.com" target="_blank" rel="noopener">Tencent Developer</a></p><h3 id="手机厂商"><a href="#手机厂商" class="headerlink" title="手机厂商"></a>手机厂商</h3><p><a href="https://developer.android.com" target="_blank" rel="noopener">Android Developer</a><br><a href="https://developer.apple.com/ios" target="_blank" rel="noopener">iOS Developer</a><br><a href="https://developer.samsung.com" target="_blank" rel="noopener">Samsung Developer</a><br><a href="http://developer.huawei.com/cn" target="_blank" rel="noopener">Huawei Developer</a><br><a href="https://dev.mi.com" target="_blank" rel="noopener">XiaoMi Developer</a><br><a href="https://www.htcdev.com/" target="_blank" rel="noopener">HTC Developer</a><br><a href="https://open.flyme.cn/" target="_blank" rel="noopener">Flyme Developer</a><br><a href="https://open.oppomobile.com" target="_blank" rel="noopener">Oppo Developer</a><br><a href="https://dev.vivo.com.cn" target="_blank" rel="noopener">Vivo Developer</a><br><a href="http://dev.smartisan.com" target="_blank" rel="noopener">Smartisan Developer</a><br><a href="http://dev.360.cn" target="_blank" rel="noopener">360 Developer</a></p><h3 id="应用市场"><a href="#应用市场" class="headerlink" title="应用市场"></a>应用市场</h3><p><a href="https://play.google.com" target="_blank" rel="noopener">Google Play</a><br><a href="">App Store</a><br><a href="http://app.mi.com" target="_blank" rel="noopener">XiaoMi 应用市场</a><br><a href="http://developer.huawei.com/consumer/cn/devunion/ui/server/appMarket.html" target="_blank" rel="noopener">Huawei 应用市场</a><br><a href="http://zhushou.360.cn" target="_blank" rel="noopener">360 应用市场</a><br><a href="https://www.coolapk.com" target="_blank" rel="noopener">酷安市场</a><br><a href="http://sj.qq.com" target="_blank" rel="noopener">应用宝</a></p><h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><p><a href="https://developers.google.cn/web/progressive-web-apps" target="_blank" rel="noopener">PWA</a><br><a href="https://mp.weixin.qq.com/cgi-bin/wx" target="_blank" rel="noopener">微信小程序</a><br><a href="https://docs.alipay.com/mini/developer/getting-started" target="_blank" rel="noopener">支付宝小程序</a><br><a href="https://www.quickapp.cn" target="_blank" rel="noopener">快应用</a></p><h3 id="ROM与论坛"><a href="#ROM与论坛" class="headerlink" title="ROM与论坛"></a>ROM与论坛</h3><p><a href="https://lineageos.org" target="_blank" rel="noopener">LineageOS</a><br><a href="https://forum.xda-developers.com" target="_blank" rel="noopener">XDA</a><br><a href="https://www.mokeedev.com" target="_blank" rel="noopener">Mokee</a><br><a href="https://www.modaco.com" target="_blank" rel="noopener">MoDaCo</a><br><a href="http://bbs.gfan.com/forum.php" target="_blank" rel="noopener">机锋</a><br><a href="http://bbs.zhiyoo.com" target="_blank" rel="noopener">智友</a><br><a href="http://rom.xiaomi.cn" target="_blank" rel="noopener">MiUi</a><br><a href="https://opengapps.org" target="_blank" rel="noopener">0pengApps</a></p><h2 id="DevTools"><a href="#DevTools" class="headerlink" title="DevTools"></a>DevTools</h2><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><p><a href="http://www.jetbrains.com" target="_blank" rel="noopener">Jetbrains 全家桶</a><br><a href="https://developer.android.google.cn/studio" target="_blank" rel="noopener">Android Studio</a><br><a href="https://developer.apple.com/xcode/ide" target="_blank" rel="noopener">Xcode</a><br><a href="http://www.eclipse.org/downloads/eclipse-packages" target="_blank" rel="noopener">Eclipse</a><br><a href="https://code.visualstudio.com" target="_blank" rel="noopener">Visual Studio Code</a><br><a href="http://www.sublimetext.com" target="_blank" rel="noopener">Sublime</a><br><a href="https://www.getpostman.com/apps" target="_blank" rel="noopener">PostMan</a><br><a href="http://www.netsarang.com/products/xsh_overview.html" target="_blank" rel="noopener">Xshell Xftp</a></p><h3 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h3><p><a href="https://github.com/alibaba/p3c" target="_blank" rel="noopener">Alibaba Java Coding Guidelines</a><br><a href="https://github.com/avast/android-butterknife-zelezny" target="_blank" rel="noopener">Android ButterKnife Zelezny</a><br><a href="https://github.com/konifar/android-material-design-icon-generator-plugin" target="_blank" rel="noopener">Android Material Design Icon Generator</a><br><a href="https://github.com/mcharmas/android-parcelable-intellij-plugin" target="_blank" rel="noopener">Android Parcelable code generator</a><br><a href="https://plugins.jetbrains.com/plugin/7775-android-postfix-completion" target="_blank" rel="noopener">Android Postfix Completion</a><br><a href="https://github.com/niorgai/Android-Resource-Usage-Count" target="_blank" rel="noopener">Android Resource Usage Count</a><br><a href="https://github.com/Haehnchen/idea-android-studio-plugin" target="_blank" rel="noopener">Android Studio Prettify</a><br><a href="http://www.developerphil.com/renaming-your-gradle-build-files" target="_blank" rel="noopener">ADB Idea</a><br><a href="https://plugins.jetbrains.com/plugin/8603-eventbus3-intellij-plugin" target="_blank" rel="noopener">EventBus3 Intellij Plugin</a><br><a href="https://github.com/krasa/GrepConsole" target="_blank" rel="noopener">GrepConsole</a><br><a href="https://github.com/zzz40500/GsonFormat" target="_blank" rel="noopener">GsonFormat</a><br><a href="https://plugins.jetbrains.com/" target="_blank" rel="noopener">Jetbrains Plugins</a><br><a href="https://zeroturnaround.com/software/jrebel" target="_blank" rel="noopener">Jrebel</a><br><a href="http://ignore.hsz.mobi" target="_blank" rel="noopener">ignore</a><br><a href="https://github.com/drakeet/LayoutFormatter" target="_blank" rel="noopener">LayoutFormatter</a><br><a href="https://github.com/vsch/idea-multimarkdown" target="_blank" rel="noopener">Markdown Navigator</a><br><a href="https://github.com/esteinberg/plantuml4idea" target="_blank" rel="noopener">PlantUML integration</a><br><a href="https://plugins.jetbrains.com/plugin/8322-sqlscout-sqlite-support-" target="_blank" rel="noopener">SQLScout</a><br><a href="http://yiiguxing.github.io/TranslationPlugin" target="_blank" rel="noopener">Translation</a></p><h3 id="Managed-code"><a href="#Managed-code" class="headerlink" title="Managed code"></a>Managed code</h3><p><a href="https://www.github.com" target="_blank" rel="noopener">Github</a><br><a href="https://www.gitlab.com" target="_blank" rel="noopener">Gitlab</a><br><a href="https://bitbucket.org" target="_blank" rel="noopener">Bitbucket</a><br><a href="https://www.gitee.com" target="_blank" rel="noopener">Gitee</a><br><a href="https://coding.net" target="_blank" rel="noopener">Coding</a></p><h2 id="Yun"><a href="#Yun" class="headerlink" title="Yun"></a>Yun</h2><p><a href="https://console.cloud.google.com" target="_blank" rel="noopener">Google Cloud</a><br><a href="https://azure.microsoft.com" target="_blank" rel="noopener">Microsoft Azure</a><br><a href="https://aws.amazon.com" target="_blank" rel="noopener">Amazon Web Services</a><br><a href="https://www.aliyun.com" target="_blank" rel="noopener">Aliyun</a><br><a href="https://cloud.tencent.com" target="_blank" rel="noopener">Tencent Cloud</a><br><a href="https://www.didiyun.com" target="_blank" rel="noopener">DiDi Cloud</a><br><a href="https://www.mtyun.com" target="_blank" rel="noopener">MT Cloud</a><br><a href="https://www.163yun.com" target="_blank" rel="noopener">NetEase Cloud</a></p><h2 id="Mirror"><a href="#Mirror" class="headerlink" title="Mirror"></a>Mirror</h2><p><a href="https://mirrors.tuna.tsinghua.edu.cn" target="_blank" rel="noopener">Tsinghua</a><br><a href="http://services.gradle.org/distributions" target="_blank" rel="noopener">Gradle</a><br><a href="https://download-installer.cdn.mozilla.net/pub/firefox/releases" target="_blank" rel="noopener">Firfox</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;h2&gt;工欲善其事，必先利其器&lt;/h2&gt; &lt;/blockquote&gt;
&lt;p&gt;记录汇总一些资源库&lt;/p&gt;
&lt;h2 id=&quot;导航页&quot;&gt;&lt;a href=&quot;#导航页&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="Resources" scheme="https://www.incoder.org/categories/Resources/"/>
    
    
      <category term="DevTool" scheme="https://www.incoder.org/tags/DevTool/"/>
    
  </entry>
  
  <entry>
    <title>Hugo 初体验</title>
    <link href="https://www.incoder.org/2018/07/11/hugo/"/>
    <id>https://www.incoder.org/2018/07/11/hugo/</id>
    <published>2018-07-11T16:34:10.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>个人博客使用<a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="noopener">Hexo</a>搭建，使用效果很不错，在Github上创建组织<a href="https://github.com/RootCluster" target="_blank" rel="noopener">RootCluster</a>，该组织主要存放自己新技术的学习和一些Demo实验。组织同样也可以使用Github pages服务，因此给RootCluster构建一个静态页面，可用直观清晰的看自己的项目，加之之前已用Hexo，所以这次的静态页面构建选择了新的一个静态页面生成工具，<a href="https://gohugo.io" target="_blank" rel="noopener">Hugo</a>是一款使用Go语言开发的静态页面生成框架。</p><p><a href="https://gohugo.io" target="_blank" rel="noopener">Hugo</a>是世界上最快的静态网站引擎。它是用<a href="https://golang.org" target="_blank" rel="noopener">Go</a>（aka Golang）编写的，由<a href="https://github.com/bep" target="_blank" rel="noopener">bep</a>，<a href="https://github.com/spf13" target="_blank" rel="noopener">spf13</a>和<a href="https://github.com/gohugoio/hugo/graphs/contributors" target="_blank" rel="noopener">朋友</a>开发</p><h2 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a>材料准备</h2><ul><li>SystemOS：Windows 10</li><li><a href="https://chocolatey.org" target="_blank" rel="noopener">Chocolatey</a>：Windows的包管理器</li><li><a href="https://gohugo.io/getting-started/installing" target="_blank" rel="noopener">Hugo</a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Chocolatey安装"><a href="#Chocolatey安装" class="headerlink" title="Chocolatey安装"></a>Chocolatey安装</h3><p>如果已安装，跳过该步骤  </p><ul><li><p>使用 PowerShell.exe</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(<span class="string">'https://chocolatey.org/install.ps1'</span>))</span><br></pre></td></tr></table></figure></li><li><p>使用 cmd.exe</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="string">"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe"</span> -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command <span class="string">"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"</span> &amp;&amp; SET <span class="string">"PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"</span></span><br></pre></td></tr></table></figure></li></ul><p>以上两种方式，选择其一即可<br><img src="https://res.cloudinary.com/incoder/image/upload/v1531314279/blog/hugo_install.png" alt="PowerShell.exe 演示"></p><h3 id="hugo安装"><a href="#hugo安装" class="headerlink" title="hugo安装"></a>hugo安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install hugo -confirm</span><br></pre></td></tr></table></figure><h3 id="初始化Hugo"><a href="#初始化Hugo" class="headerlink" title="初始化Hugo"></a>初始化Hugo</h3><ul><li><p>初始化hugo模板</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new site project_name</span><br></pre></td></tr></table></figure></li><li><p>进入项目并启动项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project_name </span><br><span class="line">hugo serve</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://res.cloudinary.com/incoder/image/upload/v1531314737/blog/hugo_init.png" alt="hugo_init"></p><ul><li><a href="https://themes.gohugo.io" target="_blank" rel="noopener">主题安装</a></li></ul><p>这里选择<a href="https://themes.gohugo.io/hugo-elate-theme" target="_blank" rel="noopener">Elate</a>主题作为组织的网站</p><p><img src="https://res.cloudinary.com/incoder/image/upload/v1531316293/blog/hugo_theme.png" alt="主题安装"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;个人博客使用&lt;a href=&quot;https://hexo.io/zh-cn/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;搭建，使用效果很不错，在Github上创建组织&lt;a href=&quot;https://github.co
      
    
    </summary>
    
      <category term="Hugo" scheme="https://www.incoder.org/categories/Hugo/"/>
    
    
      <category term="Build" scheme="https://www.incoder.org/tags/Build/"/>
    
  </entry>
  
  <entry>
    <title>非对称加密——RSA</title>
    <link href="https://www.incoder.org/2018/07/03/security-rsa/"/>
    <id>https://www.incoder.org/2018/07/03/security-rsa/</id>
    <published>2018-07-03T20:28:51.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>这是常用加密技术的系列文章，主要包含<code>非对称</code>，<code>对称</code>，<code>JWT</code>三类常用技术的应用</p><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p><a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">RSA</a>：RSA加密算法是一种 <strong>非对称</strong> 加密算法。在公开密钥加密和电子商业中RSA被广泛使用。RSA是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。RSA就是他们三人姓氏开头字母拼在一起组成的。</p><h3 id="RSA加密解密"><a href="#RSA加密解密" class="headerlink" title="RSA加密解密"></a>RSA加密解密</h3><p>公钥 <strong>加密</strong> 私钥 <strong>解密</strong>，持有公钥（多人持有）可以对数据加密，但是只有持有私钥（一人持有）才可以解密并查看数据</p><h3 id="RSA加签验签"><a href="#RSA加签验签" class="headerlink" title="RSA加签验签"></a>RSA加签验签</h3><p>私钥 <strong>加签</strong> 公钥 <strong>验签</strong>，持有私钥（一人持有）可以加签，持有公钥（多人持有）可以验签</p><h3 id="RSA过程示意图"><a href="#RSA过程示意图" class="headerlink" title="RSA过程示意图"></a>RSA过程示意图</h3><p><img src="https://res.cloudinary.com/incoder/image/upload/v1530793864/blog/security-rsa.png" alt="security-rsa"></p><p>如上图，具体表述两个场景过程</p><h4 id="结果不需加密"><a href="#结果不需加密" class="headerlink" title="结果不需加密"></a>结果不需加密</h4><p>场景：返回的数据不需要加密(例如：绑定银行卡的时候)</p><ul><li>客户端<code>Client A</code>发送使用服务端<code>Serve publicKey</code> <strong>加密</strong> 的密文<code>cipher A(包含用户的银行卡号，手机号等重要信息)</code>到服务器</li><li>服务器<code>Serve</code> 通过 <code>Serve privateKey</code><strong>解密</strong></li><li>服务端业务处理完成，直接返回数据(一些普通信息，比如状态码code，提示信息msg，提示操作是成功还是失败)给客户端<code>Client A</code></li></ul><h4 id="结果需加密"><a href="#结果需加密" class="headerlink" title="结果需加密"></a>结果需加密</h4><p>场景：返回的数据需要加密(例如：用户登录)  </p><ul><li>客户端<code>Client B</code>发送使用服务端<code>Serve publicKey</code> <strong>加密</strong> 的密文<code>cipher B(包含用户名和密码等重要信息)</code>以及客户端<code>Client B</code>的<code>Client B publicKey</code>到服务器</li><li>服务器<code>Serve</code> 通过 <code>Serve privateKey</code><strong>解密</strong></li><li>服务端业务处理完成，直接返回数据(一般为token，token使用客户端<code>Client B</code>的<code>Client B publicKey</code>加密)给客户端<code>Client B</code></li><li>客户端<code>Client B</code>使用<code>Client B privateKey</code>进行 <strong>解密</strong> 获取相应的用户信息等</li></ul><h2 id="密钥对"><a href="#密钥对" class="headerlink" title="密钥对"></a>密钥对</h2><p>在使用RSA加密解密之前，首先要生成密钥对。所谓的密钥对，指的是公钥和私钥。RSA算法的密钥可以通过两个途径生成，一是借助<code>openssl</code>命令终端，二是使用<code>JDK</code>生成。<br>本篇采用<code>JDK</code>方式生成密钥对，<code>openssl</code>方式可自行尝试</p><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><h4 id="Serve端密钥对"><a href="#Serve端密钥对" class="headerlink" title="Serve端密钥对"></a>Serve端密钥对</h4><h4 id="Client端密钥对"><a href="#Client端密钥对" class="headerlink" title="Client端密钥对"></a>Client端密钥对</h4><h5 id="Android密钥对"><a href="#Android密钥对" class="headerlink" title="Android密钥对"></a>Android密钥对</h5><h5 id="Web密钥对"><a href="#Web密钥对" class="headerlink" title="Web密钥对"></a>Web密钥对</h5><h5 id="iOS密钥对"><a href="#iOS密钥对" class="headerlink" title="iOS密钥对"></a>iOS密钥对</h5><h3 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h3><p>略…</p><h2 id="RSA加密"><a href="#RSA加密" class="headerlink" title="RSA加密"></a>RSA加密</h2><h2 id="RSA解密"><a href="#RSA解密" class="headerlink" title="RSA解密"></a>RSA解密</h2><h2 id="RSA缺点"><a href="#RSA缺点" class="headerlink" title="RSA缺点"></a>RSA缺点</h2><p>虽然RSA是一种较高级别加密机制，但也存在一些缺点</p><ol><li>产生密钥很麻烦，受到素数产生技术的限制，因而难以做到一次一密。</li><li>安全性，RSA的安全性依赖于大数的因子分解，但并没有从理论上证明破译RSA的难度与大数分解难度等价，而且密码学界多数人士倾向于因子分解不是NP问题。</li><li>速度太慢，由于<code>RSA</code>的分组长度太大，为保证安全性，n 至少也要 <code>600 bit</code> 以上，使运算代价很高，尤其是速度较慢，较对称密码算法慢几个数量级；且随着大数分解技术的发展，这个长度还在增加，不利于数据格式的标准化。</li></ol><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>参考学习文章</p><ul><li><a href="https://blog.csdn.net/zhshulin/article/details/71573542" target="_blank" rel="noopener">一张图了解RSA加解密与加验签</a></li><li><a href="https://www.cnblogs.com/loveyou/p/7299524.html" target="_blank" rel="noopener">RSA加密解密及RSA加签验签</a></li><li><a href="https://www.jianshu.com/p/ff9bd897e96a" target="_blank" rel="noopener">RSA加解密和加签验签</a></li><li><a href="https://www.jianshu.com/p/283fff43a948" target="_blank" rel="noopener">RSA加密解密样例</a></li><li><a href="https://blog.csdn.net/hustpzb/article/details/72734578" target="_blank" rel="noopener">RSA加密解密实现</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是常用加密技术的系列文章，主要包含&lt;code&gt;非对称&lt;/code&gt;，&lt;code&gt;对称&lt;/code&gt;，&lt;code&gt;JWT&lt;/code&gt;三类常用技术的应用&lt;/p&gt;
&lt;h2 id=&quot;RSA&quot;&gt;&lt;a href=&quot;#RSA&quot; class=&quot;headerlink&quot; title=&quot;RS
      
    
    </summary>
    
      <category term="Security" scheme="https://www.incoder.org/categories/Security/"/>
    
    
      <category term="RSA" scheme="https://www.incoder.org/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>Network（一） 之OkHttp 入门</title>
    <link href="https://www.incoder.org/2018/06/23/network-okhttp1/"/>
    <id>https://www.incoder.org/2018/06/23/network-okhttp1/</id>
    <published>2018-06-23T12:44:25.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>自从Android4.4的源码中可以看到<code>HttpURLConnection</code>已经替换成<code>OkHttp</code>开始( <a href="https://twitter.com/JakeWharton/status/482563299511250944" target="_blank" rel="noopener">JakeWharton曾在Twitter表示</a> ) ，<code>OkHttp</code>+<code>Retrofit</code>+<code>RxJava</code>的组合网络请求一直经久不衰，主流app的网络架构基本都是这样的组合模式，存在即合理，说明<code>OkHttp</code>+<code>Retrofit</code>+<code>RxJava</code>的方式确实给开发，用户体验等带来可观的优势，那么这个系列文章围绕Android的网络展开.</p><p>OkHttp：An HTTP &amp; HTTP/2 client for Android and Java applications</p><blockquote><p>Android 历史网络库</p><ul><li><code>HttpClient</code> 是 Apache 提供的HTTP网络访问接口，从一开始的时候就被引入到了Android的API中；</li><li><code>HttpURLConnection</code> 是一种多用途, 轻量极的HTTP客户端, 提供的API比较简单, 可以容易地去使用和扩展. </li></ul></blockquote><h2 id="OkHttp优势"><a href="#OkHttp优势" class="headerlink" title="OkHttp优势"></a>OkHttp优势</h2><ul><li>支持HTTP/2, HTTP/2通过使用多路复用技术在一个单独的TCP连接上支持并发, 通过在一个连接上一次性发送多个请求来发送或接收数据</li><li>如果HTTP/2不可用, 连接池复用技术也可以极大减少延时</li><li>支持GZIP, 可以压缩下载体积</li><li>响应缓存可以直接避免重复请求</li><li>会从很多常用的连接问题中自动恢复</li><li>如果您的服务器配置了多个IP地址, 当第一个IP连接失败的时候, OkHttp会自动尝试下一个IP</li><li>OkHttp还处理了代理服务器问题和SSL握手失败问题，等等…</li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>该系列版本说明  </p><ul><li>OkHttp版本统一：<strong>3.10.0</strong></li><li>JDK：<strong>1.8+</strong></li></ul><p>Gradle包导入<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// okhttp核心库</span></span><br><span class="line">implementation <span class="string">'com.squareup.okhttp3:okhttp:3.10.0'</span></span><br><span class="line"><span class="comment">// okhttp网络请求拦截日志库</span></span><br><span class="line">implementation <span class="string">'com.squareup.okhttp3:logging-interceptor:3.10.0'</span></span><br></pre></td></tr></table></figure></p><h3 id="OkHttp请求"><a href="#OkHttp请求" class="headerlink" title="OkHttp请求"></a>OkHttp请求</h3><p>已在<a href="https://incoder.org/2018/06/22/network-http/#%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87" target="_blank" rel="noopener">Http VS Https</a>文章中介绍了，HTTP请求相关内容</p><h3 id="OkHttp响应"><a href="#OkHttp响应" class="headerlink" title="OkHttp响应"></a>OkHttp响应</h3><p>已在<a href="https://incoder.org/2018/06/22/network-http/#%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87" target="_blank" rel="noopener">Http VS Https</a>文章中介绍了，HTTP响应相关内容</p><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><p><code>同步</code>和<code>异步</code>关注的是消息通信机制 (synchronous communication/ asynchronous communication)</p><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>就是在发出一个 <strong>调用</strong> 时，在没有得到结果之前，该 <strong>调用</strong> 就不返回，但是一旦调用返回，就得到返回值了。<br>换句话说，就是由 <strong>调用者</strong> 主动等待这个 <strong>调用</strong> 的结果。<br>Okhttp同步(<code>execute()</code>)：Invokes the request immediately, and blocks until the response can be processed or is in error.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"> </span><br><span class="line"><span class="function">String <span class="title">run</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Request request = <span class="keyword">new</span> Request.Builder().url(url).build();</span><br><span class="line">    <span class="comment">// 执行同步操作</span></span><br><span class="line">    Response response = client.newCall(request).execute();   </span><br><span class="line">    <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">          <span class="keyword">return</span> response.body().string();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p><strong>异步</strong> 则与同步相反，<strong>调用</strong> 在发出之后，这个调用就直接返回了，所以没有返回结果。<br>换句话说，当一个异步过程调用发出后，<strong>调用者</strong> 不会立刻得到结果。而是在 <strong>调用</strong> 发出后，<strong>被调用者</strong> 通过状态、通知来通知 <strong>调用者</strong>，或通过回调函数处理这个调用。<br>Okhttp同步(<code>enqueue(Callback responseCallback)</code>)：Schedules the request to be executed at some point in the future.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">String url = <span class="string">"https://api.github.com/users/BladeCode"</span>;</span><br><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"></span><br><span class="line">Request request = <span class="keyword">new</span> Request.Builder().url(url).build();</span><br><span class="line"><span class="comment">// 返回response 对象</span></span><br><span class="line">Response response = client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">        System.out.println(e.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 字符串形式表达响应</span></span><br><span class="line">        System.out.println(response.body().string());</span><br><span class="line">        <span class="comment">// 或流的形式表达响应</span></span><br><span class="line">        System.out.println(response.body().charStream());</span><br><span class="line">        System.out.println(response.body().byteStream());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>响应体太大（超过1MB）, 应避免使用 string()方法, 因为它会将把整个文档加载到内存中.</li><li>对于超过1MB的响应body, 应使用流的方式来处理响应body. 这和我们处理xml文档的逻辑是一致的, 小文件可以载入内存树状解析, 大文件就必须流式解析</li></ul></blockquote><h2 id="OkHttp-Get"><a href="#OkHttp-Get" class="headerlink" title="OkHttp Get"></a>OkHttp Get</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"> </span><br><span class="line"><span class="function">String <span class="title">run</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Request request = <span class="keyword">new</span> Request.Builder().url(url).build();</span><br><span class="line">    Response response = client.newCall(request).execute();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (response.isSuccessful()) &#123;        </span><br><span class="line">        <span class="keyword">return</span> response.body().string();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="OkHttp-Post"><a href="#OkHttp-Post" class="headerlink" title="OkHttp Post"></a>OkHttp Post</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType JSON = MediaType.parse(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">post</span><span class="params">(String url, String json)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RequestBody body = RequestBody.create(JSON, json);</span><br><span class="line">    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">      .url(url)</span><br><span class="line">      .post(body)</span><br><span class="line">      .build();</span><br><span class="line">    </span><br><span class="line">    Response response = client.newCall(request).execute();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">        <span class="keyword">return</span> response.body().string();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提交String"><a href="#提交String" class="headerlink" title="提交String"></a>提交String</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType MEDIA_TYPE_MARKDOWN = MediaType.parse(<span class="string">"text/x-markdown; charset=utf-8"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String postBody = <span class="string">""</span></span><br><span class="line">        + <span class="string">"Releases\n"</span></span><br><span class="line">        + <span class="string">"--------\n"</span></span><br><span class="line">        + <span class="string">"\n"</span></span><br><span class="line">        + <span class="string">" * _1.0_ May 6, 2013\n"</span></span><br><span class="line">        + <span class="string">" * _1.1_ June 15, 2013\n"</span></span><br><span class="line">        + <span class="string">" * _1.2_ August 11, 2013\n"</span>;</span><br><span class="line"> </span><br><span class="line">    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .url(<span class="string">"https://api.github.com/markdown/raw"</span>)</span><br><span class="line">        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, postBody))</span><br><span class="line">        .build();</span><br><span class="line"> </span><br><span class="line">    Response response = client.newCall(request).execute();</span><br><span class="line">    <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</span><br><span class="line"> </span><br><span class="line">    System.out.println(response.body().string());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：当提交数据大于1MB，请使用流的方式</p></blockquote><h3 id="提交流"><a href="#提交流" class="headerlink" title="提交流"></a>提交流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType MEDIA_TYPE_MARKDOWN = MediaType.parse(<span class="string">"text/x-markdown; charset=utf-8"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    RequestBody requestBody = <span class="keyword">new</span> RequestBody() &#123;</span><br><span class="line">      <span class="meta">@Override</span> </span><br><span class="line">      <span class="function"><span class="keyword">public</span> MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MEDIA_TYPE_MARKDOWN;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="meta">@Override</span> </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        sink.writeUtf8(<span class="string">"Numbers\n"</span>);</span><br><span class="line">        sink.writeUtf8(<span class="string">"-------\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">997</span>; i++) &#123;</span><br><span class="line">          sink.writeUtf8(String.format(<span class="string">" * %s = %s\n"</span>, i, factor(i)));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="keyword">private</span> String <span class="title">factor</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">          <span class="keyword">int</span> x = n / i;</span><br><span class="line">          <span class="keyword">if</span> (x * i == n) <span class="keyword">return</span> factor(x) + <span class="string">" × "</span> + i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.toString(n);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .url(<span class="string">"https://api.github.com/markdown/raw"</span>)</span><br><span class="line">        .post(requestBody)</span><br><span class="line">        .build();</span><br><span class="line"> </span><br><span class="line">    Response response = client.newCall(request).execute();</span><br><span class="line">    <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</span><br><span class="line"> </span><br><span class="line">    System.out.println(response.body().string());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType MEDIA_TYPE_MARKDOWN = MediaType.parse(<span class="string">"text/x-markdown; charset=utf-8"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"README.md"</span>);</span><br><span class="line"> </span><br><span class="line">    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .url(<span class="string">"https://api.github.com/BladeCode/raw"</span>)</span><br><span class="line">        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, file))</span><br><span class="line">        .build();</span><br><span class="line"> </span><br><span class="line">    Response response = client.newCall(request).execute();</span><br><span class="line">    <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</span><br><span class="line"> </span><br><span class="line">    System.out.println(response.body().string());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h3><p>使用<code>FormEncodingBuilder</code>来构建和HTML<form>标签相同效果的请求体。键值对将使用一种HTML兼容形式的URL编码来进行编码</form></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    RequestBody formBody = <span class="keyword">new</span> FormEncodingBuilder()</span><br><span class="line">        .add(<span class="string">"search"</span>, <span class="string">"Jurassic Park"</span>)</span><br><span class="line">        .build();</span><br><span class="line">    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .url(<span class="string">"https://en.wikipedia.org/w/index.php"</span>)</span><br><span class="line">        .post(formBody)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    Response response = client.newCall(request).execute();</span><br><span class="line">    <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</span><br><span class="line"> </span><br><span class="line">    System.out.println(response.body().string());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提交分块请求"><a href="#提交分块请求" class="headerlink" title="提交分块请求"></a>提交分块请求</h3><p><code>MultipartBuilder</code>可以构建复杂的请求体，与HTML文件上传形式兼容。多块请求体中每块请求都是一个请求体，可以定义自己的请求头。这些请求头可以用来描述这块请求，例如他的<code>Content-Disposition</code>。如果<code>Content-Length</code>和<code>Content-Type</code>可用的话，他们会被自动添加到请求头中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IMGUR_CLIENT_ID = <span class="string">"..."</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType MEDIA_TYPE_PNG = MediaType.parse(<span class="string">"image/png"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image</span></span><br><span class="line">    RequestBody requestBody = <span class="keyword">new</span> MultipartBuilder()</span><br><span class="line">        .type(MultipartBuilder.FORM)</span><br><span class="line">        .addPart(</span><br><span class="line">            Headers.of(<span class="string">"Content-Disposition"</span>, <span class="string">"form-data; name=\"title\""</span>),</span><br><span class="line">            RequestBody.create(<span class="keyword">null</span>, <span class="string">"Square Logo"</span>))</span><br><span class="line">        .addPart(</span><br><span class="line">            Headers.of(<span class="string">"Content-Disposition"</span>, <span class="string">"form-data; name=\"image\""</span>),</span><br><span class="line">            RequestBody.create(MEDIA_TYPE_PNG, <span class="keyword">new</span> File(<span class="string">"website/static/logo-square.png"</span>)))</span><br><span class="line">        .build();</span><br><span class="line"> </span><br><span class="line">    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .header(<span class="string">"Authorization"</span>, <span class="string">"Client-ID "</span> + IMGUR_CLIENT_ID)</span><br><span class="line">        .url(<span class="string">"https://api.imgur.com/3/image"</span>)</span><br><span class="line">        .post(requestBody)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    Response response = client.newCall(request).execute();</span><br><span class="line">    <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</span><br><span class="line"></span><br><span class="line">    System.out.println(response.body().string());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><a href="https://www.zhihu.com/question/19732473" target="_blank" rel="noopener">怎样理解阻塞非阻塞与同步异步的区别</a></li><li><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0106/2275.html" target="_blank" rel="noopener">OkHttp使用教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自从Android4.4的源码中可以看到&lt;code&gt;HttpURLConnection&lt;/code&gt;已经替换成&lt;code&gt;OkHttp&lt;/code&gt;开始( &lt;a href=&quot;https://twitter.com/JakeWharton/status/48256329951
      
    
    </summary>
    
      <category term="Network" scheme="https://www.incoder.org/categories/Network/"/>
    
    
      <category term="OkHttp" scheme="https://www.incoder.org/tags/OkHttp/"/>
    
  </entry>
  
  <entry>
    <title>Http VS Https</title>
    <link href="https://www.incoder.org/2018/06/22/network-http/"/>
    <id>https://www.incoder.org/2018/06/22/network-http/</id>
    <published>2018-06-22T01:14:25.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础名称"><a href="#基础名称" class="headerlink" title="基础名称"></a>基础名称</h2><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：<br>请求行（request line）、请求头（header）、请求内容组成，如下请求报文的一般格式。<br><img src="https://user-gold-cdn.xitu.io/2018/4/16/162cdac93015af8f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="请求报文"></p><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><ol><li>方法：<ul><li>GET： 获取资源</li><li>POST： 向服务器端发送数据，传输实体主体</li><li>PUT： 传输文件</li><li>HEAD： 获取报文首部</li><li>DELETE： 删除文件</li><li>OPTIONS： 询问支持的方法</li><li>TRACE： 追踪路径</li></ul></li><li><p>URL：<br> <code>scheme://host:port/path?query</code></p><ul><li>scheme: 表示协议，如Http, Https, Ftp等</li><li>host: 表示所访问资源所在的主机名：如：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></li><li>port: 表示端口号，Http默认为80,Https默认为443</li><li>path: 表示所访问的资源在目标主机上的储存路径</li><li>query: 表示查询条件</li></ul></li><li><p>协议/版本号：</p></li></ol><h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><ol><li>通用首部(General Header)</li><li>请求首部(Request Header)</li><li>实体首部(Entity Header Fields)</li></ol><h4 id="请求内容"><a href="#请求内容" class="headerlink" title="请求内容"></a>请求内容</h4><p>如: 客户端POST的数据就放在这里(对比:GET的数据放在请求行的URL里)</p><p>例如：<br><img src="https://res.cloudinary.com/incoder/image/upload/v1529805798/blog/http-request.png" alt="请求示例"></p><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><p>服务端响应一个HTTP请求消息包括以下格式：<br>响应行（response line）、响应头（header）、响应内容组成</p><h4 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h4><ol><li>状态码：<ul><li>1XX：Informational(信息性状态码)</li><li>2XX：Success(成功状态码)</li><li>3XX：Redirection(重定向)</li><li>4XX：Client Error(客户端错误状态码)</li><li>5XX：Server Error(服务器错误状态吗)</li></ul></li><li>状态码描述：</li><li>协议/版本号：</li></ol><h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><ol><li>通用首部(General Header)</li><li>响应首部(Response Header)</li><li>实体首部(Entity Header Fields)</li></ol><h4 id="响应内容"><a href="#响应内容" class="headerlink" title="响应内容"></a>响应内容</h4><p>如：服务器返回的HTML、JSON等数据</p><p><img src="https://res.cloudinary.com/incoder/image/upload/v1529805798/blog/http-response.png" alt="响应示例"></p><h2 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">HTTP</a>：超文本传输协议（HyperText Transfer Protocol）是一种用于分布式、协作式和超媒体信息系统的应用层协议.</li><li>HTTP是万维网的数据通信的基础.</li></ul><h3 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h3><ol><li>建立TCP连接<br>在HTTP工作开始之前，Client首先要通过网络与Service建立连接，该连接是通过TCP来完成的，HTTP是比TCP更高层次的应用层协议，根据规则，只有低层协议建立之后才能进行更高层协议的连接，因此，首先要建立TCP连接</li><li>Client发起HTTP请求(Request)<br>Requset通常包含请求行，请求头，请求内容这三部风组成的请求报文</li><li>Service发送HTTP响应(Response)<br>Response通常包含响应行，响应头，响应内容这三部风组成的响应报文</li><li>Client关闭TCP连接</li></ol><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>无状态<ul><li>每个请求结束后都会被关闭，每次的请求都是独立的，它的执行情况和结果与前面的请求和之后的请求是无直接关系的，它不会受前面的请求应答情况直接影响，也不会直接影响后面的请求应答情况</li><li>服务器中没有保存客户端的状态，客户端必须每次带上自己的状态去请求服务器</li></ul></li><li>明文传输，可能被窃听</li><li>不验证通信方的身份，可能遭遇伪装<ul><li>HTTP 协议中的请求和响应不会对通信方进行确认。也就是说存在“服务器是否就是发送请求中 URI 真正指定的主机，返回的响应是否真的返回到实际提出请求的客户端”等类似问题</li><li>HTTP 协议通信时，由于不存在确认通信方的处理步骤，任何人都可以发起请求</li></ul></li><li>无法证明报文的完整性，可能遭遇篡改<ul><li>在请求或响应送出之后直到对方接收之前的这段时间内，即使请求或响应的内容遭到篡改，也没有办法获悉</li></ul></li></ol><h2 id="Https"><a href="#Https" class="headerlink" title="Https"></a>Https</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">HTTPS</a>：超文本传输安全协议（Hypertext Transfer Protocol Secure，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种通过计算机网络进行安全通信的传输协议.</li><li>HTTPS经由HTTP进行通信，但利用<code>SSL/TLS</code>来加密数据包.</li></ul><blockquote><p>HTTP+加密+认证+完整性保护 = HTTPS</p></blockquote><p><img src="https://res.cloudinary.com/incoder/image/upload/v1529822573/HTTPS.png" alt="HTTP VS HTTPS"></p><h3 id="通信-1"><a href="#通信-1" class="headerlink" title="通信"></a>通信</h3><h4 id="SSL-TLS"><a href="#SSL-TLS" class="headerlink" title="SSL/TLS"></a>SSL/TLS</h4><p>SSL/TLS：安全传输层协议(Transport Layer Security), 是介于TCP和HTTP之间的一层安全协议，TLS的前身是SSL(Secure Sockets Layer)</p><blockquote><p>TLS/SSL关系</p><ul><li>SSL2.0</li><li>SSL3.0</li><li>TLS1.0(SSL3.1)</li><li>TLS1.1(SSL3.2)</li><li>TLS1.2(SSL3.3)</li></ul></blockquote><h4 id="SSL-TLS工作原理"><a href="#SSL-TLS工作原理" class="headerlink" title="SSL/TLS工作原理"></a>SSL/TLS工作原理</h4><p>HTTPS协议的主要功能都依赖于SSL/TLS协议，SSL/TLS的功能实现主要依赖于三类算法：<code>对称加密</code>,<code>非对称加密</code>,<code>散列函数Hash</code></p><ul><li>非对称加密实现身份认证和密钥协商，</li><li>对称加密算法采用协商的密钥对数据加密，</li><li>基于散列函数验证信息的完整性</li></ul><h4 id="SSL-TLS协议实现"><a href="#SSL-TLS协议实现" class="headerlink" title="SSL/TLS协议实现"></a>SSL/TLS协议实现</h4><p>TLS以记录协议(record protocol)实现。记录协议负责在传输连接上交换所有的底层消息，并可以配置加密。每一条TLS记录以一个短标头起始。标头包含记录内容的类型(或子协议)、协议版本和长度</p><p>TLS的主规格说明书定义了四个核心子协议：</p><ul><li>握手协议(handshake protocol)；</li><li>密钥规格变更协议(change cipher spec protocol)；</li><li>应用数据协议(application data protocol)；</li><li>警报协议(alert protocol)；</li></ul><h4 id="握手协议"><a href="#握手协议" class="headerlink" title="握手协议"></a>握手协议</h4><p>握手是TLS协议中最精密复杂的部分。在这个过程中，通信双方协商连接参数，并且完成身份验证。根据使用的功能的不同，整个过程通常需要交换6~10条消息。根据配置和支持的协议扩展的不同，交换过程可能有许多变种，在使用中经常可以观察到以下三种流程：</p><ul><li>单向验证(完整的握手，对服务器进行身份验证)</li><li>双向验证(对客户端和服务器都进行身份验证的握手)</li><li>简短握手(恢复之前的会话)</li></ul><h5 id="单向验证"><a href="#单向验证" class="headerlink" title="单向验证"></a>单向验证</h5><p><img src="https://blog-10039692.file.myqcloud.com/1494841223417_6503_1494841223715.png" alt="单向验证"></p><ol><li>Handshake:ClentHello<br>客户端通过发送 Client Hello 报文开始 SSL通信。报文中包含客户端支持的 SSL的指定版本、加密组件（Cipher Suite）列表（所使用的加密算法及密钥长度等）。</li><li>Handshake:ServerHello<br>服务器可进行 SSL通信时，会以 ServerHello 报文作为应答。和客户端一样，在报文中包含 SSL版本以及加密组件。服务器的加密组件内容是从接收到的客户端加密组件内筛选出来的。</li><li>Handshake:Certificate<br>之后服务器发送 Certificate 报文。报文中包含公开密钥证书。</li><li>Handshake:ServerHelloDone<br>最后服务器发送 ServerHelloDone 报文通知客户端，最初阶段的 SSL握手协商部分结束。</li><li>Handshake:ClientKeyExchange<br>SSL第一次握手结束之后，客户端以 ClientKeyExchange 报文作为回应。报文中包含通信加密中使用的一种被称为 Pre-mastersecret 的随机密码串。该报文已用3 中的公开密钥进行加密。</li><li>ChangeCipherSpec<br>接着客户端继续发送 ChangeCipherSpec 报文。该报文会提示服务器，在此报文之后的通信会采用 Pre-master secret 密钥加密。</li><li>Handshake:Finished<br>客户端发送 Finished 报文。该报文包含连接至今全部报文的整体校验值。这次握手协商是否能够成功，要以服务器是否能够正确解密该报文作为判定标准。</li><li>ChangeCipherSpec<br>服务器同样发送 ChangeCipherSpec 报文。</li><li>Handshake:Finished<br>服务器同样发送 Finished 报文。</li><li>Application Data(HTTP)<br>服务器和客户端的 Finished 报文交换完毕之后，SSL连接就算建立完成。当然，通信会受到 SSL的保护。从此处开始进行应用层协议的通信，即发送 HTTP 请求。</li><li>Application Data(HTTP)<br>应用层协议通信，即发送 HTTP 响应。</li><li>Alert:warning,close notify<br>最后由客户端断开连接。断开连接时，发送 close_notify 报文(上图做了一些省略，实际到这一步还需要发送TCP FIN报文关闭TCP链接) </li></ol><h5 id="双向验证"><a href="#双向验证" class="headerlink" title="双向验证"></a>双向验证</h5><p><img src="https://blog-10039692.file.myqcloud.com/1494841503771_6933_1494841504095.png" alt="双向验证"><br>同单向验证流程相比，双向验证多了如下两条消息：<code>CertificateRequest</code>与<code>CertificateVerify</code>，其余流程大致相同</p><ul><li>CertificateRequest<br>CertificateRequest是TLS规定的一个可选功能，用于服务器认证客户端的身份。通过服务器要求客户端发送一个证书实现，服务器应该在ServerKeyExchange之后立即发送CertificateRequest消息</li><li>CertificateVerify<br>当需要做客户端认证时，客户端发送CertificateVerify消息，来证明自己确实拥有客户端证书的私钥。这条消息仅仅在客户端证书有签名能力的情况下发送</li></ul><h4 id="应用数据协议-application-data-protocol"><a href="#应用数据协议-application-data-protocol" class="headerlink" title="应用数据协议(application data protocol)"></a>应用数据协议(application data protocol)</h4><p>应用数据协议携带着应用消息，只以TLS的角度考虑的话，这些就是数据缓冲区。记录层使用当前连接安全参数对这些消息进行打包、碎片整理和加密</p><h4 id="警报协议-alert-protocol"><a href="#警报协议-alert-protocol" class="headerlink" title="警报协议(alert protocol)"></a>警报协议(alert protocol)</h4><p>警报的目的是以简单的通知机制告知对端通信出现异常状况。它通常会携带close_notify异常，在连接关闭时使用，报告错误</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li>《图解HTTP》</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview" target="_blank" rel="noopener">HTTP | MDN</a></li><li><a href="https://kb.cnblogs.com/page/194742" target="_blank" rel="noopener">数字证书及CA的扫盲介绍</a></li><li><a href="https://cloud.tencent.com/developer/article/1005073" target="_blank" rel="noopener">HTTPS 原理浅析及其在 Android 中的使用</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础名称&quot;&gt;&lt;a href=&quot;#基础名称&quot; class=&quot;headerlink&quot; title=&quot;基础名称&quot;&gt;&lt;/a&gt;基础名称&lt;/h2&gt;&lt;h3 id=&quot;请求报文&quot;&gt;&lt;a href=&quot;#请求报文&quot; class=&quot;headerlink&quot; title=&quot;请求报文&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Network" scheme="https://www.incoder.org/categories/Network/"/>
    
    
      <category term="Http" scheme="https://www.incoder.org/tags/Http/"/>
    
      <category term="Https" scheme="https://www.incoder.org/tags/Https/"/>
    
  </entry>
  
  <entry>
    <title>行·张家界</title>
    <link href="https://www.incoder.org/2018/05/20/travel-zjj/"/>
    <id>https://www.incoder.org/2018/05/20/travel-zjj/</id>
    <published>2018-05-20T22:39:10.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><ul><li>时间：2018.06.16——2018.06.19</li><li>地点：杭州——张家界</li><li>目标：武陵源景区，天门山景区，大峡谷景区</li></ul></div><p>听说张家界是人间仙境，鬼斧神工，嗯，今年端午就去一探究竟，慌慌张张，匆匆忙忙做一份旅行攻略，翻遍百度，爬烂谷歌，都没有找到匹配的攻略，哎，可能是我姿势不对？！  </p><p>张家界，张家界景区共分为四块：<strong>张家界国家森林公园</strong>，<strong>杨家界自然保护区</strong>，<strong>天子山自然保护区</strong>，<strong>索溪峪自然保护区</strong>四大景区，统称为武陵源风景名胜。</p><p><strong>最受欢迎</strong> 的四大景区</p><ol><li>武陵源景区（森林公园、金鞭溪、袁家界、杨家界、天子山、十里画廊等）</li><li>天门山景区（亚州最长的索道、世界公路奇观、玻璃栈道等）</li><li>大峡谷风景区（新开发的玻璃桥）</li><li>凤凰古城</li></ol><h2 id="出行准备"><a href="#出行准备" class="headerlink" title="出行准备"></a>出行准备</h2><ol><li>身份证件等相关证件</li><li>数码产品，雨具等</li><li>简单洗漱用品及换洗衣物</li><li>现金若干（不必太多）</li><li>零食（必备：辣条）</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>由于是自由行的方式，因此提醒以下几点</p><ol><li>到达张家界后，<strong>拒绝</strong> 和 <strong>一切</strong> 人搭话，避免一些麻烦，给行程带来不愉快</li><li>保管好自己的物品</li><li>张家界火车站出站后即可到汽车站乘坐大巴去武陵源景区，50分钟左右，10（森林公园）—12元（武陵源）</li><li>大峡谷，天门山景区玻璃桥都需要提前5天在网上预定</li></ol><h2 id="出行路线"><a href="#出行路线" class="headerlink" title="出行路线"></a>出行路线</h2><h3 id="整体路线图"><a href="#整体路线图" class="headerlink" title="整体路线图"></a>整体路线图</h3><p>路线一：</p><ul><li>Day1(16):天门山景区</li><li>Day2.Day3(17-18):武陵源景区</li><li>Day4(19):大峡谷风景区</li></ul><p>路线二（推荐）</p><ul><li>Day1.Day2(16-17):武陵源景区</li><li>Day2.Day3(18):大峡谷风景区</li><li>Day4(19):天门山景区</li></ul><p><img src="https://res.cloudinary.com/incoder/image/upload/v1527342618/blog/gitpages-zjj-road.png" alt="扼要路线图"></p><div class="note info"><p>标记说明</p><ol><li>张家界火车站</li><li>武陵源景区</li><li>大峡谷风景区</li><li>天门山景区</li></ol></div><h3 id="武陵源景区路线"><a href="#武陵源景区路线" class="headerlink" title="武陵源景区路线"></a>武陵源景区路线</h3><p>门票：245 元+保险费3 元（3天内多次进出有效，含环保车票价）<br>开放时间：8:00-17:00<br>Day1：森林公园-金鞭溪-杨家界<br>Day2：大观台-天子山-十里画廊-索溪湖-武陵源门票站<br>从森林公园进，从武陵源出，不走回头路。需要在 <strong>丁香榕</strong> 住一宿<br><img src="https://res.cloudinary.com/incoder/image/upload/v1527324112/blog/gitpages-zjj.gif" alt="武陵源景区"></p><h3 id="大峡谷风景区路线"><a href="#大峡谷风景区路线" class="headerlink" title="大峡谷风景区路线"></a>大峡谷风景区路线</h3><p>门票：大峡谷（门票122元）+玻璃桥（门票138元）<br>开放时间：08:00-17:00<br>Day3：玻璃桥-大峡谷</p><h3 id="天门山景区路线"><a href="#天门山景区路线" class="headerlink" title="天门山景区路线"></a>天门山景区路线</h3><p>门票：258.00元（含往返索道、环保车）【旺季】<br>开放时间：08:00~16:00<br>路线Day4：玻璃栈道-天门山寺-天门洞(坐索道上山顶——走西线——再到天门翻水处坐自动扶梯到天门洞——爬999级阶梯——最终坐环保车返回至市区)<br><strong>自备中午餐</strong></p><p><img src="https://res.cloudinary.com/incoder/image/upload/v1528189150/blog/gitpages-zjj-tms.png.jpg" alt="天门山景区路线图"></p><h2 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h2><p>现在还未确定路线，个人推荐路线二；其次，16，17，18号需要住宿，要提前预定旅店</p><h2 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h2><h3 id="胡师傅三下锅"><a href="#胡师傅三下锅" class="headerlink" title="胡师傅三下锅"></a>胡师傅三下锅</h3><p>三下锅，所谓的三下锅其实就是一种很方便的干锅，它是由三种主料做成的，炖着不放汤的火锅，三角坪附近的那个“胡师傅三下锅”味道不错，三下锅50元一份，分量很够吃的，包你吃够吃好！推荐的就是干煸肠子，干煸核桃肉和湘西腊肉三种混在一起炖，吃的同时还可以点一份酸萝卜，又脆又酸。真的是极品哦！（吃过后，发现并没有网上说的这么好吃，就是大烩菜，哈哈哈）</p><p>等等。。。</p><h2 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h2><p><img src="https://res.cloudinary.com/incoder/image/upload/v1527434516/blog/gitpages-zjj-summary.png" alt="汇总"></p><h2 id="游记"><a href="#游记" class="headerlink" title="游记"></a>游记</h2><p>废话不说，<strong>武陵源景区</strong>不用去，虽说是5A景区，除了山还是山，而且商业气息很重，很多地方都不能步行，需要坐缆车，电梯等交通工具，况且这次去森林公园那边在修路，说是在修高铁，建议直接去 <strong>大峡谷风景区</strong> 和 <strong>天门山景区</strong></p><h3 id="武陵源景区"><a href="#武陵源景区" class="headerlink" title="武陵源景区"></a>武陵源景区</h3><p>整个武陵<br><img src="https://res.cloudinary.com/incoder/image/upload/v1530682536/blog/travel/travel-zjj-wly.jpg" alt="武陵源"></p><h3 id="大峡谷风景区"><a href="#大峡谷风景区" class="headerlink" title="大峡谷风景区"></a>大峡谷风景区</h3><p><img src="https://res.cloudinary.com/incoder/image/upload/v1530682775/blog/travel/travel-zjj-dxg.jpg" alt="大峡谷"></p><h3 id="天门山景区"><a href="#天门山景区" class="headerlink" title="天门山景区"></a>天门山景区</h3><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"theme":"#FADFA3","video":{"url":"https://res.cloudinary.com/incoder/video/upload/v1530682876/blog/travel/travel-zjj-tms.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;note default&quot;&gt;&lt;ul&gt;
&lt;li&gt;时间：2018.06.16——2018.06.19&lt;/li&gt;
&lt;li&gt;地点：杭州——张家界&lt;/li&gt;
&lt;li&gt;目标：武陵源景区，天门山景区，大峡谷景区&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;听说张家界是人间仙
      
    
    </summary>
    
      <category term="Travel" scheme="https://www.incoder.org/categories/Travel/"/>
    
    
      <category term="张家界" scheme="https://www.incoder.org/tags/%E5%BC%A0%E5%AE%B6%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>构建基础SSM框架</title>
    <link href="https://www.incoder.org/2018/05/20/ssm/"/>
    <id>https://www.incoder.org/2018/05/20/ssm/</id>
    <published>2018-05-20T09:39:10.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSM结构"><a href="#SSM结构" class="headerlink" title="SSM结构"></a>SSM结构</h2><p><img src="https://res.cloudinary.com/incoder/image/upload/v1528039004/blog/ssm-structure.png" alt="SSM"></p><h2 id="SSM框架整合"><a href="#SSM框架整合" class="headerlink" title="SSM框架整合"></a>SSM框架整合</h2><p>所谓的SSM即：Spring，SpringMVC，Mybatis  </p><ul><li><a href="https://spring.io" target="_blank" rel="noopener">Spring</a>：一个轻量级的框架，有很多的拓展功能，最主要的我们一般项目使用的就是IOC和AOP。</li><li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html" target="_blank" rel="noopener">SpringMVC</a>：Spring实现的一个Web层，相当于Struts的框架，但是比Struts更加灵活和强大.</li><li><a href="http://www.mybatis.org/mybatis-3" target="_blank" rel="noopener">Mybatis</a>：一个持久层的框架，在使用上相比Hibernate更加灵活，可以控制SQL的编写，使用 XML或注解进行相关的配置.</li></ul><h2 id="实战项目"><a href="#实战项目" class="headerlink" title="实战项目"></a>实战项目</h2><p><img src="https://res.cloudinary.com/incoder/image/upload/v1528647074/blog/ssm-practice.png" alt="ssm-practice"></p><p>项目功能：</p><ol><li>Spring,SpringMVC,Mybatis框架整合</li><li>Create Features</li><li>Retrieve Features</li><li>Update Features</li><li>Delete Features</li></ol><blockquote><p>项目示例：<a href="https://github.com/RootCluster/rc-ssm/tree/example" target="_blank" rel="noopener">rc-ssm</a></p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="ajax之PUT请求"><a href="#ajax之PUT请求" class="headerlink" title="ajax之PUT请求"></a>ajax之PUT请求</h3><p>客户端ajax方式发送PUT请求，Tomcat默认不会对请求进行处理；<br>Tomcat：</p><ol><li>将请求体中的数据，封装成一个map</li><li>request.getParameter(“fileName”)就会从这个map中取值</li><li><p>springMVC封装POJO对象时，会把POJO中的属性的值，request.getParameter(“fileName”)</p><p>解决方式：</p><ul><li><p>方式一：Ajax发送POST请求<br>Ajax中type:”POST”<br>data: $(“”).serialize()+”&amp;_method=PUT”</p></li><li><p>方式二：web配置中添加HttpPutFormContentFilter过滤器<br>1.HttpPutFormContentFilter将请求体中的数据解析包装成一个map<br>2.request被重新包装，request.getParameter()被重写，从自己封装的map中取出数据</p></li></ul></li></ol><h3 id="获取属性的值"><a href="#获取属性的值" class="headerlink" title="获取属性的值"></a>获取属性的值</h3><p>prop修改和读取DOM原生属性的值<br>attr修改和读取自定义属性的值</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SSM结构&quot;&gt;&lt;a href=&quot;#SSM结构&quot; class=&quot;headerlink&quot; title=&quot;SSM结构&quot;&gt;&lt;/a&gt;SSM结构&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/incoder/image/upload/
      
    
    </summary>
    
      <category term="Frame" scheme="https://www.incoder.org/categories/Frame/"/>
    
    
      <category term="Spring" scheme="https://www.incoder.org/tags/Spring/"/>
    
      <category term="SpringMVC" scheme="https://www.incoder.org/tags/SpringMVC/"/>
    
      <category term="Mybatis" scheme="https://www.incoder.org/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Git 子仓库管理</title>
    <link href="https://www.incoder.org/2018/05/17/git-sub/"/>
    <id>https://www.incoder.org/2018/05/17/git-sub/</id>
    <published>2018-05-17T10:30:50.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>在使用NexT作为Hexo博客的主题时，不能 <strong>友好</strong> 的支持其主题的更新，以及 <strong>多设备</strong> 之间的主题同步。<br>按照官方提供的导入主题操作指引<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p><p>发现commit并push到GitHub的远程服务器上，发现<code>themes/next</code>路径下并不能打开和查看该路径下的文件，原因是NexT是当前项目的一个子仓库(项目)，在Github上对于之仓库项目的引用，推荐使用<code>git subtree</code>命令来进行对子仓库的管理，不推荐直接拷贝需要子仓库的代码到自己的项目中</p><p>原因是我是使用Travis CI来部署自己的项目，具体的<a href="https://incoder.org/2018/05/02/hexo-iterative" target="_blank" rel="noopener">构建脚本和介绍</a>请看，下面分别使用 <code>git submodule</code>、<code>git subtree</code>的方式进行NexT主题的管理</p><h2 id="git-submodule-与-git-subtree"><a href="#git-submodule-与-git-subtree" class="headerlink" title="git submodule 与 git subtree"></a>git submodule 与 git subtree</h2><ul><li><code>git submodule</code>、<code>git subtree</code>都可以实现一个仓库作为其他仓库的子仓库的管理</li><li><code>git submodule</code>：是Git官方以前的推荐方案</li><li><code>git subtree</code>：Git <a href="https://lwn.net/Articles/235109" target="_blank" rel="noopener">1.5.2</a> 开始，Git 新增并推荐使用这个功能来管理子项目</li><li><code>git subtree</code>与<code>git submodule</code>不同，它不增加任何像<code>.gitmodule</code>这样的新的元数据文件</li><li><code>git subtree</code>对于项目中的其他成员透明，意味着可以不知道<code>git subtree</code>的存在</li></ul><h2 id="git-submodule-常用操作"><a href="#git-submodule-常用操作" class="headerlink" title="git submodule 常用操作"></a>git submodule 常用操作</h2><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">Git Submodule</a>功能官方操作指引</p><h3 id="add-一个submodule"><a href="#add-一个submodule" class="headerlink" title="add 一个submodule"></a>add 一个submodule</h3><ol><li>Fork Repository<br><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">hexo-theme-next</a>项目右上角<code>Fork</code>按钮即可</li><li><p>Clone Repository</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:RootCluster/hexo-theme-next.git</span><br></pre></td></tr></table></figure></li><li><p>Add Submodule</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入项目</span></span><br><span class="line"><span class="built_in">cd</span> hexo-theme-next </span><br><span class="line"><span class="comment"># 注册next项目是一个submodule，并把数据拷贝到`themes/next`路径</span></span><br><span class="line">git submodule add git@github.com:RootCluster/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure></li><li><p>status</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前submodule已被注册并指向了某个commit</span></span><br><span class="line">git submodule status</span><br><span class="line"> 1f5643061ec5257269673bd6159403c24015c53d themes/next (v6.3.0)</span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看在父仓库中有哪些变化被注册</span></span><br><span class="line">git status</span><br><span class="line">On branch submodule</span><br><span class="line">Changes to be committed:</span><br><span class="line">(use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">        new file:   .gitmodules</span><br><span class="line">        new file:   themes/next</span><br></pre></td></tr></table></figure><p> 有2个文件被修改过：<code>.gitmodules</code>,<code>themes/next</code>，当在父仓库时，Git不会跟踪submodule中的文件，Git只把它当成一个单一的文件</p><ul><li><code>.gitmodules</code>:存有submodule的信息</li><li><code>themes/next</code>:submodule它自己</li></ul></li><li><p>commint</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推送到远程submodule分支</span></span><br><span class="line">git commit -am <span class="string">"add next submodule"</span></span><br><span class="line">[submodule a5a612b] add next submodule</span><br><span class="line"> 2 files changed, 4 insertions(+)</span><br><span class="line"> create mode 100644 .gitmodules</span><br><span class="line"> create mode 160000 themes/next</span><br></pre></td></tr></table></figure></li><li><p>push</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git push origin submodule</span><br><span class="line">Counting objects: 4, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (4/4), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (4/4), 451 bytes | 451.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 4 (delta 1), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (1/1), completed with 1 <span class="built_in">local</span> object.</span><br><span class="line">To github.com:RootCluster/hexo-themes-test.git</span><br><span class="line">   71879a8..a5a612b  submodule -&gt; submodule</span><br></pre></td></tr></table></figure></li></ol><p>查看Github上的仓库，发现父仓库里有一个指向submodule的链接，表示你已经成功添加了一个submodule</p><h3 id="clone-带-submodule的项目"><a href="#clone-带-submodule的项目" class="headerlink" title="clone 带 submodule的项目"></a>clone 带 submodule的项目</h3><p>新路径下，clone项目，submodule分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># clone项目</span></span><br><span class="line">git <span class="built_in">clone</span> -b submodule git@github.com:RootCluster/hexo-themes-test.git</span><br><span class="line"><span class="comment"># 进入项目路径</span></span><br><span class="line"><span class="built_in">cd</span> hexo-themes-test/</span><br><span class="line"><span class="comment"># 项目注册submodule</span></span><br><span class="line">git submodule init</span><br><span class="line"><span class="comment"># clone submodule代码</span></span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure></p><h3 id="update-带-submodule的项目"><a href="#update-带-submodule的项目" class="headerlink" title="update 带 submodule的项目"></a>update 带 submodule的项目</h3><p>只要在submodule路径下，所有的常规Git操作，如<code>push</code>,<code>pull</code>,<code>reset</code>,<code>status</code>等，都可以正常工作，如果要保证submodule和远程仓库保存同步，在submodule路径下运行<code>git pull</code></p><ul><li>如果你得到一个错误信息, 说你不在任何分支之上, 只要运行<code>git checkout master</code>就可修复</li><li>如果你在<code>pull</code>后 <code>submodule</code> 有一些更新, 父仓库会告诉你有一些变动需要 <code>commit</code> 了. <code>submodule</code>自身指向一个指定的 <code>commit</code>, 并且如果这个 <code>commit</code> 改变了, 父仓库会得知这个改变. 如果你的 <code>submodule</code> 需要在一个指定 <code>commit</code> 上工作, 可用<code>git reset</code>来设置</li></ul><p>例如：我需要把NexT的版本改变到上一个Tag 6.2.0 (目前是6.3.0)</p><blockquote><p>git reset –hard (commit hash)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入项目路径</span></span><br><span class="line"><span class="built_in">cd</span> hexo-themes-test/</span><br><span class="line"><span class="comment"># 重新指向submodule关联的commit记录</span></span><br><span class="line">git reset --hard 206d463</span><br><span class="line"><span class="comment"># 回到父目录</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># commit本次的修改</span></span><br><span class="line">git commit -am <span class="string">"set next version to 6.2.0"</span></span><br></pre></td></tr></table></figure><div class="note info"><p>推送到远程仓库后，<code>submodule</code> 会和指定的<code>commit</code> 关联起来。如果你和别人一起工作在同一个项目，别人也可以在<code>submodule</code>下<code>pull</code>并且<code>commit</code>，因此改变了<code>submodule</code>的<code>commit</code>指向，这个问题，可以通过<code>git reset</code> 来解决</p></div><h3 id="remove-项目中的-submodule"><a href="#remove-项目中的-submodule" class="headerlink" title="remove 项目中的 submodule"></a>remove 项目中的 submodule</h3><ul><li><p>项目的根目录下(不是 submodule 的目录)，编辑 .gitmodules 文件，删除submodule配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[submodule <span class="string">"themes/next"</span>]</span><br><span class="line">    path = themes/next</span><br><span class="line">    url = https://github.com/RootCluster/hexo-theme-next.git</span><br></pre></td></tr></table></figure></li><li><p>项目根目录下，编辑<code>.git</code>文件夹下<code>config</code>文件，删除submodule配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[submodule <span class="string">"themes/next"</span>]</span><br><span class="line">    url = https://github.com/RootCluster/hexo-theme-next.git</span><br></pre></td></tr></table></figure></li><li><p>清除submodule缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached themes/next</span><br></pre></td></tr></table></figure></li></ul><h2 id="git-subtree-常用操作-重点"><a href="#git-subtree-常用操作-重点" class="headerlink" title="git subtree 常用操作(重点)"></a>git subtree 常用操作(重点)</h2><h3 id="add一个subtree"><a href="#add一个subtree" class="headerlink" title="add一个subtree"></a>add一个subtree</h3><ul><li>在父仓库中新增子仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加子仓库</span></span><br><span class="line">git subtree add --prefix=themes/next https://github.com/RootCluster/hexo-theme-next.git master --squash</span><br><span class="line">git fetch https://github.com/RootCluster/hexo-theme-next.git master</span><br><span class="line">warning: no common commits</span><br><span class="line">remote: Counting objects: 3407, <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3407 (delta 0), reused 0 (delta 0), pack-reused 3406</span><br><span class="line">Receiving objects: 100% (3407/3407), 1.21 MiB | 36.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (2192/2192), <span class="keyword">done</span>.</span><br><span class="line">From https://github.com/RootCluster/hexo-theme-next</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Added dir <span class="string">'themes/next'</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p><code>--squash</code>参数表示不拉取历史信息，而只生成一条commit信息</p></blockquote><ul><li><p>查看项目状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看项目状态</span></span><br><span class="line">git status</span><br><span class="line">On branch subtree</span><br><span class="line">Your branch is ahead of <span class="string">'origin/subtree'</span> by 2 commits.</span><br><span class="line">  (use <span class="string">"git push"</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure></li><li><p>推送更改到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git push origin subtree</span><br><span class="line">Counting objects: 381, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (334/334), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (381/381), 650.26 KiB | 34.22 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 381 (delta 23), reused 225 (delta 19)</span><br><span class="line">remote: Resolving deltas: 100% (23/23), completed with 1 <span class="built_in">local</span> object.</span><br><span class="line">To https://github.com/RootCluster/hexo-themes-test.git</span><br><span class="line">   8ed2e2e..405af42  subtree -&gt; subtree</span><br></pre></td></tr></table></figure></li></ul><h3 id="pull-子仓库更新"><a href="#pull-子仓库更新" class="headerlink" title="pull 子仓库更新"></a>pull 子仓库更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新子仓库</span></span><br><span class="line">git subtree pull --prefix=themes/next https://github.com/RootCluster/hexo-theme-next.git master --squash</span><br><span class="line">From https://github.com/RootCluster/hexo-theme-next</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Subtree is already at commit 1f5643061ec5257269673bd6159403c24015c53d.</span><br></pre></td></tr></table></figure><h3 id="push-子仓库修改"><a href="#push-子仓库修改" class="headerlink" title="push 子仓库修改"></a>push 子仓库修改</h3><p>在引用子仓库的项目中修改了子仓库的相关代码，推送修改到源仓库</p><ul><li>commit 修改记录</li><li>push 到源仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推送子仓库修改到源仓库master分支</span></span><br><span class="line">git subtree push --prefix=themes/next https://github.com/RootCluster/hexo-theme-next.git master</span><br></pre></td></tr></table></figure></li></ul><h3 id="subtree-常用命令"><a href="#subtree-常用命令" class="headerlink" title="subtree 常用命令"></a>subtree 常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git subtree add   --prefix=&lt;prefix&gt; &lt;commit&gt;</span><br><span class="line">git subtree add   --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree pull  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree push  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br><span class="line">git subtree merge --prefix=&lt;prefix&gt; &lt;commit&gt;</span><br><span class="line">git subtree split --prefix=&lt;prefix&gt; [OPTIONS] [&lt;commit&gt;]</span><br></pre></td></tr></table></figure><blockquote><p>学习参考附录：</p><ul><li><a href="http://linlexus.com/git-submodule-usage" target="_blank" rel="noopener">如何使用 Git Submodule</a></li><li><a href="https://www.jianshu.com/p/d42d330bfead" target="_blank" rel="noopener">git subtree教程</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用NexT作为Hexo博客的主题时，不能 &lt;strong&gt;友好&lt;/strong&gt; 的支持其主题的更新，以及 &lt;strong&gt;多设备&lt;/strong&gt; 之间的主题同步。&lt;br&gt;按照官方提供的导入主题操作指引&lt;br&gt;&lt;figure class=&quot;highlight bash
      
    
    </summary>
    
      <category term="Git" scheme="https://www.incoder.org/categories/Git/"/>
    
    
      <category term="git subtree" scheme="https://www.incoder.org/tags/git-subtree/"/>
    
      <category term="git submodule" scheme="https://www.incoder.org/tags/git-submodule/"/>
    
  </entry>
  
  <entry>
    <title>Linux 常用应用安装</title>
    <link href="https://www.incoder.org/2018/05/15/linux-build/"/>
    <id>https://www.incoder.org/2018/05/15/linux-build/</id>
    <published>2018-05-15T00:32:10.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>作为Android开发者，目标主要是在客户端，平时也就是和服务端对接数据接口，很少直接干到服务端的Linux机器，随着这波推动团队技术平台基础开发工具模块的完善，拿到了一台Linux机器，重新构建移动端的测试服务器。</p><p>该机器主要功能：</p><ol><li>提供移动端服务Api接口</li><li>提供移动端通讯录管理授权服务</li><li>提供企业微信通讯录同步服务</li><li>管理移动端服务器Api接口文档</li></ol><p>也是第一次正式的从头开始安装所需软件及应用部署，虽然这些工作可以完全找运维去处理，难得这样的机会从头开始去熟悉Linux。</p><p><strong>安卓，是一个基于Linux内核的开放源代码移动操作系统</strong>，因此多了解Linux是一件双赢的事情，基于当前机器需要提供的服务，安装部署需要的软件应用</p><blockquote class="blockquote-center">废话不多说，上来就是干</blockquote><p>查看当前系统版本信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure></p><p>以下软件版本，请下载对应支持系统的软件</p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">官方下载地址</a>，选择需要的版本下载安装包</p><blockquote><p>官方提供了<code>.rpm</code>,<code>.gz</code>两种格式安装包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.下载安装包</span></span><br><span class="line"><span class="comment">#    拷贝安装包到需要安装的服务器</span></span><br><span class="line"><span class="comment"># 2.解压并安装</span></span><br><span class="line"><span class="comment">#    `.rpm`格式安装(jdk-xxx.rpm更换成对应的文件名)</span></span><br><span class="line">sudo rpm -ivh jdk-xxx.rpm</span><br><span class="line"><span class="comment">#    `.gz`格式安装(解压到指定目录，常存放`/usr/java/`路径)</span></span><br><span class="line">tar zxvf jdk-xxx.tar.gz -C /usr/java/</span><br><span class="line"><span class="comment"># 3.设置环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># JAVA_HOME=/usr/java/jdk1.8.0_172 (修改这里路径，指向jdk安装路径)</span></span><br><span class="line"><span class="comment"># PATH=$JAVA_HOME/bin:$PATH</span></span><br><span class="line"><span class="comment"># CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span></span><br><span class="line"><span class="comment"># export JAVA_HOME PATH CLASSPATH</span></span><br><span class="line"><span class="comment"># 4.编译配置文件，使修改生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 5.验证jdk是否安装成功</span></span><br><span class="line">java –version</span><br></pre></td></tr></table></figure><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p><a href="http://tomcat.apache.org" target="_blank" rel="noopener">官方下载地址</a>，选择需要的版本下载安装包</p><blockquote><p>官方提供了<code>.zip</code>,<code>.gz</code>两种格式安装包，Linux服务器下载<code>Core</code>类即可</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.下载安装文件</span></span><br><span class="line">wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-9/v9.0.8/bin/apache-tomcat-9.0.8.tar.gz</span><br><span class="line"><span class="comment"># 2.解压安装文件(解压到指定目录，常存放`/usr/tomcat/`路径)</span></span><br><span class="line">tar -zxvf apache-tomcat-9.0.8.tar.gz -C /usr/tomcat/</span><br><span class="line"><span class="comment"># 3.启动tomcat</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/tomcat/bin</span><br><span class="line">./startup.sh</span><br><span class="line"><span class="comment"># 4.关闭tomcat</span></span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure><h3 id="配置Web管理账号"><a href="#配置Web管理账号" class="headerlink" title="配置Web管理账号"></a>配置Web管理账号</h3><ul><li>修改文件conf/tomcat-users.xml，在元素中添加帐号密码，需要指定角色<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/tomcat/conf/tomcat-users.xml</span><br><span class="line"><span class="comment">#   &lt;tomcat-users&gt;</span></span><br><span class="line"><span class="comment">#       &lt;user name="admin" password="admin" roles="admin-gui,manager-gui" /&gt;</span></span><br><span class="line"><span class="comment">#   &lt;/tomcat-users&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="配置端口"><a href="#配置端口" class="headerlink" title="配置端口"></a>配置端口</h3><ul><li>可以修改conf目录下的文件server.xml，修改Connector元素(Tomcat的默认端口是8080)，需要重新启动Tomcat服务生效<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/tomcat/conf/server.xml</span><br><span class="line"><span class="comment"># &lt;Connector port="9999" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="应用部署"><a href="#应用部署" class="headerlink" title="应用部署"></a>应用部署</h3><ul><li><p>放置需部署包到容器中<code>webapps</code>路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/tomcat/webapps</span><br></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/tomcat/bin</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure></li></ul><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><p>一般系统中以及包含apache应用<br><a href="http://httpd.apache.org/download.cgi" target="_blank" rel="noopener">官方下载地址</a>，选择需要的版本下载安装包</p><blockquote><p>官方提供了<code>.bz2</code>,<code>.gz</code>两种格式安装包</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>查看系统中是否已包含httpd应用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep httpd 或 yum list | grep httpd</span><br></pre></td></tr></table></figure></p><ul><li><p>方式一</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.下载需要的版本文件</span></span><br><span class="line">wget http://apache.claz.org//httpd/httpd-2.4.33.tar.gz</span><br><span class="line"><span class="comment"># 2.解压安装文件(解压到指定目录，常存放`/usr/local/httpd/`路径)</span></span><br><span class="line">tar -zxvf httpd-2.4.33.tar.gz -C /usr/<span class="built_in">local</span>/httpd/</span><br></pre></td></tr></table></figure></li><li><p>方式二(推荐)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.下载安装httpd</span></span><br><span class="line">yum install httpd</span><br></pre></td></tr></table></figure></li></ul><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum erase httpd.x86_64 或 rpm -e httpd.x86_64</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看服务运行状态</span></span><br><span class="line">systemctl status httpd.service</span><br><span class="line"><span class="comment"># 启动apache服务</span></span><br><span class="line">systemctl start httpd.service</span><br><span class="line"><span class="comment"># 停止apache服务</span></span><br><span class="line">systemctl stop httpd.service</span><br></pre></td></tr></table></figure><p>RPM默认安装路径：</p><table><thead><tr><th>路径</th><th>说明</th></tr></thead><tbody><tr><td>/etc</td><td>一些设置文件放置的目录如/etc/crontab</td></tr><tr><td>/usr/bin</td><td>一些可执行文件</td></tr><tr><td>/usr/lib</td><td>一些程序使用的动态函数库</td></tr><tr><td>/usr/share/doc</td><td>一些基本的软件使用手册与帮助文档</td></tr><tr><td>/usr/share/man</td><td>一些man page文件</td></tr></tbody></table><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p><a href="http://nginx.org/download" target="_blank" rel="noopener">官方下载地址</a>，选择需要的版本下载安装包(最新安装版本1.14.0)</p><blockquote><p>官方提供了<code>.zip</code>,<code>.gz</code>两种格式安装包</p></blockquote><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><ul><li><p>方式一</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.下载安装文件</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.14.0.tar.gz</span><br><span class="line"><span class="comment"># 2.解压安装文件(解压到指定目录，常存放`/usr/local/`路径)</span></span><br><span class="line">tar -zxvf nginx-1.14.0.tar.gz -C /usr/<span class="built_in">local</span>/</span><br><span class="line"><span class="comment"># 3. 编译安装依赖库</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/</span><br><span class="line">./configure</span><br></pre></td></tr></table></figure></li><li><p>方式二</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认安装路径/etc/nginx/</span></span><br><span class="line">yum install nginx</span><br></pre></td></tr></table></figure></li></ul><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p>加压文件安装常用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止ngix</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s quit</span><br><span class="line"><span class="comment"># 重新载入nginx(当配置信息发生修改时)       </span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br><span class="line"><span class="comment"># 查看版本     </span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -v</span><br><span class="line"><span class="comment"># 查看nginx的配置文件的目录            </span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -t</span><br><span class="line"><span class="comment"># 查看帮助信息            </span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -h</span><br></pre></td></tr></table></figure></li><li><p>yum安装常用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"><span class="comment"># 停止 </span></span><br><span class="line">systemctl stop nginx</span><br><span class="line"><span class="comment"># 重启 </span></span><br><span class="line">systemctl restart nginx</span><br><span class="line"><span class="comment"># 查看运行状态 </span></span><br><span class="line">systemctl status nginx</span><br><span class="line"><span class="comment"># 开机启动 </span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure></li></ul><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>一般系统中以及包含apache应用<br><a href="https://nodejs.org" target="_blank" rel="noopener">官方下载地址</a>，选择需要的版本下载安装包</p><blockquote><p>官方提供了<code>.gz</code>,<code>.7z</code>,<code>zip</code>等多种格式安装包</p></blockquote><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.下载安装文件</span></span><br><span class="line">wget https://nodejs.org/download/chakracore-release/v8.6.0/node-v8.6.0-linux-x64.tar.gz</span><br><span class="line"><span class="comment"># 2.解压安装文件(解压到当前目录)</span></span><br><span class="line">tar -zxf node-v8.6.0-linux-x64.tar.gz</span><br><span class="line"><span class="comment"># 3.建立软链接，实现全局访问</span></span><br><span class="line">ln -s /root/node-v8.6.0-linux-x64/bin/node /usr/<span class="built_in">local</span>/bin/node</span><br><span class="line">ln -s /root/node-v8.6.0-linux-x64/bin/npm /usr/<span class="built_in">local</span>/bin/npm</span><br></pre></td></tr></table></figure><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p><a href="https://redis.io/download" target="_blank" rel="noopener">官方下载地址</a>，选择需要的版本下载安装包</p><blockquote><p>官方提供了<code>.gz</code>格式安装包</p></blockquote><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.下载安装文件</span></span><br><span class="line">wget wget http://download.redis.io/releases/redis-4.0.10.tar.gz</span><br><span class="line"><span class="comment"># 2.解压安装文件(解压到当前目录)</span></span><br><span class="line">tar xzf redis-4.0.10.tar.gz</span><br><span class="line"><span class="comment"># 3.编译安装</span></span><br><span class="line"><span class="built_in">cd</span> redis-4.0.10</span><br><span class="line">make</span><br><span class="line"><span class="comment"># 4.启动服务</span></span><br><span class="line">src/redis-server</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.修改redis.conf文件中daemonize属性 为 yes</span></span><br><span class="line">vim /you_install_path/redis.conf</span><br></pre></td></tr></table></figure><blockquote><p>其他配置根据自身需要调整修改</p></blockquote><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><ol><li><p>关闭服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379 shutdown</span><br></pre></td></tr></table></figure></li><li><p>非安全模式启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后台以非安全模式启动</span></span><br><span class="line">nohup /usr/<span class="built_in">local</span>/bin/redis-server --protected-mode no &amp;</span><br></pre></td></tr></table></figure></li></ol><h2 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h3><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>find命令是根据文件的属性进行查找，如文件名，文件大小，所有者，所属组，是否为空，访问时间，修改时间等。 </p><ul><li>基本格式：<br>find  path expression</li><li>示例：<ul><li>在根目录下查找文件httpd.conf，表示在整个硬盘查找<br>find / -name httpd.conf</li><li>表示当前目录下查找文件名开头是字符串‘srm’的文件<br>find . -name ‘srm*’</li><li>查找在系统中最后10分钟访问的文件(access time)<br>find / -amin -10</li><li>查找在系统中属于fred这个用户的文件<br>find / -user fred</li><li>查找出小于1000KB的文件<br>find / -size -1000k</li></ul></li></ul><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><p>grep是根据文件的内容进行查找，会对文件的每一行按照给定的模式(patter)进行匹配查找。</p><ul><li>基本格式：<br>find expression</li><li>主要参数：<br>  －c：只输出匹配行的计数。<br>  －i：不区分大小写<br>  －h：查询多文件时不显示文件名。<br>  －l：查询多文件时只输出包含匹配字符的文件名。<br>  －n：显示匹配行及行号。<br>  －s：不显示不存在或无匹配文本的错误信息。<br>  －v：显示不包含匹配文本的所有行。</li><li>示例：<ul><li>显示所有包含每行字符串至少有5个连续小写字符的字符串的行<br>grep ‘[a-z]{5}’ aa</li><li>显示所有以d开头的文件中包含 test的行<br>grep ‘test’ d*</li></ul></li></ul><h3 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h3><ul><li><p>查看指定服务进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看httpd服务进程</span></span><br><span class="line">ps -ef | grep httpd</span><br><span class="line"><span class="comment"># UID        PID  PPID  C STIME TTY          TIME CMD</span></span><br><span class="line"><span class="comment"># root      7192  7103  0 19:59 pts/3    00:00:00 grep --color=auto httpd</span></span><br></pre></td></tr></table></figure>  <div class="note info"><ul><li>UID：用户ID </li><li>PID：进程ID </li><li>PPID：父进程ID </li><li>C：CPU用于计算执行优先级的因子。数值越大，表明进程是CPU密集型运算，执行优先级会降低；数值越小，表明进程是I/O密集型运算，执行优先级会提高 </li><li>STIME：进程启动的时间 </li><li>TTY：完整的终端名称 </li><li>TIME：CPU时间 </li><li>CMD：完整的启动进程所用的命令和参数</li></ul></div></li><li><p>杀死指定进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 pid（逐个都删除）</span><br></pre></td></tr></table></figure></li><li><p>查看指定端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测6379端口是否在监听  </span></span><br><span class="line">netstat -lntp | grep 6379</span><br></pre></td></tr></table></figure></li></ul><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为Android开发者，目标主要是在客户端，平时也就是和服务端对接数据接口，很少直接干到服务端的Linux机器，随着这波推动团队技术平台基础开发工具模块的完善，拿到了一台Linux机器，重新构建移动端的测试服务器。&lt;/p&gt;
&lt;p&gt;该机器主要功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li
      
    
    </summary>
    
      <category term="Linux" scheme="https://www.incoder.org/categories/Linux/"/>
    
    
      <category term="Build" scheme="https://www.incoder.org/tags/Build/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Blog 迭代</title>
    <link href="https://www.incoder.org/2018/05/02/hexo-iterative/"/>
    <id>https://www.incoder.org/2018/05/02/hexo-iterative/</id>
    <published>2018-05-02T18:18:18.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>最初博客通过<a href="https://www.cloudflare.com" target="_blank" rel="noopener">Cloudflare</a>反向代理进行HTTPS解析，放完五一假期，Github官方开始支持<a href="https://blog.github.com/2018-05-01-github-pages-custom-domains-https" target="_blank" rel="noopener">自定义域名的HTTPS解析</a>，在使用Cloudflare期间，经常性的521等问题烦恼，这次也可以名正言顺的弃用CloudFlare</p><p><strong>本次迭代内容</strong></p><ul><li>弃用Cloudflare</li><li>自动化部署</li><li>常用设置</li><li>常用插件安装</li></ul><h2 id="弃用Cloudflare"><a href="#弃用Cloudflare" class="headerlink" title="弃用Cloudflare"></a>弃用Cloudflare</h2><ol><li>关闭Cloudflare中设置Page Rules</li><li>删除Cloudflare的DNS记录</li><li>还原域名配置中的DNS解析</li><li>添加Github提供的IP解析</li></ol><p><a href="https://help.github.com/articles/setting-up-an-apex-domain/#configuring-an-alias-or-aname-record-with-your-dns-provider" target="_blank" rel="noopener">官方自定义域名设置</a></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><blockquote><p><a href="https://pages.github.com" target="_blank" rel="noopener">Github Pages</a>是Github 提供一个渲染静态的Web页面服务</p><ul><li><code>{username}.github.io</code>仓库默认<code>master</code>分支</li><li>其他项目仓库，默认<code>gh-pages</code>分支</li><li><a href="https://help.github.com/articles/user-organization-and-project-pages" target="_blank" rel="noopener">官方说明文档</a></li></ul></blockquote><p>因此<code>{username}.github.io</code>仓库，dev分支用来存储网站的源码，<code>master</code>分支存放生成的静态文件，这样一个仓库就可以管理整个项目。每次<code>push</code>新的功能，然而每次都需要先<code>push</code>到<code>dev</code>分支，然后生成静态文件，再<code>push</code>到<code>master</code>分支，这种重复性的操作，实在太不优雅，所以采用<a href="https://travis-ci.org" target="_blank" rel="noopener">Travis CI</a>进行自动化部署</p><p>接着Github支持自定义域名开启HTTPS的好消息，Travis CI (<a href="https://travis-ci.com" target="_blank" rel="noopener">https://travis-ci.com</a>) 也支持开源项目啦</p><blockquote><p>Travis CI 区别</p><ul><li>Travis-CI(<a href="https://travis-ci.org" target="_blank" rel="noopener">https://travis-ci.org</a>) ：GitHub公开项目</li><li>Travis-CI(<a href="https://travis-ci.com" target="_blank" rel="noopener">https://travis-ci.com</a>) ：<del>私有付费项目</del>，<a href="https://blog.travis-ci.com/2018-05-02-open-source-projects-on-travis-ci-com-with-github-apps?utm_source=Broadcast&amp;utm_campaign=2may_release" target="_blank" rel="noopener">2018.05.02也开始支持开源项目</a></li></ul></blockquote><p><a href="https://developer.github.com/changes/2018-04-25-github-services-deprecation" target="_blank" rel="noopener">GitHub Services are being deprecated</a>，因此本节的自动化部署就开启Travis CI (<a href="https://travis-ci.com" target="_blank" rel="noopener">https://travis-ci.com</a>) 集成方案</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li>使用GitHub账号登录Travis-CI，并确认接受访问</li><li>同步了GitHub存储库，转到您的配置文件页面并启用您想要构建的存储库  </li><li>添加 <code>.travis.yml</code> 文件到构建部署项目的根目录下</li></ol><h3 id="Hexo-自动部署"><a href="#Hexo-自动部署" class="headerlink" title="Hexo 自动部署"></a>Hexo 自动部署</h3><p>部署流程<br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517765/blog/gitpages-travis-ci-branch-deploy.png" alt="部署流程"></p><p>Hexo 部署脚本示例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">language: node_js   <span class="comment"># 设置语言</span></span><br><span class="line">node_js: stable     <span class="comment"># 设置相应的版本</span></span><br><span class="line">cache:</span><br><span class="line">    directories:</span><br><span class="line">        - node_modules</span><br><span class="line">before_install:</span><br><span class="line">  - npm install -g hexo</span><br><span class="line">  - npm install -g hexo-cli</span><br><span class="line">install:</span><br><span class="line">  - npm install   <span class="comment"># 安装hexo及插件</span></span><br><span class="line">before_script:</span><br><span class="line">  - npm install -g mocha</span><br><span class="line">  - git <span class="built_in">clone</span> --branch master https://github.com/BladeCode/BladeCode.github.io.git public</span><br><span class="line">script:</span><br><span class="line">  - hexo cl  <span class="comment"># 清除</span></span><br><span class="line">  - hexo g   <span class="comment"># 生成</span></span><br><span class="line">after_script:</span><br><span class="line">  - <span class="built_in">cd</span> ./public</span><br><span class="line">  - git init</span><br><span class="line">  - git config user.name <span class="string">"BladeCode"</span>              <span class="comment"># 修改成自己的github用户名</span></span><br><span class="line">  - git config user.email <span class="string">"Jerry.x@outlook.com"</span>   <span class="comment"># 修改成自己的GitHub邮箱</span></span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -m <span class="string">"update by Travis-CI"</span>           <span class="comment"># 更新日志</span></span><br><span class="line">  - git push --force --quiet <span class="string">"https://<span class="variable">$&#123;GH_TOKEN&#125;</span>@<span class="variable">$&#123;GH_REF&#125;</span>"</span> master:master <span class="comment"># GH_token就是在travis中设置的token</span></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - dev  <span class="comment"># 只监测dev分支，一有动静就开始构建</span></span><br><span class="line">env:</span><br><span class="line">    global:</span><br><span class="line">        - GH_REF: github.com/BladeCode/BladeCode.github.io.git</span><br></pre></td></tr></table></figure></p><h2 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h2><p><a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">NexT 配置使用手册</a></p><h3 id="NexT主题更新"><a href="#NexT主题更新" class="headerlink" title="NexT主题更新"></a>NexT主题更新</h3><p><a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/DATA-FILES.md" target="_blank" rel="noopener">官方说明</a></p><h2 id="常用插件安装"><a href="#常用插件安装" class="headerlink" title="常用插件安装"></a>常用插件安装</h2><ul><li>文章字符统计 <a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">hexo-symbols-count-time</a></li><li>修复LeanCloud访客计数器中的严重安全漏洞 <a href="https://github.com/theme-next/hexo-leancloud-counter-security" target="_blank" rel="noopener">hexo-leancloud-counter-security</a></li><li>图片灯箱 <a href="https://github.com/theme-next/theme-next-fancybox3" target="_blank" rel="noopener">theme-next-fancybox3</a></li><li>本地检索 <a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener">hexo-generator-searchdb</a></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="图床选择"><a href="#图床选择" class="headerlink" title="图床选择"></a>图床选择</h3><ul><li><a href="https://jimmysong.io/posts/static-website-storage" target="_blank" rel="noopener">个人网站中的静态文件云存储选择</a></li><li><a href="https://sspai.com/post/40499" target="_blank" rel="noopener">嗯，图片就交给它了</a></li><li><a href="https://github.com/iissnan/hexo-theme-next/issues/932" target="_blank" rel="noopener">NexT主题无法备份解决方式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最初博客通过&lt;a href=&quot;https://www.cloudflare.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cloudflare&lt;/a&gt;反向代理进行HTTPS解析，放完五一假期，Github官方开始支持&lt;a href=&quot;https:/
      
    
    </summary>
    
      <category term="Hexo" scheme="https://www.incoder.org/categories/Hexo/"/>
    
    
      <category term="Build" scheme="https://www.incoder.org/tags/Build/"/>
    
  </entry>
  
  <entry>
    <title>忆·黄山</title>
    <link href="https://www.incoder.org/2018/05/01/memory-hs/"/>
    <id>https://www.incoder.org/2018/05/01/memory-hs/</id>
    <published>2018-05-01T00:02:00.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><h2>黄山归来不看岳</h2> </blockquote><p>五岳未归，先品黄山。以前看黄山还是小学课本《黄山》一文介绍黄山的美，黄山的秀丽，黄山的与众不同，这次是亲身去体验黄山的姿态；趁着五一，趁着年轻，趁着…。废话不多讲，先看黄山日出美景</p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","video":{"url":"https://res.cloudinary.com/incoder/video/upload/v1528018149/blog/video/HuangShan-Sunrise.mp4","pic":"https://res.cloudinary.com/incoder/image/upload/v1528024134/blog/travel/travel-huangshan-back.jpg"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><blockquote><p>别问我为啥抖，没有支撑点，全程手持…逃</p></blockquote><p>这次黄山之行并没有做任何功课，计划到实施前后不超过15天，抱着走一步，看一点的心态去玩，没想到五一节假日，来黄山的人不是很多。</p><h2 id="出行方式"><a href="#出行方式" class="headerlink" title="出行方式"></a>出行方式</h2><p>杭州 <strong>城西客运站</strong> 做大巴直达黄山景区，票价：￥110，时间：大约4小时左右到达</p><h2 id="攻略"><a href="#攻略" class="headerlink" title="攻略"></a>攻略</h2><p>逃，没有……<br>由于到达黄山游客集散中心已是14：00，由于距离黄山还有10多公里，你可以走路去黄山山脚下，而且16：00之后没有大巴去黄山景区。因此随便找了个地吃完中午饭，就往乘大巴车黄山景区去了（￥12/人），由于上山的入口有好几个，我们也没有去研究，大巴到　<strong>云谷寺</strong> 景区，我们也就下车从这里出发往山上去了，你可以坐缆车去往山顶，我们一行三人，选择了徒步上山，对了门票：￥230/人</p><p>一路说说笑笑，也没有预订上山的旅店，我们心真大，刚走了没多久，就看到了两个人被交椅抬着下山了，其中一个应该是摔了，头破血流的样子，还没开始，就…；没多管，一路还是很轻松，毕竟都是年轻人，体力不错，走到 <strong>白鹅岭</strong> 已经开始下雨，雨越下越大，因为在边走边看的路上，我们决定来黄山当然是去 <strong>迎客松</strong> 的景点，然后我们顺着 <strong>白鹅岭</strong> 前往 <strong>白鹅山庄旅游商场</strong> 去避雨，然后是人多的无法挪开脚，此时天色已晚，我们稍作休息，找了半天也没有能睡得地，那床都是人挤人。我们找了个茶馆，吃了些带着的食品，喝了一小时茶，大约20：00左右，我们决定，今晚夜行到 <strong>迎客松</strong> </p><p>雨后起了大雾，山顶那时雾色正浓，能见度大约在3米。我们三人也紧随其形，在 <strong>光明顶</strong> 片区玩了一会，这里看日出不错，当我们并没有这里等日出，毕竟这里离 <strong>迎客松</strong> 有一小时多的行程，我们要明天早早的在 <strong>迎客松</strong> 那里拍照装逼，拍完照然后回走去最高峰 <strong>莲花峰</strong> ，然而到了 <strong>迎客松</strong> 才发现，并不像电视上看到的，是在山的悬崖边。好了，这会才23：00多，怎么办，还有好几小时，又没有帐篷什么地可住，三人就在这 <strong>迎客松</strong> 前的广场上，发现了超大遮阳伞两把，哈哈哈，我们就用遮阳伞前后堵住，加上自己的雨伞，构建了一个堡垒，这下，我们三可用在里面睡觉了，雨后的山上很潮湿，就这样半将半究的，坚持到4点多。</p><p>天快要亮了，要找地儿去拍日出，我答应别人了，要发日出照片给她，往回走去 <strong>莲花峰</strong> 那里并不合适，更重要的是山路也被封，不上上去，只好找到 <strong>玉屏索道</strong> 的另一条路上，这里刚刚好可用看到日出</p><p><img src="https://res.cloudinary.com/incoder/image/upload/v1528023909/blog/travel/travel-huangshan-sunrise.jpg" alt="日出"></p><p>拍完日出，我们快速折回到 <strong>迎客松</strong> ，那里已经开始有三三两两的人了，我们动作要快，否则等会从索道上来大批人马，嗯，快速装逼完成，迅速撤离战场</p><p><img src="https://res.cloudinary.com/incoder/image/upload/v1528023881/blog/travel/travel-huangshan-yks.jpg" alt="迎客松"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;h2&gt;黄山归来不看岳&lt;/h2&gt; &lt;/blockquote&gt;
&lt;p&gt;五岳未归，先品黄山。以前看黄山还是小学课本《黄山》一文介绍黄山的美，黄山的秀丽，黄山的与众不同，这次是亲身去体验黄山的姿态；趁着五一，趁
      
    
    </summary>
    
      <category term="Memory" scheme="https://www.incoder.org/categories/Memory/"/>
    
    
      <category term="黄山" scheme="https://www.incoder.org/tags/%E9%BB%84%E5%B1%B1/"/>
    
  </entry>
  
  <entry>
    <title>品·杭州</title>
    <link href="https://www.incoder.org/2018/04/29/memory-hz1/"/>
    <id>https://www.incoder.org/2018/04/29/memory-hz1/</id>
    <published>2018-04-29T00:11:01.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>上有天堂，下游苏杭，杭州，一个温文尔雅，一个记忆中天堂，一个南方姑娘的城市。<br>杭州：毕业后的第二个城市，很开心在这样的城市生活，工作，结识这里的人，杭州和家乡的气候非常相似，因此在杭州有种在家的感觉，在这里遇到的的人，我都会记着你们美丽帅气的脸庞</p><p>18年是一个动荡的一年，一起的伙伴渐渐的离开了昔日的团队，这两年中，有的人毕业，有的人结婚，有的人生子，有的人成长，感谢我能成为你们生命中的一个过客，和你们一起经历生活百态</p><p>不管你们在何方，从事着什么样的工作，过着什么样的生活，我会想你们，愿你们的一切顺利</p><p>粗略的剪影，请异步<a href="http://v.youku.com/v_show/id_XMzU4NTgyMDE0NA==.html?spm=a2hzp.8244740.0.0" target="_blank" rel="noopener">优酷</a></p><div class="note default"><p>不遵守规则的人，我们叫他废物，但是，不珍惜同伴的人，连废物都不如<br>——宁智波·带土</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上有天堂，下游苏杭，杭州，一个温文尔雅，一个记忆中天堂，一个南方姑娘的城市。&lt;br&gt;杭州：毕业后的第二个城市，很开心在这样的城市生活，工作，结识这里的人，杭州和家乡的气候非常相似，因此在杭州有种在家的感觉，在这里遇到的的人，我都会记着你们美丽帅气的脸庞&lt;/p&gt;
&lt;p&gt;18年
      
    
    </summary>
    
      <category term="Memory" scheme="https://www.incoder.org/categories/Memory/"/>
    
    
      <category term="杭州" scheme="https://www.incoder.org/tags/%E6%9D%AD%E5%B7%9E/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab 应用搭建</title>
    <link href="https://www.incoder.org/2018/04/24/gitlab1/"/>
    <id>https://www.incoder.org/2018/04/24/gitlab1/</id>
    <published>2018-04-24T21:11:10.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>我司团队之前一直使用SVN来进行代码托管，主要问题</p><ol><li>每次来个新人都需要找对应的<a href="https://tortoisesvn.net/index.zh.html" target="_blank" rel="noopener">SVN</a>管理员进行授权分配指定的仓库操作权限，有时候需要多个项目切换，还得再次提出进行仓库的指定</li><li>SVN都是以中文命名，这其实没啥，但是在<a href="https://eclipse.org" target="_blank" rel="noopener">eclipse</a> 以及<a href="https://www.jetbrains.com/idea/?fromMenu" target="_blank" rel="noopener">IDEA</a> ，<a href="https://developer.apple.com/xcode" target="_blank" rel="noopener">Xcode</a>等开发工具，链接地址都会把中文字进行编码，造成路径非常的长，强迫症的我这怎么忍得了</li><li>产品相关的，设计相关的啥也都放在SVN里面，搞得SVN里面鱼龙混杂</li></ol><p>因此在我提出及建议下，部门经理同意了对代码的管理进行隔离方便有效的对代码的授权监管，并同时制定代码的相关规范和服务的自动化部署等，提高团队的开发效率和代码质量。</p><p>本节主要介绍Gitlab的环境搭建和基础的功能配置</p><p>目的：</p><ol><li>搭建Gitlab服务</li><li>和公司AD域账号关联，用域账号直接登录Gitlab</li><li>挂载Gitlab 仓库到指定存储位置</li></ol><h2 id="Gitlab安装"><a href="#Gitlab安装" class="headerlink" title="Gitlab安装"></a>Gitlab安装</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>OS：CentOS 7</li><li>Gitlab：<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-10.6.4-ce.0.el7.x86_64.rpm" target="_blank" rel="noopener">Gitlab CE 10.6.4</a></li></ul><blockquote><p>Gitlab 版本</p><ul><li>Gitlab Community Edition (CE)：社区版，免费，用户自行托管，通过社区提供技术支持</li><li>Gitlab Enterprise Edition (EE)：企业版，付费，用户自行托管，提供附加的功能以及技术支持</li><li>Gitlab.com：免费的SaaS服务，可以创建共有以及私有的版本库，可以购买额外的技术支持</li><li>GitHost.io：由Gitlab提供的用户私有的独享服务</li></ul></blockquote><h3 id="Gitlab部署"><a href="#Gitlab部署" class="headerlink" title="Gitlab部署"></a>Gitlab部署</h3><ol><li><p>系统防火墙中打开HTTP和SSH访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sshd</span><br><span class="line">sudo systemctl start sshd</span><br><span class="line"></span><br><span class="line">sudo firewall-cmd --permanent --add-service=http</span><br><span class="line">sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure></li><li><p>安装Postfix发送通知邮件。如果您想使用其他解决方案发送电子邮件，请跳过此步骤并在安装GitLab后配置外部SMTP服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install postfix</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> postfix</span><br><span class="line">sudo systemctl start postfix</span><br></pre></td></tr></table></figure></li><li><p>添加GitLab软件包存储库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LJO https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure></li><li><p>安装软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -i gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p> 完成安装如下日志显示：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">     *.                  *.</span><br><span class="line">    ***                 ***</span><br><span class="line">   *****               *****</span><br><span class="line">  .******             *******</span><br><span class="line">  ********            ********</span><br><span class="line"> ,,,,,,,,,***********,,,,,,,,,</span><br><span class="line">,,,,,,,,,,,*********,,,,,,,,,,,</span><br><span class="line">.,,,,,,,,,,,*******,,,,,,,,,,,,</span><br><span class="line">    ,,,,,,,,,*****,,,,,,,,,.</span><br><span class="line">       ,,,,,,,****,,,,,,</span><br><span class="line">          .,,,***,,,,</span><br><span class="line">              ,*,.</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   _______ __  __          __</span><br><span class="line">  / ____(_) /_/ /   ____ _/ /_</span><br><span class="line"> / / __/ / __/ /   / __ \`/ __ \</span><br><span class="line">/ /_/ / / /_/ /___/ /_/ / /_/ /</span><br><span class="line">\____/_/\__/_____/\__,_/_.___/</span><br></pre></td></tr></table></figure></li><li><p>编译配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/gitlab/bin</span><br><span class="line">./gitlab-ctr reconfigure</span><br></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gitlab-ctl start</span><br></pre></td></tr></table></figure></li></ol><blockquote><ul><li>成功启动服务，默认路径访问：<a href="http://localhost:80" target="_blank" rel="noopener">http://localhost:80</a></li><li>默认安装位置 <code>/opt/gitlab/</code></li><li>配置文件默认路径 <code>/etc/gitlab/gitlab.rb</code></li><li>默认账号：root，密码：5iveL!fe</li></ul></blockquote><h2 id="常用配置项修改"><a href="#常用配置项修改" class="headerlink" title="常用配置项修改"></a>常用配置项修改</h2><p>以下配置项的修改，完成后<strong>均需要重新编译</strong>文件（配置文件默认路径 <code>/etc/gitlab/gitlab.rb</code>），默认，<strong>并重启Gitlab</strong>服务</p><h3 id="访问地址"><a href="#访问地址" class="headerlink" title="访问地址"></a>访问地址</h3><p>修改<code>external_url</code>为Gitlab对应机器IP所配置的域名<br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517587/blog/gitpages-gitlab-url.png" alt="gitlab-url"></p><h3 id="LDAP启用"><a href="#LDAP启用" class="headerlink" title="LDAP启用"></a>LDAP启用</h3><p>修改<code>host</code>,<code>port</code>,<code>bind_dn</code>,<code>password</code>,<code>base</code>参数即可<br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517612/blog/gitpages-gitlab-ldap.png" alt="gitlab-ladp"></p><p>各参数解释：</p><ul><li><code>host</code> 和 <code>port</code> 是 LDAP 服务的主机地址及端口</li><li><code>bind_d</code>n 和 <code>password</code> 是一个管理 LDAP 的 dn 及密码</li><li><code>base</code> 表示 LDAP 将以该 dn 为 节点，向下查找用户</li><li><code>user_filter</code> 表示以某种过滤条件筛选用户</li><li><code>attributes</code> 表示 GitLab 中的字段与 LDAP 中哪些字段可以相互对应，比如可以用 LDAP 中的 uid 来作为 GitLab 用户名</li></ul><p>编译重启后，查看登录是否已经显示LDAP登录入口</p><p><img src="https://res.cloudinary.com/incoder/image/upload/v1525517639/blog/gitpages-gitlab-ldap-login.png" alt="gitlab-ldap-login"></p><p>为了安全我们需要关闭 GitLab 自己的注册功能，这样新用户只能通过 LDAP 认证的方式进行登陆。</p><p><img src="https://res.cloudinary.com/incoder/image/upload/v1525517671/blog/gitpages-gitlab-sign-up.png" alt="gitlab-sign-up"></p><h3 id="存储仓库修改"><a href="#存储仓库修改" class="headerlink" title="存储仓库修改"></a>存储仓库修改</h3><p>默认仓库存储位置：<code>/var/opt/gitlab/git-data/repositories/</code><br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517697/blog/gitpages-gitlab-dirs.png" alt="gitlab-dirs"></p><h3 id="Gitlab日志"><a href="#Gitlab日志" class="headerlink" title="Gitlab日志"></a>Gitlab日志</h3><p>默认日志位置： <code>/var/log/gitlab</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/gitlab/bin</span><br><span class="line">gitlab-ctl tail -f nginx/gitlab_access.log</span><br></pre></td></tr></table></figure><p>或者在Gitlab服务的系统设置中查看<br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517725/blog/gitpages-gitlab-logs.png" alt="gitlab-logs"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><a href="https://about.gitlab.com/installation" target="_blank" rel="noopener">官方安装教程</a></li><li><a href="https://docs.gitlab.com.cn/omnibus/settings/README.html" target="_blank" rel="noopener">官方配置文件</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我司团队之前一直使用SVN来进行代码托管，主要问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每次来个新人都需要找对应的&lt;a href=&quot;https://tortoisesvn.net/index.zh.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SVN&lt;/a
      
    
    </summary>
    
      <category term="Git" scheme="https://www.incoder.org/categories/Git/"/>
    
    
      <category term="Gitlab" scheme="https://www.incoder.org/tags/Gitlab/"/>
    
  </entry>
  
  <entry>
    <title>Realm 数据库快速上手</title>
    <link href="https://www.incoder.org/2018/04/24/realm/"/>
    <id>https://www.incoder.org/2018/04/24/realm/</id>
    <published>2018-04-24T01:11:10.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/incoder/image/upload/v1525517554/blog/gitpages-realm-mobile-db.png" alt="realm-db"><br>Android 供了多种选项来保存永久性应用数据。</p><ul><li><a href="https://developer.android.google.cn/guide/topics/data/data-storage.html?hl=zh-cn#pref" target="_blank" rel="noopener">Shared preferences</a></li><li><a href="https://developer.android.google.cn/guide/topics/data/data-storage.html?hl=zh-cn#filesInternal" target="_blank" rel="noopener">Internal file storage</a></li><li><a href="https://developer.android.google.cn/guide/topics/data/data-storage.html?hl=zh-cn#filesExternal" target="_blank" rel="noopener">External file storage</a></li><li><a href="https://developer.android.google.cn/guide/topics/data/data-storage.html?hl=zh-cn#db" target="_blank" rel="noopener">Databases</a></li><li><a href="https://developer.android.google.cn/guide/topics/data/data-storage.html?hl=zh-cn#netw" target="_blank" rel="noopener">Network</a></li></ul><p>其中数据库存储是一种必备技能，而衍生的mobile db也是层出不穷，本节主要介绍全平台(除Android,iOS,macOS外还支持web,桌面应用)<a href="https://realm.io" target="_blank" rel="noopener">Realm</a>数据库在Android上的使用</p><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><ul><li><a href="https://developer.android.google.cn/studio/index.html?hl=zh-cn" target="_blank" rel="noopener">Android Studio 1.5.1+</a></li><li>JDK1.7+</li><li>Android API 9+</li><li>Realm 默认情况下使用内部存储（internal storage)，一般来说，这个文件位于<code>/data/data/&lt;packagename&gt;/files/</code>，文件名：<code>default.realm</code></li></ul><h3 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h3><ul><li><p>在项目的 build.gradle 文件中添加如下 class path 依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">"io.realm:realm-gradle-plugin:5.0.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 app 的 build.gradle 文件中应用 realm-android 插件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'realm-android'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li><p>默认初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    <span class="comment">// 默认Realm的配置文件</span></span><br><span class="line">    Realm.init(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    <span class="comment">// 自定义配置Realm</span></span><br><span class="line">    initRealm();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RealmConfiguration config = <span class="keyword">new</span> RealmConfiguration.Builder()</span><br><span class="line">        .name(<span class="string">"myrealm.realm"</span>)          <span class="comment">// 命名文件名：myrealm.realm</span></span><br><span class="line">        .inMemory()                     <span class="comment">// 一个非持久化的、存在于内存中的 Realm 实例</span></span><br><span class="line">        .encryptionKey(getKey())        <span class="comment">// 数据库加密key</span></span><br><span class="line">        .schemaVersion(<span class="number">2</span>)               <span class="comment">// 数据库结构版本号</span></span><br><span class="line">        .modules(<span class="keyword">new</span> MySchemaModule())  <span class="comment">// 数据库结构对象</span></span><br><span class="line">        .migration(<span class="keyword">new</span> MyMigration())   <span class="comment">// 数据库迁移</span></span><br><span class="line">        .build();</span><br><span class="line">    Realm.setDefaultConfiguration(config);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><ol><li>Realm 实例是线程单例化的，也就是说多次在同一线程调用静态构建器会返回同一 Realm 实例</li><li>使用同样的名称同时创建“内存中的”Realm 和常规的（持久化）Realm 是不允许的</li></ol></blockquote><h3 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h3><p>Realm 支持以下字段类型：<code>boolean</code>、<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>、<code>String</code>、<code>Date</code>和<code>byte []</code>。整数类型 <code>short</code>、<code>int</code> 和 <code>long</code> 都被映射到 Realm 内的相同类型（实际上为 <code>long</code> ）。</p><ul><li>@Required修饰类型和空值（null）<blockquote><p>Realm强制禁止空值（null）被存储<br>  只有<code>Boolean</code>,<code>Byte</code>,<code>Short</code>,<code>Integer</code>,<code>Long</code>,<code>Float</code>,<code>Double</code>,<code>String</code>,<code>byte[]</code>,<code>Date</code>可被修饰</p></blockquote></li><li>@Ignore标识一个字段不应该被保存到 Realm</li><li>@Index为字段增加搜索索引<blockquote><p>仅支持索引的属性类型包括：<code>String</code>,<code>byte</code>,<code>short</code>,<code>int</code>,<code>long</code>,<code>boolean</code>和<code>Date</code></p></blockquote></li><li>@PrimaryKey<blockquote><p>必须为字符串（<code>String</code>）或整数（<code>short</code>,<code>int</code>,<code>long</code>）以及它们的包装类型（<code>Short</code>,<code>Int</code>,<code>Long</code>）</p></blockquote></li></ul><h3 id="声明Realm数据模型"><a href="#声明Realm数据模型" class="headerlink" title="声明Realm数据模型"></a>声明Realm数据模型</h3><h4 id="RealmObject"><a href="#RealmObject" class="headerlink" title="RealmObject"></a>RealmObject</h4><p>可以把RealmObject 当作POJO使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">RealmObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RealmModel"><a href="#RealmModel" class="headerlink" title="RealmModel"></a>RealmModel</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RealmClass</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">RealmModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><h4 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Contact</span> <span class="keyword">extends</span> <span class="title">RealmObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Email email;</span><br><span class="line">    <span class="comment">// Other fields…</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">extends</span> <span class="title">RealmObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> active;</span><br><span class="line">    <span class="comment">// ... setters and getters left out</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Contact</span> <span class="keyword">extends</span> <span class="title">RealmObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> RealmList&lt;Email&gt; emails;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">extends</span> <span class="title">RealmObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> active;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h3><ul><li>所有的写操作（添加、修改和删除对象），必须包含在写入事务（transaction）中  </li><li>在提交期间，所有更改都将被写入磁盘，并且，只有当所有更改可以被持久化时，提交才会成功。通过取消一个写入事务，所有更改将被丢弃。</li><li>益于 Realm 的 MVCC 架构，当正在进行一个写入事务时读取操作并不会被阻塞！这意味着，除非你需要从多个线程进行并发写入操作，否则，你可以尽量使用更大的写入事务来做更多的事情而不是使用多个更小的写入事务。</li></ul><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><ul><li></li><li><p>事务执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Realm realm = Realm.getDefaultInstance();</span><br><span class="line">realm.executeTransaction(<span class="keyword">new</span> Realm.Transaction() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</span><br><span class="line">User user = realm.createObject(User.class);</span><br><span class="line">user.setName(<span class="string">"John"</span>);</span><br><span class="line">user.setEmail(<span class="string">"john@corporation.com"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>异步事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Realm realm = Realm.getDefaultInstance();</span><br><span class="line">realm.executeTransactionAsync(<span class="keyword">new</span> Realm.Transaction() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm bgRealm)</span> </span>&#123;</span><br><span class="line">        User user = bgRealm.createObject(User.class);</span><br><span class="line">        user.setName(<span class="string">"John"</span>);</span><br><span class="line">        user.setEmail(<span class="string">"john@corporation.com"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="keyword">new</span> Realm.Transaction.OnSuccess() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Transaction was a success.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="keyword">new</span> Realm.Transaction.OnError() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable error)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Transaction failed and was automatically canceled.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>OnSuccess 和 OnError 并不是必须重载的，重载了的回调函数会在事务成功或者失败时在被调用发生的线程执行。</p></blockquote><h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><h2 id="Realm进阶"><a href="#Realm进阶" class="headerlink" title="Realm进阶"></a>Realm进阶</h2><h2 id="Realm云"><a href="#Realm云" class="headerlink" title="Realm云"></a>Realm云</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/incoder/image/upload/v1525517554/blog/gitpages-realm-mobile-db.png&quot; alt=&quot;realm-db&quot;&gt;&lt;br&gt;Android 供了多种选
      
    
    </summary>
    
      <category term="DataBase" scheme="https://www.incoder.org/categories/DataBase/"/>
    
    
      <category term="Realm" scheme="https://www.incoder.org/tags/Realm/"/>
    
  </entry>
  
  <entry>
    <title>.gitignore 基础知识</title>
    <link href="https://www.incoder.org/2018/04/13/gitignore/"/>
    <id>https://www.incoder.org/2018/04/13/gitignore/</id>
    <published>2018-04-13T00:30:50.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>.gitignore顾名思义是Git中用来管理所需要忽略或者说不用纳入版本控制文件  </p><h2 id="基本配置语法"><a href="#基本配置语法" class="headerlink" title="基本配置语法"></a>基本配置语法</h2><ol><li>“#“：表示注释</li><li>“/“：表示目录</li><li>“*“：表示通配符，用来通配多个字符</li><li>“?“：表示通配单个字符</li><li>“[]“：表示包含单个字符的匹配列表</li><li>“!“：表示不忽略匹配到的文件或者目录</li></ol><blockquote><p>注意：Git对.gitignore配置文件是从上往下进行规则匹配，这也意味如果：前（limit）&gt;后（limit），则后面的规则不会被执行</p></blockquote><h2 id="全局与局部"><a href="#全局与局部" class="headerlink" title="全局与局部"></a>全局与局部</h2><p>.gitignore分为： <strong>全局</strong> ignore，<strong>局部</strong> ignore</p><h3 id="全局ignore设置"><a href="#全局ignore设置" class="headerlink" title="全局ignore设置"></a>全局ignore设置</h3><ul><li>在用户账户文件夹（C:\Users\&lt;’YourName’&gt;）路径下新建一个命名为<code>.gitignore_global</code>的文件</li><li><p>使用Git Bash(需要切换路径到C:\Users\&lt;’YourName’&gt;)或者Git CMD命令行工具输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.excludesfile ~/.gitignore_global</span><br></pre></td></tr></table></figure></li><li><p>此时全局ignore已经设置完成，你只需要修改<code>.gitignore_global</code>文件内需要忽略的文件类型就可以全局控制忽略不需要纳入版本控制的文件或文件夹</p></li><li>不难发现，其实是往 <code>.gitconfig</code>中加入如下内容来指名Git忽略不纳入版本控制的文件，当然如果你不想用命令行完成全局设置，你也可以直接在<code>.gitconfig</code>文件中加入<code>[core] excludesfile= ~/.gitignore_global</code>内容即可</li></ul><h3 id="局部ignore设置"><a href="#局部ignore设置" class="headerlink" title="局部ignore设置"></a>局部ignore设置</h3><ul><li>只需要在Git控制版本控制项目的根目录中加入.gitignore文件，在.gitignore文件中写明忽略不纳入版本控制的文件即可</li></ul><h2 id="参考示例"><a href="#参考示例" class="headerlink" title="参考示例"></a>参考示例</h2><blockquote><p>你可以查看参考<a href="https://github.com/github/gitignore" target="_blank" rel="noopener">Github</a>官方所写好的示例</p></blockquote><h2 id="插件-ignore"><a href="#插件-ignore" class="headerlink" title="插件.ignore"></a>插件.ignore</h2><p>支持Android Studio，JetBrains系列<br>安装方法  </p><ul><li><code>Settings</code> &gt; <code>Plugs</code> &gt; <code>Browse repositories</code> &gt; <code>.ignore</code> &gt; <code>Install plugin</code></li><li>里面有已经写好的模板，只需适当修改</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;.gitignore顾名思义是Git中用来管理所需要忽略或者说不用纳入版本控制文件  &lt;/p&gt;
&lt;h2 id=&quot;基本配置语法&quot;&gt;&lt;a href=&quot;#基本配置语法&quot; class=&quot;headerlink&quot; title=&quot;基本配置语法&quot;&gt;&lt;/a&gt;基本配置语法&lt;/h2&gt;&lt;ol&gt;
&lt;
      
    
    </summary>
    
      <category term="Git" scheme="https://www.incoder.org/categories/Git/"/>
    
    
      <category term="ignore" scheme="https://www.incoder.org/tags/ignore/"/>
    
  </entry>
  
  <entry>
    <title>Api 文档管理系统 RAP2环境搭建</title>
    <link href="https://www.incoder.org/2018/03/27/rap2/"/>
    <id>https://www.incoder.org/2018/03/27/rap2/</id>
    <published>2018-03-27T10:20:10.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>RAP2是采用前后端分离的形式，因此搭建完整的RAP2需要 <strong>服务端：</strong><a href="https://github.com/thx/rap2-delos" target="_blank" rel="noopener">rap2-delos</a>，<strong>客户端：</strong><a href="https://github.com/thx/rap2-dolores" target="_blank" rel="noopener">rap2-dolores</a> 同时部署</p><p>部署RAP2需要亲具有Node+Linux+MySQL的运维知识，如果亲对此不是很了解，建议用<a href="http://rap2.taobao.org" target="_blank" rel="noopener">http://rap2.taobao.org</a> 线上版本就可以</p><p>由于 <strong>客户端：</strong><a href="https://github.com/thx/rap2-dolores" target="_blank" rel="noopener">rap2-dolores</a> 是建立在 <strong>服务端：</strong><a href="https://github.com/thx/rap2-delos" target="_blank" rel="noopener">rap2-delos</a> 基础上，因此先搭建服务端应用</p><blockquote><ul><li>截至到2018-08-01 delos 并没有发布Tag版本，应该还处于功能开发前期阶段吧。本教程是在CentOS机器上实战部署</li><li>然而安装部署并不是顺利，因此记录踩过的坑（别问我为啥不用Docker，因为我司分配的机器无法满足Docker的最低内核版本），安装环境介绍：Redis，delos，dolores均在一台服务器，MySQL使用已存在的服务</li></ul></blockquote><h2 id="安装基本工具"><a href="#安装基本工具" class="headerlink" title="安装基本工具"></a>安装基本工具</h2><ul><li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a></li><li><a href="https://nodejs.org/zh-cn/download" target="_blank" rel="noopener">Node 8.9.4+</a></li><li><a href="https://redis.io/download" target="_blank" rel="noopener">Redis 4.0+</a></li><li><a href="https://www.mysql.com/cn/downloads" target="_blank" rel="noopener">MySQL 5.7+</a></li></ul><p>以上基本工具请根据自身需要，下载对应系统安装包，请自行解决安装配置等问题，这里不做过多说明</p><blockquote><p>Redis 安装可参考<a href="https://incoder.org/2018/05/15/linux-build" target="_blank" rel="noopener">Linux 常用应用安装</a>；<br>Redis 最好用非安全模式启动</p></blockquote><h2 id="服务端delos环境搭建"><a href="#服务端delos环境搭建" class="headerlink" title="服务端delos环境搭建"></a>服务端delos环境搭建</h2><h3 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h3><blockquote><p>构建项目前，请确认Node，Redis，MySQL服务均能正常使用</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/thx/rap2-delos.git</span><br></pre></td></tr></table></figure><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><ul><li><p>Mac or Linux</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -e '<span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> RAP2_DELOS_APP <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci<span class="string">';</span></span><br></pre></td></tr></table></figure></li><li><p>Windows 环境</p><p>  进入mysql命令后执行</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> RAP2_DELOS_APP <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure></li></ul><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>目录：rap2-delos/src/config<br>文件：<code>config.dev.ts</code>;其中dev，表示开发环境，其他同理<br>修改：<code>config.dev.ts</code>文件中<code>db</code>对象中<code>username</code>，<code>password</code>参数与<strong>本地</strong>或者<strong>开发环境</strong>的数据库信息匹配</p><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><h4 id="安装项目依赖包"><a href="#安装项目依赖包" class="headerlink" title="安装项目依赖包"></a>安装项目依赖包</h4><p>项目根目录下执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装项目所需依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment"># 全局安装PM2</span></span><br><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure><h4 id="安装TypeScript编译包"><a href="#安装TypeScript编译包" class="headerlink" title="安装TypeScript编译包"></a>安装TypeScript编译包</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript -g</span><br></pre></td></tr></table></figure><blockquote><p>如果下载缓慢，请使用<a href="https://npm.taobao.org" target="_blank" rel="noopener">淘宝npm镜像</a></p></blockquote><h4 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h4><p>项目根目录下执行(该过程比较慢，耐心等待初始化完成)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run create-db</span><br></pre></td></tr></table></figure><h4 id="编译启动项目"><a href="#编译启动项目" class="headerlink" title="编译启动项目"></a>编译启动项目</h4><p>执行mocha测试用例和js代码规范检查<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run check</span><br></pre></td></tr></table></figure></p><ul><li><p>开发模式<br>启动开发模式的服务器 监视并在发生代码变更时自动重启(第一次运行比较慢，请耐心等待)</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></li><li><p>生产模式<br>  启动生产模式服务器</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure></li></ul><p>看到浏览器中如下提示，表示<strong>服务端delos</strong>已经部署成功</p><blockquote><p>RAP2后端服务已启动，请从前端服务(rap2-dolores)访问。 RAP2 back-end server is started, please visit via front-end service (rap2-dolores).</p></blockquote><p>或者在程序控制台出现如下Log，表示<strong>服务端delos</strong>已经部署成功<br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517437/blog/gitpages-rap2-delos-success.png" alt="delos"></p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="部署问题"><a href="#部署问题" class="headerlink" title="部署问题"></a>部署问题</h4><ol><li><p>Windows下执行<code>npm run build</code>，提示<code>&#39;rm&#39; 不是内部或外部命令，也不是可运行的程序或批处理文件</code></p><p> 原因：<code>rm</code> 是Linux下命令，<br> 解决方法：Windows系统可使用 <code>git bash</code> 打开该项目，执行该命令</p></li><li><p>执行<code>npm run create-db</code>命令，提示<code>Unable to connect to the database:{ SequelizeAccessDeniedError: Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password:NO)}</code></p><p> 原因：未修改<code>rap2-delos/src/config</code>目录下数据库配置文件，或者是与文件中的数据库信息与之连接的数据库信息不匹配<br> 解决方法：修改<code>config.dev.ts</code>文件数据库配置信息</p><blockquote><p>如果修改正确无误后，执行<code>npm run create-db</code>依旧出错，那么查看该项目中是否已经存在<code>dist</code>目录，如果有，请按照如上修改对应的数据库配置信息</p></blockquote></li><li>执行<code>npm run dev</code>命令，提示<code>Error: listen EADDRINUSE :::8080</code><br> 原因：8080端口被占用<br> 解决方法：杀掉占用8080端口的应用</li><li>执行<code>npm install</code> 命令，提示<code>hiredis</code> 编译无法通过<br> 原因：无权限操作<code>rap2-delos/node_modules/hiredis</code>路径<br> 解决方法：<code>sudo npm install</code><blockquote><p>如果提示<code>sudo: npm: command not found</code>，请参考<a href="https://stackoverflow.com/questions/31472755/sudo-npm-command-not-found" target="_blank" rel="noopener">stackoverflow-npm</a>,<a href="https://stackoverflow.com/questions/4976658/on-ec2-sudo-node-command-not-found-but-node-without-sudo-is-ok" target="_blank" rel="noopener">stackoverflow-node</a></p></blockquote></li><li><p>执行<code>npm run dev</code>可以正常启动，<code>npm start</code>命令无法正常启动服务<br> 原因：请使用<code>pm2 logs</code>查看日志具体定位<br> 示例：由于Redis的安全模式，不能正常使用</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ReplyError: Ready check failed: DENIED Redis is running <span class="keyword">in</span> protected mode because protected mode is enabled, no <span class="built_in">bind</span> address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: </span><br><span class="line"></span><br><span class="line">1) Just <span class="built_in">disable</span> protected mode sending the <span class="built_in">command</span> <span class="string">'CONFIG SET protected-mode no'</span> from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet <span class="keyword">if</span> you <span class="keyword">do</span> so. Use CONFIG REWRITE to make this change permanent. </span><br><span class="line">2) Alternatively you can just <span class="built_in">disable</span> the protected mode by editing the Redis configuration file, and setting the protected mode option to <span class="string">'no'</span>, and <span class="keyword">then</span> restarting the server. </span><br><span class="line">3) If you started the server manually just <span class="keyword">for</span> testing, restart it with the <span class="string">'--protected-mode no'</span> option. </span><br><span class="line">4) Setup a <span class="built_in">bind</span> address or an authentication password. </span><br><span class="line">NOTE: You only need to <span class="keyword">do</span> one of the above things <span class="keyword">in</span> order <span class="keyword">for</span> the server to start accepting connections from the outside.</span><br></pre></td></tr></table></figure><p> 解决方法： 使用<code>--protected-mode no</code>方式启动</p></li></ol><h2 id="客户端dolores环境搭建"><a href="#客户端dolores环境搭建" class="headerlink" title="客户端dolores环境搭建"></a>客户端dolores环境搭建</h2><h3 id="构建项目-1"><a href="#构建项目-1" class="headerlink" title="构建项目"></a>构建项目</h3><h4 id="获取源代码"><a href="#获取源代码" class="headerlink" title="获取源代码"></a>获取源代码</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/thx/rap2-dolores.git</span><br></pre></td></tr></table></figure><h3 id="环境配置-1"><a href="#环境配置-1" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><p>目录：rap2-dolores/src/config<br>文件：<code>config.dev.ts</code>;其中dev，表示开发环境，其他同理<br>修改：<code>config.dev.ts</code>文件，<code>serve</code>地址是 <strong>服务端</strong> <code>rap2-delos</code> 部署成功后的地址，默认：<code>&#39;http://localhost:8080&#39;</code></p><h3 id="启动项目-1"><a href="#启动项目-1" class="headerlink" title="启动项目"></a>启动项目</h3><h4 id="安装项目依赖包-1"><a href="#安装项目依赖包-1" class="headerlink" title="安装项目依赖包"></a>安装项目依赖包</h4><p>项目根目录下执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><blockquote><p>如果下载缓慢，请使用<a href="https://npm.taobao.org" target="_blank" rel="noopener">淘宝npm镜像</a></p></blockquote><h4 id="编译启动项目-1"><a href="#编译启动项目-1" class="headerlink" title="编译启动项目"></a>编译启动项目</h4><ul><li><p>开发模式<br>自动监视改变后重新编译</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>  备注：测试用例</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>生产模式<br>编译React生产包</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>  用serve命令或nginx服务器路由到编译产出的build文件夹作为静态服务器即可</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serve -s ./build -p 80</span><br></pre></td></tr></table></figure></li></ul><p>看到浏览器中出现登录页面，表示部署成功<br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517454/blog/gitpages-rap2-dolores-success.png" alt="dolores"></p><h3 id="常见问题-1"><a href="#常见问题-1" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="部署问题-1"><a href="#部署问题-1" class="headerlink" title="部署问题"></a>部署问题</h4><ol><li><p>执行<code>npm run dev</code>，提示</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">return</span> process.dlopen(module,path._makeLong(filename))</span><br><span class="line">...</span><br><span class="line">...node_modules\node-sass\vendor\win32-x64-57\binding.node is not a valid Win32 application...</span><br></pre></td></tr></table></figure><p> 原因：项目依赖包<code>node-sass</code>没有安装完全<br> 解决方法：<code>npm install node-sass</code></p></li><li><p>项目运行起来，但一直停留在加载动画那里</p><p> 浏览器控制台输出：<br> <code>GET http://127.0.0.1:8080/account/info  ==&gt;&gt; Failed to load http://127.0.0.1:8080/account/info</code></p><p> 原因：未修改<code>rap2-delos/src/config</code>目录下服务端连接地址,或者修改结果与<a href="https://github.com/thx/rap2-dolores" target="_blank" rel="noopener">rap2-dolores</a>实际提供服务地址不匹配<br> 解决方法：修改<code>config.dev.ts</code>文件serve配置信息</p><blockquote><p>如果Windows系统修改正确无误后，依旧出错，那么查看hosts(路径：C:\Windows\System32\drivers\etc)中127.0.0.1的IP前是否有<code>#</code>，如果有请取消注释</p></blockquote></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="MySQL-运行问题"><a href="#MySQL-运行问题" class="headerlink" title="MySQL 运行问题"></a>MySQL 运行问题</h3><ul><li>错误一<br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517475/blog/gitpages-rap2-mysql.png" alt="mysql"><br>原因：MySQL 集成命令没有加入系统的环境变量<br>解决方法：将安装的MySQL Service路径加入系统变量<br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517495/blog/gitpages-rap2-mysql-path.png" alt="path"></li><li>错误二<br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517523/blog/gitpages-rap2-mysql-create.png" alt="create"><br>原因：没有数据库链接权限<br>解决方法：先登录用root数据库，密码具体看自己数据库当时设置的密码</li></ul><h3 id="如何获取更新"><a href="#如何获取更新" class="headerlink" title="如何获取更新"></a>如何获取更新</h3><p>目前请选择<code>master</code>分支源码，后续其他分支请看相应分支说明文档。在开发环境中git pull来获取最新的源码更新，每一期更新都会有对应的update.md请关注并按照上面的指示进行升级工作。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><a href="https://blog.csdn.net/ksdb0468473/article/details/52126009" target="_blank" rel="noopener">redis如何后台启动</a></li><li><a href="http://www.cnblogs.com/ysocean/p/9074787.html" target="_blank" rel="noopener">Redis配置文件介绍</a></li><li><a href="https://www.cnblogs.com/chyingp/p/pm2-documentation.html" target="_blank" rel="noopener">PM2实用入门指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RAP2是采用前后端分离的形式，因此搭建完整的RAP2需要 &lt;strong&gt;服务端：&lt;/strong&gt;&lt;a href=&quot;https://github.com/thx/rap2-delos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;rap2-delos&lt;
      
    
    </summary>
    
      <category term="Api" scheme="https://www.incoder.org/categories/Api/"/>
    
    
      <category term="RAP" scheme="https://www.incoder.org/tags/RAP/"/>
    
  </entry>
  
  <entry>
    <title>Api 文档管理系统 RAP1环境搭建</title>
    <link href="https://www.incoder.org/2018/03/27/rap1/"/>
    <id>https://www.incoder.org/2018/03/27/rap1/</id>
    <published>2018-03-27T10:19:25.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>前后端分离的路上，一款强大的API管理工具，可以降低沟通成本，大大提高开发效率，节省的时间，我们来做更有意义的事情。</p><p>API管理工具又很多，选择适合自身需求的就是最好</p><p>这里以<a href="https://thx.github.io" target="_blank" rel="noopener">阿里妈妈</a>出品的<a href="https://thx.github.io/RAP" target="_blank" rel="noopener">RAP</a>产品；目前RAP分为： <del><a href="https://github.com/thx/RAP" target="_blank" rel="noopener">RAP1</a></del>，<a href="https://github.com/thx/rap2-delos" target="_blank" rel="noopener">RAP2</a></p><blockquote><p>虽然RAP1不再添加新功能，只做维护工作，介于RAP2目前还不是很成熟，本篇文章先讲RAP1的搭建过程(虽然官方<a href="https://github.com/thx/RAP/wiki" target="_blank" rel="noopener">Wiki</a>已经有很详细的部署教程，但在部署过程中还是遇到一些问题，因此就记录下来)</p></blockquote><p>如果你不需要搭建，可以直接访问RAP1提供的服务<a href="http://rapapi.org" target="_blank" rel="noopener">http://rapapi.org</a></p><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><ul><li>安装环境：Windows 10 x64</li><li>准备工具：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>，<a href="https://www.jetbrains.com/idea/download" target="_blank" rel="noopener">IDEA</a>，<a href="https://www.java.com/zh_CN/download/manual.jsp" target="_blank" rel="noopener">JDK1.8+</a>，<a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">Tomcat8*</a>，<a href="https://www.mysql.com/cn/downloads" target="_blank" rel="noopener">MySQL</a>，<a href="https://redis.io/download" target="_blank" rel="noopener">Redis3+</a></li></ul><p>这里Git，IDEA，JDK1.8，Tomcat8*，MySQL不再赘述安装步骤以及环境配置</p><h3 id="安装基本工具"><a href="#安装基本工具" class="headerlink" title="安装基本工具"></a>安装基本工具</h3><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>由于Redis 官方并未支持Windows系统，因此借助MicrosoftArchive团队所提供的<a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">Windows Redis安装包</a>，这里下载最新的<code>Redis-x64-3.2.100.msi</code></p><ul><li><p>以管理员身份运行安装包<code>Redis-x64-3.2.100.msi</code></p><ol><li>添加环境变量<br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517089/blog/gitpages-redis-env-var.png" alt="env"></li><li>默认<code>6379</code>端口<br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517270/blog/gitpages-redis-port.png" alt="port"></li><li><p>检查Redis服务，是否已经启动<br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517284/blog/gitpages-redis-serve.png" alt="serve"></p><blockquote><p>其他默认即可，不要设置Memory Limit</p></blockquote></li></ol></li></ul><h2 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h2><h3 id="获取源代码"><a href="#获取源代码" class="headerlink" title="获取源代码"></a>获取源代码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:thx/RAP.git</span><br><span class="line">git checkout release</span><br></pre></td></tr></table></figure><blockquote><p>确保您正确的切换到release分支，否则会出现少包，因为master分支引用一些不对外公开的内部组件，不提供给外部用户使用</p></blockquote><h3 id="导入到IDEA"><a href="#导入到IDEA" class="headerlink" title="导入到IDEA"></a>导入到IDEA</h3><p>IDEA==&gt;Open==&gt;RAP</p><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><p>执行脚本文件：RAP\src\main\resources\database\<code>initialize.sql</code></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>文件：RAP\src\main\resources\database\<code>config.properties</code><br>修改：数据库<code>用户名</code>及<code>密码</code><br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517302/blog/gitpages-rap1-update-database-config.png" alt="update"></p><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><ol><li>Edit config<br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517326/blog/gitpages-rap1-tomcat-config.png" alt="config"></li><li>Create Tomcat<br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517350/blog/gitpages-rap1-tomcat-create.png" alt="create"></li><li>Deploy war<br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517364/blog/gitpages-rap1-tomcat-deploy.png" alt="deploy"></li><li>Deploy success<br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517384/blog/gitpages-rap1-deploy-success.png" alt="success"></li></ol><p>注意成功部署后，请<code>注册</code>新账号登录</p><p>至此，RAP1的本机部署已经完成。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><a href="http://thx.github.io/RAP/study.html" target="_blank" rel="noopener">RAP1学习中心</a><br>  部分同学无法查看视频，请异步至<a href="https://github.com/thx/RAP/issues/935" target="_blank" rel="noopener">issues</a></li><li><a href="https://github.com/thx/RAP/wiki" target="_blank" rel="noopener">RAP1 Wiki</a>文档</li><li><a href="http://mockjs.com" target="_blank" rel="noopener">Mockjs</a></li><li><a href="https://www.incoder.org/2018/03/27/rap2">RAP2环境搭建教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前后端分离的路上，一款强大的API管理工具，可以降低沟通成本，大大提高开发效率，节省的时间，我们来做更有意义的事情。&lt;/p&gt;
&lt;p&gt;API管理工具又很多，选择适合自身需求的就是最好&lt;/p&gt;
&lt;p&gt;这里以&lt;a href=&quot;https://thx.github.io&quot; targ
      
    
    </summary>
    
      <category term="Api" scheme="https://www.incoder.org/categories/Api/"/>
    
    
      <category term="RAP" scheme="https://www.incoder.org/tags/RAP/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Blog 搭建</title>
    <link href="https://www.incoder.org/2018/03/25/hexo-blog/"/>
    <id>https://www.incoder.org/2018/03/25/hexo-blog/</id>
    <published>2018-03-25T01:18:26.000Z</published>
    <updated>2018-08-01T11:57:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直纠结用<a href="https://jekyllrb.com" target="_blank" rel="noopener">Jekyll</a>还是<a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a>来搭建<a href="https://pages.github.com" target="_blank" rel="noopener">GitHub Page</a>博客，原本一直想搭建一个<a href="https://material.io/guidelines" target="_blank" rel="noopener">Material Design</a>主题风格，从<a href="https://hexo.io/themes" target="_blank" rel="noopener">Hexo Themes</a>中寻找到一款不错的主题，<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">indigo</a>是一款支持IE10+，评论，目录导航，分享等功能的轻量Blog主题。</p><p>简单的修改了该主题之后，本地预览都没有什么问题，但是部署到<a href="">Github</a>上，样式什么的都无法加载，应该是我的操作姿势不对吧，调整了半天没有解决，烦躁中找到之前star的另一款很受欢迎的<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Next</a>主题。</p><p>既然自己修改的无法正常部署预览，那就用别人写好的吧，刚好赶上<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">Next</a>新版本V6.0系列的推出，那就不废话，直接开干</p><h2 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a>材料准备</h2><ul><li><a href="https://nodejs.org/en/download" target="_blank" rel="noopener">Node LTS</a></li><li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a></li><li><a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a></li><li><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">Next</a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>Node</code>,<code>Git</code>的安装过程略</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><ol><li><p>Hexo 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li><li><p>初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;your blog name&gt;</span><br></pre></td></tr></table></figure></li><li><p>安装依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;you blog name&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li><li><p>启动服务预览</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo serve</span><br></pre></td></tr></table></figure></li></ol><h3 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h3><ol><li><p>安装Next 主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><blockquote><p>当前操作在 <code>blog</code>的根目录下执行</p></blockquote></li><li><p>修改Blog 配置<br><code>you blog name</code> 根目录 <code>_config.yml</code></p><ul><li>theme: 由原来默认<code>landscape</code>更改位<code>next</code>(大约：76行)</li><li>其他配置项，根据自己的需求进行更改，我这里更改了<code>title</code>,<code>subtitle</code>,<code>author</code>,<code>language</code>,<code>url</code>配置，其中<code>language</code>如果没有修改，默认为英文语言，在V6.0系列由原来<code>zh-Hans</code>更新为<code>zh-CN</code></li><li>添加部署到Github配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/BladeCode/BladeCode.github.io.git <span class="comment"># 用户名仓库</span></span><br><span class="line">  branch: master <span class="comment"># 用户名仓库的分支应该指定master，master分支也可以不用写</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>修改Theme 配置<br>路径：<code>you blog name</code>/Themes/next/_config.yml<br>这里不罗嗦了，其配置可参考<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">hexo-theme-next</a>项目<code>README</code>文件</p></li></ol><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>上面已经配置好了部署的目标仓库，那么这里直接使用Hexo提供的部署命令即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><p>相关命令介绍等，请查看<a href="https://hexo.io/docs" target="_blank" rel="noopener">官方文档说明</a></p><p>部署完成后，可以直接访问 http://<code>you blog name</code>/github.io</p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>虽然现在blog可以使用Githug提供的项目二级域名来访问，为了个性化以及方便等，配置自己的域名</p><ol><li>登录域名所属的管理网站(这里以阿里云域名服务为例)<br> <img src="https://res.cloudinary.com/incoder/image/upload/v1525516603/blog/gitpages-domain-manger.png" alt="gitpages-domain-manger"></li><li><p>添加解析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="comment"># 解析一</span></span><br><span class="line">记录类型：CNAME</span><br><span class="line">主机记录：www</span><br><span class="line">记录值：bladecode.github.io</span><br><span class="line">解析路线：default</span><br><span class="line"></span><br><span class="line">$ <span class="comment"># 解析二</span></span><br><span class="line">记录类型：A</span><br><span class="line">主机记录：@</span><br><span class="line">记录值：192.30.252.153</span><br><span class="line">解析路线：default</span><br><span class="line"></span><br><span class="line">$ <span class="comment"># 解析三</span></span><br><span class="line">记录类型：A</span><br><span class="line">主机记录：@</span><br><span class="line">记录值：192.30.252.154</span><br><span class="line">解析路线：default</span><br></pre></td></tr></table></figure><blockquote><p>192.30.252.153是GitHub的地址，你也可以ping你的 <a href="http://xxxx.github.io" target="_blank" rel="noopener">http://xxxx.github.io</a> 的ip地址，填入进去</p></blockquote></li><li><p>修改Github上项目的domain设置<br> <img src="https://res.cloudinary.com/incoder/image/upload/v1525516630/blog/gitpages-domain-custom.png" alt="gitpages-domain-custom"></p></li><li>添加CNAME文件<br>保存路径：<code>you blog name</code>/source<br>新增文件：CNAME 文件 (格式要求:<code>保存成所有文件而不是txt文件</code>)<br>CNAME 文件内容：<code>incoder.org</code><blockquote><p>如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。所以建议，不要带有www</p></blockquote></li></ol><h2 id="Https开启"><a href="#Https开启" class="headerlink" title="Https开启"></a>Https开启</h2><p>开启Https 需要借助<a href="https://www.cloudflare.com" target="_blank" rel="noopener">Cloudflare</a>，关于Cloudflare的介绍等不在这里展开</p><ol><li>注册账号</li><li>Add website<br> <img src="https://res.cloudinary.com/incoder/image/upload/v1525516650/blog/gitpages-https-add-site.png" alt="site"></li><li>Querying your DNS<br> <img src="https://res.cloudinary.com/incoder/image/upload/v1525516664/blog/gitpages-https-dns-query.png" alt="query"></li><li>Select Plan<br> <img src="https://res.cloudinary.com/incoder/image/upload/v1525516681/blog/gitpages-https-select-plan.png" alt="plan"></li><li>域名解析记录获取<br> <img src="https://res.cloudinary.com/incoder/image/upload/v1525516694/blog/gitpages-https-continue.png" alt="continue"></li><li>DNS 对比，并修改<a href="">Cloudflare</a>提供的DNS来解析<br> <img src="https://res.cloudinary.com/incoder/image/upload/v1525516714/blog/gitpages-https-change-dns.png" alt="change"></li><li>域名管理后台，修改DNS<br> <img src="https://res.cloudinary.com/incoder/image/upload/v1525516733/blog/gitpages-https-wanwang-dns.png" alt="dns"><blockquote><p>阿里云服务相关域名DNS修改帮助<a href="https://help.aliyun.com/knowledge_detail/39844.html" target="_blank" rel="noopener">文档</a></p></blockquote></li><li>成功激活<br> <img src="https://res.cloudinary.com/incoder/image/upload/v1525516756/blog/gitpages-https-active.png" alt="active"></li><li>SSL证书申请提醒<br> <img src="https://res.cloudinary.com/incoder/image/upload/v1525516994/blog/gitpages-https-ssl-cer.png" alt="cer"></li><li>添加强制HTTPS规则<br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517025/blog/gitpages-https-page-rule.png" alt="rule"></li><li>规则制定<br><img src="https://res.cloudinary.com/incoder/image/upload/v1525517045/blog/gitpages-https-deploy-https.png" alt="deploy"></li></ol><p>好了剩下的就是等证书颁发，可能要等上一些时间，具体每个人不尽相同，这里就不多做解释了。</p><p>Let’s all，本次的Hexo的相关初级教程就到这里</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前一直纠结用&lt;a href=&quot;https://jekyllrb.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jekyll&lt;/a&gt;还是&lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;
      
    
    </summary>
    
      <category term="Hexo" scheme="https://www.incoder.org/categories/Hexo/"/>
    
    
      <category term="Build" scheme="https://www.incoder.org/tags/Build/"/>
    
  </entry>
  
</feed>
